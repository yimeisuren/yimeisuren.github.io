<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/06/05/springboot-04-ji-chu-te-xing/"/>
      <url>/2023/06/05/springboot-04-ji-chu-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- --></span>sprint-boot-starter-parent<span class="token comment" spellcheck="true">&lt;!-- 场景启动器;帮助导入web等模块正常运行所依赖的组件--></span>spring-boot-starterspring-boot-starter-web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- @SpringBootApplication标注这个类是SpringBoot的主配置类,SpringBoot运行这个类的main方法来启动SpringBoot应用--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li></ol><p>Spring Boot配置文件</p><pre class="line-numbers language-xml"><code class="language-xml">application.properties和application.yml都是全局配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yaml语法</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#1.字符串</span>    1.1 双引号""    1.2 单引号''<span class="token punctuation">,</span>表示忽略里面的转义字符<span class="token punctuation">,</span>是什么则输出什么<span class="token comment" spellcheck="true">#2.对象</span>    <span class="token key atrule">friends</span><span class="token punctuation">:</span>        <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#3.数组(List,Set)</span>    <span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span>cat    <span class="token punctuation">-</span>dog    <span class="token punctuation">-</span>pig    <span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>优先级 : resources&gt;static(默认)&gt;public</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p>springboot启动时会加载大量的自动配置类</p></li><li><p>我们需要的功能有没有springboot默认写好的自动配置类</p></li><li><p>我们看看这个自动配置类使用类哪些组件</p></li><li><p>给容器中自动配置类添加组件, 会从properties类中获取某些属性,我们就可以在配置文件中指定这些属性的值</p></li><li><p>xxxAutoConfiguration : 自动配置类</p><p>给容器添加组件</p><p>xxxProperties : 封装配置文件中的相关属性</p></li></ul><h2 id="debug模式"><a href="#debug模式" class="headerlink" title="debug模式"></a>debug模式</h2><p>在配置文件中debug=true</p><h2 id="日志选择"><a href="#日志选择" class="headerlink" title="日志选择"></a>日志选择</h2><p>日志门面(抽象层) : SLF4J</p><p>日志实现 : Logback</p><h2 id="SpringBoot对静态资源的映射规则"><a href="#SpringBoot对静态资源的映射规则" class="headerlink" title="SpringBoot对静态资源的映射规则"></a>SpringBoot对静态资源的映射规则</h2><p>WebAutoConfiguration</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/webjars/**"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>staticPathPattern<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>WebMvcAutoConfiguration<span class="token punctuation">.</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的/webjars/**, 都去classpath://META_INF/resources/webjars/找资源</p><p><a href="http://localhost:8080/webjars/jquery/3.5.0/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.5.0/jquery.js</a></p><p>在访问的时候只需要写webjars下面资源的名称即可</p><h2 id="静态资源文件夹"><a href="#静态资源文件夹" class="headerlink" title="静态资源文件夹"></a>静态资源文件夹</h2><pre class="line-numbers language-java"><code class="language-java">ResourceProperties<span class="token punctuation">.</span>java<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span><span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span>                                             <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span><span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token string">"/"</span><span class="token operator">:</span>当前项目的根路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>欢迎页: 静态资源文件夹下所有的index.html</p><p>在public文件夹下创建一个index.html文件, 则访问<a href="http://localhost:8080的时候默认访问index.html" target="_blank" rel="noopener">http://localhost:8080的时候默认访问index.html</a></p><h2 id="引入模板引擎thymeleaf"><a href="#引入模板引擎thymeleaf" class="headerlink" title="引入模板引擎thymeleaf"></a>引入模板引擎thymeleaf</h2><p>只要我们把HTML页面放在classpath:/templates/ ,thymeleaf就能自动渲染</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><h1 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h1><h2 id="entities"><a href="#entities" class="headerlink" title="entities"></a>entities</h2><p>主实体类</p><p>Json封装体CommonResult</p><h1 id="外部化配置"><a href="#外部化配置" class="headerlink" title="外部化配置"></a>外部化配置</h1><blockquote><p>应用场景：线上应用如何快速修改配置，并应用最新配置？</p><p>由于 SpringBoot 应用的配置优先级，只需要在 jar 应用所在的文件夹下放置一个 application.properties 配置文件，重启项目就可以自动应用最新的配置。</p></blockquote><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230605210928179.png" alt="image-20230605210928179"></p><h2 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h2><ol><li><strong>jar 包外</strong>的配置文件 &gt; <strong>jar 包内</strong>的配置文件</li><li><strong>config 目录</strong>的配置文件 &gt; <strong>非 config 目录</strong>的配置文件（包外&gt;包内，距离越远优先级越高）</li><li><strong>{profile}</strong>的配置文件 &gt; <strong>默认的</strong>配置文件</li><li><strong>properties后缀</strong>的配置文件 &gt; <strong>yml后缀</strong>的配置文件</li></ol><p>导入文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/04/bigdata-03-kafka-04-kafka-xiao-fei-zhe/"/>
      <url>/2023/06/04/bigdata-03-kafka-04-kafka-xiao-fei-zhe/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka-消费者"><a href="#Kafka-消费者" class="headerlink" title="Kafka 消费者"></a>Kafka 消费者</h1><h2 id="提交和偏移量"><a href="#提交和偏移量" class="headerlink" title="提交和偏移量"></a>提交和偏移量</h2><p>Kafka 消费者在每次调用 <code>poll()</code> 方法时，总是返回由生产者写入 Kafka 但还没有被消费者读取过的记录。</p><p>更新分区（partition）当前位置的操作叫做<strong>提交</strong>。</p><p>Kafka 消费者提交偏移量offset的方法是向一个特殊的主题<code>__consumer_offsets</code> 发送消息，这个消息里的内容包含每个分区的偏移量</p><p>offset 由消费者保持，offset 是针对 <strong>消费者、partition</strong> 而言的，默认保存在 zookeeper 中</p><h2 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h2><p>消费者组groupid和消费者组之间可以对同一个消息进行独立的、重复消费。</p><p>消费者组内部的各个消费者之间对同一个消息只能进行共享的、唯一一次的消费。</p><h3 id="再均衡策略"><a href="#再均衡策略" class="headerlink" title="再均衡策略"></a>再均衡策略</h3><h4 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h4><ul><li><p>消费者组中的某个消费者崩溃、关闭</p></li><li><p>消费者组中新增消费者</p><p>如果消费者组中的消费者数量 &gt; 分区数量，那么新增的消费者已经不会指定分区，这种情况下有必要再均衡吗？还是说作为副本？</p></li><li><p>删除某个主题topic</p></li><li><p>分区partition数量发生变化</p></li></ul><h4 id="不良影响"><a href="#不良影响" class="headerlink" title="不良影响"></a>不良影响</h4><p>发生Rebalance（再均衡）时，<strong>消费者组中的所有 consumer 都会暂停工作</strong>，共同来参与 Rebalance，直到 Rebalance 结束。所以应该尽可能避免产生再均衡。</p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/02/linux-05-linux-si-fang-cai/"/>
      <url>/2023/06/02/linux-05-linux-si-fang-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h1><h2 id="内核功能"><a href="#内核功能" class="headerlink" title="内核功能"></a>内核功能</h2><p>Linux系统的核心是内核. 内核控制着计算机系统上的所有硬件和软件, 在必要时分配硬件, 并根据需要执行软件.</p><p>内核主要负责以下4种功能:</p><ul><li><p><u>系统内存管理</u></p><p>内核不仅管理服务器上的可用物理内存, 还可以创建和管理虚拟内存(外存虚拟). 内核通过硬盘上的存储空间来实现虚拟内存, 这块区域称为==交换空间(swap space)==. 内核不断地交换<u>实际的物理内存和外存中交换空间</u>之间虚拟内存中的内容. 这使得系统以为它拥有比物理内存更多的可用内存.</p><p>内存存储单元按组划分成很多块, 这些块称为<u>页面(page)</u>. 内核将页面放在物理内存或交换空间中. 然后内核维护一个内存页面表, 指明哪些页面位于物理内存中, 哪些页面被交换到交换空间中.</p><p>内核会记录哪些内存页面正在使用, 并自动把一段时间未访问的内存页面复制到交换空间区域, 即使还有可用内存, 该过程称为<u>换出(swapping out)</u>. 当程序要访问一个在交换空间上的页面时, 内核需要为其分配物理内存或者换出另外一个内存页面.</p></li><li><p><u>软件程序管理</u></p><p>内核创建<u>第一个进程(init进程)</u>, 从而启动系统上的其它所有进程. 当内核启动时, 它会将init进程加载到虚拟内存中. 内核在启动任何其它进程时, 都会在虚拟内存中给新进程分配一块专有区域来存储该进程用到的数据和代码.</p><p>Linux操作系统采用了<u>运行级</u>. 运行级决定了init进程运行<code>/etc/inittab</code>文件或<code>/etc/rc[1-5].d</code>目录中定义好的某些特定类型的进程. Linux操作系统共有5个启动运行级.</p><ul><li>运行级为1时, 只启动基本的系统进程以及一个控制台终端进程, 我们称之为<u>单用户模式</u>. 单用户模式通常用来在系统有问题时进行紧急的文件系统维护, 在这种模式下, 只能由系统管理员登录到系统上操作数据.</li><li>标准的启动运行级是3, 在这个运行级上大多数应用软件都会启动</li><li>另一个常见的运行级是5, 在这个运行级上系统会启动图形化的X Window系统, 允许用户通过图形化桌面窗口登录系统.</li></ul></li><li><p><u>硬件设备管理</u></p><p>内核的另一职责是管理硬件设备, 任何Linux系统需要与之通信的设备, 都需要在内核代码中加入其驱动程序代码. 驱动程序代码相当于应用程序和硬件设备之间的中介, 允许内核与设备之间进行数据交换. 在Linux内核中有两种方式插入设备驱动代码:</p><ul><li>编译进内核的设备驱动代码</li><li>可插入内核的设备驱动模块</li></ul><p>以前插入设备驱动代码的唯一途径是重新编译内核, 每次给系统添加新设备, 都需要重新编译一遍内核代码. 随着Linux内核支持的硬件设备越来越多, 这个过程变得越来越低效, Linux开发人员设计出一种更好的将驱动代码插入到运行中的内核的方法, 提出了<u>内核模块</u>的概念, <strong>它允许将驱动代码插入到运行中的内核而无需重新编译内核, 同时当设备不再使用时也可以将内核模块从内核中移走</strong>. 这种方式极大地简化和扩展了硬件设备在Linux上的使用.</p><p>Linux系统将硬件设备当作特殊的文件, 称为设备文件. 设备文件共有3种分类:</p><ul><li><p><strong>字符型设备文件</strong></p><p>字符型设备文件是指处理数据时每次只能处理一个字符的设备. 大多数类型的调制解调器和终端都是作为字符型设备文件创建的.</p></li><li><p><strong>块设备文件</strong></p><p>块设备文件是指处理数据时每次能处理大块数据的设备, 比如硬盘.</p></li><li><p><strong>网络设备文件</strong></p><p>网络设备文件是指采用数据包发送和接收数据的设备, 包括各种网卡和一个特殊的回环设备. <u>这个回环设备允许Linux系统使用常见的网络编程协议同自身通信.</u></p></li></ul><p>Linux为系统上的<u>每个设备</u>都创建一种称为<u>节点</u>的特殊文件. 与设备的所有通信都通过设备节点完成, 每个节点都有唯一的数值对作为其标识符, 包括一个主设备号和一个次设备号. 类似的设备被划分到同样的主设备号下, 次设备号用于标识主设备组下的某个特定设备.</p></li><li><p><u>文件系统管理</u></p><p>Linux内核<u>支持通过不同类型的文件系统</u>从硬盘中读写数据. 内核必须在编译时就加入所有可能用到的文件系统的支持.</p><p>Linux服务器中访问的所有硬盘都必须格式化成下表所列文件系统类型中的一种. Linux内核采用虚拟文件系统(VFS)作为和每个文件系统交互的接口. 这为Linux内核同任何类型文件系统通信提供了一个标准接口. 当每个文件系统都被挂载和使用时, VFS将信息都缓存在内存中.</p></li></ul><center>Linux文件系统</center><table><thead><tr><th>文件系统</th><th>描述</th></tr></thead><tbody><tr><td>ext</td><td>Linux扩展文件系统, 最早的Linux文件系统</td></tr><tr><td>ext2</td><td>第二扩展文件系统, 在ext的基础上提供了更多的功能</td></tr><tr><td>ext3</td><td>第三扩展文件系统, 支持日志功能</td></tr><tr><td>ext4</td><td>第四扩展文件系统, 支持高级日志功能</td></tr><tr><td>hpfs</td><td>OS/2高性能文件系统</td></tr><tr><td>jfs</td><td>ISM日志文件系统</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="GNU工具"><a href="#GNU工具" class="headerlink" title="GNU工具"></a>GNU工具</h2><p>核心GNU工具(core utilities)包括三个部分:</p><ul><li>管理进程的工具</li><li>操作文本的工具</li><li>处理文件的工具</li></ul><p>shell工具为用户提供了启动程序, 管理文件系统中的文件以及运行在Linux系统上的进程的途径. 如果需要将多个shell命令放在一起工作执行, 则可以使用<u>shell脚本</u>.</p><h1 id="主机规划与磁盘分区"><a href="#主机规划与磁盘分区" class="headerlink" title="主机规划与磁盘分区"></a>主机规划与磁盘分区</h1><p><u>内容</u></p><ul><li>磁盘分区</li><li>文件系统</li><li>Linux操作较频繁的目录</li></ul><p><u>在Linux中, 一切皆文件</u></p><center>常见设备及其在Linux系统中的文件名</center><table><thead><tr><th>设备</th><th>设备在Linux内的文件名</th></tr></thead><tbody><tr><td>SCSI/SATA/USB硬盘</td><td><code>/dev/sd[a-p]</code></td></tr><tr><td>VirtI/O界面</td><td><code>/dev/vd[a-p]</code></td></tr><tr><td>软盘</td><td><code>/dev/fd[0-7]</code></td></tr><tr><td>打印机</td><td><code>/dev/lp[0-2]</code><br><code>/dev/usb/lp[0-15]</code></td></tr><tr><td>鼠标</td><td><code>/dev/input/mouse[0-15]</code><br><code>/dev/psaux</code><br><code>/dev/mouse</code></td></tr><tr><td>CDROM<br>DVDROM</td><td><code>/dev/scd[0-1]</code><br><code>/dev/sr[0-1]</code><br><code>/dev/cdrom</code></td></tr><tr><td>磁带机</td><td><code>/dev/ht0</code><br><code>/dev/st0</code><br><code>/dev/tape</code></td></tr></tbody></table><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>以Windows系统的观点来看, 将一块磁盘分为C,D,E三个盘区, 则C,D,E就是<u>分区(partition)</u>.</p><blockquote><p>例题: 如果你的PC上面有两个SATA磁盘以及一个USB磁盘, 而主板上面有六个SATA的插槽. 这两个SATA磁盘分别安插在主板上的SATA1, SATA5插槽上, 请问这三个磁盘在Linux中的设备文件名为何？</p></blockquote><p>答: 由于是<u>使用侦测到的顺序来决定设备文件名, 并非与实际插槽代号有关</u>, 因此设备的文件名如下: </p><ol><li>SATA1插槽上的文件名: <code>/dev/sda</code></li><li>SATA5插槽上的文件名: <code>/dev/sdb</code></li><li>USB磁盘（开机完成后才被系统捉到）: <code>/dev/sdc</code></li></ol><h3 id="开机流程中的BIOS与UEFI开机检测程序"><a href="#开机流程中的BIOS与UEFI开机检测程序" class="headerlink" title="开机流程中的BIOS与UEFI开机检测程序"></a>开机流程中的BIOS与UEFI开机检测程序</h3><p>操作系统会控制所有的硬件并向上层应用程序提供核心功能, 因此计算机就能够认识硬盘内的文件系统, 并进一步读取硬盘内的软件文件与执行.</p><p><strong>问题是, 操作系统也是软件, 那么计算机又是如何认识这个操作系统软件并且执行它的？ 明明开机时计算机中还没有任何软件系统, 那它要如何读取硬盘内的操作系统文件呢？这就得要牵涉到计算机的开机启动程序了！</strong></p><p>目前主要有两种方式: 早期的BIOS和新的UEFI</p><p>CMOS是记录各项硬件参数且嵌入在主板上面的储存器, BIOS则是一个写入到主板上的一个固件（固件就是写入到硬件上的一个软件程序）。</p><h4 id="BIOS搭配MBR-GPT的开机流程"><a href="#BIOS搭配MBR-GPT的开机流程" class="headerlink" title="BIOS搭配MBR/GPT的开机流程"></a>BIOS搭配MBR/GPT的开机流程</h4><ol><li><p>计算机系统会主动执行<u>BIOS程序</u>.</p></li><li><p>BIOS会分析计算机里面有哪些存储设备, 根据用户的设置, 到该硬盘里面区读取第一个扇区的<u>MBR</u>位置.</p></li><li><p>MBR这个仅有446B的硬盘容量里面会放置最基本的<u>开机管理程序(boot loader)</u>, 接下来就是MBR内的开机管理程序的工作了.</p></li><li><p>开机管理程序加载<u>核心文件</u></p><p>开机管理程序是操作系统在安装的时候所提供的, 它会认识硬盘内的文件系统格式, 因此能够读取核心文件.</p></li><li><p>操作系统正常工作</p></li></ol><p>如果分区表是GPT格式, 那么BIOS也能够从LBA0的MBR相容的区块读取第一阶段的开机管理程序码. 能否正常开机取决于boot loader是否能够识别GPT格式, 如果不能识别GPT, 则无法读取操作系统核心文件, 故而开机失败.</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>在图形化桌面出现之前, 与Unix系统进行交互的唯一方法是借助shell所提供的<u>文本命令行界面(command line interface, CLI)</u>. CLI只能接受文本输入, 也只能显示文本和基本的图形输出.</p><h2 id="启动shell"><a href="#启动shell" class="headerlink" title="启动shell"></a>启动shell</h2><p>登录时启动的shell依赖于用户账户的配置, 在<code>/etc/passwd</code>文件中包含了所有系统用户账户列表以及每个用户的基本配置信息.</p><pre class="line-numbers language-sh"><code class="language-sh">  1 root:x:0:0:root:/root:/bin/bash  2 bin:x:1:1:bin:/bin:/sbin/nologin  3 daemon:x:2:2:daemon:/sbin:/sbin/nologin  4 adm:x:3:4:adm:/var/adm:/sbin/nologin  5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin  6 sync:x:5:0:sync:/sbin:/bin/sync  7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown  8 halt:x:7:0:halt:/sbin:/sbin/halt  9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin 10 operator:x:11:0:operator:/root:/sbin/nologin 11 games:x:12:100:games:/usr/games:/sbin/nologin 12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin 13 nobody:x:99:99:Nobody:/:/sbin/nologin 14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin 15 dbus:x:81:81:System message bus:/:/sbin/nologin 16 polkitd:x:999:998:User for polkitd:/:/sbin/nologin 17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin 18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin 19 xiong:x:1000:1000:xiong:/home/xiong:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个条目有7个字段, 中间用冒号<code>:</code>分隔. 最后一个字段指明了用户使用的shell程序.</p><p><u>bash shell程序会在登录后自动启动</u>, 但是是否显示命令行界面取决于登录方式, 如果是控制台终端登录则显示, 如果是图形化界面则不显示.</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>在Windows系统中, 会为每个物理磁盘驱动器分配一个盘符, 每个驱动器都会有自己的目录结构, 以便访问存储其中的文件.</p><p>Linux在路径名中不使用驱动器盘符(即磁盘分区C,D,E…), 将文件存储在单个目录结构中, 这个目录称为<u>虚拟目录(virtual directory)</u>. Linux虚拟目录结构只包含一个称为根目录(root)的基础目录, 使用<code>/</code>表示. </p><p>Linux系统中的路径本身并没有提供任何有关文件究竟存放在哪个物理磁盘上的信息, 例如<code>/opt/module/test.txt</code>. 而在Windows系统中, 如果外接USB, 假设其盘符为F, 则能够从路径中清楚地看出一个文件是否属于F盘, 即是否存放在U盘上.</p><h3 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h3><p>在Linux系统上安装的<u>第一块硬盘称为根驱动器</u>. 根驱动器包含虚拟目录的核心, 其它目录都是从那里开始创建的. </p><p>Linux会在根驱动器上创建一些特别的目录, 这些目录称为<u>挂载点(mount point)</u>. 挂载点是虚拟目录中用于分配额外存储设备的目录, 虚拟目录会让文件和目录出现在这些挂载点目录中, 然后实际上它们却存储在另外一个驱动器中. <u>挂载是将其他机器上的磁盘映射到本机器上来, 使得在本机器上可以访问其他机器的文件</u>.</p><p>常见的目录名均遵循<u>文件系统层级标准(FHS, filesystem hierarchy standard)</u></p><center>常见Linux目录名称</center><table><thead><tr><th align="center">目录</th><th align="center">功能</th><th>对应单词</th></tr></thead><tbody><tr><td align="center"><code>/</code></td><td align="center">与启动系统有关, 根目录, 通常不会在这里存储文件</td><td>root</td></tr><tr><td align="center"><code>/bin</code></td><td align="center">二进制目录, 存放许多用户级的GNU工具</td><td>binary</td></tr><tr><td align="center"><code>/boot</code></td><td align="center">启动目录, 存放启动文件</td><td></td></tr><tr><td align="center"><code>/etc</code></td><td align="center">配置文件目录，如账号密码等</td><td></td></tr><tr><td align="center"><code>/dev</code></td><td align="center">设备目录, Linux在这里创建设备节点</td><td></td></tr><tr><td align="center"><code>/home</code></td><td align="center">普通用户的家(主)目录</td><td></td></tr><tr><td align="center"><code>/lib</code></td><td align="center">库目录, 存放系统和应用程序的库文件</td><td></td></tr><tr><td align="center"><code>/media</code></td><td align="center">可移动媒体的常用挂载点</td><td></td></tr><tr><td align="center"><code>/mnt</code></td><td align="center">另一个挂载点</td><td></td></tr><tr><td align="center"><code>/opt</code></td><td align="center">第三方软件包和数据文件</td><td></td></tr><tr><td align="center"><code>/proc</code></td><td align="center">进程目录, 存放现有硬件和当前进程信息, 虚拟文件系统, 不要往里面写东西</td><td></td></tr><tr><td align="center"><code>/root</code></td><td align="center">root用户的主目录</td><td></td></tr><tr><td align="center"><code>/sbin</code></td><td align="center">系统二进制目录, 存放许多GNU管理员级工具, 只允许超级用户查看</td><td></td></tr><tr><td align="center"><code>/run</code></td><td align="center">运行目录, 存放系统运作时的运行时数据</td><td></td></tr><tr><td align="center"><code>/srv</code></td><td align="center">服务目录, 存放本地服务相关的文件</td><td></td></tr><tr><td align="center"><code>/sys</code></td><td align="center">虚拟文件系统，不要往里面写东西。系统目录, 保存硬件和内核相关信息</td><td></td></tr><tr><td align="center"><code>/tmp</code></td><td align="center">临时目录, 可以在该目录中创建和删除临时工作文件</td><td></td></tr><tr><td align="center"><code>/usr</code></td><td align="center">用户存放系统软件资源目录, 软件存放处.大量用户级GNU工具和数据文件都在这</td><td>unix software resource</td></tr><tr><td align="center"><code>/var</code></td><td align="center">动态数据保存位置, 与系统运行过程有关的日志文件等</td><td>variable</td></tr><tr><td align="center">/etc/opt</td><td align="center">放置/opt的相关配置文件</td><td></td></tr><tr><td align="center">/etc/X11</td><td align="center">与x window有关的各种配置文件, 尤其是xorg.conf这个配置文件</td><td></td></tr><tr><td align="center">/etc/sgml</td><td align="center">与sgml格式有关的各项配置文件</td><td></td></tr><tr><td align="center">/etc/xml</td><td align="center">与xml格式有关的各项配置文件</td><td></td></tr><tr><td align="center">/usr/local</td><td align="center">第三方安装的软件保存位置</td><td></td></tr><tr><td align="center">/var/mail</td><td align="center">用户邮箱</td><td></td></tr><tr><td align="center">/var/run</td><td align="center">程序相关</td><td></td></tr><tr><td align="center">/var/spool/news</td><td align="center">新闻组</td><td></td></tr><tr><td align="center">/var/lock</td><td align="center">程序相关</td><td></td></tr><tr><td align="center">lost+found</td><td align="center">文件碎片</td><td></td></tr><tr><td align="center">/misc</td><td align="center">盘符</td><td></td></tr><tr><td align="center">/usr/sbin</td><td align="center">只允许超级用户</td><td></td></tr><tr><td align="center">/usr/bin</td><td align="center">在单用户模式(类似windows系统下的安全模式，用最少的资源恢复系统)下不能执行</td><td></td></tr></tbody></table><h3 id="访问目录cd"><a href="#访问目录cd" class="headerlink" title="访问目录cd"></a>访问目录<code>cd</code></h3><p>可以使用<u>绝对路径或相对路径</u></p><h3 id="查看文件和目录ls"><a href="#查看文件和目录ls" class="headerlink" title="查看文件和目录ls"></a>查看文件和目录<code>ls</code></h3><ul><li><p><code>pwd</code>: 查看当前目录的路径</p></li><li><p><code>ls</code>: 查看当前目录下的文件和子目录(列按字典序排列)</p></li><li><p><code>ls -a</code>: 查看包括<u>隐藏文件</u>在内的所有文件和子目录</p></li><li><p><code>ls -F</code>: 如果没有彩色终端仿真器的情况下, 可以区分出目录和文件</p></li><li><p><code>ls -R</code>: <u>递归显示</u>文件和目录, 即子目录下的文件和目录也会显示</p></li><li><p><code>ls -l</code>: 显示<u>文件详情</u>, 长列表</p></li><li><p><code>ls -l &lt;filename&gt;</code>: 过滤器, 只显示<code>&lt;filename&gt;</code>相关的文件信息</p><p>可以使用<code>?, *, [], !, -</code>等通配符来匹配文件, 使用通配符来进行模式匹配的过程称为<u>文件扩展匹配(file globbing)</u>.</p></li></ul><center>文件详情中的信息</center><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文件类型</td><td><code>d</code>: 目录<br><code>-</code>: 文件<br><code>c</code>: 字符型文件<br><code>b</code>: 块设备</td></tr><tr><td>文件权限</td><td></td></tr><tr><td>文件的硬链接总数</td><td></td></tr><tr><td>文件的拥有者</td><td></td></tr><tr><td>文件的拥有组</td><td></td></tr><tr><td>文件的大小(单位: Byte)</td><td></td></tr><tr><td>文件的最近修改时间</td><td></td></tr><tr><td>文件名(或目录名)</td><td></td></tr></tbody></table><p><strong>输出示例:</strong></p><pre class="line-numbers language-bash"><code class="language-bash">drwxr-xr-x.  2 root root      6 Apr 11  2018 xinetd.ddrwxr-xr-x.  6 root root    100 Jun  5 14:11 yum-rw-r--r--.  1 root root    970 Oct  2  2020 yum.confdrwxr-xr-x.  2 root root    262 Jun  7 20:14 yum.repos.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h3><ul><li><p><code>touch &lt;filename&gt;</code>: 创建名为<code>&lt;filename&gt;</code>的空文件</p></li><li><p><code>cp -i &lt;source&gt; &lt;destination&gt;</code>: 将<code>&lt;source&gt;</code>文件复制到<code>&lt;destination&gt;</code>文件中, 使用<code>-i</code>选项会提示是否覆盖已有文件</p></li><li><p><code>cp -R &lt;sourceDir&gt; &lt;destinationDir&gt;</code>: 将目录文件递归的复制到另一个目录中, <code>-R</code>表示递归复制</p><p>在cp命令中<u>可以使用通配符</u></p></li><li><p><code>ln -s &lt;filename&gt; &lt;linkname&gt;</code>: 创建名为<code>&lt;linkname&gt;</code>的软链接</p></li><li><p><code>ln &lt;filename&gt; &lt;linkname&gt;</code>: 创建名为<code>&lt;linkname&gt;</code>的硬链接</p><p>链接文件包括硬链接和软链接(符号链接), 符号链接相当于创建了一个原文件的快捷方式. </p><p><u>软链接文件保存的信息是原文件的文件路径, 软链接文件和原文件是两个完全不相同的文件.</u></p><p>硬链接文件和原文件可以认为是同一个东西, 都是硬盘上的文件资源的一个入口, 新建硬链接会使得该资源的inode节点加1, 删除硬链接和原文件都会使得inode节点数减1, 只有当inode节点数为0时该资源才会被删除. 需要注意的是<u>硬链接不会使得原来硬盘上的资源拷贝复制一份</u>. 即原来占用1MB的文件不会因为创建硬链接而变为占用2MB.</p></li><li><p><code>mv &lt;source&gt; &lt;destination&gt;</code>: 移动文件, 如果是同一目录下, 则可以实现<strong>重命名文件</strong></p></li><li><p><code>rm &lt;filename&gt;</code>: 删除文件</p></li></ul><h3 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h3><ul><li><code>mkdir &lt;dirname&gt;</code>: 创建目录</li><li><code>mkdir -p &lt;dirname&gt;/&lt;subdirname&gt;</code>: 选项<code>-p</code>帮助创建目录及其子目录</li><li><code>rmdir &lt;dirname&gt;</code>: 删除<strong>空目录</strong></li><li><code>rm -rf &lt;dirname&gt;</code>: 删除带有内容的目录(递归删除)</li><li><code>tree &lt;dirname&gt;</code>: 以树形方式展示目录结构</li></ul><h2 id="监测程序"><a href="#监测程序" class="headerlink" title="监测程序"></a>监测程序</h2><ul><li><code>ps</code>: 查看进程</li><li><code>top</code>: 实时显示<u>进程</u></li><li><code>kill &lt;pid&gt;</code>: 根据<code>&lt;pid&gt;</code>结束进程</li></ul><h2 id="监测磁盘空间"><a href="#监测磁盘空间" class="headerlink" title="监测磁盘空间"></a>监测磁盘空间</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>Linux文件系统将所有的磁盘都放入到虚拟目录下, 所以在使用新的存储媒体之前需要将其放到虚拟目录下, 这个过程称为<u>挂载(mounting)</u>. 大多数的Linux发行版都支持自动挂载可移动存储媒体, 例如CD-ROM, 软盘, U盘等.</p><ul><li><p><code>mount</code>: 默认输出当前系统中挂载的设备列表</p><p>mount命令输出的信息由4个部分组成:</p><ul><li>媒体的设备文件名</li><li>媒体挂载到虚拟目录的挂载点</li><li>文件系统类型</li><li>已挂载媒体的访问状态</li></ul><p>手动在虚拟目录中挂载设备, 需要root权限, 基本命令为<code>mount -t &lt;type&gt; &lt;device&gt; &lt;directory&gt;</code>: 表示将设备<code>&lt;device&gt;</code>以<code>&lt;type&gt;</code>的文件格式化类型挂载到<code>&lt;directory&gt;</code>目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount</span>sysfs on /sys <span class="token function">type</span> sysfs <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel<span class="token punctuation">)</span>proc on /proc <span class="token function">type</span> proc <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime<span class="token punctuation">)</span>devtmpfs on /dev <span class="token function">type</span> devtmpfs <span class="token punctuation">(</span>rw,nosuid,seclabel,size<span class="token operator">=</span>1919884k,nr_inodes<span class="token operator">=</span>479971,mode<span class="token operator">=</span>755<span class="token punctuation">)</span>securityfs on /sys/kernel/security <span class="token function">type</span> securityfs <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime<span class="token punctuation">)</span>tmpfs on /dev/shm <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,seclabel<span class="token punctuation">)</span>devpts on /dev/pts <span class="token function">type</span> devpts <span class="token punctuation">(</span>rw,nosuid,noexec,relatime,seclabel,gid<span class="token operator">=</span>5,mode<span class="token operator">=</span>620,ptmxmode<span class="token operator">=</span>000<span class="token punctuation">)</span>tmpfs on /run <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,seclabel,mode<span class="token operator">=</span>755<span class="token punctuation">)</span>tmpfs on /sys/fs/cgroup <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>ro,nosuid,nodev,noexec,seclabel,mode<span class="token operator">=</span>755<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/systemd <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent<span class="token operator">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="token operator">=</span>systemd<span class="token punctuation">)</span>pstore on /sys/fs/pstore <span class="token function">type</span> pstore <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/net_cls,net_prio <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/perf_event <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,perf_event<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/pids <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,pids<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/hugetlb <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/memory <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,memory<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/cpuset <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuset<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/cpu,cpuacct <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/devices <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,devices<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/blkio <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,blkio<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/freezer <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,freezer<span class="token punctuation">)</span>configfs on /sys/kernel/config <span class="token function">type</span> configfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>/dev/sda3 on / <span class="token function">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,noquota<span class="token punctuation">)</span>selinuxfs on /sys/fs/selinux <span class="token function">type</span> selinuxfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>systemd-1 on /proc/sys/fs/binfmt_misc <span class="token function">type</span> autofs <span class="token punctuation">(</span>rw,relatime,fd<span class="token operator">=</span>23,pgrp<span class="token operator">=</span>1,timeout<span class="token operator">=</span>0,minproto<span class="token operator">=</span>5,maxproto<span class="token operator">=</span>5,direct,pipe_ino<span class="token operator">=</span>12625<span class="token punctuation">)</span>mqueue on /dev/mqueue <span class="token function">type</span> mqueue <span class="token punctuation">(</span>rw,relatime,seclabel<span class="token punctuation">)</span>hugetlbfs on /dev/hugepages <span class="token function">type</span> hugetlbfs <span class="token punctuation">(</span>rw,relatime,seclabel<span class="token punctuation">)</span>debugfs on /sys/kernel/debug <span class="token function">type</span> debugfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>fusectl on /sys/fs/fuse/connections <span class="token function">type</span> fusectl <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>/dev/sda1 on /boot <span class="token function">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,noquota<span class="token punctuation">)</span>tmpfs on /run/user/0 <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,relatime,seclabel,size<span class="token operator">=</span>386132k,mode<span class="token operator">=</span>700<span class="token punctuation">)</span>binfmt_misc on /proc/sys/fs/binfmt_misc <span class="token function">type</span> binfmt_misc <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><code>umount &lt;directory&gt;</code>: 卸载指定设备</p><p>从Linux系统上移除一个可移动设备时, 不能直接从系统上移出, 而应该先卸载. 使用umount来卸载设备, 如果有任何程序正在使用设备上的文件, 系统不会允许你卸载它.</p></li></ul><h1 id="包管理系统PMS-package-management-system"><a href="#包管理系统PMS-package-management-system" class="headerlink" title="包管理系统PMS(package management system)"></a>包管理系统PMS(package management system)</h1><h2 id="包管理基础"><a href="#包管理基础" class="headerlink" title="包管理基础"></a>包管理基础</h2><p>PMS使用一个数据库来记录各种相关内容:</p><ul><li>Linux系统上<u>已经安装了什么软件包</u></li><li><u>每个包安装了什么文件</u></li><li>每个已安装软件包的<u>版本</u></li></ul><p>软件包存储在服务器上, 这些服务器称为<u>仓库(repository)</u>. 可以通过Linux系统中的PMS来下载或更新软件包.</p><h2 id="基于Red-Hat系统"><a href="#基于Red-Hat系统" class="headerlink" title="基于Red Hat系统"></a>基于Red Hat系统</h2><h3 id="列出已安装的包"><a href="#列出已安装的包" class="headerlink" title="列出已安装的包"></a>列出已安装的包</h3><ul><li><p>使用<code>yum list installed</code>在控制台输出, 或者使用<code>yum list installed &gt; &lt;filename&gt;</code><u>重定向输出</u>到文件中</p></li><li><p>使用<code>yum list installed &lt;packageName&gt;</code>查看指定包名<code>&lt;packageName&gt;</code>的包是否安装</p></li><li><p>使用<code>yum provides &lt;filename&gt;</code>查看<code>&lt;filename&gt;</code>文件属于哪个软件包</p></li></ul><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul><li><p>使用<code>yum install &lt;packageName&gt;</code>从仓库中下载软件包并安装</p></li><li><p>也可以下载<code>rpm</code>安装包, 使用<code>yum localinstall &lt;packageName.rpm&gt;</code>进行本地安装</p></li></ul><h3 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h3><ul><li>使用<code>yum list updates</code>列出所有已安装软件包的可用更新</li><li>使用<code>yum update</code>更新所有安装包</li><li>使用<code>yum update &lt;packageName&gt;</code>更新<code>&lt;packageName&gt;</code>软件包</li></ul><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><ul><li>使用<code>yum remove &lt;packageName&gt;</code>卸载软件, 但保留配置文件和数据文件</li><li>使用<code>yum erase &lt;packgeName&gt;</code>卸载软件并删除和它相关的所有文件</li></ul><h3 id="处理损坏的包依赖关系"><a href="#处理损坏的包依赖关系" class="headerlink" title="处理损坏的包依赖关系"></a>处理损坏的包依赖关系</h3><p>在安装多个软件包时, 某个包的软件依赖关系可能会被另一个包的安装覆盖掉, 这叫做<u>损坏的包依赖关系(broken dependency)</u>.</p><p>如果系统出现该问题</p><ol><li>使用<code>yum clean all</code>进行尝试</li><li>再使用<code>yum update</code>进行尝试</li><li>最后使用<code>yum deplist &lt;packageName&gt;</code>查看包依赖关系, 知道依赖关系后可以手动进行安装</li><li>如果还是无法解决, 使用<code>yum update --skip-broken</code>来跳过更新那些包依赖关系损坏的包而继续更新其它包</li></ol><h3 id="软件仓库"><a href="#软件仓库" class="headerlink" title="软件仓库"></a>软件仓库</h3><p>yum的仓库定义文件位于<code>/etc/yum.repos.d</code>, 通过编辑配置文件可以添加仓库, 一般需要配置正确的URL和加密密钥</p><ul><li>使用<code>yum repolist</code>查看目前配置可使用的仓库</li></ul><h2 id="通过源码进行软件安装"><a href="#通过源码进行软件安装" class="headerlink" title="通过源码进行软件安装"></a><u>通过源码进行软件安装</u></h2><ol><li>下载<code>xxx.tar.gz</code>压缩包</li><li>使用<code>tar -zxvf xxx.tar.gz</code>解压缩</li><li>进入到解压后的文件目录中, 使用<code>./configure</code>查看是否具备库依赖环境, 若缺少则使用<code>yum</code>进行下载</li><li>在满足依赖环境后, 使用<code>make</code>进行编译, 再使用<code>make install</code>进行安装</li></ol><h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><p>vi编辑器是Unix系统最初始的编辑器, 在GNU项目将vi编辑器一直到开源世界后, 将其进行一些改进, 并重命名为vim(vi improved)</p><h2 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h2><p>在Centos7系统中, 使用<code>yum install -y vim</code>进行安装</p><p>在Ubuntu系统中, 使用<code>sudo apt-get install vim</code>进行安装</p><h2 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h2><p>vim在内存缓冲区中处理数据</p><ul><li>未指定文件名或文件不存在, 则开辟一段新的缓冲区域来编辑</li><li>指定文件存在, 则将文件的整个内容读入到缓冲区中</li></ul><p>vim编辑器有两种操作模式: <u>普通模式和插入模式</u>. 在普通模式下, 输入的按键将会被解释为命令(<u>区分大小写</u>); 在插入模式下则输入文本内容.</p><center>vim操作模式的相互转换</center> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F.svg" style="zoom:25%;"><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><ul><li><code>方向键</code>: 上下左右</li><li><code>&lt;PageDown&gt;/&lt;PageUp&gt;</code>: 向下/上翻页</li><li><code>G</code>: 移到文本的最后一行</li><li><code>gg</code>: 移动到文本的第一行</li><li><code>&lt;num&gt; G</code>: 移动到文本的第<code>num</code>行</li><li><code>:</code>: <u>命令行模式</u><ul><li><code>q</code>: 如果未修改缓冲区数据, 则可以退出</li><li><code>q!</code>: 取消对数据的修改并退出, 强制退出</li><li><code>w &lt;filename&gt;</code>: 将数据保存到一个名为<code>filename</code>的文件中</li><li><code>wq</code>: 保存数据修改并退出</li></ul></li></ul><h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><center>vim编辑命令</center><table><thead><tr><th>命令</th><th>描述</th><th>拓展使用</th></tr></thead><tbody><tr><td><code>x/&lt;Delete&gt;</code></td><td><u>删除</u>当前光标所在位置的字符</td><td><code>2x</code></td></tr><tr><td><code>dd</code></td><td><u>删除</u>当前光标所在<u>行</u>的字符串</td><td><code>5dd</code></td></tr><tr><td><code>dw</code></td><td><u>删除</u>当前光标所在位置的<u>单词</u></td><td></td></tr><tr><td><code>d$</code></td><td><u>删除</u>当前光标至<u>行尾(<code>$</code>)</u>的内容</td><td></td></tr><tr><td><code>J</code></td><td><u>删除</u>当前光标所在行行尾的<u>换行符(即拼接行)</u></td><td></td></tr><tr><td><code>u</code></td><td><u>撤销</u></td><td></td></tr><tr><td><code>a</code></td><td>在当前光标位置后<u>追加数据</u></td><td></td></tr><tr><td><code>A</code></td><td>在当前光标所在行<u>行尾追加数据</u></td><td></td></tr><tr><td><code>r &lt;char&gt;</code></td><td>用<code>&lt;char&gt;</code>字符替换当前光标所在位置的<u>单个字符</u></td><td></td></tr><tr><td><code>R &lt;text&gt;</code></td><td>用<code>&lt;text&gt;</code>覆盖当前光标所在位置的数据, 直到按下esc键(<u>进入到REPLACE模式</u>)</td><td></td></tr></tbody></table><p><u>删除命令</u>会将删除数据存放到寄存器中, 使用<code>p</code>命令可以取回数据, 搭配使用相当于<code>剪切 + 粘贴</code></p><h4 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h4><p>复制命令和删除命令相类似, 只需要将<code>d</code>改为<code>y</code>即可. 由于复制不会影响到复制的文本, 因此只有当使用<code>p</code>命令进行粘贴之后才能清楚实际复制了什么内容. 当然, 这个问题可以通过<u>可视模式</u>进行解决, 按下<code>v</code>键会高亮文本, <u>高亮的内容即为选中的文本</u></p><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><ol><li>输入<code>/</code>, 再输入需要查找的内容(<u>区分大小写</u>), 按下回车键即可查找</li><li>找到内容后, 使用<code>n</code>可以查看下一个</li><li>在<u>命令行模式</u>下才可以使用替换功能, 格式为<code>:s /&lt;old&gt;/&lt;new&gt;</code></li></ol><center>替换功能格式</center><table><thead><tr><th>格式</th><th>功能</th></tr></thead><tbody><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;</code></td><td>从当前光标到文件末尾查找<code>&lt;old&gt;</code>并将第一个替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>将当前光标所在行的<code>&lt;old&gt;</code>替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:n,ms /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换从行号<code>n</code>到行号<code>m</code>之间所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/gc</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code>且每次进行提示确认</td></tr></tbody></table><h2 id="Vim其它设置"><a href="#Vim其它设置" class="headerlink" title="Vim其它设置"></a>Vim其它设置</h2><p>通过<code>vim ~/.vimrc</code>命令创建(或打开)<code>.vimrc</code>文件, 具体配置信息如下</p><center>.vimrc文件配置及其含义</center><table><thead><tr><th>文件配置</th><th>含义</th></tr></thead><tbody><tr><td>set hlsearch</td><td>高亮度反白</td></tr><tr><td>set backspace=2</td><td>可随时用退格键删除</td></tr><tr><td>set autoindent</td><td>自动缩进</td></tr><tr><td>set ruler</td><td>可显示最后一行的状态</td></tr><tr><td>set showmode</td><td>左下角那一行的状态</td></tr><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set bg=dark</td><td>显示不同的底色</td></tr><tr><td>syntax on</td><td>语法高亮</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/02/linux-04-linux-jiu-gai-zhe-me-xue/"/>
      <url>/2023/06/02/linux-04-linux-jiu-gai-zhe-me-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="开源软件发展"><a href="#开源软件发展" class="headerlink" title="开源软件发展"></a>开源软件发展<a name="1"></a></h1><blockquote><p> <strong>章节目录</strong></p><ul><li><a href="#1-1">开源协议</a></li><li><a href="#1-2">开源软件的盈利模式</a></li><li><a href="#1-3">开源软件的优势</a></li><li><a href="#1-4">Linux系统的发展</a></li><li><a href="#1-5">常见的Linux系统版本</a></li></ul></blockquote><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议<a name="1-1"></a></h2><p>从<u>GPL</u>到<u>MIT</u>的许可证协议越来越自由.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE.svg" alt></p><h2 id="开源软件的盈利模式"><a href="#开源软件的盈利模式" class="headerlink" title="开源软件的盈利模式"></a>开源软件的盈利模式<a name="1-2"></a></h2><ul><li><p><u>多条产品线</u></p><p>如MySQL数据库便有个人版和企业版两种产品，个人版完全免费起到推广作用，企业版销售授权许可盈利。</p></li><li><p><u>技术服务型</u>，</p><p>JBoss应用服务器便是典型代表，软件可自由免费使用，通过技术文档、培训课程以及定制开发服务来盈利。</p></li><li><p><u>软硬件结合</u></p><p>IBM公司在出售服务器时，一般会为用户捆绑销售AIX或Linux系统来确保硬件设施的盈利。</p></li><li><p><u>技术出版物</u></p><p>O’Reilly即是一家开源公司，也是一家出版商，诸多优秀书籍便是由此产生。</p></li><li><p><u>品牌和口碑</u></p></li></ul><h2 id="开源软件的优势"><a href="#开源软件的优势" class="headerlink" title="开源软件的优势"></a>开源软件的优势<a name="1-3"></a></h2><ul><li><p><u>低风险</u></p><p>使用闭源软件无疑在把命运交付给他人，一旦封闭的源代码没有人来维护，你将进退维谷，而相较于商业软件公司，开源社区则很少存在倒闭的问题。并且源代码一旦公布于世，任何人或组织都可以接替上任进行未来新的维护工作。</p></li><li><p><u>高品质</u></p><p>相较于闭源软件产品，开源项目通常是由开源社区来研发及维护的，参与编写、维护、测试的用户量众多，一般的ug还没有等爆发就已经被修补。另外在灵感不断碰撞、代码不断迭代的交流氛围中，不会有程序员将”半成品”上传到开源社区中的。</p></li><li><p><u>低成本</u></p><p>开源工作者大多都是在幕后默默且无偿地付出劳动成果，为美好的世界贡献一份力量，因此使用开源社区推动的软件项目可以节省大量的人力、物力和财力。</p></li><li><p><u>更透明</u></p><p>没有哪个笨蛋会把木马或后门代码放到开源项目中的，这样无疑是把自己的罪行暴露在阳光之下，一眼就能被发现。</p></li></ul><h2 id="Linux系统的发展"><a href="#Linux系统的发展" class="headerlink" title="Linux系统的发展"></a>Linux系统的发展<a name="1-4"></a></h2><ol><li>Bell实验室, 通用电气公司, MIT决定联手打造一款操作系统<u>MULTICS</u></li><li>MULTICS的开发并不顺利, 其中一位开发人员Ken Thompson使用汇编语言编写出一款新的系统内核<u>UNICS</u></li><li>C语言之父Dennis M.Ritchie考虑到汇编语言的跨平台性很差, 因此使用C语言重新编写一遍UNICS系统, 即<u>UNIX系统</u></li><li>贝尔实验室的公司AT&amp;T收回UNIX的版权, 逐步限制了UNIX系统源代码的自由传播</li><li>Richard Stallman发起<u>GNU源代码开放计划</u>并制定了<u>GPL许可证</u>, 在和社区成员的共同履历下编写出了一款能够运行C语言代码的编译器<u>gcc(GNU C Compiler)</u></li><li>荷兰教授仿照UNIX系统编写出一款<u>Minix操作系统</u>, 用于课堂教学</li><li>Linus Torvalds使用bash解释器和gcc编译器编写了一个全新的<u>系统内核Linux</u></li><li>红帽公司创始人Bob Young在Linux系统内核的基础之上, 集成了众多常用源代码和程序软件, 发布RedHat操作系统并开始出售技术服务, 推动了Linux系统的普及.</li><li>IBM和Intel为首的多家IT巨头开始大力推动开源软件的发展. 红帽公司也成为了世界上第一家年收入10亿美元的开源公司.</li></ol><h2 id="常见的Linux系统版本"><a href="#常见的Linux系统版本" class="headerlink" title="常见的Linux系统版本"></a>常见的Linux系统版本<a name="1-5"></a></h2><ul><li><p><u>红帽企业版系统(RHEL, RedHatEntrepriseLinux)</u></p><p>极强的稳定性</p></li><li><p><u>CentOS(Community Enterprise Operation System)</u></p><p>免费, 将RHEL中的付费功能去掉之后的版本</p></li><li><p><u>Fedora</u></p><p>桌面版本系统, 类似于Windows10, 是<u>RHEL系统的试验田</u>, 一些新功能新特性会放到该系统中进行测试, 技术成熟之后才移植到RHEL系统中</p></li><li><p><u>Debian</u></p><p>非红帽公司出品, 使用<code>apt</code>作为包管理工具</p></li><li><p><u>Ubuntu</u></p><p>桌面版本系统, 基于Debian系统, 修改衍生而来</p></li><li><p><u>Kali Linux</u></p><p>一般是被黑客或安全人员使用, 能够对网站进行渗透测试, 即“<u>攻击网站</u>”</p></li></ul><h1 id="动手部署一台Linux操作系统"><a href="#动手部署一台Linux操作系统" class="headerlink" title="动手部署一台Linux操作系统"></a>动手部署一台Linux操作系统</h1><blockquote><p><strong>章节目录</strong></p><ul><li><a href="#2-1">安装并配置VM虚拟机</a></li><li><a href="#2-2">安装Linux系统</a></li><li><a href="#2-3">Linux系统中安装软件</a></li><li><a href="#2-4">系统初始化进程</a></li><li><a href="#2-5">重置root用户密码</a></li></ul></blockquote><h2 id="安装并配置VM虚拟机"><a href="#安装并配置VM虚拟机" class="headerlink" title="安装并配置VM虚拟机"></a>安装并配置VM虚拟机<a name="2-1"></a></h2><p><u>三种模式</u></p><ul><li><p>桥接模式</p><p>虚拟机可以通过物理主机的网卡访问外部网络, 占用物理IP地址, 主机数过多时可能存在IP冲突</p></li><li><p>NAT模式</p><p>VM虚拟机中的网络服务相当于路由器的作用, 虚拟机可以访问外网, 对应的网卡为VMnet8</p></li><li><p>仅主机模式</p><p>不能访问外网, 对应的网卡为VMnet1</p></li></ul><h2 id="安装Linux系统"><a href="#安装Linux系统" class="headerlink" title="安装Linux系统"></a>安装Linux系统<a name="2-2"></a></h2><p>安装RHEL8或CentOS8系统时，物理电脑的CPU需要支持虚拟化技术(Virtualization Technology), 简称VT。</p><p>VT技术是一种能够让单台计算机分割出多个独立资源区，并让每个资源区按照需要模拟出系统的一项技术，其本质就是通过中间层实现计算机资源的管理和再分配，让系统资源的利用率最大化。</p><p>VT虚拟化大多数情况下时默认开启的, 万一没有开启, 则在开机时进入到BIOS面板中进行开启.</p><h2 id="Linux系统中安装软件"><a href="#Linux系统中安装软件" class="headerlink" title="Linux系统中安装软件"></a>Linux系统中安装软件<a name="2-3"></a></h2><p>在RPM（红帽软件包管理器）公布之前，要想在Linux系统中安装软件只能采取编译源码包的方式，所以早期安装软件是一件非常困难、耗费耐心的事情，而且大多数的服务程序仅仅提供自身的源代码，还需要运维人员编译代码后自行解决软件之间的依赖关系。因此要安装好一个服务程序，运维人员不仅需要具备丰富的知识、高超的技能，还要有良好的耐心，这其中的艰辛我们会在本书第20章节为读者们实战演练一遍。</p><p>总而言之，早期Linux系统在安装、升级、卸载服务程序时还要考虑到其他程序、库的依赖关系，所以在进行校验、安装、卸载、查<br>询、升级等管理软件操作时难度都非常大，RPM机制则正是为了解决这些问题而设计的。</p><p>通过RPM安装的服务程序会像Windows系统中的控制面板那样，建立统一的数据库，详细记录软件信息并能够自动分析依赖关系。</p><h1 id="Linux系统中必须掌握的常用命令"><a href="#Linux系统中必须掌握的常用命令" class="headerlink" title="Linux系统中必须掌握的常用命令"></a>Linux系统中必须掌握的常用命令</h1><p>在输入命令之前就已经存在的那部分内容, 例如<code>[root@hadoop100 ~]#</code>称为<u>终端提示符</u>. </p><p>终端提示符用于提示一些基本信息, <code>#</code>结尾代表管理员身份, <code>?</code>结尾代表普通用户身份.</p><h2 id="帮助文档man的使用"><a href="#帮助文档man的使用" class="headerlink" title="帮助文档man的使用"></a>帮助文档<code>man</code>的使用</h2><center>man命令中常用按键及其作用</center><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td><code>空格键/Pagedown</code></td><td>向下翻页</td></tr><tr><td><code>Pageup</code></td><td>向上翻页</td></tr><tr><td><code>home</code></td><td>跳转首页</td></tr><tr><td><code>end</code></td><td>跳转尾页</td></tr><tr><td><code>/</code></td><td>从上到下搜索某个关键字, 例如<code>/linux</code></td></tr><tr><td><code>?</code></td><td>从下到上搜索某个关键字, 例如<code>?linux</code></td></tr><tr><td><code>n</code></td><td>搭配搜索功能使用, 定位到下一个关键字</td></tr><tr><td><code>N</code></td><td>搭配搜索功能使用, 定位到上一个关键字</td></tr><tr><td><code>q</code></td><td>退出</td></tr></tbody></table><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a><code>echo</code>命令</h2><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>作用</td><td><code>echo</code>命令用于<u>在终端设备上输出字符串或变量提取后的值</u></td></tr><tr><td>语法格式</td><td><code>echo &lt;字符串&gt;</code>或者<code>echo &lt;$变量名&gt;</code><br><code>$</code>表示取变量的实际值</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $SHELL</span>/bin/bash<span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo SHELL</span>SHELL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a><code>date</code>命令</h2><h1 id="管道符-重定向与环境变量"><a href="#管道符-重定向与环境变量" class="headerlink" title="管道符, 重定向与环境变量"></a>管道符, 重定向与环境变量</h1><blockquote><ul><li><a href="#4-1">输入输出重定向</a></li><li><a href="#4-2">管道命令符</a></li><li><a href="#4-3">命令行的通配符</a></li><li><a href="#4-4">常用的转义字符</a></li><li><a href="#4-5">重要的环境变量</a></li></ul></blockquote><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向<a name="4-1"></a></h2><p><u>输入重定向</u>是指从指定文件中读取输入数据, 而<u>输出重定向</u>是指把原本要输出到屏幕的数据信息写入到指定文件中.</p><p>输出重定向的使用频率更高, 又将其分为<u>标准输出重定向</u>和<u>错误输出重定向</u>两种不同的技术, 以及<u>清空写入</u>和<u>追加写入</u>两种模式.</p><p>三种输入输出重定向技术:</p><ul><li><p>标准输入重定向(STDIN, 文件描述符为0): 默认从键盘输入, 也可以从其他文件或命令中输入</p></li><li><p>标准输出重定向(STDOUT, 文件描述符为1): 默认输出到屏幕</p></li><li><p>错误输出重定向(STDERR, 文件描述符为2): 默认输出到屏幕</p></li></ul><p>文件描述符中的1可以省略不写, 但是文件描述符中的2必须要写, 例如下表所示.</p><center>重定向技术中用到的符号</center><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>将文件作为命令的标准输入</td></tr><tr><td><code>&lt;&lt;</code></td><td>指定标准输入中的结束符</td></tr><tr><td><code>&gt;</code></td><td>将标准输出重定向到一个文件中, 清空文件中原有数据</td></tr><tr><td><code>2&gt;</code></td><td>将错误输出重定向到一个文件中, 清空文件中原有数据</td></tr><tr><td><code>&gt;&gt;</code></td><td>将标准输出重定向到一个文件中, 追加数据</td></tr><tr><td><code>2&gt;&gt;</code></td><td>将错误输出重定向到一个文件中, 追加数据</td></tr><tr><td><code>&amp;&gt;&gt;</code></td><td>将标准输出和错误输出共同写入到一个文件中, 追加数据</td></tr></tbody></table><h2 id="管道命令符"><a href="#管道命令符" class="headerlink" title="管道命令符"></a>管道命令符</h2><p>==管道命令符<code>|</code>的作用是: 将前一个命令的标准输出作为后一个命令的标准输入==</p><p>修改root用户命令: <code>echo &quot;password&quot; | passwd --stdin root</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "xiong" | passwd --stdin xiong</span>Changing password <span class="token keyword">for</span> user xiong.passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要将管道命令符处理后的结果==既输出到屏幕上, 又添加到文件中==, 可以搭配<code>tee</code>命令使用.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps aux | grep bash</span>root       1502  0.0  0.0 115540  1976 tty1     Ss+  15:44   0:00 -bashroot       1524  0.0  0.0 115544  2052 pts/0    Ss   15:44   0:00 -bashroot       1553  0.0  0.0 112808   964 pts/0    R+   15:48   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto <span class="token function">bash</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps aux | grep bash | tee psAux_grepBash</span><span class="token comment" spellcheck="true"># 创建了psAux_grepBash文件用来保存输出结果</span>root       1502  0.0  0.0 115540  1976 tty1     Ss+  15:44   0:00 -bashroot       1524  0.0  0.0 115544  2052 pts/0    Ss   15:44   0:00 -bashroot       1556  0.0  0.0 112808   960 pts/0    S+   15:49   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto <span class="token function">bash</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>anaconda-ks.cfg  hardLink  installed_software  LinuxProbe.pdf  original-ks.cfg  psAux_grepBash  <span class="token function">test</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat psAux_grepBash </span>root       1502  0.0  0.0 115540  1976 tty1     Ss+  15:44   0:00 -bashroot       1524  0.0  0.0 115544  2052 pts/0    Ss   15:44   0:00 -bashroot       1556  0.0  0.0 112808   960 pts/0    S+   15:49   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令行中的通配符"><a href="#命令行中的通配符" class="headerlink" title="命令行中的通配符"></a>命令行中的通配符<a name="4-3"></a></h2><center>Linux系统中的通配符</center><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>任意字符</td></tr><tr><td><code>?</code></td><td>单个任意字符</td></tr><tr><td><code>[a-z]</code></td><td>单个小写字母</td></tr><tr><td><code>[A-Z]</code></td><td>单个大写字母</td></tr><tr><td><code>[0-9]</code></td><td>单个数字</td></tr><tr><td><code>[:alpha:]</code></td><td>任意字母</td></tr><tr><td><code>[:upper:]</code></td><td>任意大写字母</td></tr><tr><td><code>[:lower:]</code></td><td>任意小写字母</td></tr><tr><td><code>[:digit:]</code></td><td>所有数字</td></tr><tr><td><code>[:alnum:]</code></td><td>任意字母加数字</td></tr><tr><td><code>[:punct:]</code></td><td>标点符号</td></tr></tbody></table><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符<a name="4-4"></a></h2><ul><li>反斜杠<code>\</code>: 使其后面的一个字符变为纯文本字符</li><li>单引号<code>‘’</code>: 将单引号中的所有内容作为纯文本</li><li>双引号<code>“”</code>: 保留其中的变量</li><li>反引号: 将其中的内容作为命令进行执行, 并返回执行结果</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># price=5</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo 'price is $price'</span>price is <span class="token variable">$price</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "price is $$price"</span>price is 1524price<span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "price is $price"</span>price is 5<span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "price is \$$price"</span>price is <span class="token variable">$5</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo `echo $price`</span>5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量<a name="4-5"></a></h2><p>在Linux系统中, 一般用大写字母表示变量名, 用小写字母表示命令(命名规范).</p><p><u>命令执行流程</u>:</p><ol><li>通过==绝对路径或相对路径==的方式来尝试执行该命令</li><li>==检查==输入的命令是否是自定义的==别名==</li><li>判断用户输入的是Bash Shell的内部命令还是外部命令(内外部命令是针对Bash程序而言的)</li><li>在系统定义的PATH变量的文件夹下查找命令</li></ol><p><u>环境变量本质就是在命令行中定义变量</u>, 和上面的<code>price=5</code>没有差别. 有两点不同的是:</p><ul><li><code>price</code>变量不能被其他用户所使用, 因此需要使用<code>export</code>关键字来将其提升为==全局变量==</li><li><code>price</code>变量在服务器重启后就会消失掉, 因此需要将其写入到<code>.bashrc</code>或<code>.bash_profile</code>配置文件中</li></ul><h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><p>vi编辑器是Unix系统最初始的编辑器, 在GNU项目将vi编辑器一直到开源世界后, 将其进行一些改进, 并重命名为vim(vi improved)</p><h2 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h2><p>在Centos7系统中, 使用<code>yum install -y vim</code>进行安装</p><p>在Ubuntu系统中, 使用<code>sudo apt-get install vim</code>进行安装</p><h2 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h2><p>vim在内存缓冲区中处理数据</p><ul><li>未指定文件名或文件不存在, 则开辟一段新的缓冲区域来编辑</li><li>指定文件存在, 则将文件的整个内容读入到缓冲区中</li></ul><p>vim编辑器有两种操作模式: <u>普通模式和插入模式</u>. 在普通模式下, 输入的按键将会被解释为命令(<u>区分大小写</u>); 在插入模式下则输入文本内容.</p><center>vim操作模式的相互转换</center> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F.svg" style="zoom:25%;"><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><ul><li><code>方向键</code>: 上下左右</li><li><code>&lt;PageDown&gt;/&lt;PageUp&gt;</code>: 向下/上翻页</li><li><code>G</code>: 移到文本的最后一行</li><li><code>gg</code>: 移动到文本的第一行</li><li><code>&lt;num&gt; G</code>: 移动到文本的第<code>num</code>行</li><li><code>:</code>: <u>命令行模式</u><ul><li><code>q</code>: 如果未修改缓冲区数据, 则可以退出</li><li><code>q!</code>: 取消对数据的修改并退出, 强制退出</li><li><code>w &lt;filename&gt;</code>: 将数据保存到一个名为<code>filename</code>的文件中</li><li><code>wq</code>: 保存数据修改并退出</li></ul></li></ul><h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><center>vim编辑命令</center><table><thead><tr><th>命令</th><th>描述</th><th>拓展使用</th></tr></thead><tbody><tr><td><code>x/&lt;Delete&gt;</code></td><td><u>删除</u>当前光标所在位置的字符</td><td><code>2x</code></td></tr><tr><td><code>dd</code></td><td><u>删除</u>当前光标所在<u>行</u>的字符串</td><td><code>5dd</code></td></tr><tr><td><code>dw</code></td><td><u>删除</u>当前光标所在位置的<u>单词</u></td><td></td></tr><tr><td><code>d$</code></td><td><u>删除</u>当前光标至<u>行尾(<code>$</code>)</u>的内容</td><td></td></tr><tr><td><code>J</code></td><td><u>删除</u>当前光标所在行行尾的<u>换行符(即拼接行)</u></td><td></td></tr><tr><td><code>u</code></td><td><u>撤销</u></td><td></td></tr><tr><td><code>a</code></td><td>在当前光标位置后<u>追加数据</u></td><td></td></tr><tr><td><code>A</code></td><td>在当前光标所在行<u>行尾追加数据</u></td><td></td></tr><tr><td><code>r &lt;char&gt;</code></td><td>用<code>&lt;char&gt;</code>字符替换当前光标所在位置的<u>单个字符</u></td><td></td></tr><tr><td><code>R &lt;text&gt;</code></td><td>用<code>&lt;text&gt;</code>覆盖当前光标所在位置的数据, 直到按下esc键(<u>进入到REPLACE模式</u>)</td><td></td></tr></tbody></table><p><u>删除命令</u>会将删除数据存放到寄存器中, 使用<code>p</code>命令可以取回数据, 搭配使用相当于<code>剪切 + 粘贴</code></p><h4 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h4><p>复制命令和删除命令相类似, 只需要将<code>d</code>改为<code>y</code>即可. 由于复制不会影响到复制的文本, 因此只有当使用<code>p</code>命令进行粘贴之后才能清楚实际复制了什么内容. 当然, 这个问题可以通过<u>可视模式</u>进行解决, 按下<code>v</code>键会高亮文本, <u>高亮的内容即为选中的文本</u></p><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><ol><li>输入<code>/</code>, 再输入需要查找的内容(<u>区分大小写</u>), 按下回车键即可查找</li><li>找到内容后, 使用<code>n</code>可以查看下一个</li><li>在<u>命令行模式</u>下才可以使用替换功能, 格式为<code>:s /&lt;old&gt;/&lt;new&gt;</code></li></ol><center>替换功能格式</center><table><thead><tr><th>格式</th><th>功能</th></tr></thead><tbody><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;</code></td><td>从当前光标到文件末尾查找<code>&lt;old&gt;</code>并将第一个替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>将当前光标所在行的<code>&lt;old&gt;</code>替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:n,ms /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换从行号<code>n</code>到行号<code>m</code>之间所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/gc</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code>且每次进行提示确认</td></tr></tbody></table><h2 id="Vim其它设置"><a href="#Vim其它设置" class="headerlink" title="Vim其它设置"></a>Vim其它设置</h2><p>通过<code>vim ~/.vimrc</code>命令创建(或打开)<code>.vimrc</code>文件, 具体配置信息如下</p><center>.vimrc文件配置及其含义</center><table><thead><tr><th>文件配置</th><th>含义</th></tr></thead><tbody><tr><td>set hlsearch</td><td>高亮度反白</td></tr><tr><td>set backspace=2</td><td>可随时用退格键删除</td></tr><tr><td>set autoindent</td><td>自动缩进</td></tr><tr><td>set ruler</td><td>可显示最后一行的状态</td></tr><tr><td>set showmode</td><td>左下角那一行的状态</td></tr><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set bg=dark</td><td>显示不同的底色</td></tr><tr><td>syntax on</td><td>语法高亮</td></tr></tbody></table><h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><p>Shell脚本内设置了一些用于接收参数的变量, 变量和变量之间用空格隔开.</p><center>Shell脚本中的参数</center><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>当前Shell脚本程序的名称</td></tr><tr><td><code>$#</code></td><td>参数的个数</td></tr><tr><td><code>$1, $2, ..., $N</code></td><td>第1, 2, …, N个位置的参数</td></tr><tr><td><code>$*</code></td><td>所有位置的参数值</td></tr><tr><td><code>$?</code></td><td>上一次命令的执行返回值</td></tr></tbody></table><p>编写<code>example.sh</code>脚本, 内容如下. 其中第一行表示告诉系统使用bash这种Shell解释器来执行脚本文件.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">echo</span> <span class="token string">"当前脚本名称为<span class="token variable">$0</span>"</span><span class="token keyword">echo</span> <span class="token string">"总共有<span class="token variable">$#</span>个参数, 分别是<span class="token variable">$*</span>"</span><span class="token keyword">echo</span> <span class="token string">"第一个参数是<span class="token variable">$1</span>, 第二个参数是<span class="token variable">$2</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>bash example.sh</code>来执行脚本文件, 也可以使用<code>./example.sh</code>来执行, 但是默认情况下该文件被当作普通文件, 没有执行权限, 通过<code>chmod u+x example.sh</code>来为文件添加执行权限之后才可以使用<code>./example.sh</code>来执行文件. ==(此时example.sh文件有颜色渲染)==</p><pre class="line-numbers language-shell"><code class="language-shell">[root@hadoop100 ~]# ./example.sh hello world当前脚本名称为./example.sh总共有2个参数, 分别是hello world第一个参数是hello, 第二个参数是world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><p>系统在执行<code>mkdir</code>命令时会判断用户输入的信息，即判断用户指定的文件夹名称是否已经存在，如果存在则提示报错；反之则自动创建。</p><p>Shell脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字0，否则便返回非零值。</p><p>格式: <code>[ &lt;expression&gt; ]</code>, <u>括号和表达式之间需要用空格隔开</u></p><h3 id="文件测试语句"><a href="#文件测试语句" class="headerlink" title="文件测试语句"></a>文件测试语句</h3><center>文件测试参数表</center><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-d</code></td><td>测试文件是否为目录类型</td></tr><tr><td><code>-e</code></td><td>测试文件是否存在</td></tr><tr><td><code>-f</code></td><td>判断是否为一般文件</td></tr><tr><td><code>-r</code></td><td>测试当前用户是否有权限读取</td></tr><tr><td><code>-w</code></td><td>测试当前用户是否有权限写入</td></tr><tr><td><code>-x</code></td><td>测试当前用户是否有权限执行</td></tr></tbody></table><blockquote><p>测试<code>example.sh</code>文件是否属于目录类型</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@hadoop100 ~]# [ -d example.sh ][root@hadoop100 ~]# echo $?1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="amp-amp-与操作"><a href="#amp-amp-与操作" class="headerlink" title="&amp;&amp;与操作"></a><code>&amp;&amp;</code>与操作</h4><p>与其它高级编程语言不同, <code>&amp;&amp;</code>表示==当前面的命令执行成功时, 才执行后面的操作==.</p><h4 id="或操作"><a href="#或操作" class="headerlink" title="||或操作"></a><code>||</code>或操作</h4><p><code>||</code>表示==当前面的命令执行失败时, 才执行后面的操作==</p><blockquote><p>测试<code>example.sh</code>文件是否存在, <u>使用逻辑运算符&amp;&amp;</u></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ -e example.sh ] &amp;&amp; echo $?</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>测试当前用户是否为root用户, <u>使用逻辑运算符||</u></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ $USER != root ] || echo "root"</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><u>三目运算符的使用</u>: 若当前用户为root, 则输出“root”, 否则输出“user”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ $USER = root ] &amp;&amp; echo "root" || echo "user"</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数值比较语句"><a href="#数值比较语句" class="headerlink" title="数值比较语句"></a>数值比较语句</h3><p>因为<code>&gt;, &lt;, =</code>等符号分别用来表示输出重定向, 输入重定向, 赋值等操作, 因此需要使用字母符号</p><center>整数比较运算符</center><table><thead><tr><th>比较运算符</th><th>作用</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>==</td></tr><tr><td><code>-ne</code></td><td>!=</td></tr><tr><td><code>-gt</code></td><td>&gt;</td></tr><tr><td><code>-lt</code></td><td>&lt;</td></tr><tr><td><code>-le</code></td><td>&lt;=</td></tr><tr><td><code>ge</code></td><td>&gt;=</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ 10 -ge 10 ] &amp;&amp; echo "yes"</span><span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="字符串比较语句"><a href="#字符串比较语句" class="headerlink" title="字符串比较语句"></a>字符串比较语句</h3><center>字符串比较运算符</center><table><thead><tr><th>比较操作符</th><th>作用</th></tr></thead><tbody><tr><td><code>=</code></td><td>比较字符串内容是否相同</td></tr><tr><td><code>!=</code></td><td>比较字符串内容是否不同</td></tr><tr><td><code>-z</code></td><td>判断字符串内容是否为空</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ -z $string ] &amp;&amp; echo "string is null"</span>string is null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p><u>单分支结构</u>由<code>if, then, fi</code>关键词组成</p><pre class="line-numbers language-bash"><code class="language-bash">DIR<span class="token operator">=</span><span class="token string">"/media/cdrom"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token variable">$DIR</span> <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#如果DIR不是一个目录类型</span><span class="token keyword">then</span>     <span class="token function">mkdir</span> -p <span class="token variable">$DIR</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>双分支结构</u>由<code>if, then, else, fi</code>关键字组成</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true"># /dev/null是一个被称作Linux黑洞的文件，把输出信息重定向到这个文件等同于删除数据(类似于没有回收功能的垃圾箱)</span><span class="token function">ping</span> -c 3 -i 0.2 -W 3 <span class="token variable">$1</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$1</span> is Online"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$1</span> is Offline"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash pingtest.sh hadoop100</span>Host hadoop100 is Online<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>多分支结构</u>由<code>if, then, else, elif, fi</code>关键词组成</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Enter your score (0-100):"</span> GRADE <span class="token comment" spellcheck="true">#获取输入, 赋值给变量GRADE, 相当于input</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -ge 85 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -le 100 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Excellent"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -ge 70 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -le 84 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Pass"</span><span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Fail"</span> <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> 变量名 <span class="token keyword">in</span> 取值列表<span class="token keyword">do</span>    执行流程<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>可以使用<code>exit</code>关键字来强行退出循环, 类似<code>break</code>的功能</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">while</span> 逻辑表达式<span class="token keyword">do</span>    执行流程<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">case</span> 变量值 <span class="token keyword">in</span>模式1<span class="token punctuation">)</span>    流程1    <span class="token punctuation">;</span><span class="token punctuation">;</span>模式2<span class="token punctuation">)</span>    流程2    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    流程3esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计划任务服务程序"><a href="#计划任务服务程序" class="headerlink" title="计划任务服务程序"></a>计划任务服务程序</h2><p>在指定的时间段自动启用或停止某些服务或命令.</p><p>计划任务分为<u>一次性计划任务</u>和<u>长期性计划任务</u>.</p><center>at命令参数表</center><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-f</code></td><td>指定包含命令的任务文件</td></tr><tr><td><code>-q</code></td><td>指定新任务名称</td></tr><tr><td><code>-l</code></td><td>显示待执行任务的列表</td></tr><tr><td><code>-d</code></td><td>删除指定待执行任务</td></tr><tr><td><code>-m</code></td><td>任务执行后给用户发邮件</td></tr></tbody></table><p><code>at</code>命令默认情况下使用交互式方式, 在输入<code>at &lt;time&gt;</code>之后, 会让用户输入待执行的任务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># at 23:00</span>at<span class="token operator">></span> poweroffat<span class="token operator">></span> <span class="token operator">&lt;</span>EOT<span class="token operator">></span>job 1 at Mon Jun 13 23:00:00 2022Can't <span class="token function">open</span> /var/run/atd.pid to signal atd. No atd running? <span class="token comment" spellcheck="true">#似乎对正确执行脚本没有影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过管道符来实现非交互式方式的脚本方式</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "poweroff" | at 23:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="用户身份与文件权限"><a href="#用户身份与文件权限" class="headerlink" title="用户身份与文件权限"></a>用户身份与文件权限</h1><blockquote><ul><li>用户身份与能力</li><li>文件权限与归属</li><li>文件的特殊权限</li><li>文件的隐藏属性</li><li>文件访问控制列表</li><li>su命令与sudo服务</li></ul></blockquote><p>Linux时一个多用户, 多任务的操作系统. 本章介绍如何添加, 删除, 修改用户账户信息. </p><p><u>文件访问控制列表(Access Control List, ACL)</u>可以进一步让单一用户或用户组对文件或目录进行权限设置, <u>使得文件具有满足工作需求的最小权限.</u></p><h2 id="用户身份与能力"><a href="#用户身份与能力" class="headerlink" title="用户身份与能力"></a>用户身份与能力</h2><p>Linux系统的设计初衷之一是为了满足多个用户同时工作的需求, 因此必须具备很好的安全性, 尤其是不能因为一两个服务出错而影响到整台服务器.</p><p>root管理员就是存在于所有类UNIX系统中的超级用户, 它拥有最高的系统所有权，能够管理系统的各项功能，如添<u>加/删除用户、启动/关闭服务进程、开启/禁用硬件设备</u>等. root管理员工作时不会受到系统的限制, 但如果root管理员执行了错误的<a href="https://www.linuxcool.com/" target="_blank" rel="noopener">Linux命令</a>, 可能会直接毁掉整个系统.</p><h3 id="UID"><a href="#UID" class="headerlink" title="UID"></a>UID</h3><ul><li>uid=0: root用户</li><li>uid$\in$[1,999]: 系统用户, 执行系统服务进程</li><li>uid$\in$[1000, $+\infty$): root用户创建的普通用户</li></ul><h3 id="GID"><a href="#GID" class="headerlink" title="GID"></a>GID</h3><p>在Linux系统中创建每个用户时，将自动创建一个与其同名的<u>基本用户组</u>，而且这个基本用户组只有该用户一个人。如果该用户以后被归纳到其他用户组，则这个其他用户组称之为<u>扩展用户组</u>。一个用户只有一个基本用户组，但是可以有多个扩展用户组</p><p>基本用户组相当于==“我”==这个组, 有且只有一个成员. 而<u>扩展用户组则相当于用户的身份</u>, 用户可以有不同的身份, 例如既可以是男性, 也可以是学生, 还可以是志愿者. </p><p>如果扩展组被删除, 则该组中用户的扩展组会重新变为其基本用户组.</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h3><p>用于显示用户的详细信息, 分别是uid(用户id), gid(基本用户组id), groups(扩展组id)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id root</span>uid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> groups<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id xiong</span>uid<span class="token operator">=</span>1000<span class="token punctuation">(</span>xiong<span class="token punctuation">)</span> gid<span class="token operator">=</span>1000<span class="token punctuation">(</span>xiong<span class="token punctuation">)</span> groups<span class="token operator">=</span>1000<span class="token punctuation">(</span>xiong<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useradd命令"><a href="#useradd命令" class="headerlink" title="useradd命令"></a>useradd命令</h3><p>用于创建普通用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd tom</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id tom</span>uid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> gid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> groups<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="userdel命令"><a href="#userdel命令" class="headerlink" title="userdel命令"></a>userdel命令</h3><p>用于删除用户, 虽然用户已经被删除, 但是其目录数据仍然存放在其家目录中, 需要手动进行删除.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># userdel tom</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd tom</span>useradd: warning: the home directory already exists.Not copying any <span class="token function">file</span> from skel directory into it.Creating mailbox file: File exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="groupadd命令"><a href="#groupadd命令" class="headerlink" title="groupadd命令"></a>groupadd命令</h3><p>用于创建扩展组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd people</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="usermod命令"><a href="#usermod命令" class="headerlink" title="usermod命令"></a>usermod命令</h3><p>用于修改用户的属性. 在Linux系统中一切都是文件, 因此可以使用<code>usermod</code>命令来修改用户信息.</p><center>usermod命令选项参数表</center><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-c</code></td><td>填写用户账户的备注信息</td></tr><tr><td><code>-dm</code></td><td>重新指定用户的家目录, 并将旧数据迁移过去</td></tr><tr><td><code>-e</code></td><td>账户的到期时间, 格式为YYYY-mm-DD</td></tr><tr><td><code>-g</code></td><td>变更所属的用户组</td></tr><tr><td><code>-G</code></td><td>变更所属的扩展组</td></tr><tr><td><code>-L</code></td><td>将用户加入黑名单, 禁止其登录系统</td></tr><tr><td><code>-U</code></td><td>解除黑名单限制</td></tr><tr><td><code>-s</code></td><td>变更默认终端</td></tr><tr><td><code>-u</code></td><td>修改用户的UID</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将用户tom添加到扩展组people中</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># usermod -G people tom</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id tom</span>uid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> gid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> groups<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span>,1002<span class="token punctuation">(</span>people<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="passwd命令"><a href="#passwd命令" class="headerlink" title="passwd命令"></a>passwd命令</h3><p>用于修改用户密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># passwd --stdin xiong</span>Changing password <span class="token keyword">for</span> user xiong.xiongpasswd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>passwd命令选项参数表</center><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-l</code></td><td>加黑名单</td></tr><tr><td><code>-u</code></td><td>解除黑名单</td></tr><tr><td><code>--stdin</code></td><td>允许通过标准输入来修改用户密码</td></tr><tr><td><code>-d</code></td><td>删除用户密码, 之后可以不使用密码进行登录</td></tr><tr><td><code>-e</code></td><td>强制用户在下次登录时修改密码</td></tr><tr><td><code>-S</code></td><td>显示用户密码是否被锁定, 以及密码所采用的加密算法</td></tr></tbody></table><h2 id="文件权限与归属"><a href="#文件权限与归属" class="headerlink" title="文件权限与归属"></a>文件权限与归属</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>在Linux系统中，每个文件都有归属的所有者和所属组，并且规定了文件的所有者、所属组以及其他人对文件所拥有的可读（r）、可写（w）、可执行（x）等权限.</p><center>文件和目录的权限</center><table><thead><tr><th>权限</th><th>文件</th><th>目录</th></tr></thead><tbody><tr><td>读取(r=4)</td><td><code>cat</code></td><td><code>ls</code></td></tr><tr><td>写入(w=2)</td><td><code>vim</code></td><td><code>touch/mv</code></td></tr><tr><td>执行(x=1)</td><td><code>./&lt;filename&gt;</code></td><td><code>cd</code></td></tr></tbody></table><p>对文件</p><ul><li>==可读==: 能够读取文件的实际内容</li><li>==可写==: 能够编辑, 新增, 修改, 删除文件的实际内容</li><li>==可执行==: 能够运行一个脚本程序</li></ul><p>对目录</p><ul><li>==可读==: 能够读取目录中的文件列表</li><li>==可写==: 能够在目录内增加, 删除, 重命名文件</li><li>==可执行==: 能够进入到该目录中</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>在下面列出的文件信息中, 依次分别是==文件类型, ugo的文件权限, 硬链接数量, 属主, 属组, 占用大小, 修改时间, 文件名==. </p><p><u>第一位字符表示文件类型</u>, 常见的文件类型见<a href="#table7-4">表7-4</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l</span>total 17556-rw-------. 1 root root     2610 Jun  5 14:14 anaconda-ks.cfg-rwxr--r--. 1 root root      136 Jun 13 19:50 example.sh-rw-r--r--. 1 root root      581 Jun  9 14:32 hardLink-rw-r--r--. 1 root root    34960 Jun  8 19:35 installed_software-rw-r--r--. 1 root root 17676281 Sep 22  2020 LinuxProbe.pdf-rwxr--r--. 1 root root       66 Jun 13 21:26 mkdir.sh-rw-------. 1 root root     2045 Jun  8 18:06 original-ks.cfg-rw-r--r--. 1 root root      134 Jun 13 21:30 pingtest.sh-rw-r--r--. 1 root root      233 Jun 13 15:49 psAux_grepBash-rw-r--r--. 1 root root   233354 Jun 10 18:57 <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通文件的范围最广泛, 例如纯文本信息, 配置文件, 日志文件, shell脚本等.</p><p>目录文件的范围也比较广泛.</p><p>块设备文件和字符设备文件一般是指硬件设备, 比如鼠标, 键盘, 光驱, 硬盘等.</p><center><a name="table7-4"></a>文件类型参数表</center><table><thead><tr><th>符号</th><th>文件类型</th></tr></thead><tbody><tr><td><code>-</code></td><td>普通文件</td></tr><tr><td><code>d</code></td><td>目录文件</td></tr><tr><td><code>l</code></td><td>链接文件</td></tr><tr><td><code>p</code></td><td>管道文件</td></tr><tr><td><code>b</code></td><td>块设备文件</td></tr><tr><td><code>c</code></td><td>字符文件</td></tr></tbody></table><h2 id="文件的特殊权限"><a href="#文件的特殊权限" class="headerlink" title="文件的特殊权限"></a>文件的特殊权限</h2><p>特殊权限是用来弥补一般权限不能实现的功能, 是对一般权限的一种补充, 通常和一般的文件权限rwx搭配使用.</p><h3 id="SUID权限"><a href="#SUID权限" class="headerlink" title="SUID权限"></a>SUID权限</h3><p>SUID权限是一种对二进制程序设置的特殊权限, 能够==让二进制程序的执行者临时拥有所有者的权限==. <u>SUID权限仅仅对拥有执行权限的二进制程序有效.</u></p><p>对一个应用程序, 在Linux系统中实际上就是一个命令, 例如<code>passwd</code>命令, 通过<code>ls -l /bin/passwd</code>查看其信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /bin/passwd</span>-rwsr-xr-x. 1 root root 27856 Apr  1  2020 /bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到拥有者的文件权限为<code>rws</code>, 其中的<code>s</code>即表示该程序具有SUID权限. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/02/03-cheng-xu-kai-ji-zi-qi-dong/"/>
      <url>/2023/06/02/03-cheng-xu-kai-ji-zi-qi-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux程序开机自启动-以zookeeper为例"><a href="#Linux程序开机自启动-以zookeeper为例" class="headerlink" title="Linux程序开机自启动(以zookeeper为例)"></a>Linux程序开机自启动(以zookeeper为例)</h1><ol><li><p>在<strong>/etc/rc.d/init.d</strong> 目录下创建脚本, 例如 <strong>zookeeper.sh</strong>, 内容如下</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bash#chkconfig: 2345 10 90#description: service zookeeper#process name:zookeeper#环境变量加载source /etc/profileexport JAVA_HOME=/opt/module/jdk1.8.0_341export ZOOKEEPER_HOME=/opt/module/zookeeper-3.5.7case "$1" in    start) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh start;;    stop) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh stop;;    status) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh status;;    restart) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh restart;;    *) echo "require start|start-foreground|stop|status|restart|print-cmd";;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>添加到开机自启动服务(关键)</p><pre class="line-numbers language-sh"><code class="language-sh"># 上面相当于创建了一个zookeeper.sh脚本, 添加到开机自启动服务相当于调用zookeeper.sh start命令chkconfig --add zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>查看开机自启动服务</p><pre class="line-numbers language-sh"><code class="language-sh">chkconfig --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103165936613.png" alt="image-20221103165936613"></p></li><li><p>使用 <code>systemctl start zookeeper</code> 命令来启动服务, 或者使用<code>systemctl status zookeeper</code>命令来查看服务运行状态</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/02/linux-10-pei-zhi-ruan-jian-cang-ku/"/>
      <url>/2023/06/02/linux-10-pei-zhi-ruan-jian-cang-ku/</url>
      
        <content type="html"><![CDATA[<p>操作步骤</p><ol><li><p>进入<code>/etc/yum.repos.d</code>目录中（因为该目录存放着软件仓库的配置文件）</p></li><li><p>创建一个后缀为<code>.repo</code>的配置文件, 例如<code>yumCentos7.repo</code></p></li><li><p><code>yumCentos7.repo</code>配置文件的各个配置项如下</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># CentOS-Base.repo</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The mirror system uses the connecting IP address of the client and the</span><span class="token comment" spellcheck="true"># update status of each mirror to pick mirrors that are updated to and</span><span class="token comment" spellcheck="true"># geographically close to the client.  You should use this for CentOS updates</span><span class="token comment" spellcheck="true"># unless you are manually picking other mirrors.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If the mirrorlist= does not work for you, as a fall back you can try the </span><span class="token comment" spellcheck="true"># remarked out baseurl= line instead.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span>[base]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Base - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/os/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#released updates </span>[updates]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Updates - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#additional packages that may be useful</span>[extras]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Extras - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#additional packages that extend functionality of existing packages</span>[centosplus]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Plus - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#contrib - packages by Centos Users</span>[contrib]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Contrib - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/contrib/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>按配置参数中所填写的仓库位置挂载光盘, 并把光盘挂载信息写入到<code>/etc/fstab</code>文件中</p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/06/02/linux-03-shell-jiao-ben/"/>
      <url>/2023/06/02/linux-03-shell-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><p>脚本以<code>#!/bin/bash</code>开头</p><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h2><ul><li><p>直接使用文件名执行: 文件需要执行权限</p></li><li><p>以<code>bash xxx.sh</code>来执行, 本质上是bash解析器去执行, 文件作为一个输入, 因此可以不需要执行权限</p></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>系统变量</p><p>自定义变量</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 定义一个变量username, 注意不能有多余的空格</span>username<span class="token operator">=</span>ROOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115190919833.png" alt="image-20221115190919833"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># bash中变量默认类型都是字符串</span>x<span class="token operator">=</span>1+1<span class="token keyword">echo</span> <span class="token variable">$x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115191154660.png" alt="image-20221115191154660"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将变量提升为全局变量, 使得其他的shell程序可以使用</span><span class="token function">export</span> <span class="token operator">&lt;</span>变量名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><ul><li><code>$n</code>: 表示第 n 个参数, 其中 <code>$0</code> 表示文件名</li><li><code>$#</code>: 获取所有的输入参数的个数, 即 n 的值</li><li><code>$*</code>: 获取所有的输入参数, 将输入参数看作是一个整体(本质上: 将空格看作是参数的一个字符)</li><li><code>$@</code>: 获取所有的输入参数, 把每个参数区分对待</li><li><code>$?</code>: 判断上一条命令是否正确执行, <ul><li>如果返回值为0, 则说明上一条命令执行成功</li><li>返回值非0, 则说明上一条命令执行失败</li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p><code>expr &lt;表达式&gt;</code> </p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115192940200.png" alt="image-20221115192940200"></p></li><li><p><code>$[&lt;表达式&gt;]</code>(推荐)</p></li></ul><p><strong>执行表达式 <code>(3 + 2)  * 4</code> 的案例</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115193228674.png" alt="image-20221115193228674"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115193534053.png" alt="image-20221115193534053"></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><code>[ &lt;条件判断&gt; ]</code>(注意前后需要方括号的前后需要添加空格)</p><ul><li><p>字符串比较</p><ul><li><code>-lt</code>: 小于</li><li><code>-le</code>: 小于等于</li><li><code>-gt</code>: 大于</li><li><code>-ge</code>: 大于等于</li><li><code>-eq</code>: 等于</li><li><code>-ne</code>: 不等于</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115205901218.png" alt="image-20221115205901218"></p></li><li><p>按照文件权限进行判断</p><ul><li><code>-r</code>: 有读权限</li><li><code>-w</code>: 写权限</li><li><code>-x</code>: 执行权限</li></ul></li><li><p>按照文件类型进行判断</p><ul><li><code>-e</code>: 文件存在</li><li><code>-f</code>: 文件存在, 且是一个普通文件</li><li><code>-d</code>: 文件存在, 且是一个目录文件</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115210442059.png" alt="image-20221115210442059"></p></li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if分支"><a href="#if分支" class="headerlink" title="if分支"></a>if分支</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>条件判断表达式<span class="token operator">></span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># if分支</span><span class="token keyword">elif</span>    <span class="token comment" spellcheck="true"># else分支</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">case</span> <span class="token operator">&lt;</span>变量引用<span class="token operator">></span> <span class="token keyword">in</span>    <span class="token operator">&lt;</span>情况一<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分支一, 必须要加")"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>情况二<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分支二</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 默认分支, 相当于default</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span> <span class="token operator">&lt;</span>初始值<span class="token operator">></span><span class="token punctuation">;</span>循环控制条件<span class="token punctuation">;</span>变量变化 <span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token comment" spellcheck="true"># 程序主体</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 计算1到100的累和</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>sum<span class="token operator">=</span>0<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token comment" spellcheck="true"># 不支持+=的方式, 其中$[]表示运算表达式</span>    sum<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span> + <span class="token variable">$i</span><span class="token punctuation">]</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 打印所有的输入参数 (比较 $* 和 $@)</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"==========================分隔符测试======================="</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115213545543.png" alt="image-20221115213545543"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>sum<span class="token operator">=</span>0i<span class="token operator">=</span>0<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 100 <span class="token punctuation">]</span><span class="token keyword">do</span>    sum<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span> + <span class="token variable">$i</span><span class="token punctuation">]</span>    i<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span> + 1<span class="token punctuation">]</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><p>相当于读取一个输入变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>second<span class="token operator">=</span>7<span class="token function">read</span> -t <span class="token variable">$second</span> -p <span class="token string">"提示信息: 请在 <span class="token variable">$second</span> 秒内输入 name 的值. "</span> name<span class="token keyword">echo</span> <span class="token string">"您输入的 name 的值为: <span class="token variable">$name</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取最后一个"/"后面的字符串</span><span class="token function">basename</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span><span class="token comment" spellcheck="true"># 获取最后一个"/"前面的字符串</span><span class="token function">dirname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 获取当前文件夹所在的 basename 和 dirname</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 反引号表示其中的字符串当作bash命令进行执行</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">dirname</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">basename</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><blockquote><p>函数不可以写形参, 只能通过 <code>$1</code>, <code>$2</code> 这种形式来获取传入函数的值</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 注意: 函数不能写形参列表, 因此()内部必须是空, 甚至也可以不写()</span><span class="token keyword">function</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 函数主体, 可以有返回值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 计算两个输入值的和</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 定义add()函数</span><span class="token keyword">function</span> add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 传入两个值, 将其相加</span>    result<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$1</span> + <span class="token variable">$2</span><span class="token punctuation">]</span>    <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 准备工作, 读取数据</span><span class="token function">read</span> -p <span class="token string">"请输入x的值: "</span> x<span class="token function">read</span> -p <span class="token string">"请输入y的值: "</span> y<span class="token comment" spellcheck="true"># 调用add()函数</span>add <span class="token variable">$x</span> <span class="token variable">$y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shell工具-重点"><a href="#shell工具-重点" class="headerlink" title="shell工具 (重点)"></a>shell工具 (重点)</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p><code>cut [选项参数] &lt;文件路径&gt;</code></p><ul><li><p><code>-f</code>: 指定提取第几列</p><ul><li><code>-f 3</code>: 表示获取第3列</li><li><code>-f 3-</code>: 表示获取第3列及其之后的数据的原始结果</li><li><code>-f -3</code>: 表示获取第3列及其之前的数据的原始结果</li><li><code>-f m-n</code>: 表示获取从第m列到第n列的数据的原始结果</li></ul></li><li><p><code>-d</code>: 指定分隔符, 默认分隔符是制表符</p></li></ul><blockquote><p>注意cut并不能使用正则表达式的功能, 只能生硬的格式匹配</p><p><strong>可以和grep搭配使用, 先进行一些数据的过滤, 然后在进行切分</strong> </p></blockquote><h3 id="sed-文件处理工具"><a href="#sed-文件处理工具" class="headerlink" title="sed (文件处理工具)"></a>sed (文件处理工具)</h3><p>按行处理文件, 并将处理结果发送到控制台上, 源文件的内容默认并不会发生改变, 除非将输出结果重定向到源文件中</p><p><strong>案例应用</strong></p><ul><li><p>将“hello world”插入到指定文件的第 2 行下面</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 2: 表示第2行</span><span class="token comment" spellcheck="true"># a: 表示插入模式</span><span class="token function">sed</span> <span class="token string">"2a hello world"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115224708586.png" alt="image-20221115224708586"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用 -i 选项可以将输出流重定向到源文件中, 因此控制台不会产生输出, 并且源文件发生修改</span><span class="token function">sed</span> -i <span class="token string">"2a hello world"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115224806343.png" alt="image-20221115224806343"></p></li><li><p>删除指定文件中包含“hello”的行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># /hello/: 表示"hello"字符串, 注意用两个斜杠包围起指定的字符串</span><span class="token comment" spellcheck="true"># d: 表示删除模式</span><span class="token function">sed</span> <span class="token string">"/hello/d"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115225519505.png" alt="image-20221115225519505"></p></li><li><p>替换指定文件中的“2”为 “7”</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># s: 表示替换模式</span><span class="token comment" spellcheck="true"># g: 全局替换, 默认情况下只替换第一次出现的</span><span class="token function">sed</span> <span class="token string">"s/2/7/"</span> data.txt<span class="token function">sed</span> <span class="token string">"s/2/7/g"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115225627374.png" alt="image-20221115225627374"></p></li></ul><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>格式: <code>awk [选项参数] &#39;&lt;命令1&gt; &lt;命令2&gt; &lt;...&gt;&#39; &lt;文件名&gt;</code></p><ul><li><p><code>-F</code>: 指定输入文件的分隔符, 默认是空格</p></li><li><p><code>-v</code>: 可以定义一个变量并为其赋值, 之后在动作中可以使用该变量, 例如<code>-v i=1</code>定义了一个变量i, 其值为1</p><blockquote><p>内置变量, 可以直接在动作中使用</p><ul><li>FILENAME: 文件名</li><li>NR: 已读的记录数(模式匹配时光标所处的行号)</li><li>NF: 浏览记录的域的个数(即切割后, 列的个数)</li></ul></blockquote></li><li><p><code>&lt;命令&gt;</code>: <strong>命令由模式匹配+动作组成</strong>, 模式匹配中可以使用正则表达式</p></li></ul><p><strong>案例应用</strong></p><ul><li><p>搜索 passwd 文件中以root开头的所有行, 并输出该行的第1列和第7列</p><ol><li><p>原始文件</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117230936698.png" alt="image-20221117230936698"></p></li><li><p>代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从原始文件可以看作, 使用":"进行分隔</span><span class="token comment" spellcheck="true"># 1. 使用 -F : 来指定使用":"进行分割</span><span class="token comment" spellcheck="true"># 2. /^root/ 表示模式匹配部分, 两个"/"之间的内容是正则表达式, ^root表示以root开头</span><span class="token comment" spellcheck="true"># 3. {} 中包含着要执行的动作, $1和$7分别表示分割后的第1列和第7列, </span><span class="token comment" spellcheck="true"># 4. 特别原始的字符串拼接 $1","$7 = $1 + "," + $7</span><span class="token comment" spellcheck="true"># 5. 只有匹配了^root的行, 才会执行后面的{}中的动作</span><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'/^root/{print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><ol start="3"><li><p>效果展示</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117231508062.png" alt="image-20221117231508062"></p></li></ol><ul><li><p>只显示passwd文件的第1列和第7列, 以逗号分隔, 并且在所有行的前面添加一个列名, 在所有行的末尾新添加一行数据</p><blockquote><p>多个需求的应用展示</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'BEGIN{print "user,filepath"} END{print "hello,world"} {print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117232901864.png" alt="image-20221117232901864"></p></li><li><p>读取空行所在的全部行号</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117234009845.png" alt="image-20221117234009845"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 正则表达式^$表示空行</span><span class="token comment" spellcheck="true"># NR表示当前读取到的光标的位置, 用来输出行号</span><span class="token function">awk</span> <span class="token string">'/^$/{print NR}'</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117234059968.png" alt="image-20221117234059968"></p></li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>排序不改变源文件, 除非重定向</p><ul><li><code>-n</code>: 按数值大小进行排序</li><li><code>-r</code>: 逆序排序</li><li><code>-t</code>: 设置排序时所用的分隔符</li><li><code>-k</code>: 指定按哪一列进行排序</li></ul><p><strong>案例应用</strong></p><ol><li><p>数据文件</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117235129641.png" alt="image-20221117235129641"></p></li><li><p>按<code>:</code>进行分隔, 按切分后的第3列进行逆序排序</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> -t <span class="token keyword">:</span> -n -r -k 3 sort.data<span class="token comment" spellcheck="true"># 没有带输入参数的选项可以合并, 因此可以简写为</span><span class="token function">sort</span> -t <span class="token keyword">:</span> -nrk 3 sort.data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117235358379.png" alt="image-20221117235358379"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/30/leetcode-tu-02-bian-li/"/>
      <url>/2023/05/30/leetcode-tu-02-bian-li/</url>
      
        <content type="html"><![CDATA[<h1 id="对-int-visited-的讨论"><a href="#对-int-visited-的讨论" class="headerlink" title="对 int[] visited 的讨论"></a>对 int[] visited 的讨论</h1><h2 id="对Node节点的定义"><a href="#对Node节点的定义" class="headerlink" title="对Node节点的定义"></a>对Node节点的定义</h2><p>在一般情况下，图中的节点通过 id 字段来进行设置。例如，题目中给定图中节点编号为 0 到 n-1，此时可以认为有如下的一个结点类Node</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略构造函数...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是，在用字符表示的矩阵图中，一般有 x 和 y 两个下标，上、下、左、右四种移动方式，此时可以认为结点类Node定义如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外，在 <a href="https://leetcode.cn/problems/shortest-path-to-get-all-keys/" target="_blank" rel="noopener">LeetCode 864</a> 中，出现这样的情况，某个位置点并不是只能访问一次，即可以有条件的重复访问（无论什么情况下，无条件的重复访问必定陷入死循环）。因此需要分析出，在什么情况下允许重复访问是解决问题的开始。这题是在获取到新的锁之后。</p><p>对于可重复访问节点的问题，我们需要在基本的节点定义下为节点添加一些额外的信息。基本的节点定义中只包含位置信息，例如 x 和 y；对于可重复访问问题，仅仅只考虑位置关系就会陷入死循环。</p><p>假设一个场景，有份公用的共享资源（假设为节点[x,y]），某杠精先占用该资源一段时间（访问[x,y]节点），然后到期后又再次占用该资源（再次访问[x,y]节点），有人对他这种长期占用的行为不满，但是杠精可以有理有据地反驳：这个资源允许我重复访问啊！</p><p>因此，规则制定者为了完善可重复访问这一规则，例如：上一次访问的人不可以重复访问。如果为了实现这一效果，就需要在节点的定义中添加一个额外字段：上一次访问人。当然，随着规则的复杂化，这个额外字段可以有多个。<strong>这些额外字段和位置信息[x,y]无关，统称为状态信息。</strong></p><p><strong>总得来说，可重复访问要避免陷入死循环，所以必定是有条件的可重复访问。所以，可重复访问的完整表述应该是：在不同状态信息下，可以重复访问相同的位置；而在相同的状态信息下，不可以重复访问相同的位置。</strong>只有引入状态信息，才能说明今天的我Node n1和昨天的我不是同一个我Node n2，即 <code>n1.equals(n2) === false</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> state0<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> state1<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token comment" spellcheck="true">//也可以直接定义成public int[] states;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对-int-visited-的定义"><a href="#对-int-visited-的定义" class="headerlink" title="对 int[] visited 的定义"></a>对 int[] visited 的定义</h2><p>visited 访问数组需要跟随 Node 节点的定义。visited 数组的最泛化的形式应该是 <code>Map&lt;Node, Object&gt; visited</code>，如果对于 visited 中保存的值不关心，那么可以退化成 <code>Set&lt;Node&gt; visited</code>，这和 <code>boolean[] visited</code> 相对应。</p><p>而 <code>Map&lt;Node, Object&gt; visited</code> 究竟是 <code>int[] visited</code> 还是 <code>int[][] visited</code> 又或者是 <code>int[][][] visited</code> 则完全取决于包含状态信息在内的 Node 节点如何定义。而map中保存的object值和数组中保存的值对应，具体保存什么东西取决于具体问题。例如，限制每个节点的访问次数不能超过3次，那么visited应该保存节点的访问次数。</p><p>总结来说，visited 访问数组并不仅仅表示是否访问某个节点，广义来讲，<strong>其可以用来保存每一个状态结点的信息</strong>。</p><p>状态节点说明不仅仅是位置信息，t1时刻访问[x, y] 节点和 t2 时刻访问 [x, y] 节点，如果包含时间信息，<strong>那么[x,y,t1]和[x,y,t2]被认为是两个不同的状态节点</strong>。</p><p>要保存的节点信息取决于向visited中放入的是什么内容。放入true、false则代表是否访问过该节点；放入访问次数则代表访问该节点的次数；还可以放入一个自定义的类型对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/28/leetcode-shu-01-chong-jian-er-cha-shu/"/>
      <url>/2023/05/28/leetcode-shu-01-chong-jian-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<p>步骤:</p><ol><li><p>通过根节点在前序遍历中的索引<code>rootIndexAtPreorder</code>找出根节点的值<code>preorder[rootIndexAtPreorder]</code></p></li><li><p>借助前面生成的HashMap, 通过根节点的值反向找出根节点在中序序列inorder中的索引</p><p><code>rootIndexAtInorder = hashMap.get(preorder[rootIndexAtPreorder])</code> </p></li><li><p>通过根节点在中序序列中的索引值, 确定左子树和右子树的长度和边界</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        TreeNode leftBorder<span class="token punctuation">;</span>        TreeNode rightBorder<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">;</span>    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTreeBypreAndin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>preorder <span class="token operator">=</span> preorder<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//hashMap用来存储中序遍历的值与索引的映射</span>            hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//整棵树的根节点为preorder中的第root号元素,左子树</span>        <span class="token keyword">return</span> <span class="token function">recurByPreAndIn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param rootIndexAtPreorder         根节点在前序遍历的索引     * @param leftBorder                子树在中序遍历的左边界     * @param rightBorder               子树在中序遍历的右边界     * @return 返回回溯的根节点     */</span>    <span class="token keyword">private</span> TreeNode <span class="token function">recurByPreAndIn</span><span class="token punctuation">(</span><span class="token keyword">int</span> rootIndexAtPreorder<span class="token punctuation">,</span> <span class="token keyword">int</span> leftBorder<span class="token punctuation">,</span> <span class="token keyword">int</span> rightBorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//递归终止: 当leftBorder>rightBorder代表已经越过叶子节点,此时返回null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftBorder <span class="token operator">></span> rightBorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//建立根节点:preorder[rootIndexAtPreorder]表示根节点的值,root表示根节点在preorder数组中的序号</span>        TreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>rootIndexAtPreorder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//查找根节点在中序遍历数组inorder中的序号,所以在前面将根节点的值作为key,根节点在inorder中的索引作为value保存在hashMap中</span>        Integer rootIndexAtInorder <span class="token operator">=</span> hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>rootIndexAtPreorder<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//左子树递归;左递归中rootIndexAtPreorder表示根节点的左子节点,也就是左子树的根节点</span>        node<span class="token punctuation">.</span>leftBorder <span class="token operator">=</span> <span class="token function">recurByPreAndIn</span><span class="token punctuation">(</span>rootIndexAtPreorder <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> leftBorder<span class="token punctuation">,</span> rootIndexAtInorder <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//右子树递归; rootIndexAtPreorder + (rootIndexAtInorder - leftBorder)左子树长度 + 1</span>        node<span class="token punctuation">.</span>rightBorder <span class="token operator">=</span> <span class="token function">recurByPreAndIn</span><span class="token punctuation">(</span>rootIndexAtPreorder <span class="token operator">+</span> rootIndexAtInorder <span class="token operator">-</span> leftBorder <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rootIndexAtInorder <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightBorder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回溯返回根节点</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/28/leetcode-tu-01-jiao-ti-bfs/"/>
      <url>/2023/05/28/leetcode-tu-01-jiao-ti-bfs/</url>
      
        <content type="html"><![CDATA[<h1 id="相同含义的对象使用数组"><a href="#相同含义的对象使用数组" class="headerlink" title="相同含义的对象使用数组"></a>相同含义的对象使用数组</h1><p>暴力写法</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> redGraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> blueGraph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    redGraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blueGraph<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优雅写法</p><blockquote><p>  redGraph和blueGraph的作用完全相同，看作是数组的两个元素</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 错误写法, 这里只会new一次, 所以每个元素共用一个List,</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graphs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">:</span> graphs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> graphs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token punctuation">]</span> graph <span class="token operator">:</span> graphs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Arrays<span class="token punctuation">.</span><span class="token function">setAll</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> k<span class="token operator">-</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="队列中使用int-等数组类型作为泛型"><a href="#队列中使用int-等数组类型作为泛型" class="headerlink" title="队列中使用int[]等数组类型作为泛型"></a>队列中使用int[]等数组类型作为泛型</h1><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图遍历防止重复访问：需要在发现节点后立即进行标记。不能在等待真正处理该节点的时候才标记。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/27/bigdata-03-kafka-00-kuai-su-ru-men-an-li/"/>
      <url>/2023/05/27/bigdata-03-kafka-00-kuai-su-ru-men-an-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka命令行使用"><a href="#Kafka命令行使用" class="headerlink" title="Kafka命令行使用"></a>Kafka命令行使用</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注解版, 不可直接复制使用</span><span class="token comment" spellcheck="true"># 前台启动</span>kafka-server-start.sh \<span class="token comment" spellcheck="true"># 配置文件所在路径</span>/opt/module/kafka_2.13-3.3.1/config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 复制使用版本</span>kafka-server-start.sh \/opt/module/kafka_2.13-3.3.1/config/server.properties<span class="token comment" spellcheck="true"># 后台启动版本</span>kafka-server-start.sh \-daemon \/opt/module/kafka_2.13-3.3.1/config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Topic主题"><a href="#Topic主题" class="headerlink" title="Topic主题"></a>Topic主题</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="line-numbers language-shell"><code class="language-shell">kafka-topics.sh \# 创建topic--create \# 连接kafka broker的host和port--bootstrap-server hadoop001:9092 \# 设置分区数(相当于将一个主题拆分成多少个文件夹)--partitions 2 \# 设置副本数--replication-factor 2 \# 设置topic的名称为xtopic--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-topics.sh \--create \--bootstrap-server hadoop001:9092 \--partitions 2 \--replication-factor 2 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><blockquote><p>压力测试和使用的topic主题节点相关, 例如xtopic是2副本2分区, 所以压力测试相当于测试2副本2分区的集群性能.</p></blockquote><h4 id="生产者基准测试"><a href="#生产者基准测试" class="headerlink" title="生产者基准测试"></a>生产者基准测试</h4><pre class="line-numbers language-bash"><code class="language-bash">kafka-producer-perf-test.sh \<span class="token comment" spellcheck="true"># 测试使用的主题为xtopic</span>--topic xtopic \<span class="token comment" spellcheck="true"># 数量为5M</span>--num-records 5000000 \<span class="token comment" spellcheck="true"># 吞吐量为-1表示无限制</span>--throughput -1 \<span class="token comment" spellcheck="true"># 数据大小限制为1000B</span>--record-size 1000 \<span class="token comment" spellcheck="true"># 其他属性配置</span>--producer-props \    <span class="token comment" spellcheck="true"># kafka集群</span>bootstrap.servers<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092 \    <span class="token comment" spellcheck="true"># ack应答机制</span>acks<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-producer-perf-test.sh \--num-records 5000000 \--throughput -1 \--record-size 1000 \--producer-props \bootstrap.servers<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092 \acks<span class="token operator">=</span>1 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>2副本2分区的测试结果</p><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103175519629.png" alt="image-20221103175519629"></p></li><li><p>1副本1分区的测试结果</p><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103180841963.png" alt="image-20221103180841963"></p></li></ul><h4 id="消费者基准测试"><a href="#消费者基准测试" class="headerlink" title="消费者基准测试"></a>消费者基准测试</h4><pre class="line-numbers language-bash"><code class="language-bash">kafka-consumer-perf-test.sh \<span class="token comment" spellcheck="true"># 测试使用的主题为xtopic</span>--topic xtopic \<span class="token comment" spellcheck="true"># 每次拉取的数据量的大小: 1MB</span>--fetch-size 1048576 \<span class="token comment" spellcheck="true"># 要消费的数据量: 5M条</span>--messages 5000000 \<span class="token comment" spellcheck="true"># kafka集群</span>--broker-list<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-consumer-perf-test.sh \--topic xtopic \--fetch-size 1048576 \--messages 5000000 \--broker-list<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103175816558.png" alt="image-20221103175816558"></p><h3 id="查看分区和副本信息"><a href="#查看分区和副本信息" class="headerlink" title="查看分区和副本信息"></a>查看分区和副本信息</h3><pre class="line-numbers language-shell"><code class="language-shell">kafka-topics.sh \# 描述topic--describe \# 连接kafka集群--bootstrap-server hadoop001:9092 \# 设置查看的topic, 不设置代表查找全部--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-topics.sh \--describe \--bootstrap-server hadoop001:9092 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103024715228.png" alt="image-20221103024715228"></p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><pre class="line-numbers language-shell"><code class="language-shell">kafka-console-producer.sh \# 生产者从broker-list中查找topic所在的分区, 发送到这些partition分区的leader服务器--broker-list hadoop001:9092 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-console-producer.sh \--broker-list hadoop001:9092 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103084853648.png" alt="image-20221103084853648"></p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><ul><li><p>方式一: 不查看历史信息</p><pre class="line-numbers language-bash"><code class="language-bash">  kafka-console-consumer.sh \  <span class="token comment" spellcheck="true"># 从kafka集群中获取消息(bootstrap-server代表kafka集群)</span>  --bootstrap-server hadoop001:9092 \  --topic xtopic  <span class="token comment" spellcheck="true"># 指定消费者使用的配置文件, 可选项, 一般用于消费者</span>  --consumer.config /opt/module/kafka_2.13-3.3.1/config/consumer.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103085307742.png" alt="image-20221103085307742"></p></li><li><p>方式二: 查看历史信息（不要再进行压力测试之后查看……）</p><pre class="line-numbers language-bash"><code class="language-bash">  kafka-console-consumer.sh \  <span class="token comment" spellcheck="true"># 从kafka集群中获取消息(bootstrap-server代表kafka集群)</span>  --bootstrap-server hadoop001:9092 \  <span class="token comment" spellcheck="true"># 查看历史消息, 相当于查看未关注公众号前, 该公众号推送过的消息</span>  --from-beginning \  --topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">  kafka-console-consumer.sh \  --bootstrap-server hadoop001:9092 \  --from-beginning \  --topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103091008121.png" alt="image-20221103091008121"></p></li></ul><h2 id="数据实际保存位置"><a href="#数据实际保存位置" class="headerlink" title="数据实际保存位置"></a>数据实际保存位置</h2><p>由于目前还不清楚具体的分区规则, 因此分别查看 <strong>xtopic-0</strong> 和<strong>xtopic-1</strong> 这两个分区中的数据. 结果在 <strong>xtopic-1</strong> 中可以查看到</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103092637617.png" alt="image-20221103092637617"></p><h2 id="查看zookeeper中保存的信息"><a href="#查看zookeeper中保存的信息" class="headerlink" title="查看zookeeper中保存的信息"></a>查看zookeeper中保存的信息</h2><ol><li><p>通过 <code>zkCli.sh</code>命令 来启动zookeeper客户端</p></li><li><p>查看 <strong>brokers</strong> 节点信息</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103094039135.png" alt="image-20221103094039135"></p></li><li><p>查看 <strong>topics</strong> 节点信息</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>02-安装Kafka</title>
      <link href="/2023/05/27/bigdata-03-kafka-02-an-zhuang-kafka/"/>
      <url>/2023/05/27/bigdata-03-kafka-02-an-zhuang-kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="单机测试"><a href="#单机测试" class="headerlink" title="单机测试"></a>单机测试</h1><p>创建主题</p><pre class="line-numbers language-sh"><code class="language-sh"># 主题名为testkafka-topics.sh \--create \--zookeeper hadoop001:2181 \--replication-factory 1 \--partitions 1 \--topic test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>验证主题</p><pre class="line-numbers language-sh"><code class="language-sh">kafka-topics.sh \--zookeeper hadoop001:2181 \--describe \--topic test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改主题的分区</p><pre class="line-numbers language-sh"><code class="language-sh">kafka-topics.sh \--zookeeper hadoop001:2181 \-alter \--partition 2 \--topic test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发布消息</p><pre class="line-numbers language-sh"><code class="language-sh">kafka-console-producer.sh \--broker-list hadoop001:9092 \--topic test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读取消息</p><pre class="line-numbers language-sh"><code class="language-sh">kafka-console-consumer.sh \--zookeeper hadoop001:2181 \--topic test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>broker.id</code></td><td>kafka 服务器称为 broker<br>唯一即可</td></tr><tr><td><code>port</code></td><td></td></tr><tr><td><code>zookeeper.connect</code></td><td>hostname:port/path<br>hostname：Zookeeper服务器的ip地址<br>port：Zookeeper服务器提供给客户端的连接端口<br>/path：可选的Zookeeper路径，作为Kafka集群的chroot环境，即在Zookeeper中创建一个结点，<strong>推荐使用</strong></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="安装-Kafka-集群"><a href="#安装-Kafka-集群" class="headerlink" title="安装 Kafka 集群"></a>安装 Kafka 集群</h1><p>集群最大的好处是可以跨服务器进行负载均衡，其次可以使用复制功能来避免因单点故障造成的数据丢失。</p><h2 id="需要多少台服务器"><a href="#需要多少台服务器" class="headerlink" title="需要多少台服务器"></a>需要多少台服务器</h2><p>决定因素：</p><ul><li>需要保存多少数据，例如 10 TB</li><li>单台服务器能够保存多少数据，例如 2 TB</li><li>复制系数是多少，至少为 2，相当于 10 TB $\times$ 2</li><li>集群处理请求的能力</li></ul><h2 id="构建集群"><a href="#构建集群" class="headerlink" title="构建集群"></a>构建集群</h2><p>要把一个 broker 加入到 Kafka 集群中，只需要修改两个配置参数：</p><ol><li>所有的 broker 都配置相同的 <code>zookeeper.connect</code></li><li>每个 broker.id 是唯一的、互不相同</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> BigData </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-Kafka生产者</title>
      <link href="/2023/05/27/bigdata-03-kafka-03-kafka-sheng-chan-zhe/"/>
      <url>/2023/05/27/bigdata-03-kafka-03-kafka-sheng-chan-zhe/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka生产者"><a href="#Kafka生产者" class="headerlink" title="Kafka生产者"></a>Kafka生产者</h1><p>案例场景，信用卡事务处理系统：</p><ol><li>有一个客户端应用程序，可能是一个在线商店（淘宝）</li><li>每当有支付行为发生时，负责将事务发送到Kafka上</li><li>另一个应用程序（支付宝）根据规则引擎检查这个事务，决定响应批准还是拒绝，并将响应消息写回Kafka，然后发送给发起事务的在线商店</li><li>第三个应用程序从Kafka上读取事务和审核状态，把消息保存到数据库，随后分析师对这些结果进行分析，期望借此改进规则引擎</li></ol><p>学习任务：</p><ul><li>如何创建KafkaProducer和ProducerRecords对象</li><li>如何将记录发送给Kafka</li><li>如何处理从Kafka返回的错误</li><li>介绍用于控制生产者行为的重要配置选项</li><li>如何使用不同的分区方法和序列化器，如何自定义分区器和序列化器</li></ul><blockquote><p>  第三方客户端</p><p>  除了内置的客户端外，Kafka还提供了二进制连接协议。二进制连接协议的意思是，我们直接向Kafka网络端口发送适当的字节序列，就可以实现从Kafka从读取或写入消息。<strong>根据二进制连接协议，其它各种语言都可以实现客户端，使得Kafka不仅仅局限在Java里面使用</strong>。</p></blockquote><h2 id="生产者概述"><a href="#生产者概述" class="headerlink" title="生产者概述"></a>生产者概述</h2><p>应用程序向Kafka中写入消息的应用场景：</p><ul><li>记录用户的活动（用于审计和分析）</li><li>记录度量指标</li><li>保存日志消息</li><li>与其它应用程序进行异步通信</li><li>缓冲即将写入到数据库的数据</li></ul><p>多样的使用场景意味着多样的需求：</p><ul><li>是否每个消息都很重要？是否允许一小部分消息的丢失</li><li>偶尔出现重复消息是否可以接受？</li><li>是否有严格的延迟和吞吐量的要求？</li></ul><p>信用卡事务处理系统是一种应用场景：消息丢失和消息重复是不允许的，可以接受的延迟为500ms，对吞吐量要求较高（100w/s）</p><p>保存网站点击信息是另一种应用场景：允许丢失少量的消息或出现少量的消息重复，延迟可以高一些，只要不影响用体验就行。</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230529171315677.png" alt="生产者组件图" style="zoom: 33%;"><p>流程：</p><ol><li><p>先创建一个 ProducerRecord 对象，该对象包含目标主题topic和要发送的内容value，<strong>还可以指定键和分区</strong></p><blockquote><p>  思考：如何理解可以指定键和分区？</p><p>  在默认情况下，默认的分区器（分区策略）是对键的hash值取模。这不就意味着默认情况下一定会有键key？那是不是意味着键在不指定的情况下会自动生成？那生成策略又是什么呢？</p><p>  答：对键的hash值取模是默认的分区器的分区策略，但是这在对键不为null的情况下才成立。当键为null时，会随机分配。Kafka使用自己的hash散列算法，优点是Java版本升级不会对其造成影响。降低耦合度</p></blockquote></li><li><p>在发送 ProducerRecord 对象时，需要通过序列化器将key和value进行序列化，转为 byte[] 后再在网络上传输。</p><blockquote><p>  主题和分区信息用于告诉生产者（Kafka客户端）本地的发送线程发送到哪个目的地，没有必要在网络上传输，也就没有必要序列化</p></blockquote></li><li><p>接着 byte[] 传给分区器，分区器根据 key 来计算一个分区。注意，在指定了分区的情况下，分区器不会进行任何操作，即指定的分区优先。</p></li><li><p>确定好主题topic和分区partition之后，ProducerRecord 对象会被添加到一个批次里（批次本质上是列表），再通过一个独立的线程将一批数据发送到相应的服务器broker中</p></li><li><p>服务器broker收到消息后，返回一个响应。</p><ul><li>如果消息写入成功，就返回一个RecordMetaData对象，其中包含主题和分区信息，以及记录在分区里的偏移量</li><li>如果消息写入失败，就会返回一个错误。生产者在收到错误信息后会通过重试机制尝试一定次数，如果还是失败则最终返回错误信息。</li></ul><blockquote><p>  服务器收到的是批次，也就是多条记录（消息），那这里是针对一条消息就返回一个响应吗？例如1个批次中存在10条记录，那么会返回10条响应？如果是的话，应该也是也批次的形式返回的吧！是否可能在同一批次中，出现1,3记录写入成功，但是2记录写入失败的情况？这种情况应该可能出现吧。</p></blockquote></li></ol><h2 id="Kafka生产者的创建和配置项"><a href="#Kafka生产者的创建和配置项" class="headerlink" title="Kafka生产者的创建和配置项"></a>Kafka生产者的创建和配置项</h2><center>表：生产者常用配置项</center><table><thead><tr><th>必要字段</th><th>可选字段</th><th>作用</th></tr></thead><tbody><tr><td><code>bootstrap.servers</code></td><td></td><td>指定broker的地址，格式为<code>host:port</code><br>不需要包含<strong>Kafka集群</strong>中所有的broker地址，Kafka集群内部会维护，找到一台broker就相当于找打全部的broker<br>出于故障容错的考虑，<strong>建议</strong>至少提供两个broker的信息</td></tr><tr><td><code>key.serializer</code></td><td></td><td>将消息的key对象序列化成byte[]，Kafka默认提供了ByteArraySerializer、StringSerializer、IntegerSerializer<br>如果使用了自定义类型，那么就需要实现一个自定义的序列化器</td></tr><tr><td><code>value.serializer</code></td><td></td><td>对消息的value对象进行序列化</td></tr><tr><td></td><td><code>acks</code></td><td></td></tr><tr><td></td><td><code>buffer.memory</code></td><td></td></tr><tr><td></td><td><code>compression.type</code></td><td></td></tr><tr><td></td><td><code>retries</code></td><td></td></tr><tr><td></td><td><code>batch.size</code></td><td></td></tr><tr><td></td><td><code>linger.ms</code></td><td></td></tr><tr><td></td><td><code>client.id</code></td><td></td></tr><tr><td></td><td><code>max.in.flight.requests.per.connection</code></td><td></td></tr><tr><td></td><td><code>timeout.ms</code></td><td></td></tr><tr><td></td><td><code>request.timeout.ms</code></td><td></td></tr><tr><td></td><td><code>metadata.fetch.timeout.ms</code></td><td></td></tr><tr><td></td><td><code>max.blocks.ms</code></td><td></td></tr><tr><td></td><td><code>max.request.size</code></td><td></td></tr><tr><td></td><td><code>receive.buffer.bytes</code></td><td></td></tr><tr><td></td><td><code>send.buffer.bytes</code></td><td></td></tr></tbody></table><p>提高吞吐量：</p><ul><li>增加单个生产者内的线程数量（多线程）</li><li>增加生产者数量（多生产者）</li></ul><h1 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h1><p>消息的发送方式：</p><ul><li><p>发送并忘记fire-and-forget</p><p>如果不关心发送结果，可以使用该方式。例如，记录不太重要的应用程序日志</p></li><li><p>同步发送</p></li><li><p>异步发送</p></li></ul><p>生产者（客户端）可能发生的异常：</p><ul><li>序列化消息失败SerializationException</li><li>缓冲区已满BufferExhaustedException或TimeoutException</li><li>发送线程被中断InterruptException</li></ul><h2 id="同步发送消息"><a href="#同步发送消息" class="headerlink" title="同步发送消息"></a>同步发送消息</h2><p>TODO</p><h2 id="异步发送消息"><a href="#异步发送消息" class="headerlink" title="异步发送消息"></a>异步发送消息</h2><p>TODO</p><h1 id="自定义序列化器"><a href="#自定义序列化器" class="headerlink" title="自定义序列化器"></a>自定义序列化器</h1><p>如果发送到Kafka的对象不是简单的字符串或整数，那么可以使用通用的序列化框架来创建记录（ProducerRecord），例如使用Avro、Thrift、Protobuf等。为了更好的理解这些序列化框架，需要学习如何自定义一个序列化器。</p><p>序列化器的本质上还是如何将一个对象变为字节数组，并且不仅要将数据保存下来，还需要将数据的长度保存下来。格式约定死的，比如putInt()则对应getInt()，这是由程序员手工对应上的。</p><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><p>默认分区器的<strong>缺点</strong>：同一个key总是被映射到同一个分区partition上，所以在进行映射时，会使用topic包括不可用分区在内的所有分区。这意味着，当key映射到不可用分区时，就会发生错误。</p><p>使用类似默认分区器这种通过键hash取模来映射分区的策略时，需要在创建主题的时候就把分区规划好，并且<strong>永远不要增加新分区</strong>（缺点造成的问题的解决方案）。</p><h2 id="分区写入策略"><a href="#分区写入策略" class="headerlink" title="分区写入策略"></a>分区写入策略</h2><ul><li><p>轮询分区策略</p><p>当消息的 key 为 null 时，会使用轮询分区策略，均匀分配</p></li><li><p>随机分区策略</p></li><li><p>按 key 分区策略</p><p>当 消息的 key 不为 null 时，此时作为默认分区策略</p></li><li><p>自定义分区策略</p></li></ul><h2 id="乱序问题"><a href="#乱序问题" class="headerlink" title="乱序问题"></a>乱序问题</h2><p>一个分区内部的数据是有序的，但是主题内部的数据是无序的。</p><p>以一个字符串为例，可以认为每个分区就对应了一个子序列。因此一个字符串就被拆分成多个不相交的子序列，子序列是有序的，但是序列间是无序的。</p><p>Kafka 解决乱序问题只能将数据导入一个分区中，但是这就失去了 Kafka 分布式的意义。</p><h1 id="消息不丢失机制"><a href="#消息不丢失机制" class="headerlink" title="消息不丢失机制"></a>消息不丢失机制</h1><h2 id="生产者数据不丢失"><a href="#生产者数据不丢失" class="headerlink" title="生产者数据不丢失"></a>生产者数据不丢失</h2><p>ACK机制：</p><ul><li>当ACK设置为-1时，分区的所有副本都写入成功后才响应生产者。能保证消息一定不丢失，换句话说，如果有任何一个分区副本写入失败，那么生产者就会发现写入失败，进而可以通过重试机制来重新发送消息。效率低，适用于对消息安全性要求严格的场景</li><li>当ACK设置为1时，分区的leader写入成功后就响应生产者。如果在leader写入成功后，但是在follower拉取之前，leader所在的broker宕机，那么就会产生消息丢失的问题。其它follower没有最新的数据副本，但是生产者得到写入成功的响应。</li><li>当ACK设置为0时，生产者不关心消息是否写入成功。效率高，适用于那些不重要数据的保存，例如用户点击操作日志，丢失一部分没有影响。</li></ul><p>重试机制：</p><p>同步发送时，如果没有得到leader的响应，那么生产者就不会发送下一条消息</p><p>异步发送时，回调函数能够得到一个异常，如果出现异常，那么重新发送一次。</p><h2 id="消费者数据不丢失"><a href="#消费者数据不丢失" class="headerlink" title="消费者数据不丢失"></a>消费者数据不丢失</h2><p>假设消费者在t=0时刻从Kafka中拉取数据，并开始业务的处理逻辑，但是该处理流程耗时较长，还未处理完成时触发Kafka的offset自动提交机制，假设在t=5时刻提交offset（即offset向后偏移，消息被消费），但是该consumer在提交完成后恰好宕机，在该consumer重连之后试图重新开始该业务逻辑，但是此时数据丢失。</p><p>消息传递：</p><p>At-most once：至多一次</p><p>At-least once：至少一次</p><p>Exactly-Once：仅有一次</p><p>消息丢失：offset提交成功，但是consumer的业务处理流程失败</p><p>重复消费：consumer的业务处理流程成功，但是offset提交失败</p><p>仅有一次：将consumer的业务处理流程和offset提交放入到一个事务中，要么都成功，要么都失败。疑问：如果offset提交到MySQL中，但是业务处理流程和MySQL无关，那么又如何实现呢？如果业务处理流程的系统不支持事务机制，该如何实现呢？</p><h1 id="数据积压"><a href="#数据积压" class="headerlink" title="数据积压"></a>数据积压</h1><p>消费者的消费能力跟不上生产者的生产能力，导致offset &lt; end  </p>]]></content>
      
      
      
        <tags>
            
            <tag> BigData </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-认识Kafka</title>
      <link href="/2023/05/27/bigdata-03-kafka-01-ren-shi-kafka/"/>
      <url>/2023/05/27/bigdata-03-kafka-01-ren-shi-kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="认识Kafka"><a href="#认识Kafka" class="headerlink" title="认识Kafka"></a>认识Kafka</h1><p>每个应用程序都会产生数据：<strong>日志消息、度量指标、用户活动记录、响应消息</strong>等。数据为企业发展提供动力，从数据中获取信息，对它们进行分析处理，然后生成更多的数据。</p><p>我们把数据从源头移动到可以对它们进行分析处理的地方，然后把得到的结果应用到实际场景中，这样才能确切地知道这些数据要告诉我们什么。例如，我们在网站上浏览的商品、看过的视频，这些浏览信息被推荐系统转化成商品推荐，并在稍后展示给我们。</p><p>虽然有很多数据库和系统可以用来存储数据，但是缺少一个可以帮助处理持续数据流的组件。Kafka是一个流平台：在这个平台上，可以发布和订阅数据流，并把它们保存起来进行处理。</p><p>Kafka经常会和其它技术对比，例如：消息队列（MQ）、大数据系统（Hadoop）、数据集成、ETL工具。</p><h2 id="Kafka和其它技术的对比"><a href="#Kafka和其它技术的对比" class="headerlink" title="Kafka和其它技术的对比"></a>Kafka和其它技术的对比</h2><h3 id="Kafka和MQ"><a href="#Kafka和MQ" class="headerlink" title="Kafka和MQ"></a>Kafka和MQ</h3><p>Kafka允许发布和订阅消息，从这点来看，它类似消息队列。但是下列差异使它不同于消息队列：</p><ul><li>Kafka作为一个现代的分布式系统，以集群的方式运行，可以自由伸缩，可以处理整个公司所有的数据流</li><li>Kafka可以按照要求存储数据，保存多久都可以</li><li>Kafka的流式处理能力将数据处理的层次提升到新的高度，让你只用很少的代码就能够动态地处理派生流和数据集</li></ul><h3 id="Kafka和Hadoop"><a href="#Kafka和Hadoop" class="headerlink" title="Kafka和Hadoop"></a>Kafka和Hadoop</h3><p>从另一个角度，可以将Kafka看做是实时版的Hadoop，这也是Kafka设计团队的原始动机之一。</p><ul><li>Hadoop可以存储和定期处理大量的数据文件，而Kafka可以存储和持续处理大型的数据流。流处理和批处理的最大不同体现在延迟上。</li><li>Hadoop主要应用在大数据分析上，而Kafka因其低延迟的特点更适合用于核心的业务应用上。业务事件时刻在发生，Kafka能够及时对这些事件做出响应，提升用户体验。</li></ul><h3 id="Kafka和ETL"><a href="#Kafka和ETL" class="headerlink" title="Kafka和ETL"></a>Kafka和ETL</h3><p>Kafka和ETL都擅长移动数据，但Kafka并非只是把数据从一个系统拆解出来，然后塞进另一个系统。</p><ul><li>Kafka可以将现有的应用程序和数据系统连接起来</li><li>Kafka可以用于加强这些触发相同数据流的应用</li><li>以数据流为中心的架构</li></ul><h2 id="发布与订阅消息系统"><a href="#发布与订阅消息系统" class="headerlink" title="发布与订阅消息系统"></a>发布与订阅消息系统</h2><blockquote><p>  消息（数据）的发布者不会直接把消息发送给接收者。</p><p>  发布者以某种方式对消息进行分类；接收者（订阅者）订阅某一类或某几类消息，以便接收特定类型的消息。</p><p>  发布与订阅系统一般会有一个broker，也就是发布消息的中心点。</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230527103445671.png" alt="多个重复的消息系统"></p><h2 id="Kafka相关术语（重点）"><a href="#Kafka相关术语（重点）" class="headerlink" title="Kafka相关术语（重点）"></a>Kafka相关术语（重点）</h2><h3 id="消息和批次"><a href="#消息和批次" class="headerlink" title="消息和批次"></a>消息和批次</h3><p>Kafka的数据单元被称为消息，可以把<strong>消息看成是数据库里的一条记录</strong>。消息由字节数组组成，所以对于Kafka而言，消息里面的数据没有特别的格式和含义。<strong>消息可以有一个可选的元数据，也就是键key</strong>，键也是一个字节数组，对Kafka而言也没有特殊含义。当消息以一种可控的方式写入不同的分区时，会用到键。例如，对消息的键进行一致性hash，取模，然后确定消息所属分区。</p><p>为了提高效率，消息被分批次写入Kafka。<strong>批次是一组属于同一个主题和分区的消息</strong>。如果每一个消息都要单独传输，那会导致大量的网络开销。批次数据还可以进一步通过压缩数据来提升数据的传输和存储能力，但是这意味着要做更多的计算处理（压缩耗时）。要处理批次和时延之间的关系，暂时认为：批次越大，效率虽然越高（吞吐量），但是时延也越大。</p><h3 id="模式（schema）"><a href="#模式（schema）" class="headerlink" title="模式（schema）"></a>模式（schema）</h3><p>对于Kafka而言，消息不过是晦涩难懂的字节数组，所以有人建议用一些额外结构来定义消息内容，使其更易于理解。</p><p>消息模式，包括json、xml等，这两者简单、易用、可读性好，但是缺乏强类型处理能力，不同版本之间的兼容性也不是很好。因此Kafka开发者喜欢使用Avro。</p><p>数据格式的一致性对Kafka来说很重要，它消除了消息读写操作之间的耦合性。假设读写操作紧密地耦合在一起，那么会产生如下问题：</p><ul><li>消息订阅者需要升级应用程序才能同时处理新旧两种数据格式。</li><li>在消息订阅者升级后，消息发布者才能跟着升级，以便使用新的数据格式。（这是什么道理？为什么有新格式的数据？为什么升级？）</li></ul><h3 id="主题（topic）和分区"><a href="#主题（topic）和分区" class="headerlink" title="主题（topic）和分区"></a>主题（topic）和分区</h3><p>Kafka的消息通过主题进行分类。主题和消息的关系，就像文件类型对于文件的关系一样。</p><p><strong>主题可以被分为若干个分区，一个分区就是一个提交日志，消息以追加的方式写入分区，然后以FIFO的顺序读取</strong>。一个主题一般包含多个分区，只能保证一个分区内数据的顺序性，无法保证一个主题的数据的顺序性。</p><p><strong>一个主题的多个分区可以分布在不同的服务器上，也就是说，一个主题可以横跨多个服务器。</strong></p><h3 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h3><p><strong>Kafka的客户端就是Kafka系统的用户，客户端被分为两种类型：生产者和消费者。</strong>（用于数据集成的Kafka Connect API和用于流处理的Kafka Stream）</p><p>生产者创建消息。一般情况下，一个消息会被发布到一个特定的主题上。在默认情况下，生产者会把消息均衡地分布到主题的所有分区上，而并不关心特定消息会被写到哪个分区上。（默认：通过对消息的键进行hash取模来确定分区）<strong>生产者也可以使用自定义的分区器，自定义消息到分区的映射规则。</strong></p><p>消费者读取消息。消费者订阅一个或多个主题，并按照消息生成的顺序来读取它们。消费者通过检查消息的偏移量来区分已经读取过的消息。偏移量是一个不断递增的整数值，和键一样属于消息的元数据，在创建消息时，Kafka会把它添加到消息里。在给定的分区里，每个消息的偏移量都是唯一的。消费者会把每个分区最后读取的消息偏移量保存在Zookeeper或Kafka上，如果消费者关闭或重启，它的读取状态不会丢失。（消费者记录偏移量可以类比看书的书签，下次可以继续看）</p><p>消费者是<strong>消费者群组</strong>的一部分，也就是说，会有一个或多个消费者共同读取一个主题。但是一个分区只能由群组中的一个消费者使用，即分区被消费者所有，称为<strong>消费者对分区的所有权关系</strong>。如果一个消费者失效，那么消费者群组里面的其他消费者可以接管失效消费者的工作和分区。例如下图中，消费者0只能从分区0中读取消息。</p><blockquote><p>  Kafka中的多消费者并不一定要构成消费者组的模式，可以实现一个主题多个消费者互不影响的读取，即每个消费者都可以处理一次（这和一般的消息队列不同），也可以通过消费者组让同组的多个消费者总共只处理一次消息。</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230527114451808.png" alt="消费者群组"></p><blockquote><p>  元数据可以认为是一个类的field字段，例如String类中除了保存实际的数据char[] data，还有 int length，那么length就可以认为是data的元数据。</p></blockquote><h3 id="broker（首领）和集群（控制器）"><a href="#broker（首领）和集群（控制器）" class="headerlink" title="broker（首领）和集群（控制器）"></a>broker（首领）和集群（控制器）</h3><p>一个独立的<strong>Kafka服务器</strong>被称为broker，单个broker可以轻松处理数千个分区以及每秒百万的消息量，broker的作用：</p><ul><li>broker接收来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存。</li><li>broker为消费者提供服务，对读取分区的请求作出响应，返回已经提交到磁盘上的消息。</li></ul><p>每个Kafka集群都有一个broker同时充当<strong>集群控制器</strong>的角色，这是通过从集群中的活跃成员中选举出来的。控制器负责管理工作，包括将分区分配给broker和监控broker。</p><p>在Kafka集群中，一个分区可以分配给多个broker<strong>（分区复制）</strong>，但是同一时刻只会有一个broker对该分区负责，该broker称为<strong>分区的首领</strong>。如果分区的首领broker失效，那么分配该分区的其他broker可以接管领导权，称为新的首领。</p><blockquote><p>  从下图中，目前的猜测是：生产者只会将消息发送给分区的首领，由首领来复制消息到该分区的其他broker中。相当于一主多从架构，主服务器负责写，从服务器从主服务器中拷贝数据。</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230527120339442.png" alt="Kafka集群的分区复制"></p><h3 id="多集群"><a href="#多集群" class="headerlink" title="多集群"></a>多集群</h3><p>如果是多数据中心（不同地理位置），就需要在它们之间复制消息。例如，一个用户修改了数据资料，不管哪个数据中心都应该能够看到这个改动。但是<strong>Kafka的消息复制机制只能在单个集群进行，不能在多个Kafka集群之间进行。</strong>Kafka提供一个叫做MirrorMaker的工具，可以用它来实现在多个集群之间的消息复制。但是这种方式在创建复杂的数据管道方面有点力不从心。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230527122204435.png" alt="多Kafka集群"></p><h3 id="保留消息"><a href="#保留消息" class="headerlink" title="保留消息"></a>保留消息</h3><p>在一定期限内，Kafka能够保留消息。默认的保留策略是：</p><ol><li>设定阈值，时间阈值或文件大小阈值，例如：保留一段时间（比如7天），保留到消息达到一定大小的字节数（比如1GB）</li><li>当触发阈值时，这些保存的消息就会被当做旧消息删除。</li></ol><p>主题topic可以配置自己的保留策略</p><h2 id="使用场景（有待理解完善）"><a href="#使用场景（有待理解完善）" class="headerlink" title="使用场景（有待理解完善）"></a>使用场景（有待理解完善）</h2><h3 id="活动跟踪"><a href="#活动跟踪" class="headerlink" title="活动跟踪"></a>活动跟踪</h3><p>Kafka最初的使用场景是跟踪用户的活动。网站用户和前端应用程序之间发生交互，应用程序生成用户活动相关的信息，这些信息可以是一些静态的信息：页面访问次数或点击量，也可以是一些复杂的操作：添加用户资料等。这些消息被发布到一个或多个主题上，由后端应用程序负责读取。这样，我们就可以生成报表，为机器学习系统提供数据，更新搜索结果等功能。</p><h3 id="传递消息"><a href="#传递消息" class="headerlink" title="传递消息"></a>传递消息</h3><p>Kafka的另一个基本用户是传递消息。应用程序向用户发送通知（比如二维码）就是通过传递消息来实现的。</p><h3 id="度量指标和日志记录"><a href="#度量指标和日志记录" class="headerlink" title="度量指标和日志记录"></a>度量指标和日志记录</h3><p>Kafka也可以用于收集应用程序和系统度量指标以及日志。这和Kafka支持多个生产者的特性有关。</p><p>应用程序定期把度量指标发布到Kafka主题上，监控系统或报告系统读取这些主题上的消息。</p><p>日志消息也可以发布到Kafka主题上，然后被路由到专门的日志搜索系统（Elasticsearch）或安全分析应用程序。</p><h3 id="提交日志"><a href="#提交日志" class="headerlink" title="提交日志"></a>提交日志</h3><p>Kafka的基本概念来源于提交日志。</p><p>我们可以把数据库的更新发布到Kafka上，应用程序通过监控事件流来接收数据库的实时更新。这种变更日志流也可以用于把数据库的更新复制到远程系统上，或者合并多个应用程序的更新到一个单独的数据库视图上。</p><h3 id="流处理"><a href="#流处理" class="headerlink" title="流处理"></a>流处理</h3><p>Hadoop需要离线处理数据，花费的时间可能是几小时或几天。而Kafka可以作为流处理平台，简单的流处理操作。</p><p>似乎流处理并不用Kafka，一般会使用Spark这类的</p><h1 id="Kafka-性质"><a href="#Kafka-性质" class="headerlink" title="Kafka 性质"></a>Kafka 性质</h1><h2 id="幂等性（处理重复消息）"><a href="#幂等性（处理重复消息）" class="headerlink" title="幂等性（处理重复消息）"></a>幂等性（处理重复消息）</h2><p>以 HTTP 为例，无论是一次或是多次请求，得到的响应结果是一致的（不考虑网络问题）。换句话说，幂等性就是执行多次操作与执行一次操作的影响是一样的。类似 JavaEE 开发中需要考虑的<strong>重复提交问题</strong>。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>为了实现 Kafka 生产者的幂等性，Kafka 引入了 PID 和 Sequence Number 的概念</p><ul><li>PID：Producer ID，每个生产者在初始化时，都会分配一个唯一的 PID，这个 PID 对于用户而言是透明的</li><li>Sequence Number：可以认为是一个三维数组<code>int[][][]</code>的元素，由生产者PID、主题topic、分区partition共同决定，SequenceNumber是从0开始递增的。</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230604215134481.png" alt="image-20230604215134481"></p><p>本质上就是在消息添加两个字段，一个PID用于区分生产者，另一个Sequence Number用于区分同一个生产者发送的不同的消息。如果Sequence Number不大于该生产者之前消息中的Sequence Number，则认为该消息是触发了生产者的重试机制发送的，直接丢弃即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> BigData </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/26/mysql-03-suo/"/>
      <url>/2023/05/26/mysql-03-suo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/25/juc-00-gai-shu/"/>
      <url>/2023/05/25/juc-00-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程基础知识"><a href="#多线程基础知识" class="headerlink" title="多线程基础知识"></a>多线程基础知识</h1><h2 id="同步Sync和异步ASync"><a href="#同步Sync和异步ASync" class="headerlink" title="同步Sync和异步ASync"></a>同步Sync和异步ASync</h2><p>同步和异步用来形容一次方法调用。</p><ul><li>同步方法调用一旦开始，调用方必须等待方法返回才能继续后续行为。</li><li>异步方法调用更像是一个消息传递，一旦开始，方法调用就会立即返回，调用者可以继续后续操作。</li></ul><h2 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h2><p>临界区是一种公共资源，或者称为共享数据，可以被多个线程使用。但是对于每一个临界区资源，同一时刻只能有一个线程来使用它，一旦该临界区资源被占用，其它线程想要使用该资源，就必须等待。</p><p>临界区资源不一定限制数量为1，例如n台打印机就允许n个线程在并行使用。</p><h2 id="阻塞blocking和非阻塞non-blocking"><a href="#阻塞blocking和非阻塞non-blocking" class="headerlink" title="阻塞blocking和非阻塞non-blocking"></a>阻塞blocking和非阻塞non-blocking</h2><p>阻塞和非阻塞通常用来形容多线程间的相互影响。</p><ul><li><p>比如一个线程占用了临界区资源，那么其它所有需要这个临界区资源的线程就必须在这个临界区等待。<strong>等待导致线程挂起，这种情况就是阻塞。</strong></p></li><li><p>非阻塞强调没有一个线程可以妨碍其它线程执行，所有线程都尝试不断向前执行。</p></li></ul><h2 id="死锁、饥饿、活锁"><a href="#死锁、饥饿、活锁" class="headerlink" title="死锁、饥饿、活锁"></a>死锁、饥饿、活锁</h2><p>活锁：线程都秉承“谦让”的原则，主动将资源释放给他人使用，造成没有一个人真正获取了执行所需的全部资源。生活中的例子：两人让路，同时向左，同时向右</p><h2 id="并发级别"><a href="#并发级别" class="headerlink" title="并发级别"></a>并发级别</h2><p>由于临界区的存在，必须对多线程进行并发控制。策略有：</p><ol><li><p>阻塞blocking</p><p>使用synchronized关键字、可重入锁时，得到的就是阻塞的线程。</p><p>当前线程在无法得到临界区的锁时，就会挂起等待，进入阻塞状态。阻塞的线程在其它线程释放资源之前，当前线程无法继续执行。</p></li><li><p>无饥饿starvation-free</p><p>如果线程之间是有优先级的，那么这种资源的调度就是不公平的。对于非公平的锁，系统允许高优先级的线程插队，这样有可能造成低优先级的线程饥饿。对于公平的锁，先到先服务，就不会产生饥饿现象。</p></li><li><p>无障碍obstruction-free</p><p>无障碍是一种最弱的非阻塞调度。如果两个线程是无障碍的执行，那么他们不会因为临界区的问题导致另一方挂起。</p><p><strong>所有的线程都可以进入临界区修改共享数据，如果检测到冲突，就会对自己修改的数据进行回滚。</strong></p><p>阻塞的方式是一种悲观策略，认为两个线程之间很有可能发生不幸的冲突，因此以保护共享数据为第一优先级。</p><p>无障碍的方式是一种乐观策略，认为系统中发生冲突的可能性或概率不大，真发生了冲突再进行回滚。这种策略不适合存在严重冲突的系统。</p><p>无障碍方式可以通过一个“一致性标记”来实现。</p></li><li><p>无锁lock-free</p><p>所有线程都能够尝试对临界区进行访问，但最终只能有一个线程胜出。其它的线程迟早能够得到执行权，因此系统不会出现无限等待。无锁方式（CAS）是对无障碍方式的一种改进，无障碍方式中系统可能出现无限等待。</p><blockquote><p>  疑问：</p><ol><li><p>无障碍方式是<strong>先修改后判断标识</strong>，无锁方式是<strong>先判断标识后修改</strong>吗？</p></li><li><p>CAS方式只能做一些简单的修改吗？例如，线程A首先获取到修改数据的权利，想要把name和age都修改。但是线程B只需要修改name，</p></li></ol></blockquote></li><li><p>无等待wait-free</p><p>无锁只要求一个线程可以在有限步内完成操作，而无等待则在其基础上更进一步，要求所有线程都在有限步内完成。如果限制这个步骤上限，还可以进一步细分为有界无等待和线程数无关的无等待，它们的区别只是对循环次数的限制不同。</p><p>典型的无等待结构时RCU（Read-Copy-Update），基本思想是：对读操作不加控制，在写数据的时候，先取得原始数据的副本，接着只修改副本数据，修改完成后，在合适的时机回写数据。</p><blockquote><p>  疑问：什么是合适的时机呢？</p></blockquote></li></ol><h2 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h2><p>加速比 = 优化前耗时 / 优化后耗时</p><p>在假设有无穷多的CPU内核情况下，加速比和程序的并行化比例成反比，即如果有50%的代码支持并行，那么系统加速比理论上界是2。这个理论指出仅仅提高CPU数量不能够根本上提高系统的性能。</p><h1 id="JMM（Java内存模型）"><a href="#JMM（Java内存模型）" class="headerlink" title="JMM（Java内存模型）"></a>JMM（Java内存模型）</h1><p>JMM 的关键技术点都是围绕多线程的原子性、可见性和有序性来建立的</p><h2 id="原子性Atomicity"><a href="#原子性Atomicity" class="headerlink" title="原子性Atomicity"></a>原子性Atomicity</h2><p>对于<strong>32位的JVM系统</strong>来说，long型数据的读写不是原子性的，因为long型数据有64位。也就是说如果两个线程对long型数据进行写入的话，对线程之间的结果是有干扰的。例如：</p><p>A线程写入long型数据：XY</p><p>B线程写入long型数据：ZW</p><p>假设A线程先写入X，B线程再写入ZW，然后A线程再写入Y，最终保存下来的long型数据就会是ZY。同理，也可能产生XW。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试代码, 多个线程写入固定的数字, 一个线程去读取, 如果不是这些固定的数字, 就输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="可见性Visibility"><a href="#可见性Visibility" class="headerlink" title="可见性Visibility"></a>可见性Visibility</h2><p>可见性是一个综合问题，是由于编译器优化（指令重排）、硬件优化、缓存优化等行为产生的。</p><p>以缓存优化为例，CPU1修改和保存的是缓存中的数据，CPU2无法意识到这个行为。</p><p>包括指令重排在内的<strong>编译器优化</strong>更是产生一些在并发分析的理论上看似不可能出现的情况，因为实际执行的代码顺序和所编写的代码顺序可能不一致，理论分析是针对所编写的代码顺序而言的。简单来说，<strong>编译器优化会以串行程序优化的思路修改你所编写的串行或并行代码</strong>，因此针对你所编写的代码进行并发分析可能的输出结果和实际的输出结果可能不相同。</p><h2 id="有序性Ordering"><a href="#有序性Ordering" class="headerlink" title="有序性Ordering"></a>有序性Ordering</h2><p>指令重排：保证串行语义的一致性</p><p>指令重排造成各种并发问题，那为什么还有指令重排呢？性能！</p><p>指令重排是为了尽量少的中断CPU流水线。CPU流水线的执行流程：</p><ol><li>取指令IF</li><li>译码和取寄存器操作数ID</li><li>执行或者有效地址计算EX</li><li>存储器访问MEM</li><li>写回WB</li></ol><p>如果禁止指令重排，那么如果指令和指令之间必须存在停顿（插入一个null），相当于其后所有的指令都浪费了一个单位的时间，（指令数量多造成浪费大，你浪费1s，就是浪费全班1min）。因此，与其浪费这一个单位时间，不如指令重排序，在不影响结果（串行程序）的前提下把这一个单位的时间给利用上。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/24/spring-yuan-ma-jie-xi-11-zi-dong-pei-zhi-yuan-li/"/>
      <url>/2023/05/24/spring-yuan-ma-jie-xi-11-zi-dong-pei-zhi-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>配置类导入ImportSelector，ImportSlector的作用就是从配置文件中导入指定的类</p><p>问：为什么配置类不直接从配置文件中导入指定的类？</p><p>答：对导入功能的封装，如果每次导入指定的类都需要写入配置类中，那也会造成</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC执行流程</title>
      <link href="/2023/05/23/spring-yuan-ma-jie-xi-09-mvc-zhi-xing-liu-cheng/"/>
      <url>/2023/05/23/spring-yuan-ma-jie-xi-09-mvc-zhi-xing-liu-cheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事件发布与事件监听</title>
      <link href="/2023/05/23/spring-yuan-ma-jie-xi-10-spring-shi-jian/"/>
      <url>/2023/05/23/spring-yuan-ma-jie-xi-10-spring-shi-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>将支线业务（独立小功能）在监听器中实现，而不是在主线业务逻辑中实现。既能实现功能的复用，又便于对功能的修改（组件化、功能可增加或删除）。</p><h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">MyApplicationEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEmailListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>MyApplicationEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyEmailListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String source <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接收来自"</span> <span class="token operator">+</span> source <span class="token operator">+</span> <span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"EmailListener向用户发送邮件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySMSListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>MyApplicationEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MySMSListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String source <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"接收来自"</span> <span class="token operator">+</span> source <span class="token operator">+</span> <span class="token string">"的消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"SMSListener向用户发送短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  从函数式接口演化成注解的有很多，例如 Controller 和 @Controller、Servlet 和 @WebServlet。</p><p>  每一个注解标注的方法，本质上都对应了一个接口的匿名实现类，同时创建了该匿名类的对象放入到容器中。后面通过模拟实现 @EventListener 注解对这个问题做进一步的了解。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListeners</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyListeners<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callQQPhone</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"正在拨打QQ电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callWechatPhone</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"正在拨打微信电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callVideoPhone</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"正在拨打视频电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAudioPhone</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"正在拨打音频电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件发布器"><a href="#事件发布器" class="headerlink" title="事件发布器"></a>事件发布器</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEventPublisher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyApplicationService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationEventPublisher publisher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Service: 核心业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO:</span>        <span class="token comment" spellcheck="true">//  1. 事件的源应该放入什么东西还不确定</span>        <span class="token comment" spellcheck="true">//  2. 如果需要doWork传入一些信息给监听器对象, 如何通过这个事件来传递呢?</span>        <span class="token comment" spellcheck="true">//  3. 如何控制监听器的执行顺序, 例如, 先执行发送邮件, 后执行发送短信. 答: 通过额外的@Order注解</span>        ApplicationEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyApplicationEvent</span><span class="token punctuation">(</span>MyApplicationService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote><p>  利用线程池来异步的发送事件，默认情况下是单线程发送。</p><p>  默认使用的发送事件的广播器是 <code>SimpleApplicationEventMulticaster</code>，为其设置线程池对象即可实现异步发送。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>SimpleApplicationEventMulticaster<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolTaskExecutor<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleApplicationEventMulticasterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ThreadPoolTaskExecutor <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolTaskExecutor taskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        taskExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        taskExecutor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        taskExecutor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> taskExecutor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 这里的Bean的名字必须是applicationEventMulticaster, 如果名字不一样会导致无法覆盖.     * 这说明这个类的自动配置类写的不够好, 没有用@ConditionOnBean和@ConditionOnMissingBean配合使用解决这个问题     * 1. 在后面遇到类似的问题时, 如果需要找到该Bean对应的beanName, 可以通过 context.getBeanNamesForType() 来查看容器中的 bean     * 2. 可以通过getBean()获取该 bean 对象, 通过debug来查看其需要配置什么信息     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleApplicationEventMulticaster <span class="token function">applicationEventMulticaster</span><span class="token punctuation">(</span>ThreadPoolTaskExecutor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleApplicationEventMulticaster multicaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multicaster<span class="token punctuation">.</span><span class="token function">setTaskExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> multicaster<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230522014758308.png" alt="多线程发布事件"></p><h1 id="模拟实现-EventListener-注解"><a href="#模拟实现-EventListener-注解" class="headerlink" title="模拟实现 @EventListener 注解"></a>模拟实现 @EventListener 注解</h1><h2 id="自定义注解-MyEventListener"><a href="#自定义注解-MyEventListener" class="headerlink" title="自定义注解 @MyEventListener"></a>自定义注解 @MyEventListener</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyEventListener</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-MyListener-注解"><a href="#使用-MyListener-注解" class="headerlink" title="使用 @MyListener 注解"></a>使用 @MyListener 注解</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyListeners</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyListeners<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略先前@EventListener注解标注的重复的代码</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token annotation punctuation">@MyEventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAd</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"正在使用自定义的@MyEventListener注解来打广告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解析-MyEventListener-注解"><a href="#解析-MyEventListener-注解" class="headerlink" title="解析 @MyEventListener 注解"></a>解析 @MyEventListener 注解</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MyApplicationService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MyEventListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MyListeners<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEventListenerResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    ApplicationContext context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myEventListenerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyApplicationService service <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MyApplicationService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TODO: 这里可以通过getBeanDefinitionNames来获取容器中所有的Bean对象, 对所有的Bean都进行下面的判断</span>        MyListeners myListenersBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MyListeners<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> myListenersBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果方法中出现了自定义的@MyEventListener注解</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>MyEventListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每一个注解标注的方法都对应一个接口的匿名实现类</span>                <span class="token comment" spellcheck="true">// 对于每一个标注了@MyEventListener注解的方法都会生成一个ApplicationListener匿名实现类的对象</span>                <span class="token comment" spellcheck="true">// 这是适配器模式的一种体现, 将注解标注的方法转化成一个类对象</span><span class="token comment" spellcheck="true">/*                ApplicationListener applicationListener = new ApplicationListener() {                    @Override                    public void onApplicationEvent(ApplicationEvent event) {                        // @MyEventListener注解标注的方法  &lt;=> ApplicationListener接口中的方法                        // 流程:                        // => 找到注解标注的方法                        // => 创建ApplicationListener接口的实现类: new ApplicationListener                        // => 实现接口方法, 方法具体内容即为注解标注的方法, 因此存在反射调用: onApplicationEvent()                        // => 将ApplicationListener注册到Spring容器中                        try {                            // TODO: 这里能够正常显式解析出@MyEventListener, 注册ApplicationListener到容器中也没问题,                            //  执行也能够调用sendAd()方法, 但是会有一条argument type mismatch的错误. 如何处理这个问题呢?                            //  答: 因为这里创建的ApplicationListener没有使用泛型, 所有所有类型的事件都会被该对象监听到. 但是实际反射调用的method方法却只能够处理MyEventListener类型的事件                            //  这里是在单元测试的时候会自动关闭容器, context.close()也会发送一条事件, 此时类型不匹配从而产生该问题                            //  处理方法:                            //  (1). 为new ApplicationListener添加泛型, 可以将解析器类设置为泛型类.                            //  (2). 在onApplicationEvent中处理, 即监听所有事件类型, 但是只处理一部分类型的事件, 该方式感觉更加通用一些                            method.invoke(myListenersBean, event);                        } catch (IllegalAccessException | InvocationTargetException e) {                            e.printStackTrace();                        }                    }                };*/</span>                ApplicationListener<span class="token operator">&lt;</span>MyApplicationEvent<span class="token operator">></span> applicationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>MyApplicationEvent<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>MyApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>myListenersBean<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> InvocationTargetException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 向容器中添加解析生成的ApplicationListener</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    AbstractApplicationContext applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">)</span> context<span class="token punctuation">;</span>                    applicationContext<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>applicationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 测试service的功能</span>        service<span class="token punctuation">.</span><span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  出现 argument type mismatch的错误. 如何处理这个问题呢?</p><p>  答: 因为这里创建的ApplicationListener没有使用泛型，所有所有类型的事件都会被该ApplicationListener的匿名类对象监听到。但是实际反射调用的method方法却只能够处理MyEventListener类型的事件。而在进行单元测试的时候，会自动关闭容器，context.close()也会发送一条事件，此时类型不匹配从而产生该问题。</p><p>  处理方法：</p><ul><li>为new ApplicationListener添加泛型，进一步为了追求不写死还可以将解析器类设置为泛型类。</li><li>在onApplicationEvent中处理，即监听所有事件类型，但是只处理一部分类型的事件，该方式感觉更加通用一些。</li></ul></blockquote><h3 id="小小的形式上优化"><a href="#小小的形式上优化" class="headerlink" title="小小的形式上优化"></a>小小的形式上优化</h3><p>上面为了测试，在测试类中进行手工解析，进一步可以使用 <code>SmartInitializingSingleton</code> 对象，该对象可以在所有的单例Bean对象创建完成之后回调其中的方法。因此这里将解析@MyEventListener注解的方法写入到其中，小小地优化一下，在测试代码中只需要调用service中的doWork()方法即可。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 在所有的单例对象创建完成后, 会回调该对象中的方法     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SmartInitializingSingleton <span class="token function">smartInitializingSingleton</span><span class="token punctuation">(</span>ConfigurableApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Object bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>MyEventListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ApplicationListener applicationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token annotation punctuation">@Override</span>                                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                                        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                            <span class="token comment" spellcheck="true">// eventType.isAssignableFrom(event.getClass()) 有什么不同?</span>                                            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">}</span>                                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> InvocationTargetException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 向容器中添加解析生成的ApplicationListener</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                AbstractApplicationContext applicationContext <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">)</span> context<span class="token punctuation">;</span>                                applicationContext<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>applicationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="事件发布"><a href="#事件发布" class="headerlink" title="事件发布"></a>事件发布</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ResolvableType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>GenericWebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ScheduledExecutorService<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * TODO: 目前存在bug */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationEventMulticaster</span> <span class="token keyword">extends</span> <span class="token class-name">MyAbstractApplicationEventMulticaster</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>ApplicationListener<span class="token operator">></span> applicationListeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> GenericWebApplicationContext context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用来收集监听器     *     * @param listenerBeanName     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addApplicationListenerBean</span><span class="token punctuation">(</span>String listenerBeanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"listenerBeanName = "</span> <span class="token operator">+</span> listenerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        ApplicationListener applicationListenerBean <span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>listenerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"applicationListenerBean = "</span> <span class="token operator">+</span> applicationListenerBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationListeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>applicationListenerBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发布事件, 当调用publisher.publishEvent()方法时, 底层会调用该方法     *     * @param event     * @param eventType     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span>ApplicationEvent event<span class="token punctuation">,</span> ResolvableType eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ScheduledExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationListeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>                applicationListener <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// TODO: 这里如何仅仅通过JDK的反射来获取到类中接口的泛型类型</span>                    ResolvableType genericType <span class="token operator">=</span> ResolvableType<span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span>applicationListener<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getGeneric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>genericType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 使用线程池来优化事件发送</span>                        executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                            applicationListener<span class="token punctuation">.</span><span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/20/java-20-fan-xing/"/>
      <url>/2023/05/20/java-20-fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h1><h2 id="无泛型边界的类型擦除"><a href="#无泛型边界的类型擦除" class="headerlink" title="无泛型边界的类型擦除"></a>无泛型边界的类型擦除</h2><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="桥接函数"><a href="#桥接函数" class="headerlink" title="桥接函数"></a>桥接函数</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/19/java-18-nio/"/>
      <url>/2023/05/19/java-18-nio/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/18/java-17-io-liu/"/>
      <url>/2023/05/18/java-17-io-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><p>通过装饰器模式，通过叠加多个对象来获得所期望的功能。</p><blockquote><ul><li>字节流（InputStream、OutputStream）对应原生的二进制数据</li><li>字符流（Reader、Writer）对应字符数据，会自动处理与本地字符集之间的转换</li><li>缓冲流（Buffer）可以提高性能，减少底层API的调用次数来优化I/O。设计者更优雅的实现是将缓冲流作为一种默认的行为，这样可以避免每次都要包装一层缓冲流，可惜并没有这么做。</li></ul></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/IOStream.png" alt="IOStream"></p><h2 id="输入流类型"><a href="#输入流类型" class="headerlink" title="输入流类型"></a>输入流类型</h2><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>InputStream 表示从不同数据源产生输入的类，每种数据源都对应一种 InputStream 子类，数据源有：</p><ul><li>字节数组</li><li>String 对象（被废弃）</li><li>文件</li><li>管道（多线程）</li><li>一个其它种类的流组成的序列，可以把多个流汇聚成一个流</li><li>Socket 连接</li></ul><p>除了上面对应数据源的 InputStream 外，还有作为装饰器接口的 <code>FilterInputStream</code> 同样集成了 InputStream。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/InputStream.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputBytes<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> outputBytes<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String inputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String inputFile2Name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String outputFileName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String classpath<span class="token punctuation">;</span>    <span class="token keyword">private</span> Path inputFilePath<span class="token punctuation">;</span>    <span class="token keyword">private</span> Path inputfile2Path<span class="token punctuation">;</span>    <span class="token keyword">private</span> Path outputFilePath<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>        inputBytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        inputFileName <span class="token operator">=</span> <span class="token string">"input.txt"</span><span class="token punctuation">;</span>        inputFile2Name <span class="token operator">=</span> <span class="token string">"input2.txt"</span><span class="token punctuation">;</span>        outputFileName <span class="token operator">=</span> <span class="token string">"output.txt"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        classpath <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        inputFilePath <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classpath<span class="token punctuation">,</span> inputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        inputfile2Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classpath<span class="token punctuation">,</span> inputFile2Name<span class="token punctuation">)</span><span class="token punctuation">;</span>        outputFilePath <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>classpath<span class="token punctuation">,</span> outputFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个InputStream都会有read()方法     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ByteArrayInputStream byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>inputBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputBytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> read <span class="token operator">=</span> byteArrayInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        byteArrayInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用read()方法的约定来退出循环, 可应用于长度不确定的字节流     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ByteArrayInputStream byteArrayInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>inputBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> byteArrayInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        byteArrayInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * StringBufferInputStream被废弃, 对于字符串, 推荐使用StringReader来创建流     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read3Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBufferInputStream stringBufferInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBufferInputStream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read4Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read5Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>outputFilePath<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read6Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PipedInputStream pipedInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read7Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        FileInputStream fileInputStream01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>inputfile2Path<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SequenceInputStream sequenceInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequenceInputStream</span><span class="token punctuation">(</span>fileInputStream01<span class="token punctuation">,</span> fileInputStream02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> read<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> sequenceInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h3><p>Reader 的出现不是用来替代 InputStream，InputStream 面向字节，而 Reader 面向字符，同时 Reader 提供兼容 Unicode 的功能。</p><p>为了将来自<strong>“字节”</strong>层次中的 InputStream 和来自<strong>“字符”</strong>层次中的 OutputStream 结合起来使用，需要使用到适配器类：InputStreamReader 可以将 InputStream 转换为 Reader。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230519115825014.png" alt="image-20230519115825014"></p><p>在 InputStream 的体系中，装饰器类都是 FilterInputStream 的子类。但是在 Writer 体系中，装饰器类并不是 FilterWriter 的子类</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230519120153436.png" alt="image-20230519120153436"></p><h2 id="输出流类型"><a href="#输出流类型" class="headerlink" title="输出流类型"></a>输出流类型</h2><p>该类别决定了输出要去往的目标：字节数组、文件或管道。</p><ul><li>字节数组：ByteArrayOutputStream</li><li>文件：FileOutputStream</li><li>管道：PipeOutputStream</li></ul><h2 id="装饰器流-FilterInputStream-FilterOutputStream"><a href="#装饰器流-FilterInputStream-FilterOutputStream" class="headerlink" title="装饰器流 FilterInputStream/FilterOutputStream"></a>装饰器流 FilterInputStream/FilterOutputStream</h2><blockquote><p>  <strong>装饰器模式</strong></p><p>  之所以存在 FileterInputStream 类，是因为让 FilterInputStream 作为所有装饰器类的基类。</p><p>  装饰器必须具有和它所装饰对象相同的接口，但装饰器类也可以扩展一些接口</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/FilterInputStream.png" alt="FilterInputStream"></p><h3 id="FilterInputStream"><a href="#FilterInputStream" class="headerlink" title="FilterInputStream"></a>FilterInputStream</h3><h4 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h4><p>DataInputStream 允许读取不同的基本数据类型和String类型的对象，例如readByte()、readFloat()等，将</p><h4 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a>BufferedInputStream</h4><p>几乎所有的流行为都需要添加缓冲流来提高效率，没有作为默认行为是设计上的一个失败。</p><h3 id="FilterOutputStream"><a href="#FilterOutputStream" class="headerlink" title="FilterOutputStream"></a>FilterOutputStream</h3><h4 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a>DataOutputStream</h4><h4 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a>BufferedOutputStream</h4><p>可以调用 <code>flush()</code> 方法清空缓冲区</p><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h4><p>没有处理好国际化的问题，在PrintWriter中得到解决。</p><h2 id="RandomAccessFile-类"><a href="#RandomAccessFile-类" class="headerlink" title="RandomAccessFile 类"></a>RandomAccessFile 类</h2><h1 id="附录：Maven项目路径和系统环境路径"><a href="#附录：Maven项目路径和系统环境路径" class="headerlink" title="附录：Maven项目路径和系统环境路径"></a>附录：Maven项目路径和系统环境路径</h1><ul><li><p>获取Module模块的根路径</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModuleRootPath</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getModuleRootPathTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Path path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取类路径classpath</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 获取编译后的类路径位置, 相当于Spring框架中classpath, 对应Maven项目中的java和resource目录 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassesPath</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getModuleRootPath2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jdbc-02-connection/"/>
      <url>/2023/05/17/jdbc-02-connection/</url>
      
        <content type="html"><![CDATA[<h1 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h1><p>称为连接，或者会话。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>获取执行SQL的对象<ul><li>普通的执行SQL的对象：Statement（存在SQL注入问题）</li><li>预编译的SQL对象：PreparedStatement（防止SQL注入）</li><li>存储过程对象：CallableStatement（MySQL中存储过程不常用）</li></ul></li><li>事务管理<ul><li>开启事务</li><li>提交事务</li><li>回滚事务：在try-catch（异常处理）中回滚事务</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jdbc-04-resultset-he-resultsethandler/"/>
      <url>/2023/05/17/jdbc-04-resultset-he-resultsethandler/</url>
      
        <content type="html"><![CDATA[<p>使用数据库连接池来获取连接</p><p>使用ResultSetHandler来处理获取查询返回对象</p><p>使用QueryRunner来执行一些通用查询</p><p>使用DbUtils工具类来关闭数据库连接</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jvm-05-lei-jia-zai-zi-xi-tong/"/>
      <url>/2023/05/17/jvm-05-lei-jia-zai-zi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="类加载子系统"><a href="#类加载子系统" class="headerlink" title="类加载子系统"></a>类加载子系统</h1><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207110025295.png" alt="image-20230207110025295" style="zoom:150%;"><ol><li>通过类加载子系统(Class Loader)加载字节码文件(.class)</li><li>通过执行引擎来执行</li><li>如果执行过程中需要调用本地方法(native), 则通过本地方法栈和本地方法接口交互</li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207110257999.png" alt="image-20230207110257999"></p><h1 id="类的声明周期-类的加载过程"><a href="#类的声明周期-类的加载过程" class="headerlink" title="类的声明周期(类的加载过程)"></a>类的声明周期(类的加载过程)</h1><ol><li><p>加载Loading</p></li><li><p>链接Linking</p><ol><li>验证</li><li>准备</li><li>解析</li></ol></li><li><p>类初始化Initialization</p></li><li><p>使用Using</p><ul><li>实例化对象</li><li>静态方法</li><li>……</li></ul></li><li><p>卸载Unloading</p><p>有些类可以卸载, 但有些类不可以卸载</p></li></ol><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207141007939.png" alt="image-20230207141007939" style="zoom:150%;"><h2 id="Loading加载阶段"><a href="#Loading加载阶段" class="headerlink" title="Loading加载阶段"></a>Loading加载阶段</h2><p>从各种源(class文件, zip压缩包, 动态代理运行时计算)到内存, 并在内存中构建出Java类的原型<code>类模板对象</code></p><h3 id="加载阶段具体任务"><a href="#加载阶段具体任务" class="headerlink" title="加载阶段具体任务"></a>加载阶段具体任务</h3><ol><li>通过类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流解析转换为<strong>方法区的运行时数据结构(Java类模板)</strong></li><li>在堆空间中生成一个代表这个类的java.lang.Class对象, 指向Java类模板, 作为方法区中这个类的各种操作的访问入口</li></ol><h3 id="Class文件的本质"><a href="#Class文件的本质" class="headerlink" title="Class文件的本质"></a>Class文件的本质</h3><p>Class文件本质上是一个二进制流, 保存为(.class)文件在磁盘上存储只是其一种保存形式. 如果通过网络接收到一个符合Class文件要求的二进制比特流, 也可以将其作为某个类加载到内存中. 常见的二进制流(Class文件)的获取方式有:</p><ul><li>.class后缀的文件</li><li>jar包, zip等压缩包</li><li>存放在数据库中的二进制数据</li><li>通过http之类的网络协议传输的二进制数据</li></ul><h3 id="什么是类模板对象"><a href="#什么是类模板对象" class="headerlink" title="什么是类模板对象"></a>什么是类模板对象</h3><p>类模板对象是Java类在JVM中的一个快照, JVM将从字节码文件中解析出来的常量池, 类字段, 类方法等信息存储到类模板中, 这样JVM在运行期便能通过类模板来获取Java类的任意信息, 能够对Java类的成员变量进行遍历, 也能进行Java方法的调用. <strong>这也是Java反射机制的基础</strong>, 不需要创建对象, 就可以查看加载类中的方法, 属性等等信息</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230212165529375.png" alt="image-20230212165529375"></p><h2 id="Linking链接阶段"><a href="#Linking链接阶段" class="headerlink" title="Linking链接阶段"></a>Linking链接阶段</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207144457659.png" alt="image-20230207144457659"></p><h3 id="验证Verify"><a href="#验证Verify" class="headerlink" title="验证Verify"></a>验证Verify</h3><p>验证阶段虽然使得拖慢了整个类加载速度, 但是却避免了字节码在运行时还需要进行各种检查. 正所谓磨刀不误砍柴工 </p><ul><li><p>格式检查</p><blockquote><p>  格式检查实际上会和加载loading同时进行</p></blockquote><p>魔数检查0xCAFEBABE</p><p>版本检查</p><p>长度检查</p></li><li><p>语义检查</p><p>是否继承final类或者重写了final方法</p><p>是否有父类</p><p>抽象方法是否实现</p><p>是否存在不兼容的方法, 比如仅仅返回值不同的方法签名</p></li><li><p>字节码验证</p><p>跳转指令是否指向正确位置</p><p>操作数类型是否合理</p></li><li><p>符号引用验证</p><p>符号引用的直接引用是否存在</p></li></ul><h3 id="准备Prepare"><a href="#准备Prepare" class="headerlink" title="准备Prepare"></a>准备Prepare</h3><p>为类中的静态变量分配内存, 并设置默认值0</p><ul><li><p><code>final</code>修饰的类变量会在编译期间被优化, 本质上相当于一个常量的符号引用, 编译期简单替换即可</p></li><li><p>在<strong>方法区</strong>中为类变量(<code>static</code>修饰)分配内存, 并设置默认初始值(广义0)</p></li><li><p>准备阶段不会为实例变量在方法区中分配内存, 实例变量随着对象一起分配在<strong>堆</strong>中</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//instanceVariable: 10->30, 无论先后</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>instanceVariable <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> instanceVariable <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类变量, 在类加载过程的准备阶段preparation, classVariable01, classVariable02 都会被初始化为0</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可以为y赋值, 但是不可以调用y</span>        <span class="token comment" spellcheck="true">// 之所以可以先赋值, 后声明, 是因为在prepare阶段已经为该变量设置了默认值为0.</span>        <span class="token comment" spellcheck="true">// 也就是说只有在initialization初始化阶段才整合static代码块, 此时只需要重新按顺序赋值即可</span>        <span class="token comment" spellcheck="true">// classVariable02: 0->20->10</span>        classVariable02 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(classVariable02);        //报错: 非法的前向引用, 除非static变量声明在前面</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> classVariable01 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> classVariable02 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//final static常量, 在编译的时候确定</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> XIONG <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析Resolve"><a href="#解析Resolve" class="headerlink" title="解析Resolve"></a>解析Resolve</h3><p>将常量池中的<strong>符号引用</strong>转换为<strong>直接引用</strong>的过程</p><h2 id="Initialization初始化阶段"><a href="#Initialization初始化阶段" class="headerlink" title="Initialization初始化阶段"></a>Initialization初始化阶段</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207150314047.png" alt="image-20230207150314047"></p><ul><li><p>执行类构造器方法<code>&lt;clinit&gt;()</code>的过程, 该方法不需要定义, 是javac编译器自动收集类中所有的static相关的代码合并而来, 按照源文件中的顺序执行.</p></li><li><p><strong><code>&lt;clinit&gt;()</code>只会执行一次, 且虚拟机会为该过程加锁, 不需要在源代码中显式加锁</strong></p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p><code>&lt;clinit&gt;()</code>不同于类构造器, 类构造器在字节码文件中作为<code>&lt;init&gt;()</code></p></li><li><p><code>父类clinit&lt;&gt;() -&gt; 子类clinit()</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化顺序: Father.x -> Son.x -> Son.y</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Son<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207160341522.png" alt="image-20230207160341522"></p></li></ul><h3 id="clinit的线程安全问题"><a href="#clinit的线程安全问题" class="headerlink" title="clinit的线程安全问题"></a>clinit的线程安全问题</h3><p>可能发生死锁的现象描述: </p><p>线程A先加载 <code>ClassA</code>, 线程B先加载 <code>ClassB</code>, 而在 <code>ClassA</code> 的 <code>clinit&lt;&gt;()</code> 方法中需要加载 <code>ClassB</code>, 但在 <code>ClassB</code> 的 <code>&lt;clinit&gt;()</code> 方法中需要加载 <code>ClassA</code></p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="类的主动使用和被动使用"><a href="#类的主动使用和被动使用" class="headerlink" title="类的主动使用和被动使用"></a>类的主动使用和被动使用</h3><blockquote><p>  <strong>代码中出现的类都会被加载, 但是却不一定都进行初始化, 只有符合主动使用的类才会被初始化, 即被动使用的类只加载但不初始化.</strong></p></blockquote><h4 id="主动使用"><a href="#主动使用" class="headerlink" title="主动使用"></a>主动使用</h4><h4 id="被动使用"><a href="#被动使用" class="headerlink" title="被动使用"></a>被动使用</h4><h2 id="Using使用阶段"><a href="#Using使用阶段" class="headerlink" title="Using使用阶段"></a>Using使用阶段</h2><h2 id="Unloading卸载阶段"><a href="#Unloading卸载阶段" class="headerlink" title="Unloading卸载阶段"></a>Unloading卸载阶段</h2><h1 id="变量默认初始化和显示赋值总结"><a href="#变量默认初始化和显示赋值总结" class="headerlink" title="变量默认初始化和显示赋值总结"></a>变量默认初始化和显示赋值总结</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// static final + 字面量 => 编译阶段初始化赋值, prepare阶段显式赋值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INTSta <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> anIntSta <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer INTEGERSTA <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Integer integerSta <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String s0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello world 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String s1 <span class="token operator">=</span> <span class="token string">"hello world 1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello world 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String s3 <span class="token operator">=</span> <span class="token string">"hello world 3"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终结论:</p><table><thead><tr><th></th><th>除<code>static final + 字面量赋值</code>外的类变量</th><th>static final + 字面量</th><th>实例变量</th><th>final 实例变量</th></tr></thead><tbody><tr><td><strong>默认初始化</strong></td><td>prepare阶段</td><td>编译阶段</td><td>实例对象内存空间开辟后</td><td></td></tr><tr><td><strong>显式赋值</strong></td><td>initialization阶段, 即字节码的<code>&lt;clinit&gt;()</code>方法</td><td>prepare阶段</td><td>构造器方法中首行, 即字节码的<code>&lt;init&gt;()</code>方法中</td><td></td></tr></tbody></table><p>只要赋值涉及到构造器或者类静态方法的调用, 都需要在<code>&lt;clinit&gt;()</code>中进行赋值</p><blockquote><p>  并不是使用<code>static final</code>修饰的量即为常量, 但不使用<code>static final</code>修饰的一定不是常量. 除<strong>字面量方式赋值</strong><code>static final String s = &quot;hello world&quot;;</code>的形式外, 其他涉及引用类型变量的任何形式, 都不是常量, 包括<code>static final String s = new String(&quot;hello world&quot;);</code></p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230212195546805.png" alt="image-20230212195546805"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230212202408504.png" alt="image-20230212202408504"></p><h1 id="Integer和int"><a href="#Integer和int" class="headerlink" title="Integer和int"></a>Integer和int</h1><ul><li>Integer和Integer比较: 直接比较地址</li><li>Integer和int比较: Integer调用<code>intValue()</code>进行自动拆箱, 然后和int进行值的比较</li><li>Integer的<code>valueOf()</code>方法, 对于值在<code>[-128, 127]</code>之间的, 通过缓存获取同一个内存对象, 否则才新建对象</li></ul><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerAndInt</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer x1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        Integer x2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        Integer z1 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        Integer z2 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x1 <span class="token operator">==</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x1 <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z1 <span class="token operator">==</span> z2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z1 <span class="token operator">==</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230208015735331.png" alt="image-20230208015735331" style="zoom:150%;"><h1 id="实例变量的初始化过程"><a href="#实例变量的初始化过程" class="headerlink" title="实例变量的初始化过程"></a>实例变量的初始化过程</h1><ul><li><p>类变量: 在Prepare阶段设置默认值, 在Initialization阶段顺序赋值覆盖</p></li><li><p>实例变量(实例字段): 创建对象时先在堆空间开辟空间, 设置默认值, 然后开始调用构造函数. 在构造器被调用后对字段赋值覆盖</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person.x : "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student.x : "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtendMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 测试父类 &lt;- 父类</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 测试父类 &lt;- 子类, 用父类接受子类对象</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 属性不存在多态性, 即在Student对象中, Person.x和Student.x是共存的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方法被重写, Student对象中只剩下一个print()方法, 无论通过person来调用还是强转为student来调用, 都会执行Student类中的print()</span>        person<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 强制类型转换</span>        Student sp <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> person<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sp<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 测试子类 &lt;- 子类</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230208121515912.png" alt="image-20230208121515912"></p><h2 id="变量的初始化和赋值流程"><a href="#变量的初始化和赋值流程" class="headerlink" title="变量的初始化和赋值流程"></a>变量的初始化和赋值流程</h2><p><code>设置默认值 -&gt; 显式初始化 -&gt; 构造器中初始化 -&gt; 对象.属性赋值</code></p><ul><li>默认初始化: 随着对象在堆空间中分配内存时, 设置默认值</li><li>显式初始化: 在实例变量(实例字段)的变量声明是显式使用<code>private int x = 10;</code></li><li>构造器初始化: 在构造器中进行初始化<code>x = 20;</code></li><li>赋值: 此时不属于初始化过程, 在对象创建完成后, 通过<code>Obj.x = 90;</code>进行赋值</li></ul><h2 id="final修饰的不可变量"><a href="#final修饰的不可变量" class="headerlink" title="final修饰的不可变量"></a>final修饰的不可变量</h2><blockquote><p>  使用final修饰的不可变量</p><ul><li>可以在初始化过程中修改值, 但是不可以对其进行赋值. 即对象完成构建后不能修改</li><li>必须在显式初始化和构造器初始化中二选一, 并且只能进行一次初始化(不考虑设置默认值)</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddMain</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// static final 修饰的NUM即常量10的符号引用, 是一个常量, 必须在声明的时候指定</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// final修饰的COUNT是一个不可变量, 会在实例对象创建时</span>    <span class="token comment" spellcheck="true">// 1. 先分配堆空间内存, 并设置默认值</span>    <span class="token comment" spellcheck="true">// 2. 再对COUNT进行显式初始化或者构造器初始化</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AddMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// COUNT = 10; // COUNT显式初始化和构造器初始化二选一</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addOne2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>num<span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AddMain app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// app.COUNT = 10; //报错, final变量不可以赋值</span>        app<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230212154244899.png" alt="image-20230212154244899"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jvm-05-java-zi-jie-ma/"/>
      <url>/2023/05/17/jvm-05-java-zi-jie-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="常量池表的解读"><a href="#常量池表的解读" class="headerlink" title="常量池表的解读"></a>常量池表的解读</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230209212807864.png" alt="image-20230209212807864"></p><h2 id="创建MethodrefInfo类刻画CONSTANT-Methodref-info"><a href="#创建MethodrefInfo类刻画CONSTANT-Methodref-info" class="headerlink" title="创建MethodrefInfo类刻画CONSTANT_Methodref_info"></a>创建MethodrefInfo类刻画CONSTANT_Methodref_info</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230209213111088.png" alt="image-20230209213111088" style="zoom:150%;"><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodrefInfo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类信息(其实也只有类名信息)</span>    ClassInfo classInfo<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 名字和描述符</span>    NameAndTypeInfo nameAndTypeInfo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassInfo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类名</span>    Utf8Info className<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameAndTypeInfo</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 名字</span>    Utf8Info name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 描述符</span>    Utf8Info descriptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 相当于JVM层次的String类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utf8Info</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字节数组长度</span>    <span class="token keyword">int</span> byteArrayLengths<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字符串长度</span>    <span class="token keyword">int</span> strLengths<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字符串字面量</span>    String string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类访问标识"><a href="#类访问标识" class="headerlink" title="类访问标识"></a>类访问标识</h1><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230209231837602.png" alt="image-20230209231837602" style="zoom:150%;"><h1 id="类接口索引-父类接口索引和接口索引集合"><a href="#类接口索引-父类接口索引和接口索引集合" class="headerlink" title="类接口索引, 父类接口索引和接口索引集合"></a>类接口索引, 父类接口索引和接口索引集合</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230209232308167.png" alt="image-20230209232308167"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230209232412338.png" alt="image-20230209232412338"></p><h1 id="字段表集合的解读"><a href="#字段表集合的解读" class="headerlink" title="字段表集合的解读"></a>字段表集合的解读</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldInfo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字段名</span>    Utf8Info name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段的描述符</span>    Utf8Info descriptor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2字节的访问标志, 各标识位的含义和类访问标识的含义相同</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> accessFlag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字段中的属性集合</span>    AttributeInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> attributes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法表集合的解读"><a href="#方法表集合的解读" class="headerlink" title="方法表集合的解读"></a>方法表集合的解读</h1><h1 id="属性表集合的解读"><a href="#属性表集合的解读" class="headerlink" title="属性表集合的解读"></a>属性表集合的解读</h1><p>字段的属性用于存储一些额外的信息, 例如初值化值, 注释信息等</p><p>常量字段可以看到ConstantValue属性</p><h1 id="字节码指令附录"><a href="#字节码指令附录" class="headerlink" title="字节码指令附录"></a>字节码指令附录</h1><table><thead><tr><th>字节码指令</th><th>含义与解释</th></tr></thead><tbody><tr><td><code>ldc</code></td><td>从字符串常量池中加载数据</td></tr><tr><td><code>astore_3, astore 4</code></td><td>前者直接作为一条指令, 而后者是astore指令加上操作数4. <br>因为1,2,3常用, 所以将其直接作为整合到操作码中, 达到加速效果</td></tr><tr><td><code>dup</code></td><td>复制</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jvm-00-nei-cun-jie-xi/"/>
      <url>/2023/05/17/jvm-00-nei-cun-jie-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java内存解析"><a href="#Java内存解析" class="headerlink" title="Java内存解析"></a>Java内存解析</h1><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><ul><li>局部变量</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ul><li>new的对象</li></ul><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/Java%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.svg" style="zoom:25%;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jdbc-03-preparedstatement/"/>
      <url>/2023/05/17/jdbc-03-preparedstatement/</url>
      
        <content type="html"><![CDATA[<h1 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>执行 SQL 语句<ul><li>DML、DDL语句</li><li>DQL语句（返回值是ResultSet结果集对象）</li></ul></li></ul><h1 id="实现CRUD操作"><a href="#实现CRUD操作" class="headerlink" title="实现CRUD操作"></a>实现CRUD操作</h1><h2 id="使用Statement操作数据表的弊端"><a href="#使用Statement操作数据表的弊端" class="headerlink" title="使用Statement操作数据表的弊端"></a>使用Statement操作数据表的弊端</h2><ul><li>需要拼接字符串</li><li>存在sql注入的问题</li></ul><h2 id="使用PreparedStatement操作"><a href="#使用PreparedStatement操作" class="headerlink" title="使用PreparedStatement操作"></a>使用PreparedStatement操作</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//        读取文件创建流, 这里需要注意文件的存放路径</span>        InputStream inputStream <span class="token operator">=</span> ConnectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        加载流对象, 获取键值对</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      进行数据库连接配置</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        4. 预编译sql语句, 返回PreparedStatement实例</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into customers(name,email,birth) values (?,?,?)"</span><span class="token punctuation">;</span>        PreparedStatement statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"哪吒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"neza@gmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1998-02-01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        这里需要注意new java.sql.Date()对象, 因为上面的Date导入后Date表示java.util.Date, 并且无法强制类型转换</span>        statement<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        5. 执行操作</span>        statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        6. 关闭连接</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取文件创建流, 这里需要注意文件的存放路径</span>        InputStream inputStream <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        加载流对象, 获取键值对</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      进行数据库连接配置</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeResource</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">,</span> Statement statement<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"update customers set name = ? where id = ?"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        此时ps知道sql要做什么事情, 因此能够解决sql注入问题</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        parameterIndex表示上面的占位符的序号, 默认从1开始</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"莫扎特"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装通用update-增删改-操作"><a href="#封装通用update-增删改-操作" class="headerlink" title="封装通用update(增删改)操作"></a>封装通用update(增删改)操作</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">updateTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update customers set name = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"韩寒"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入Blob数据-视频-图片等"><a href="#插入Blob数据-视频-图片等" class="headerlink" title="插入Blob数据(视频,图片等)"></a>插入Blob数据(视频,图片等)</h4><blockquote><p>重点是将获取到的二进制数据通过<code>toBinaryStream</code>转化为流, 在通过输入流, 输出流和字节数组的配合写入到文件中</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询操作-重点"><a href="#查询操作-重点" class="headerlink" title="查询操作(重点)"></a>查询操作(重点)</h3><h4 id="实现方式一"><a href="#实现方式一" class="headerlink" title="实现方式一"></a>实现方式一</h4><blockquote><p>通过属性的顺序进行对应, 关联不够紧密, 容易被忽视而产生<code>bug</code></p><p>此外如果将<code>sql</code>语句中的<code>id</code>和<code>name</code>的顺序互换, 或者是查找<code>name</code>和<code>email</code>而没有查找<code>id</code>则均会报错, <strong>需要对其进行改进</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 通过反射进行赋值, 属性的顺序和表的列的顺序需要对应, 顺序对应不够通用, 通过名称相互对应关联更强     *     * @param sql     * @param args     * @return     * @throws Exception     */</span>    ArrayList<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">queryForCustomers</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        根据结果集的列数来进行填充</span>        ResultSet resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSetMetaData metaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Customer<span class="token operator">></span> customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Customer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Customer customer <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object object <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            customers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customers<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">queryTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select `id`,`name` from customers where `id` &lt;= ?"</span><span class="token punctuation">;</span>        <span class="token function">queryForCustomers</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现方式二"><a href="#实现方式二" class="headerlink" title="实现方式二"></a>实现方式二</h4><blockquote><p>通过属性的名称和表的列名相对应, 表的列名在结果集中可以获得</p><p>此时没有处理JavaBean类的属性和数据库中表的列名<strong>自定义映射</strong>的问题, 如果二者不一致将会导致<code>bug</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java">    ArrayList<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token function">queryForCustomersv</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        根据结果集的列数来进行填充</span>        ResultSet resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        结果集的元数据</span>        ResultSetMetaData metaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Customer<span class="token operator">></span> customers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Customer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//resultSet.next()判断是否有下一个item, 如果有返回true并向后移动</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Customer customer <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                获取结果集中的列名, 即获取数据库中表的列名</span>                String columnName <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//                获取JavaBean类中相对应的属性, 这里默认完全对应, 暂时不考虑数据库表中的命名和JavaBean类中不一致的情况</span>                Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            customers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customers<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现方式三"><a href="#实现方式三" class="headerlink" title="实现方式三"></a>实现方式三</h4><blockquote><p>解决映射问题的两个关键步骤</p><ul><li>执行<code>sql</code>语句时为查询结果集<strong>取别名</strong>, 别名与JavaBean类相对应</li><li>结果集<code>resultSet</code>中使用<code>getColumnLabel()</code>来<strong>获取别名</strong></li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java">    ArrayList<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">queryForOrderv2</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ResultSet resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSetMetaData metaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Order Order <span class="token operator">=</span> <span class="token punctuation">(</span>Order<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取sql语句中的别名, 没有设置别名时默认取原来的列名</span>                String columnName <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Order<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Order<span class="token punctuation">)</span><span class="token punctuation">;</span>            orders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orders<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">queryTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    sql语句中取别名</span>        String sql <span class="token operator">=</span> <span class="token string">"select `order_name` orderName ,`order_id` orderId from `order` where `order_id` &lt;= ?"</span><span class="token punctuation">;</span>        <span class="token function">queryForOrderv2</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现方式四"><a href="#实现方式四" class="headerlink" title="实现方式四"></a>实现方式四</h4><blockquote><p>针对不同表的通用查询功能</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ResultSet resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSetMetaData metaData <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        不够通用, 让外部调用传入则更加泛用</span><span class="token comment" spellcheck="true">//        Class&lt;?> clazz = Class.forName("Order");</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            T t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String columnName <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        JDBCUtils<span class="token punctuation">.</span><span class="token function">closeResource</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> preparedStatement<span class="token punctuation">,</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ts<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量插入数据-批处理优化"><a href="#批量插入数据-批处理优化" class="headerlink" title="批量插入数据(批处理优化)"></a>批量插入数据(批处理优化)</h3><ul><li><strong>使用批处理技术</strong>来”攒”sql, 然后一次性处理</li><li><strong>关闭自动提交</strong>, 防止每次处理都会提交一次, 等所有数据处理完再一次性提交</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/17/jdbc-01-drivermanager/"/>
      <url>/2023/05/17/jdbc-01-drivermanager/</url>
      
        <content type="html"><![CDATA[<p>IDEA导入本地jar包</p><p>数据库提高批量插入的效率</p><ol><li>使用prepareStatement</li><li>攒sql</li><li>设置不允许自动提交数据</li></ol><p>数据库事务</p><blockquote><p>例如转账这件事,要么两个人的数据都改,要么都不改</p></blockquote><ol><li><p>回滚操作</p><blockquote><p>需要保证数据不被提交</p><p>哪些操作会导致数据的自动提交:</p><ul><li>DDL操作</li><li>DML操作(增删改查):默认自动提交,但可以通过sql语句修改</li><li>关闭连接(关闭窗口)</li></ul></blockquote></li></ol><p>数据库连接池避免重复造池子: 使用静态代码块</p><p>工具包   核心是创建QueryRunner对象,调用方法</p><p> 以及</p><p>ResultSetHandler的实现类的对象作为方法的一个参数传入,不同的实现类对象对应不同的搜索要求(sql字符串), 其中scalaHandler是用来查询特殊值.例如最大值</p><h2 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h2><ol><li>导入jdbc规范化接口</li><li>添加相应的数据驱动依赖</li><li>获取连接对象Connection</li><li>获取Statement对象用以执行sql语句</li><li>使用ResultSet结果集获取返回结果</li><li>关闭资源连接</li></ol><h1 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>注册驱动（例如，MySQL驱动、Oracle驱动）</li><li>获取连接对象（Connection / Session）</li></ul><h1 id="连接数据库的方式"><a href="#连接数据库的方式" class="headerlink" title="连接数据库的方式"></a>连接数据库的方式</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p><code>new com.mysql.cj.jdbc.Drive()</code>使用到了第三方的API, 不利于程序移植, 想要程序正确的执行, 必须添加该jar包, 否则编译错误</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        数据库驱动</span><span class="token comment" spellcheck="true">//        com.mysql.cj.jdbc.Driver()是一个具体的实现类, 实现了Driver接口</span>        Driver driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        可以从Database选项中进行查找</span><span class="token comment" spellcheck="true">//        jdbc:mysql表示协议</span><span class="token comment" spellcheck="true">//        root@localhost表示主机名,前面记得添加root, 否则默认windows对应的用户名</span><span class="token comment" spellcheck="true">//        3306表示端口号</span><span class="token comment" spellcheck="true">//        jdbc表示数据库</span><span class="token comment" spellcheck="true">//        8.0版本后必须设置时区</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://root@localhost:3306/jdbc"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        通过查找driver.connect()发现需要一个Properties对象, 并且必须包含username和password属性</span>        Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        接口的多态: 实际上执行的是实现类中重写的connect方法</span>        Connection connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>通过<strong>反射</strong>来获取<code>Driver</code>实例化对象</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        通过反射来获取Driver的实现类对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://root@localhost:3306/jdbc"</span><span class="token punctuation">;</span>        Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h2><p>使用<code>DriverManager</code>来获取驱动, <code>MySQL</code>驱动在加载到内存中会自动创建一个</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下面两行代码实际上可以注释掉, 因为Driver中有一个静态代码块, 会自动创建一个对象并加载</span>        Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://root@localhost:3306/jdbc"</span><span class="token punctuation">;</span>        String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>com.mysql.cj.jdbc.Driver源代码</strong></p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h2><p>基本信息放入到配置信息中, 而不要放在java代码中. </p><p><strong>优点</strong></p><ul><li>实现了数据和代码的解耦</li><li>如果需要修改配置文件信息, 不需要对程序重新进行打包</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        读取文件创建流, 这里需要注意文件的存放路径</span>        InputStream inputStream <span class="token operator">=</span> ConnectTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        加载流对象, 获取键值对</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      进行数据库连接配置</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>jdbc.properties</code>文件配置如下, 存放路径在<code>resource</code>下</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://root@localhost:3306/jdbc</span><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/14/spring-zhu-jie-08-autowired-zi-dong-zhu-ru-yuan-li/"/>
      <url>/2023/05/14/spring-zhu-jie-08-autowired-zi-dong-zhu-ru-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="自动注入原理"><a href="#自动注入原理" class="headerlink" title="自动注入原理"></a>自动注入原理</h1><p>假定 Spring 容器按下图组织管理 Bean 对象</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230514164644344.png" alt="Spring容器管理Bean"></p><p>@Autowired：默认按类型注入，当容器中存在多个相同类型的Bean时，按变量名查找。按类型注入理解成不需要指定名字。</p><p>使用 @Autowired 自动注入 Bean 对象时的流程猜测如下：</p><ol><li><p>先使用 byType 方式获取一列数据（map）</p></li><li><p>如果 <code>map.size() == 1</code>，则获取这唯一一个元素</p></li><li><p>如果 <code>map.size() &gt; 1</code>，那么通过变量名去 map 中获取 Bean 对象，即 <code>map.get()</code></p></li><li><p>如果 <code>map.get()</code> 返回值为 null，那么会报错。</p><blockquote><p>  这种错误未必会被 IDEA 检测出来，因为有些 Bean 是由 <code>factoryBean.getObject()</code> 生成的，可能手动注入一个 Bean，又通过 FactoryBean 注入，此时 IDEA 检测不出来，但是在运行时会报错。因此，使用 <code>@Autowired</code> 在编写时没有提示报错不代表自动注入没有 bug。</p></blockquote></li></ol><p><strong>显式声明高于可推断的优先级</strong>，因此@Primary注解的优先级高于变量名推断。</p><p>@Qualify注解和@Autowired搭配使用，@Primary注解搭配@Bean注解使用；前者用于获取Bean，后者用于注册Bean。</p><h2 id="Autowired-自动注入的三种方式"><a href="#Autowired-自动注入的三种方式" class="headerlink" title="@Autowired 自动注入的三种方式"></a>@Autowired 自动注入的三种方式</h2><h3 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h3><ul><li>通过反射直接为属性赋值，不会执行setter方法</li><li>以递归地方式进行依赖注入，会有循环依赖的问题（<code>a-&gt;b-&gt;a-&gt;b-&gt;...</code>）</li></ul><p>不能为 final 修饰的字段进行注入，因为 final 修饰的字段必须在实例化的时候就进行赋值。</p><h3 id="Setter-方法注入"><a href="#Setter-方法注入" class="headerlink" title="Setter 方法注入"></a>Setter 方法注入</h3><p>当存在循环依赖 <code>a-&gt;b-&gt;a</code> 时，setter 方式解决循环依赖：</p><ol><li>Spring 先创建 a 的默认实例（基本类型的值为0或false，对象类型的值为null），将其放入到缓存中</li><li>然后，正常创建依赖项 b 的实例。b 实例会从缓存中获取 a 实例进行 setter 注入</li><li>最后，完成 a 实例的 setter 注入</li></ol><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><ul><li>可以注入 final 修饰的字段</li><li>存在循环依赖的问题</li></ul><p>可以为 final 修饰的字段进行赋值。</p><p>当@Component标注的Spring组件类仅有一个构造器时，可以省略@Autowired。即从容器中查找参数并注入是作为框架的默认行为，本质上就是框架按照它自己的规则向容器中注入Bean，而Bean的生成规则就是框架自定义的一套流程。</p><p>构造器注入和setter注入本质上和带形参的@Bean方法相同。</p><h1 id="Spring中的循环依赖为什么用三层缓存"><a href="#Spring中的循环依赖为什么用三层缓存" class="headerlink" title="Spring中的循环依赖为什么用三层缓存"></a>Spring中的循环依赖为什么用三层缓存</h1><p>针对循环依赖这个问题，实际上只需要两层缓存即可解决。</p><p>而 Spring 中解决循环依赖使用了三层缓存是因为 Spring 还考虑了动态代理（AOP）生成的代理对象，再考虑动态代理生成的代理类对象的基础上，两层缓存就无法解决问题了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/05/14/spring-zhu-jie-07-value-zhu-ru/"/>
      <url>/2023/05/14/spring-zhu-jie-07-value-zhu-ru/</url>
      
        <content type="html"><![CDATA[<p><code>@Value</code> 不仅仅局限于值注入，或者说一切的高级功能最后都落地于值注入。下面我们使用 <code>@Value</code>  来完成一些更高级的注入。</p><ul><li><code>${}</code>：解析环境（Environment）中的值，本质上是通过 key 获取 value</li><li><code>#{}</code>：解析 SpEL 表达式</li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>01-Bean注解</title>
      <link href="/2023/05/13/spring-zhu-jie-01-bean-pei-zhi-dui-xiang/"/>
      <url>/2023/05/13/spring-zhu-jie-01-bean-pei-zhi-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="配置Bean对象"><a href="#配置Bean对象" class="headerlink" title="配置Bean对象"></a>配置Bean对象</h1><h2 id="xml配置文件方式"><a href="#xml配置文件方式" class="headerlink" title="xml配置文件方式"></a>xml配置文件方式</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>写配置文件</li><li>bean标签注入</li><li>测试获取bean对象</li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置一个Person对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiong.bean.Person<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MainConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByXmlFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118022738220.png" alt="image-20221118022738220"></p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><ul><li>@Configuration: 设置配置类, 用以取代配置文件</li><li>@Bean: 设置Bean对象, 用以取代配置文件中的bean标签</li></ul><ol><li>使用@Configuration设置配置类</li><li>通过@Bean设置bean方法<ol><li>在bean方法中, new对象</li><li>设置对象属性</li><li>返回return对象</li><li>完成将bean对象注入到容器中</li></ol></li><li>测试获取bean对象</li></ol><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MainConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByConfigClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结果展示-1"><a href="#结果展示-1" class="headerlink" title="结果展示"></a>结果展示</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118022720610.png" alt="image-20221118022720610"></p><h1 id="Bean注解解析"><a href="#Bean注解解析" class="headerlink" title="@Bean注解解析"></a>@Bean注解解析</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Documented<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowire<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AliasFor<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">autowireCandidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    String <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> AbstractBeanDefinition<span class="token punctuation">.</span>INFER_METHOD<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h2><blockquote><p>作为bean对象的id</p><p>默认情况下是bean方法的方法名. 例如<code>person()</code>和<code>getBean(“person”, Person.class)</code></p></blockquote><h3 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118024407013.png" alt="image-20221118024407013"></p><h3 id="显示指明bean对象的id"><a href="#显示指明bean对象的id" class="headerlink" title="显示指明bean对象的id"></a>显示指明bean对象的id</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118024601637.png" alt="image-20221118024601637"></p><h3 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118024740434.png" alt="image-20221118024740434"></p><h1 id="Bean-的声明周期"><a href="#Bean-的声明周期" class="headerlink" title="Bean 的声明周期"></a>Bean 的声明周期</h1><ol><li>默认空参构造器</li><li>setXXX() 属性赋值方法</li><li>BeanPostProcessor 接口中的 postProcessBeforeInitialization() 后置处理器方法</li><li>initMethod() 初始化方法<ol><li>InitializingBean 接口的 afterPropertiesSet() 方法</li><li>@PostConstruct 注解</li><li>@Bean 注解中的 init-method 属性</li></ol></li><li>postProcessAfterInitialization() 后置处理器方法</li><li>destroyMethod() 销毁方法</li></ol><h1 id="手工实现-MyBean-注解"><a href="#手工实现-MyBean-注解" class="headerlink" title="手工实现 @MyBean 注解"></a>手工实现 @MyBean 注解</h1><h2 id="仿注解"><a href="#仿注解" class="headerlink" title="仿注解"></a>仿注解</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyBean</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="仿配置类"><a href="#仿配置类" class="headerlink" title="仿配置类"></a>仿配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@MyBean</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>Person person<span class="token punctuation">,</span> Cat cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token operator">+</span> <span class="token string">" -[own]-> "</span> <span class="token operator">+</span> cat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="辅助打印输出的实体类"><a href="#辅助打印输出的实体类" class="headerlink" title="辅助打印输出的实体类"></a>辅助打印输出的实体类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Cat{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyBean-注解解析类（后置处理器）的简易实现"><a href="#MyBean-注解解析类（后置处理器）的简易实现" class="headerlink" title="@MyBean 注解解析类（后置处理器）的简易实现"></a>@MyBean 注解解析类（后置处理器）的简易实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 可以看做是处理@MyBean注解的一个后置处理器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessorImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"kitty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟Spring容器</span>        HashMap<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Cat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0. 通过扫描获取获取配置类(略)</span>        <span class="token comment" spellcheck="true">// 1. 解析注解@MyBean</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"prepared.MyConfiguration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object configuration <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里写死MyBean.class说明是解析@MyBean, 不同的后置处理器本质的区别: 针对哪个注解进行解析并实现相应的功能</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>MyBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 解析参数, 从容器中赋值</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ArrayList<span class="token operator">&lt;</span>Object<span class="token operator">></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> parameterType <span class="token operator">:</span> parameterTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 根据解析得到的参数类型, 从容器中获取值, 赋值给方法的形参, 然后再调用该方法</span>                    Object parameterBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                    objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parameterBean<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//TODO: 如果能将其当做某个属性保存起来就更好了, 现在这种实现在解析的时候就调用了</span>                Object<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterBeans <span class="token operator">=</span> objects<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO: 这里获取到返回结果类型为returnType, 但是如何实现强制类型转换呢?</span>                Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> parameterBeans<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-ComponentScan注解</title>
      <link href="/2023/05/13/spring-zhu-jie-02-componentscan-bao-sao-miao/"/>
      <url>/2023/05/13/spring-zhu-jie-02-componentscan-bao-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="ComponentScan包扫描"><a href="#ComponentScan包扫描" class="headerlink" title="@ComponentScan包扫描"></a>@ComponentScan包扫描</h1><h2 id="配置文件方式"><a href="#配置文件方式" class="headerlink" title="配置文件方式"></a>配置文件方式</h2><ol><li>在配置文件中配置包扫描</li><li>测试<ol><li>通过包扫描自动注入@Configuration配置类组件</li><li>在@Configuration组件中创建bean对象</li><li>通过配置文件启动spring程序, 从容器中获取@Configuration组件中配置的bean对象</li></ol></li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置包扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiong<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"human"</span><span class="token punctuation">)</span>    Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>MainConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByXmlFileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h3><h4 id="不添加包扫描的效果"><a href="#不添加包扫描的效果" class="headerlink" title="不添加包扫描的效果"></a>不添加包扫描的效果</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118030030259.png" alt="image-20221118030030259"></p><h4 id="添加包扫描的效果"><a href="#添加包扫描的效果" class="headerlink" title="添加包扫描的效果"></a>添加包扫描的效果</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118030146090.png" alt="image-20221118030146090"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118030400871.png" alt="image-20221118030400871"></p><h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><ol><li>添加一个配置类, 在配置类中通过@ComponentScan注解配置包扫描</li><li>测试<ol><li>spring应用程序通过读取该配置类来启动</li><li>获取通过包扫描获得的其他组件</li></ol></li></ol><h3 id="配置类-主启动类"><a href="#配置类-主启动类" class="headerlink" title="配置类(主启动类)"></a>配置类(主启动类)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.xiong"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包扫描获得的其他组件"><a href="#包扫描获得的其他组件" class="headerlink" title="包扫描获得的其他组件"></a>包扫描获得的其他组件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBeanByConfigClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringApplicationMain<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118031847267.png" alt="image-20221118031847267"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118032054933.png" alt="image-20221118032054933"></p><h1 id="ComponentScan注解解析"><a href="#ComponentScan注解解析" class="headerlink" title="@ComponentScan注解解析"></a>@ComponentScan注解解析</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>ComponentScans<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ComponentScan</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> <span class="token function">nameGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token operator">></span> <span class="token function">scopeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> AnnotationScopeMetadataResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    ScopedProxyMode <span class="token function">scopedProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>    String <span class="token function">resourcePattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> ClassPathScanningCandidateComponentProvider<span class="token punctuation">.</span>DEFAULT_RESOURCE_PATTERN<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">useDefaultFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    Filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">includeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Filter<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">excludeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">lazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    @<span class="token keyword">interface</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        FilterType <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">;</span>        <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"classes"</span><span class="token punctuation">)</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h2><blockquote><p>包扫描的位置</p></blockquote><h2 id="includeFilters属性"><a href="#includeFilters属性" class="headerlink" title="includeFilters属性"></a>includeFilters属性</h2><blockquote><p>指定只包含哪些组件</p><p>只包含哪些注解需要禁用默认的包扫描规则才能够生效</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FilterType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.xiong"</span><span class="token punctuation">,</span>        includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>                        <span class="token comment" spellcheck="true">//指定注解方式过滤</span>                        type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//指定需要扫描的具体类型</span>                        classes <span class="token operator">=</span> <span class="token punctuation">{</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Service<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="禁用默认过滤规则前"><a href="#禁用默认过滤规则前" class="headerlink" title="禁用默认过滤规则前"></a>禁用默认过滤规则前</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118034945469.png" alt="image-20221118034945469"></p><h3 id="禁用默认规则后"><a href="#禁用默认规则后" class="headerlink" title="禁用默认规则后"></a>禁用默认规则后</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118035243012.png" alt="image-20221118035243012"></p><h2 id="excludeFilters属性"><a href="#excludeFilters属性" class="headerlink" title="excludeFilters属性"></a>excludeFilters属性</h2><blockquote><p>指定需要排除的组件</p></blockquote><h3 id="默认包含所有组件"><a href="#默认包含所有组件" class="headerlink" title="默认包含所有组件"></a>默认包含所有组件</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118034033777.png" alt="image-20221118034033777"></p><h3 id="选择过滤类型"><a href="#选择过滤类型" class="headerlink" title="选择过滤类型"></a>选择过滤类型</h3><h4 id="选择过滤方式"><a href="#选择过滤方式" class="headerlink" title="选择过滤方式"></a>选择过滤方式</h4><ul><li><code>ANNOTATION</code>: 按照注解</li><li><code>ASPECTJ</code>: 使用aspectj表达式</li><li><code>ASSIGNABLE_TYPE</code>: 按照给定的class的类型</li><li><code>CUSTOM</code>: 自定义规则</li><li><code>REGEX</code>: 使用正则表达式</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FilterType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.xiong"</span><span class="token punctuation">,</span>        excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>                        <span class="token comment" spellcheck="true">//指定注解方式过滤</span>                        type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//指定过滤的具体类型</span>                        classes <span class="token operator">=</span> <span class="token punctuation">{</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Service<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118034141007.png" alt="image-20221118034141007"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118034441579.png" alt="image-20221118034441579"></p><h1 id="自定义过滤规则TypeFilter"><a href="#自定义过滤规则TypeFilter" class="headerlink" title="自定义过滤规则TypeFilter"></a>自定义过滤规则TypeFilter</h1><p>使用FilterType.CUSTOM时自定义过滤器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> FilterType <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Filter candidates marked with a given annotation.     * @see org.springframework.core.type.filter.AnnotationTypeFilter     */</span>    ANNOTATION<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Filter candidates assignable to a given type.     * @see org.springframework.core.type.filter.AssignableTypeFilter     */</span>    ASSIGNABLE_TYPE<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Filter candidates matching a given AspectJ type pattern expression.     * @see org.springframework.core.type.filter.AspectJTypeFilter     */</span>    ASPECTJ<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Filter candidates matching a given regex pattern.     * @see org.springframework.core.type.filter.RegexPatternTypeFilter     */</span>    REGEX<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**      * Filter candidates using a given custom     * {@link org.springframework.core.type.filter.TypeFilter} implementation.     */</span>    CUSTOM<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义TypeFilter的实现类"><a href="#自定义TypeFilter的实现类" class="headerlink" title="自定义TypeFilter的实现类"></a>自定义TypeFilter的实现类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotationMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>ClassMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>classreading<span class="token punctuation">.</span>MetadataReader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>classreading<span class="token punctuation">.</span>MetadataReaderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>TypeFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XTypeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">TypeFilter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param metadataReader        读取到的当前正在扫描的类的信息     * @param metadataReaderFactory 可以获取到其他任何类的信息     * @return 如果成功匹配, 返回true; 否则返回false     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">,</span> MetadataReaderFactory metadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取当前类注解信息</span>        AnnotationMetadata annotationMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前正在扫描的类的类信息</span>        ClassMetadata classMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取正在扫描的类的类名</span>        String className <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>ROOT<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前类资源(类路径classpath)</span>        Resource resource <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果扫描的类的类名中包含service(不考虑大小写的情况下), 返回true; 否则返回false</span>        <span class="token keyword">return</span> className<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用FilterType-CUSTOM方式的包扫描"><a href="#使用FilterType-CUSTOM方式的包扫描" class="headerlink" title="使用FilterType.CUSTOM方式的包扫描"></a>使用FilterType.CUSTOM方式的包扫描</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>XTypeFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FilterType<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.xiong"</span><span class="token punctuation">,</span>        excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>                        <span class="token comment" spellcheck="true">//指定注解方式过滤</span>                        type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">//使用自定义的包扫描规则</span>                        classes <span class="token operator">=</span> <span class="token punctuation">{</span>XTypeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118043103395.png" alt="image-20221118043103395"></p><h2 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118043152098.png" alt="image-20221118043152098"></p><h1 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h1><h2 id="MetadataReader类-和-MetadataReaderFactory类"><a href="#MetadataReader类-和-MetadataReaderFactory类" class="headerlink" title="MetadataReader类 和 MetadataReaderFactory类"></a>MetadataReader类 和 MetadataReaderFactory类</h2><p>MetadataReader 用于记录当前正在处理的类的信息，而 MetadataReaderFactory 可以调用 <code>getMetadataReader()</code> 方法传入类名来获得指定类的 MetadataReader。</p><p>MetadataReaderFactory 的作用就是为了获取 MetadataReader，同时框架已经提供了现成的 MetadataReader，因此是否需要使用 MetadataReaderFactory 取决于当前类的匹配条件是否需要使用其它类的信息。</p><p>MetadataReader 接口中有三个方法，分别是：</p><ul><li><code>getClassMetadata()</code>：获取类本身的元数据信息</li><li><code>getAnnotationMetadata()</code>：获取类级别注解的元数据信息</li><li><code>getResource()</code>：获取文件相关的信息（文件对象File、文件路径等）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MergedAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MergedAnnotations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotationMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>ClassMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>MethodMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>classreading<span class="token punctuation">.</span>MetadataReader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>classreading<span class="token punctuation">.</span>MetadataReaderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>classreading<span class="token punctuation">.</span>SimpleMetadataReaderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>TypeFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义类型过滤器 * &lt;p> * 用途: * &lt;li>{@link org.springframework.context.annotation.ComponentScan} */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTypeFilterUsedByComponentScanAnnotation</span> <span class="token keyword">implements</span> <span class="token class-name">TypeFilter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param metadataReader        读取到的当前正在扫描的类的信息     * @param metadataReaderFactory 可以获取到其他任何类的信息     * @return 如果成功匹配, 返回true; 否则返回false     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">,</span> MetadataReaderFactory metadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// SimpleMetadataReader 和 CachingMetadataReaderFactory</span>        <span class="token comment" spellcheck="true">//1. 获取当前类注解信息</span>        AnnotationMetadata annotationMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 获取当前正在扫描的类的类信息 SimpleAnnotationMetadata</span>        ClassMetadata classMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.1 获取正在扫描的类的类名</span>        String className <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"className = "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.2</span>        String enclosingClassName <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getEnclosingClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enclosingClassName = "</span> <span class="token operator">+</span> enclosingClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.3</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> memberClassNames <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getMemberClassNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String memberClassName <span class="token operator">:</span> memberClassNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>memberClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3. 获取当前类资源(类路径classpath) FileSystemResource</span>        Resource resource <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果扫描的类的类名中包含Service, 返回true; 否则返回false</span>        <span class="token comment" spellcheck="true">// TODO: 根据前面获取的信息, 定义匹配逻辑, 这里简单定义为类名中是否包含“service”字符串</span>        <span class="token keyword">return</span> className<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * ClassMetadata: 涉及与类相关的元数据信息     *     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getClassMetadataTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        SimpleMetadataReaderFactory metadataReaderFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 MetadataReaderFactory 可以获得其他类的信息</span>        MetadataReader studentMetadataReader <span class="token operator">=</span> metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassMetadata classMetadata <span class="token operator">=</span> studentMetadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// className: 类名</span>        String className <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"className = "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// enclosingClass(封闭类), 表示嵌套类(静态内部类)所在的最外层类</span>        <span class="token keyword">boolean</span> hasEnclosingClass <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">hasEnclosingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hasEnclosingClass = "</span> <span class="token operator">+</span> hasEnclosingClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        String enclosingClassName <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getEnclosingClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"enclosingClassName = "</span> <span class="token operator">+</span> enclosingClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// memberClassNames(内部类)</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> memberClassNames <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getMemberClassNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>memberClassNames<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// superClassName(父类)</span>        String superClassName <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getSuperClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"superClassName = "</span> <span class="token operator">+</span> superClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// interface(接口)</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> interfaceNames <span class="token operator">=</span> classMetadata<span class="token punctuation">.</span><span class="token function">getInterfaceNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interfaceNames<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * AnnotationMetadata: 注解相关的元数据信息     *     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getAnnotationMetadataTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        SimpleMetadataReaderFactory metadataReaderFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 MetadataReaderFactory 可以获得其他类的信息</span>        MetadataReader studentMetadataReader <span class="token operator">=</span> metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationMetadata annotationMetadata <span class="token operator">=</span> studentMetadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否含有某个注解</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"#######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取当前类上的RUNTIME类型的注解, 父类上的注解无法获取到</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> annotationTypes <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotationTypes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"#######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MergedAnnotations annotations <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MergedAnnotation<span class="token operator">&lt;</span>Annotation<span class="token operator">></span> annotation <span class="token operator">:</span> annotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span>Annotation<span class="token operator">></span> type <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String typeName <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"typeName = "</span> <span class="token operator">+</span> typeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"#######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这种方式只能获取类级别的注解, 获取方法级别的注解需要借助RequestMappingHandlerMapping</span>        MergedAnnotations mergedAnnotations <span class="token operator">=</span> MergedAnnotations<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MergedAnnotation<span class="token operator">&lt;</span>Annotation<span class="token operator">></span> mergedAnnotation <span class="token operator">:</span> mergedAnnotations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">>></span> metaTypes <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">getMetaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            metaTypes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span>Annotation<span class="token operator">></span> type <span class="token operator">=</span> mergedAnnotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"type = "</span> <span class="token operator">+</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//TODO: 能否确定类中有哪些方法注解吗? 这里是写死了MyAnnotation.class, 能否动态获取呢？</span>        Set<span class="token operator">&lt;</span>MethodMetadata<span class="token operator">></span> annotatedMethods <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotatedMethods</span><span class="token punctuation">(</span>MyAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MethodMetadata methodMetadata <span class="token operator">:</span> annotatedMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String methodName <span class="token operator">=</span> methodMetadata<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"methodName = "</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>            String declaringClassName <span class="token operator">=</span> methodMetadata<span class="token punctuation">.</span><span class="token function">getDeclaringClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"declaringClassName = "</span> <span class="token operator">+</span> declaringClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>            String returnTypeName <span class="token operator">=</span> methodMetadata<span class="token punctuation">.</span><span class="token function">getReturnTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"returnTypeName = "</span> <span class="token operator">+</span> returnTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"#######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Resource: 和字节码文件(.class)相关     *     * @throws IOException     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getResourceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        SimpleMetadataReaderFactory metadataReaderFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过 MetadataReaderFactory 可以获得其他类的信息</span>        MetadataReader studentMetadataReader <span class="token operator">=</span> metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Resource resource <span class="token operator">=</span> studentMetadataReader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String filename <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filename = "</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>        File file <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String fileAbsolutePath <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fileAbsolutePath = "</span> <span class="token operator">+</span> fileAbsolutePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>    <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Component</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age = "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Service</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer level<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@MyAnnotation</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"level = "</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student other<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span> other<span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 为了测试MemberClass</span>        <span class="token annotation punctuation">@Data</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Grade</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-Scope注解</title>
      <link href="/2023/05/13/spring-zhu-jie-03-scope-she-zhi-zu-jian-zuo-yong-yu/"/>
      <url>/2023/05/13/spring-zhu-jie-03-scope-she-zhi-zu-jian-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="Scope设置组件作用域"><a href="#Scope设置组件作用域" class="headerlink" title="@Scope设置组件作用域"></a>@Scope设置组件作用域</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>singleton</code>: ioc容器创建的时候调用bean方法创建bean对象</li><li><code>prototype</code>: 每次bean对象被调用的时候创建</li><li>使用 <code>@Lazy</code> 可以使得bean对象在被调用的时候才加载</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="prototype模式"><a href="#prototype模式" class="headerlink" title="prototype模式"></a>prototype模式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> BeanDefinition<span class="token punctuation">.</span>SCOPE_PROTOTYPE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为ioc容器添加person对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prototypeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>PersonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================bean对象调用后======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person personA <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person personB <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personA <span class="token operator">==</span> personB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118093945406.png" alt="image-20221118093945406"></p><h3 id="singleton模式"><a href="#singleton模式" class="headerlink" title="singleton模式"></a>singleton模式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> BeanDefinition<span class="token punctuation">.</span>SCOPE_SINGLETON<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为ioc容器添加person对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>PersonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================bean对象调用前后======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person personA <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person personB <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personA <span class="token operator">==</span> personB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118094019002.png" alt="image-20221118094019002"></p><h3 id="Lazy注解"><a href="#Lazy注解" class="headerlink" title="@Lazy注解"></a>@Lazy注解</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> BeanDefinition<span class="token punctuation">.</span>SCOPE_SINGLETON<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    Person <span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为ioc容器添加person对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>PersonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================bean对象调用前后======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person personA <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person personB <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personA <span class="token operator">==</span> personB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118094435144.png" alt="image-20221118094435144"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-Conditional注解</title>
      <link href="/2023/05/13/spring-zhu-jie-04-conditional-tiao-jian-zhu-ru/"/>
      <url>/2023/05/13/spring-zhu-jie-04-conditional-tiao-jian-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h1 id="Conditional条件注入"><a href="#Conditional条件注入" class="headerlink" title="@Conditional条件注入"></a>@Conditional条件注入</h1><h2 id="不使用条件注入前"><a href="#不使用条件注入前" class="headerlink" title="不使用条件注入前"></a>不使用条件注入前</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Lazy<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"linus"</span><span class="token punctuation">)</span>    Person <span class="token function">linus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"linus"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"bill"</span><span class="token punctuation">)</span>    Person <span class="token function">bill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"bill gate"</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">noConditionalBeanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>PersonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================bean对象调用前后======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> persons <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String person <span class="token operator">:</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118095453376.png" alt="image-20221118095453376"></p><h2 id="使用条件注入后"><a href="#使用条件注入后" class="headerlink" title="使用条件注入后"></a>使用条件注入后</h2><blockquote><p>根据操作系统类型进行条件注入: 在Linux系统中注入linus, 在Windows系统中注入bill</p></blockquote><ol><li>自定义条件判断类XXXCondition实现Condition接口</li><li>满足条件返回true, 否则返回false</li><li>在@Bean上面使用@Conditional(XXXCondition.class)来使用自定义条件判断类</li></ol><h3 id="自定义条件判断类"><a href="#自定义条件判断类" class="headerlink" title="自定义条件判断类"></a>自定义条件判断类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>condition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConditionContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotatedTypeMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用来判断当前系统是否是Linux系统 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinuxCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param context  表示上下文环境, 可以获取需要的信息     * @param metadata 标注了@Conditional注解的类的元数据     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取环境变量</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取操作系统名称</span>        String osType <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> osType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> osType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>ROOT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"linux"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>condition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConditionContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotatedTypeMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取环境变量</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取操作系统名称</span>        String osType <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取保存所有bean对象的registry</span>        BeanDefinitionRegistry registry <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> hasPerson <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> osType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> osType<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>ROOT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"windows"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用条件判断类"><a href="#使用条件判断类" class="headerlink" title="使用条件判断类"></a>使用条件判断类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>LinuxCondition<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>WindowsCondition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Conditional<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>LinuxCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"linus"</span><span class="token punctuation">)</span>    Person <span class="token function">linus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"linus"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>WindowsCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"bill"</span><span class="token punctuation">)</span>    Person <span class="token function">bill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"bill gate"</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">conditionalBeanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>PersonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================bean对象调用前后======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> persons <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String person <span class="token operator">:</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118101253393.png" alt="image-20221118101253393"></p><h1 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h1><blockquote><p>在使用自定义条件判断类实现Condition接口后, match()方法中有两个类型参数, 学习了解ConditionContext和AnnotatedTypeMetadata可以更好地帮助实现各种需求的条件判断类</p></blockquote><h2 id="ConditionContext-和-AnnotatedTypeMetadata类"><a href="#ConditionContext-和-AnnotatedTypeMetadata类" class="headerlink" title="ConditionContext 和 AnnotatedTypeMetadata类"></a>ConditionContext 和 AnnotatedTypeMetadata类</h2><p>ConditionContext 使用的实现类是 ConditionEvaluator$ConditionContextImpl（即 ConditionEvaluator 中的内部类 ConditionContextImpl）。但是由于ConditionEvaluator 是一个包级别的私有类（缺省修饰），因此通过 <code>Class.forName()</code> 反射调用的方式来对其进行测试。其内部包含 5 个字段：</p><ul><li><p>BeanDefinitionRegistry</p><p>实际上仅需要BeanDefinitionRegistry，其本身就是一个BeanFactory 或者 ApplicationContext，下面的配置在默认情况下都由BeanDefinitionRegistry导出生成。如果这里实际是一个 ApplicationContext，那么其实现了 Resource、Environment 等接口，可以直接获取其中的 Resource、Environment 等对象。但如果这里是一个 BeanFactory，同时在外部没有传值的情况下，那么就使用这些接口的一个标准的或默认的实现。</p></li><li><p>ConfigurableListableBeanFactory</p></li><li><p>Environment</p></li><li><p>ResourceLoader：加载类路径下的资源文件</p></li><li><p>ClassLoader：</p></li></ul><p>AnnotatedTypeMetadata 使用的实现类是 SimpleMethodMetadata，表示方法的元数据信息。在该案例中，用于获取 <code>@Conditional</code> 所标注的方法的元数据。而MethodMetadata 是 AnnotatedTypeMetadata 的子接口，其中包含的信息有：</p><ul><li>方法名（methodName）</li><li>返回值类型名（returnTypeName）</li><li>所在的类名（declaringClassName）</li><li>方法上包含的注解（annotations）</li><li>是否使用final修饰、是否静态、是否重载、是否是抽象方法等标识位</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConditionContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ResourceLoader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionalAnnotationTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// GenericWebApplicationContext</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">conditionalAnnotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加载内部类使用 "$"</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.context.annotation.ConditionEvaluator$ConditionContextImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enclosingClass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getEnclosingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enclosingClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Environment<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ResourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConditionContext conditionContext <span class="token operator">=</span> <span class="token punctuation">(</span>ConditionContext<span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResourceLoader resourceLoader <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Resource resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"classpath:application.yml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String absolutePath <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"absolutePath = "</span> <span class="token operator">+</span> absolutePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09-Profile注解</title>
      <link href="/2023/05/13/spring-zhu-jie-09-profile-huan-jing/"/>
      <url>/2023/05/13/spring-zhu-jie-09-profile-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Profile-的作用"><a href="#Profile-的作用" class="headerlink" title="@Profile 的作用"></a>@Profile 的作用</h1><p>在不同的环境下使用不同的组件和配置，方便环境的动态切换</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>指定组件在哪个环境下生效</li><li>在 yml 文件中指定激活的环境</li></ol><p>生效环境 = 激活环境/默认环境 + 包含环境（include）</p><h2 id="环境分组"><a href="#环境分组" class="headerlink" title="环境分组"></a>环境分组</h2><p>使用group来将多个环境定义成一个组，例如</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>profile    <span class="token comment" spellcheck="true"># 将多个环境定义成一个组</span>    <span class="token comment" spellcheck="true"># 鼠标放上去可以看到group的类型, 根据类型来进行格式的配置</span>    <span class="token key atrule">group</span><span class="token punctuation">:</span>      <span class="token key atrule">my-profile</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> test        <span class="token punctuation">-</span> dev      <span class="token key atrule">your-profile</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> test        <span class="token punctuation">-</span> prod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件的-Profile-功能"><a href="#配置文件的-Profile-功能" class="headerlink" title="配置文件的 Profile 功能"></a>配置文件的 Profile 功能</h2><p>以 dev 环境的配置文件为例，为 application.yml 或 application.properties 添加上后缀，构成 application-dev.yml 或 application-dev.properties。</p><p>另外，对于 spring.profiles 配置项，只能够在 application.yml（基础配置文件）中配置，在诸如 application-dev.yml 中对 profile 相关的配置不会生效。基础配置文件在任何一个环境下都会生效，类似 default，但是优先级比较低。</p><p>如果环境组中两个环境的配置冲突，那么会按顺序进行覆盖，例如上面的情况下，如果 dev 环境和 test 环境中的 server.port 配置项发生冲突，那么以后面的为主，即生效的是 dev 环境。</p><p>application-test.yml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>application-dev.yml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="测试-Profile"><a href="#测试-Profile" class="headerlink" title="测试 @Profile"></a>测试 @Profile</h1><h2 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h2><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bean-对象"><a href="#Bean-对象" class="headerlink" title="Bean 对象"></a>Bean 对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfileBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Configuration-配置类"><a href="#Configuration-配置类" class="headerlink" title="Configuration 配置类"></a>Configuration 配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ProfileBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>EmbeddedValueResolverAware<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Profile<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringValueResolver<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:my-profile.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProfileConfig</span> <span class="token keyword">implements</span> <span class="token class-name">EmbeddedValueResolverAware</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: 为什么这里不可以通过@Autowired来注入</span>    <span class="token keyword">private</span> StringValueResolver valueResolver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmbeddedValueResolver</span><span class="token punctuation">(</span>StringValueResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>valueResolver <span class="token operator">=</span> resolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过Environment来获取环境变量和配置文件中的值</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    ProfileBean <span class="token function">profileBeanTest</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"profiles.test.id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"profiles.test.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id = "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProfileBean</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * dev环境才注入组件     */</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    ProfileBean <span class="token function">profileBeanDev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> valueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token string">"${profiles.dev.id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> valueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token string">"${profiles.dev.name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProfileBean</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    ProfileBean <span class="token function">profileBeanProd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> valueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token string">"${profiles.prod.id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> valueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span><span class="token string">"${profiles.prod.name}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ProfileBean</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringBootTest-测试类"><a href="#SpringBootTest-测试类" class="headerlink" title="SpringBootTest 测试类"></a>SpringBootTest 测试类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>ProfileBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    ApplicationContext context<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">profileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>ProfileBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ProfileBean profileBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ProfileBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>profileBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="properties-文件"><a href="#properties-文件" class="headerlink" title="properties 文件"></a>properties 文件</h2><blockquote><p>@PropertySource 注解只对 properties 文件有效，对 yml 类型文件无效</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">profiles.test.id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">profiles.test.name</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span class="token attr-name">profiles.dev.id</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token attr-name">profiles.dev.name</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token attr-name">profiles.prod.id</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">profiles.prod.name</span><span class="token punctuation">=</span><span class="token attr-value">prod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多版本并发控制(MVCC)</title>
      <link href="/2023/05/11/mysql-02-mvcc-ji-zhi/"/>
      <url>/2023/05/11/mysql-02-mvcc-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="多版本并发控制（MVCC）"><a href="#多版本并发控制（MVCC）" class="headerlink" title="多版本并发控制（MVCC）"></a>多版本并发控制（MVCC）</h1><h2 id="前置知识：事务"><a href="#前置知识：事务" class="headerlink" title="前置知识：事务"></a>前置知识：事务</h2><h3 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><p>事务A中读取到事务B中未提交的数据。具体来说，在t1时刻，事务A中读取到事务B中未提交的数据，并将该数据用于计算得到一个结果值；而在t2时刻，事务B执行回滚，那么事务A中得到的结果值就没有任何意义，这种现象就称为脏读。</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E8%84%8F%E8%AF%BB.png" alt="脏读" style="zoom:50%;"><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 脏读问题演示</span><span class="token comment" spellcheck="true"># 事务1: 设置全局的隔离级别为读未提交, 设置完成后重新登录MySQL</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 检查隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 事务1: 修改一条数据</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">SET</span> name <span class="token operator">=</span> <span class="token string">'root'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 事务2: 查看数据</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 此时能够观测到事务2中读取到事务1中的修改, 但是事务1并未提交</span><span class="token comment" spellcheck="true"># 将隔离级别改回默认级别, 重启控制台</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 检查隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p>事务A在一次事务的执行过程中，两次读取结果不相同。具体来说，在t1时刻，事务A读取数据x1；在t2时刻，事务B将数据修改为x2并提交事务；在t3时刻，事务A再次读取数据得到x2；站在事务A的角度，可能在t1时刻到t3时刻并没有对数据进行修改，却得到两个不同的值（都是正确值），这种现象称为不可重复读。</p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><blockquote><p>  个人认为：幻读和不可重复读本质上没有区别，幻读属于不可重复读的一部分。</p><p>  面试：幻读侧重查询结果行数是否发生变化，而不可重复读侧重查询内容（数据的值）是否发生变化。</p></blockquote><p>解决了不可重复读的问题，即在一次事务中，可以保证对数据的两次读取的结果是相同的。但是会出现幻读的问题。幻读问题是指事务A在查询时明明没有查到该数据，但是却无法插入成功。具体来说，在t1时刻，事务A查询是否有id=1的数据，发现没有；在t2时刻，事务B插入一条id=1的数据并提交；在t3时刻，事务A再次查询是否有id=1的数据，还是发现没有（因为可重复读），因此事务A打算插入一条id=1的数据，但是此时插入失败并报错，这时事务A就会纳闷，明明查询id=1的结果是没有，但是插入又报错说id=1的数据已经存在，这种现象称为幻读。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 事务1: 查看数据</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 事务2: 查看数据, 新增数据, 并提交事务</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 注: insert操作会加锁, 如果在事务1未提交前, 事务2也执行了insert操作, 那么事务2会被阻塞</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'why2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 事务1: 再次查看数据</span><span class="token comment" spellcheck="true"># 在RR级别下, 由于可重复读机制, 因此事务1看不到事务2提交的数据, 但是插入失败</span><span class="token comment" spellcheck="true"># 在RC级别下, 可以看到新插入的数据, 因此行数更多(幻读)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 事务1: 尝试插入相同的数据, 此时报错(这里演示RR级别下的错误, RC级别下能看到有id=7的数据)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'why1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 错误: ERROR 1062 (23000): Duplicate entry '7' for key 'user.PRIMARY'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>三个问题，对应四种方案，分别是解决0个问题（读未提交）、解决1个问题（读已提交）、解决2个问题（可重复读）、解决3个问题（串行化）。</p><p>串行是一切并行问题的终点，没有并行就不会有并行导致的伴生问题。</p><p>Oracle 数据库的默认隔离级别是 RC，MySQL 数据库的默认隔离级别是 RR。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="事务的隔离级别"></p><p><strong>隔离级别之间的关系</strong></p><p>可重复读并不是建立在读已提交的基础上，相反，这些隔离级别是互斥的。想要实现可重复读，那么必然会丢弃读已提交的性质。想要实现读已提交的数据，那么就没办法实现可重复读的性质。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt></p><blockquote><p>  <strong>思考</strong>：设置不同的事务隔离级别这种功能的底层原理是什么？如何实现的？是对修改后的数据写入磁盘文件的时间点决定的吗？例如，读未提交级别，则事务中执行的修改操作都会立即写入磁盘，此时其它事务就可能在该事务提交前感知到这个修改操作，因此出现脏读问题？</p></blockquote><h3 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查看内置的变量值</span><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启事务: 方式一</span><span class="token keyword">SET</span> @<span class="token variable">@autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启事务: 方式二</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 回滚事务</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看事务的隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 设置事务的隔离级别</span><span class="token comment" spellcheck="true"># 需要退出当前会话窗口</span><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span><span class="token operator">|</span><span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> {<span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MVCC-是什么"><a href="#MVCC-是什么" class="headerlink" title="MVCC 是什么"></a>MVCC 是什么</h2><p>并发可能遇到三种场景：读-读、读-写、写-写</p><p>对于读-读场景，不存在并发问题；而对于后面两种场景，则存在并发问题，这些并发问题都可以通过加锁来解决。但是对于读-写冲突的场景，存在着比加锁性能更高的解决方案，即 MVCC（多版本并发控制）。<strong>因此，MVCC 是针对并发场景下的读写冲突问题，对于读操作不采用加锁的一种优化方案。对于写操作还是需要采用加锁。</strong></p><h2 id="MVCC-的实现原理"><a href="#MVCC-的实现原理" class="headerlink" title="MVCC 的实现原理"></a>MVCC 的实现原理</h2><p>MySQL 中的 MVCC 是通过 4个隐藏字段、undo 日志和 read view 的共同作用实现。在读操作时，生成一个read view</p><h3 id="隐藏字段"><a href="#隐藏字段" class="headerlink" title="隐藏字段"></a><strong>隐藏字段</strong></h3><ul><li>db_row_id：自增的隐藏主键，如果没有表结构没有指定主键，则会生成该字段</li><li>db_trx_id：最近修改的事务id，记录该条记录最近一次被哪个事务修改</li><li>db_roll_ptr：上一条记录的地址，本质上是next指针</li><li>deleted_bit：逻辑删除标志位</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230511233847321.png" alt="三个隐藏字段"></p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>undo log 用于记录数据被修改前的信息，用于事务回滚或MVCC（多版本并发控制）。</p><p>与 redo log 记录实际执行的物理操作不同，undo log 并不是记录实际执行的数据操作，甚至是<strong>记录与当前操作相反的操作（逆操作）</strong>，例如当前实际执行的是delete 操作，那 undo log 中需要对该操作进行还原，因此记录 insert 操作。</p><ul><li><p>insert undo log：保存插入记录的主键值，回滚时只需要删除该主键对应的记录即可</p></li><li><p>update undo log：保存记录的旧值，回滚时将记录更新回旧值</p></li><li><p>delete undo log：理论上将记录的旧值保存下来，回滚的时候重新插入记录即可（主键变化怎么办呢？）。但实际为了效率并没有这么处理。</p><p>设置删除标志位（隐藏字段），InnoDB 引擎通过专门的 purge 线程来清理这些删除标志位被设置true的记录。这种情况下如何实现回滚呢？</p></li></ul><p>undo log 在事务提交之后，并不会立即删除，因为这些日志还可能用于 MVCC。undo log 采用 segment（段）的方式进行管理和记录，存放在 rollback segment （回滚段）中，内部包含 1024 个 rollback segment。这里是什么的内部？</p><blockquote><p>  undo log 日志中，insert undo log 日志只在事务回滚的情况下需要，因此在事务commit之后，insert undo log 可以被立即删除。但是 delete undo log 和 update undo log 不仅在回滚的时候需要，在快照读的时候也需要，因此不能被立即删除。</p></blockquote><p>简洁点来说，undo log 日志应该体现 insert、update、delete 操作，但是 insert 插入的是新数据，那么该行数据对应的 undo log 版本链就只有一个结点，因此改行数据没有 undo log。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515200431099.png" alt="undo log 的本质就是一个链表"></p><h3 id="read-view（读视图）"><a href="#read-view（读视图）" class="headerlink" title="read view（读视图）"></a><strong>read view（读视图）</strong></h3><blockquote><p>  存疑：max_trx_id是当前最大事务ID+1吗？需要加1吗？因为后面的判断逻辑是trx_id &gt; max_trx_id，那似乎只需要是当前最大事务的id即可。</p></blockquote><p>ReadView的生成原理（快照读的原理）</p><blockquote><p>  对于数据表中，每一条记录都有一个版本链，而快照读可以认为是在生成ReadView的那一个时刻（即进行快照读的那一个时刻），应该将查询结果中的每条记录的那个版本保存到快照中。核心就是：保存在快照读那个时刻，读自己事务修改的版本和已提交事务的版本。即相对于ReadView而言，读已提交的事务。</p><ul><li>对于第1条规则，保证自己事务的修改在ReadView中可见</li><li>对于第2条规则，保证在ReadView生成之前已提交的事务可见</li><li>对于第3条规则，ReadView并不是生成数据的快照，只是后面都会按照版本链数据访问规则和ReadView中保存的四个字段进行比较。因此，如果当前事务生成ReadView为t1时刻，而后又在t2时刻再次读取时，在t1时刻到t2时刻这段时间间隔内，有其它新事务对数据进行了修改，那么数据的版本号trx_id会比t1时刻生成的ReadView中的max_trx_id更大。而在t2时刻进行读取时，同样会先用最新版本的数据来进行访问规则的匹配，此时出现 trx_id &gt; max_trx_id 的情况。这在RR的隔离级别下容易理解，<strong>但是在RC的隔离级别下，每次读都会读取最新版本，因此第3条规则失效？</strong>应该是这样，否则也不能称为读已提交了。</li><li>对于第4条规则，保证不会读取未提交事务（当前活跃的事务）中对数据的修改，防止脏读</li></ul></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517155919738.png" alt="image-20230517155919738"></p><p>版本链数据访问规则：</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517160407270.png" alt="image-20230517160407270"></p><blockquote><p>  对于第4条规则，为什么 trx_id 不在 ReadView 的 m_ids（活跃事务集合）中时，说明事务是可以看到 trx_id 所对应的那条记录的？</p><p>  以下图为例，</p><ol><li><p>首先明确 trx_id 是指的什么东西。对于一个事务，在访问某条记录时，看到的是这条记录的一个版本链数据，所以这里的 trx_id 是指这条版本链上所有的 trx_id，从前往后依次查找（尽可能找到当前事务能够看到的最新版本）。</p></li><li><p>其次解释为什么在第4条规则下，trx_id 不在活跃事务集合里反而说明 trx_id 对应的那个版本的数据可以被事务访问。<strong>活跃事务代表未提交事务</strong>，而trx_id对应的版本数据如果属于活跃事务，那么说明该版本的数据可能会被回滚，那么其它事务如果能够读取，则说明读取未提交事务修改的数据，即产生脏读问题。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517165706153.png" alt="image-20230517165706153"></p></li><li><p>对于第3条规则，所谓的max_trx_id表示在ReadView生成时刻，系统分配的最大事务id。如果 trx_id &gt; max_trx_id，说明 trx_id 对应的这个版本的数据是某个事务在生成 ReadView 的时刻（假设为t时刻）之后</p></li></ol></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517161029010.png" alt="image-20230517161029010"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517161536302.png" alt="image-20230517161536302"></p><p>快照读（snapshot read）：</p><ul><li>在 RC（read committed）级别下，每次 snapshot read 都会生成 read view</li><li>在 RR（repeatable read）级别下，事务内的第一次snapshot read会生成read view，后面的snapshot read都会读取第一次read view中的数据，从而实现repeatable read。</li></ul><p>当前读（current read）：加锁读取当前数据库中保存的数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL从入门到精通</title>
      <link href="/2023/05/11/mysql-01-cong-ru-men-dao-jing-tong/"/>
      <url>/2023/05/11/mysql-01-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-简介"><a href="#MySQL-简介" class="headerlink" title="MySQL 简介"></a>MySQL 简介</h1><h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><ul><li>SQL</li><li>事务</li><li>存储引擎</li><li>索引</li><li>SQL 优化</li><li>锁</li></ul><h2 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h2><ol><li><p>卸载预安装的mariadb</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> mariadbrpm -e --nodeps mariadb-libs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装网络工具</p><pre class="line-numbers language-bash"><code class="language-bash">yum -y <span class="token function">install</span> net-toolsyum -y <span class="token function">install</span> libaio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">下载rpm-bundle.tar安装包</a>，并解压，使用rpm进行安装</p><pre class="line-numbers language-bash"><code class="language-bash">rpm -ivh \mysql-community-common-5.7.28-1.el7.x86_64.rpm \mysql-community-libs-5.7.28-1.el7.x86_64.rpm \mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm \mysql-community-server-5.7.28-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化mysql</p><pre class="line-numbers language-bash"><code class="language-bash">mysqld --initialize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更改所属组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> mysql:mysql /var/lib/mysql -R<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 MySQL 服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看生成的初始密码</p><pre class="line-numbers language-sh"><code class="language-sh">cat /var/log/mysqld.log | grep password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录 MySQL，修改密码并设置允许远程访问</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 修改密码</span><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> identified <span class="token keyword">by</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 设置允许远程访问</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span>root' <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置 MySQL 服务开机自启动</p><pre class="line-numbers language-sh"><code class="language-sh">systemctl enable mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看开机自启动是否设置成功</p><pre class="line-numbers language-sh"><code class="language-sh"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出 MySQL 服务</p><pre class="line-numbers language-sh"><code class="language-sh">systemctl stop mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><ul><li><p>启动mysql服务 </p><pre class="line-numbers language-shell"><code class="language-shell">service mysql start或systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看mysql的初始密码</p><pre class="line-numbers language-shell"><code class="language-shell">grep "password" /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录数据库</p><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改mysql的默认密码</p><blockquote><p><strong>说明</strong> 新密码设置的时候如果设置的过于简单会报错，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行如下命令，创建wordpress库</p><pre class="line-numbers language-shell"><code class="language-shell">create database wordpress; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看是否创建成功</p><pre class="line-numbers language-shell"><code class="language-shell">show database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入<code>exit</code>退出数据库</p></li></ul><p>修改MySQL配置文件(拷贝一份，不修改原配置文件)</p><pre class="line-numbers language-shell"><code class="language-shell">cp my-huge.cnf /etc/my.cnf #5.5版本cp my-default.cnf /etc/my.cnf #5.6版本配置文件名称不一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果先建表， 再配置文件改为utf-8， 还是会导致乱码</p><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><ul><li><p>二进制日志文件log-bin(主从复制）</p></li><li><p>错误日志log-error<br>默认是关闭， 记录严重的警告和错误信息， 每次启动和关闭的详细信息 </p></li><li><p>查询日志log</p><p>默认关闭， 记录查询的sql语句，如果开启会降低mysql的整体性能，</p></li><li><p>数据文件<br>myi文件（存放表索引）<br>myd文件（存放表数据）</p><p>myfrm（存放表结构）</p></li><li><p>配置文件路径（linux下是在/etc/my.cnf， 而windows下是my.ini）</p></li></ul><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>SQL分类</p><ul><li><p>DDL（Data Definition Language，数据定义语言）</p><p>用来定义数据库对象:数据库、表、字段</p></li><li><p>DML（Data Manipulation Language，数据操作语言）</p><p>用来对表中的数据进行增删改操作</p></li><li><p>DQL（Data Query Language，数据查询语言）</p><p>用来对表中的数据进行查询操作</p></li><li><p>DCL（Data Control Language，数据控制语言）</p><p>用来创建数据库用户、控制数据库的访问权限</p></li></ul><h3 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL 数据定义语言"></a>DDL 数据定义语言</h3><ul><li><p>增（创建数据库）</p><p><code>CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt; [DEFAULT CHARSET &lt;字符集&gt;] [COLLATE &lt;排序规则&gt;];</code></p></li><li><p>删（删除数据库）</p><p><code>DROP DATABASE [IF EXISTS] &lt;数据库名&gt;</code></p></li><li><p>查（查询数据库）</p><p>查询所有数据库:<code>SHOW DATABASES;</code></p><p>查询当前数据库:<code>SELECT DATABASE();</code></p></li><li><p>使用</p><p><code>USE &lt;数据库名&gt;;</code></p></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">####################################</span><span class="token comment" spellcheck="true"># 1. 创建</span><span class="token comment" spellcheck="true">####################################</span><span class="token comment" spellcheck="true"># 1.1 创建数据库（增）</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span>    <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>ddl<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>ddl<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 1.2 创建数据表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>    <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">#字段 字段类型 注释</span>    id     <span class="token keyword">INT</span>        <span class="token keyword">COMMENT</span> <span class="token string">'id主键'</span>，    name   <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span>，    age    <span class="token keyword">TINYINT</span> UNSIGNED        <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span>，    gender <span class="token keyword">TINYINT</span>        <span class="token keyword">COMMENT</span> <span class="token string">'性别'</span>，    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">COMMENT</span> <span class="token string">'用户表'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">####################################</span><span class="token comment" spellcheck="true"># 3. 查询</span><span class="token comment" spellcheck="true">####################################</span><span class="token comment" spellcheck="true"># 3.1 查询数据库</span><span class="token comment" spellcheck="true"># 3.1.1 查询所有的数据库</span><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.1.2 查看当前使用的数据库</span><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.2 查询表</span><span class="token comment" spellcheck="true"># 3.2.1 查询当前数据库中的所有表</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.2.2 查看特定的表的详细信息</span><span class="token keyword">DESC</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 3.2.3 查看特定表的建表语句</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">####################################</span><span class="token comment" spellcheck="true"># 4. 删除</span><span class="token comment" spellcheck="true">####################################</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>ddl<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML 数据操作语言"></a>DML 数据操作语言</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504110229975.png" alt="image-20230504110229975"></p><pre class="line-numbers language-mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL 数据查询语言"></a>DQL 数据查询语言</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504122058677.png" alt="image-20230504122058677"></p><h3 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL 数据控制语言"></a>DCL 数据控制语言</h3><p>在 MySQL 中，用户及用户权限信息都保存在 <code>mysql.user</code> 表中，通过对该表的操作即可实现对用户权限的控制管理了。</p><p>用户名和主机名两个字段才能唯一标识一个用户，主机名表示该用户可以在哪些主机上访问，如果是 <code>localhost</code> 则表示不可以远程访问，如果是 <code>%</code> 则表示任意主机均可以访问。</p><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504124629082.png" alt="image-20230504124629082"></p><ul><li><p>查询用户</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> <span class="token punctuation">`</span>mysql<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用户</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span><span class="token string">'&lt;用户名>'</span>@'<span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token string">'IDENTIFIED BY '</span><span class="token operator">&lt;</span>密码<span class="token operator">></span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改用户密码</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">USER</span><span class="token string">'&lt;用户名>'</span>@'<span class="token operator">&lt;</span>主机名<span class="token operator">></span><span class="token string">'IDENTIFIED WITH mysql_native_password BY '</span><span class="token operator">&lt;</span>新密码<span class="token operator">></span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>删除用户</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">USER</span><span class="token string">'&lt;用户名>'</span><span class="token variable">@'&lt;主机名>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504124643988.png" alt="image-20230504124643988"></p><ul><li><p>查询用户拥有的权限</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> GRANTS <span class="token keyword">FOR</span> <span class="token string">'&lt;用户名>'</span><span class="token variable">@'&lt;主机名>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授予用户某种权限（增）</p><p>如果需要为所有的数据库和所有的表授予权限，那么需要使用 <code>*.*</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token operator">&lt;</span>权限列表<span class="token operator">></span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>数据库名<span class="token punctuation">.</span>表名<span class="token operator">></span><span class="token keyword">TO</span> <span class="token string">'&lt;用户名>'</span><span class="token variable">@'&lt;主机名>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>撤销用户某种权限（删）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">REVOKE</span> <span class="token operator">&lt;</span>权限列表<span class="token operator">></span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>数据库名<span class="token punctuation">.</span>表名<span class="token operator">></span><span class="token keyword">FROM</span> <span class="token string">'&lt;用户名>'</span><span class="token variable">@'&lt;主机名>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504152928684.png" alt="image-20230504152928684"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504160653212.png" alt="image-20230504160653212"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504161123244.png" alt="image-20230504161123244"></p><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><blockquote><p>  设置不同的事务隔离级别这种功能的底层原理是什么？如何实现的？是对修改后的数据写入磁盘文件的时间点决定的吗？例如，读未提交级别，则事务中执行的修改操作都会立即写入磁盘，此时其它事务就可能在该事务提交前感知到这个修改操作，因此出现脏读问题？</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504190156236.png" alt="image-20230504190156236"></p><ul><li><p>脏读问题:</p><p>事务A中读取到事务B中未提交的数据。具体来说，在t1时刻，事务A中读取到事务B中未提交的数据，并将该数据用于计算得到一个结果值；而在t2时刻，事务B执行回滚，那么事务A中得到的结果值就没有任何意义，这种现象就称为脏读。</p></li><li><p>不可重复读:</p><p>事务A在一次事务的执行过程中，两次读取结果不相同。具体来说，在t1时刻，事务A读取数据x1；在t2时刻，事务B将数据修改为x2并提交事务；在t3时刻，事务A再次读取数据得到x2；站在事务A的角度，可能在t1时刻到t3时刻并没有对数据进行修改，却得到两个不同的值（都是正确值），这种现象称为不可重复读。</p></li><li><p>幻读:</p><p>解决了不可重复读的问题，即在一次事务中，可以保证对数据的两次读取的结果是相同的。但是会出现幻读的问题。幻读问题是指事务A在查询时明明没有查到该数据，但是却无法插入成功。具体来说，在t1时刻，事务A查询是否有id=1的数据，发现没有；在t2时刻，事务B插入一条id=1的数据并提交；在t3时刻，事务A再次查询是否有id=1的数据，还是发现没有（因为可重复读），因此事务A打算插入一条id=1的数据，但是此时插入失败并报错，这时事务A就会纳闷，明明查询id=1的结果是没有，但是插入又报错说id=1的数据已经存在，这种现象称为幻读。</p></li></ul><p>三个问题，对应四种方案，分别是解决0个问题（读未提交）、解决1个问题（读已提交）、解决2个问题（可重复读）、解决3个问题（串行化）。</p><p>串行是一切并行问题的终点，没有并行就不会有并行导致的伴生问题</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 关闭自动提交(开启事务)</span><span class="token keyword">SET</span> @<span class="token variable">@autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 回滚事务</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看事务的隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 设置事务的隔离级别</span><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span><span class="token operator">|</span><span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> {<span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230505224609773.png" alt="image-20230505224609773"></p><ul><li>连接层</li><li>服务层</li><li>存储引擎层（索引、表级别）</li><li>存储层</li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>不同的存储引擎有着不同的使用场景，各有优缺点。存储引擎就是存储数据、建立索引、更新、查询数据等技术的实现方式。存储引擎是基于表的，不是基于库的，因此存储引擎又被称为表类型。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230506002954016.png" alt="image-20230506002954016"></p><h3 id="InnoDB-引擎"><a href="#InnoDB-引擎" class="headerlink" title="InnoDB 引擎"></a>InnoDB 引擎</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong>；</li><li>支持<strong>行级锁</strong>，相较于表锁而言可以提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性</li><li>xxx.idb:xxx代表表名，InnoDB引擎的每张表都会对应一个<strong>表空间文件（TableSpace）</strong>，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><h4 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230506001052072.png" alt="image-20230506001052072"></p><h3 id="MyISAM-引擎（可被MongoDB替代）"><a href="#MyISAM-引擎（可被MongoDB替代）" class="headerlink" title="MyISAM 引擎（可被MongoDB替代）"></a>MyISAM 引擎（可被MongoDB替代）</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>不支持事务、不支持外键、不支持行级锁</li><li>支持表锁</li><li>访问速度快</li><li>xxx.sdi:存储表结构信息（本质上是一个JSON文本数据）</li><li>xxx.MYD:存储数据</li><li>xxx.MYI:存储索引</li></ul><h3 id="Memory-引擎（可被Redis替代）"><a href="#Memory-引擎（可被Redis替代）" class="headerlink" title="Memory 引擎（可被Redis替代）"></a>Memory 引擎（可被Redis替代）</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>表数据信息存储在内存中，会受到断电等问题的影响，因此这些表只适合用于作为临时表或缓存表</li><li>支持hash索引（默认）</li><li>xxx.sdi:表结构信息（Memory 引擎只会有这一个文件，因为数据保存在内存中）</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>提高了查询速度，但同时提高了增删改的成本，因为需要维护B+树这种数据结构</p><p>不需要建立索引的情况</p><blockquote><ol><li>表记录太少的时候</li><li>经常增删改的表</li><li>某个数据列包含许多重复的内容，那这个表字段就没有必要建立索引</li></ol></blockquote><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507104524396.png" alt="image-20230507104524396"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507152420221.png" alt="image-20230507152420221"></p><p>一张表对应一种存储引擎，而存储引擎之间可能使用相同或不同的索引。那如果使用相同索引的不同存储引擎之间有区别吗？还是可以认为存储引擎只是不同索引的集合，而如果两个不同的存储引擎使用相同的索引，则效果完全相同呢？暂时把索引和存储引擎的关系理解成接口和实现类的关系，即使是使用相同的索引结构，不同存储引擎对于该索引结构的实现和优化可能是不同的。这种区别应该只局限于效率，应该不会有功能上的不同。</p><p>InnoDB 存储引擎虽然不支持 hash 索引，但是具有 <strong>自适应hash</strong> 的功能，即根据 B+ Tree 索引在指定条件下自动构建 hash 索引。</p><blockquote><p>  面试题:为什么 MySQL 索引采用 B+ Tree，而不使用 RB Tree 或 B Tree？</p><ol><li>B+ Tree 和 B Tree 是一种多叉平衡树，相较于二叉树和RB Tree而言，每层节点数更多，因此树的高度会更少，搜索效率会更高些。</li><li>B+ Tree 和 B Tree 相比，由于在非叶子结点上不存储数据，因此一个页面能够存放更多的索引，即用更少的页面就能够完全保存索引，搜索效率也会更高些。（假设用B Tree保存，那1个页面保存2条索引；而用B+ Tree保存，一个页面保存200条索引，显然保存20000条索引，B Tree需要10000个页面，而B+ Tree树只需要100个页面）</li></ol></blockquote><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507172002606.png" alt="image-20230507172002606"></p><p><strong>聚集索引（唯一）</strong></p><p>聚集索引的选取规则:</p><ol><li>如果存在<strong>主键</strong>，那主键索引就是聚集索引</li><li>如果不存在主键，那<strong>第一个unique索引</strong>是聚集索引</li><li>如果上面两种索引都不存在，那么InnoDB存储引擎会<strong>自动生成一个rowid</strong>作为隐藏的聚集索引。</li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507172248311.png" alt="image-20230507172248311"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507172623381.png" alt="image-20230507172623381"></p><p>对于非主键字段上建立的索引，同样按照 B+ Tree 的结构去建立索引，但是在叶子结点上保存的不是数据，而是聚集索引（Clustered Index）中节点的id。<strong>而只有在聚集索引中，叶子结点上才保存这一行的所有数据。</strong></p><blockquote><p>  查询案例:使用 <code>SELECT * FROM user WHERE name=&#39;root&#39;;</code> 这条 SQL 语句进行查询，其中在 user.name 字段上已经建立了索引。展示通过<strong>二级索引</strong>来查询数据的过程，这个过程也称为<strong>回表查询</strong>。</p><p>  现在二级索引树中查到id，然后在聚集索引树中查询。二级索引也称为<strong>辅助索引</strong>。</p></blockquote><h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><ul><li><p><strong>创建索引</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> <span class="token operator">&lt;</span>索引名<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">></span>， <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注:普通索引不添加 <code>UNIQUE</code> 和 <code>FULLTEXT</code> 即可创建</p></li><li><p><strong>查看索引</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除索引</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token operator">&lt;</span>索引名<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="SQL-性能分析（重点）"><a href="#SQL-性能分析（重点）" class="headerlink" title="SQL 性能分析（重点）"></a>SQL 性能分析（重点）</h3><p>SQL 优化主要是优化查询操作，要进行 SQL 优化，需要先对数据库的特点进行分析。优化不是拍脑袋，而是以事实为依据。</p><h4 id="查看-SQL-执行频率"><a href="#查看-SQL-执行频率" class="headerlink" title="查看 SQL 执行频率"></a>查看 SQL 执行频率</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token punctuation">[</span><span class="token keyword">GLOBAL</span><span class="token operator">|</span><span class="token keyword">SESSION</span><span class="token punctuation">]</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Com_______'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 每个下划线"_"代表一个字符， 为什么非得是7个下划线呢? 有什么含义吗?</span><span class="token comment" spellcheck="true"># 目前来看， 返回结果会是Com_update、Com_insert， 正好每一个操作都是6个字符</span><span class="token comment" spellcheck="true"># session表示查看当前会话的状态信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h4><p>在确定了哪些查询操作占比大的数据库之后，可以通过慢查询日志来定位哪些 SQL 操作耗费时间。</p><p>在Linux系统中，慢查询日志文件的文件地址为 <code>/var/lib/mysql/localhost-slow.log</code>，可以通过<code>tail -f</code>命令来实时监控日志的新增信息。</p><p>可以通过 <code>SHOW VARIABLES LIKE &#39;slow_query_log</code>来查看慢查询日志是否开启。MySQL 的慢查询日志默认没有开启，需要在配置文件中配置如下信息:</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 开启 MySQL 慢查询日志</span><span class="token comment" spellcheck="true"># 1表示开启， 0表示关闭</span><span class="token attr-name">show_query_log</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true"># 设置慢查询的阈值， 超出指定时间则被认为是慢查询， 会被记录到慢查询日志中</span><span class="token attr-name">long_query_time</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的慢查询:<code>select count(*) from xxx;</code></p><h4 id="Profile-详情"><a href="#Profile-详情" class="headerlink" title="Profile 详情"></a>Profile 详情</h4><p>慢查询日志的局限在于，只有 SQL 语句的执行时间超过了阈值，才会被认为是慢查询。但有些简单的 SQL 语句可能没有超过阈值，但是超出期望的时间，例如期待执行时间是1ms，实际执行时间是1s。这种情况下，需要使用 Profile 来进行分析，帮助我们了解时间都消耗在什么地方上。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查看是否开启</span><span class="token keyword">SELECT</span> @<span class="token variable">@have_profiling</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 将其设置为开启</span><span class="token keyword">SET</span> profiling <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查看每一条SQL的耗时情况， 返回结果中可以看到query_id</span><span class="token keyword">SHOW</span> PROFILES<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看指定query_id的SQL语句各个阶段的耗时情况</span><span class="token keyword">SHOW</span> PROFILE <span class="token keyword">FOR</span> QUERY <span class="token operator">&lt;</span>query_id<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看指定query_id的SQL语句的CPU使用情况</span><span class="token keyword">SHOW</span> PROFILE CPU <span class="token keyword">FOR</span> QUERY <span class="token operator">&lt;</span>query_id<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Explain-执行计划"><a href="#Explain-执行计划" class="headerlink" title="Explain 执行计划"></a>Explain 执行计划</h4><p>SQL 执行时间的长短并不总是能够反映 SQL 的性能，执行时间稍长的 SQL 可能是由于业务逻辑极其复杂导致的。往往通过 explain 执行计划作为 SQL 性能判断的依据。通过 explain 执行计划，可以看到在 SQL 的执行过程中，<strong>表是如何连接的，以及连接顺序是怎样的</strong>等信息。</p><p>Explain 作用:</p><ul><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ul><p><strong>使用方法</strong>:在 SQL 语句前面添加关键字 <code>EXPLAIN</code> 或 <code>DESC</code></p><p><strong>字段解释</strong></p><table><thead><tr><th>explain返回结果中的字段</th><th>字段含义</th></tr></thead><tbody><tr><td>id</td><td>代表不同表的操作顺序，涉及多表查询的 SQL 才有实际意义。<br>id 大的先执行；如果 id 相同，则执行顺序从上到小</td></tr><tr><td>select_type</td><td></td></tr><tr><td>table</td><td>derived2表示的就是id为2的表的衍生表，相当于临时变量</td></tr><tr><td>type(重点)</td><td>最好到最差：system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL<br>一般来说，得保证查询至少达到range级别，最好能达到ref，再往上比较理想，实际情况不太可能实现<br>const：主键索引或unique索引<br>ref：非unique索引<br>range：<br>index：全索引扫描<br>all：全表扫描</td></tr><tr><td>possible_keys和key</td><td>possible_keys：理论上可能用到的索引<br>key：mysql实际使用的索引，如果为null则表示索引失效，没有使用索引; 如果查询中使用了覆盖索引，则该索引仅仅出现在key列表中</td></tr><tr><td>key_len</td><td>key_len显示的值为索引字段的最大可能长度，<strong>并非实际使用长度</strong><br>在不损失精确度的情况下，长度越短越好</td></tr><tr><td>ref</td><td>显示索引的哪一列被使用，可以的话最好是常量const</td></tr><tr><td>rows</td><td>大致估算出找到所需的记录所需要读取的行数</td></tr><tr><td>Extra(重点)</td><td>1. Using filesort:尽可能优化sql， 这是一个糟糕的信息<br>2. Using temporary:比上面的更糟糕，使用了临时表保存中间结果<br>3. Using index:效率不错<br>    1. 如果同时出现Using where表明索引被用来执行索引键值的查找<br>    2. 如果没有同时出现Using where表明索引用来读取数据而非执行查找动作<br>4. Using where:表明使用了where过滤<br>5. using joing buffer:使用了连接缓存，当sql语句中的join过多时，可以调大配置文件中的joining buffer<br>6. impossible where:where子句的值是false， 相当于逻辑错误<br>7. distinct:找到第一匹配的元组后即立即停止找同样值得动作<br>8. null表示回表查询</td></tr></tbody></table><h3 id="索引使用规则（重点）"><a href="#索引使用规则（重点）" class="headerlink" title="索引使用规则（重点）"></a>索引使用规则（重点）</h3><h4 id="最左前缀法则（复合索引）"><a href="#最左前缀法则（复合索引）" class="headerlink" title="最左前缀法则（复合索引）"></a>最左前缀法则（复合索引）</h4><p>假设为 name、age 和 gender 建立联合索引，那么在查询时，<strong>索引顺序分别是 name -&gt; age -&gt; gender，如果查询条件中缺少某个字段，那么索引链将会断链</strong>，例如，缺少name，则不使用索引；缺少age，则仅仅使用name索引，不会使用gender索引。有种先按name分类，再按age分类，最后按gender分类。</p><p>WHERE子句中的字段顺序不会对联合索引产生影响，只需要字段存在即可，例如，<code>gender=1 AND age=18 AND name=&#39;root&#39;</code>。</p><p><strong>满足最左前缀法则的字段可以出现在不同的子句中，例如WHERE和GROUP BY</strong></p><h4 id="范围查询（复合索引）"><a href="#范围查询（复合索引）" class="headerlink" title="范围查询（复合索引）"></a>范围查询（复合索引）</h4><p>在复合索引中，出现了范围查询（<code>&gt;</code>或<code>&lt;</code>），则范围查询右侧的列索引失效。</p><p>和上面的索引顺序链的逻辑相同，相当于破坏索引链的方式不仅仅是某个字段没有出现，同时如果某个字段使用了范围查询，则其右侧的所有失效。</p><p>解决方式：尽可能使用 <code>&gt;=</code> 或 <code>&lt;=</code>。例如，&gt;30 在某些情况下可以改写为 &gt;= 31</p><blockquote><p>  为什么复合索引中，使用 <code>&gt;</code> 会使得右侧的索引失效，而使用 <code>&gt;=</code> 右侧的索引仍然有效呢？</p></blockquote><h4 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h4><ul><li><strong>对索引字段进行运算时，索引失效。</strong>例如使用字符串函数等操作 <code>substring(name, 0, 4)</code>，此时会使得name字段上的索引失效</li><li>如果字符串类型的数据不添加单引号 <code>&#39;&#39;</code> 时，索引失效。</li><li>使用 <code>LIKE %xxx</code> 进行头部模糊匹配时，索引失效。但是尾部的模糊匹配 <code>LIKE xxx%</code>，索引有效。解决方法是什么？</li><li><code>OR</code> 连接的条件中，如果其中有一个字段没有索引，那么所有的索引都失效。</li></ul><p><strong>前缀索引</strong></p><p>使用场景：长字符串、大文本等</p><p>TODO</p><p><strong>覆盖索引</strong></p><p>在 <code>SELECT</code> 中尽量使用建立了索引的字段，而不是使用 <code>SELECT *</code>。本质上就是对于SELECT涉及的数据建立除主索引外的复合索引。例如下面案例中，id作为主索引，会出现在二级索引的叶子结点中，因此id字段不需要复合索引中。如果id字段作为复合索引的第一列，往往WHERE条件中不会出现id，根据最左前缀法则，此时还会造成复合索引失效。因此对username和password建立复合索引，且username作为复合索引的第一列是最优方案。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230511114012221.png" alt="image-20230511114012221"></p><p><strong>复合索引</strong></p><p>复合索引优于单列索引：涉及多个字段时，即使每个字段上都有一个单列索引，但此时只会选择使用其中一个效率比较高的索引，然后通过回表查询找到其他的属性。创建联合索引的时候应该考虑各个列的先后顺序。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230511105541813.png" alt="复合索引不需要回表查询"></p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230511105914868.png" alt="image-20230511105914868"></p><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据（注意）"><a href="#插入数据（注意）" class="headerlink" title="插入数据（注意）"></a>插入数据（注意）</h3><ul><li><p>不要一条一条数据插入，而是通过insert批量插入，即一条insert插入多条数据（建议保持在1条insert对应1000条数据左右）</p></li><li><p>手动提交事务：执行insert前，开启事务；执行完毕后，提交事务。避免一条insert对应一次自动提交</p></li><li><p>主键顺序插入：主键顺序插入 &gt; 主键乱序插入</p></li><li><p>大批量插入数据时不使用 <code>insert</code>，而是使用 <code>load</code></p><pre class="line-numbers language-shell"><code class="language-shell"># 使用load需要一些配置# 在连接MySQL客户端时添加上--local-infile参数mysql --local-infile -uroot -proot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查看是否开启加载本地数据文件</span><span class="token keyword">SELECT</span> @<span class="token variable">@local_infile</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 开启从本地加载数据文件</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> local_infile<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 加载本地数据文件到表结构中</span><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> <span class="token keyword">INFILE</span> <span class="token string">'/root/sql01.log'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>my_user<span class="token punctuation">`</span> <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span> <span class="token keyword">LINES</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><blockquote><p>  为什么主键顺序插入的性能优于主键乱序插入？</p><p>  主键乱序插入的情况下，可能会出现页分裂的现象。页分裂的原因是，主索引在叶子结点中是有序的双向链表。</p></blockquote><p>主键设计原则：</p><ul><li>在满足业务需求的情况下，尽量降低主键的长度。（主键会存在于各个二级索引的叶子结点中，因此主键长度减少可以减少索引占用的空间）</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键</li><li>尽量不要使用UUID作为主键，或者是其他自然主键</li><li>业务操作时，避免对主键进行修改</li></ul><h3 id="ORDER-BY-优化"><a href="#ORDER-BY-优化" class="headerlink" title="ORDER BY 优化"></a>ORDER BY 优化</h3><p>Using filesort：通过读取出满足要求的数据，然后在排序缓冲区Sort Buffer中完成排序操作。（取出的数据还要额外经过一个排序步骤）</p><p>Using index：通过有序索引顺序扫描，直接获得有序的目标数据。这种情况下不需要额外的排序操作，效率更高。</p><p>索引默认情况下按照字段升序排序</p><h3 id="GROUP-BY-优化"><a href="#GROUP-BY-优化" class="headerlink" title="GROUP BY 优化"></a>GROUP BY 优化</h3><h3 id="LIMIT-优化"><a href="#LIMIT-优化" class="headerlink" title="LIMIT 优化"></a>LIMIT 优化</h3><p>在大数据量下，分页查询中越往后的页面查询时间越长</p><h3 id="COUNT-优化"><a href="#COUNT-优化" class="headerlink" title="COUNT 优化"></a>COUNT 优化</h3><h3 id="UPDATE-优化"><a href="#UPDATE-优化" class="headerlink" title="UPDATE 优化"></a>UPDATE 优化</h3><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ol><li><p>单表索引优化案例</p><blockquote><p>range类型的索引后面的索引失效 where <strong>id&gt;1</strong></p><p>id = 1 and <strong>name_length&gt;2 order by name</strong>这部分失效 </p></blockquote></li><li><p>双表索引优化案例</p></li><li><p>三表索引优化案例</p></li></ol><h3 id="日期时间数据"><a href="#日期时间数据" class="headerlink" title="日期时间数据"></a>日期时间数据</h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 查找某一天的数据SELECT *FROM `table_x`WHERE DATE_FORMAT(date， '%Y%m%d') = 'xxxx-xx-xx'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面 sql 语句存在的问题:</p><ul><li>一般表中对于日期类型数据都有一个索引，但上面的代码将不会使用索引来查询数据，造成查询效率低下。</li></ul><h4 id="生日问题"><a href="#生日问题" class="headerlink" title="生日问题"></a>生日问题</h4><p>根据某个用户出生日期和当前日期，计算他最近的生日。</p><h4 id="重叠问题"><a href="#重叠问题" class="headerlink" title="重叠问题"></a>重叠问题</h4><h2 id="视图-存储过程-触发器"><a href="#视图-存储过程-触发器" class="headerlink" title="视图/存储过程/触发器"></a>视图/存储过程/触发器</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是在DML语句（insert、update、delete）之前或之后执行的一段 SQL 代码。触发器的这种特性可以应用在：</p><ul><li>实现数据的动态完整性约束</li><li>日志记录</li><li>进行数据校验</li></ul><p>MySQL 中的触发器目前还只支持行级触发，不支持语句级触发 。使用预定义的 <code>OLD</code> 和 <code>NEW</code> 来引用修改前和修改后的记录。</p><ul><li><p><strong>创建触发器</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>触发器名<span class="token operator">></span>BEFORE<span class="token operator">|</span><span class="token keyword">AFTER</span><span class="token keyword">INSERT</span><span class="token operator">|</span><span class="token keyword">UPDATE</span><span class="token operator">|</span><span class="token keyword">DELETE</span><span class="token keyword">ON</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span>    <span class="token operator">&lt;</span>触发器操作<span class="token operator">></span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查看触发器</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除触发器</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> <span class="token operator">&lt;</span>数据库名<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>触发器名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230511152125540.png" alt="image-20230511152125540"></p><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="锁（保证隔离性）"><a href="#锁（保证隔离性）" class="headerlink" title="锁（保证隔离性）"></a>锁（保证隔离性）</h2><p>锁是一种解决并发导致的各种冲突问题的通用方法。并发问题本质上是多线程、多进程、多事务等环境下，对共享资源的访问造成的数据不一致问题，具体来说，有读写冲突、写写冲突。</p><h3 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># FOR SHARE 表示添加共享锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">FOR</span> SHARE<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># FOR UPDATE 表示添加排他锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL 8.0 新特性，可以添加后缀 <code>NOWAIT</code> 或 <code>SKIP LOCKED</code>，分别表示加锁不等待直接报错、忽略掉加锁的记录。</p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>整个 MySQL 数据库实例都添加上读锁，只允许 DQL 语句。类似 insert、update、commit 等可能改变数据库状态的语句都会被阻塞。</p><p>典型使用场景：做全库的备份，保证数据一致性</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 添加全局锁</span>FLUSH <span class="token keyword">TABLES</span> <span class="token keyword">WITH</span> <span class="token keyword">READ</span> <span class="token keyword">LOCK</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 释放全局锁</span>UNLOCK <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sh"><code class="language-sh">// 备份数据库mysqldump -uroot -proot <数据库名> > <导出文件名.sql><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>存在的问题：</p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新操作，业务只能提供读取服务。</li><li>如果在从库上备份，那么在备份期间，从库不能执行从主库同步过来的 binlog 日志中的写操作，导致主从库之间的延迟。</li></ul><p>在 InnoDB 引擎中，可以在备份时添加 <code>--single-transaction</code> 来完成不加锁的一致性数据备份。（实现原理是快照读snapshot read）</p><h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><h4 id="读锁和写锁"><a href="#读锁和写锁" class="headerlink" title="读锁和写锁"></a>读锁和写锁</h4><p> 如果使用 InnoDB 引擎，由于 X 锁和 S 锁有更细粒度的行锁，所以一般不会使用到表级别的 X 锁和 S 锁。表锁可以避免死锁，而行锁可能产生死锁问题。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 为表添加读锁/写锁</span><span class="token keyword">LOCK</span> <span class="token keyword">TABLES</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">READ</span><span class="token operator">|</span><span class="token keyword">WRITE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 释放锁</span>UNLOCK <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看表级别的锁, 其中in_use字段表示锁</span><span class="token keyword">SHOW</span> <span class="token keyword">OPEN</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL 中的读锁会<strong>禁止当前</strong> session 的写操作，会<strong>阻塞其它</strong> session 的写操作。而对于当前 session 和其它 session 的读操作，则都可以执行。（感觉为表添加 S 锁的 session 是一个倒霉蛋，没有享有什么特权，写入操作的优先级还给让出去了。）</p><p>MySQL 中的写锁相比于读锁更能体现专属的感觉，添加写锁的 session 可以读写表中的数据，而其它 session 既不可以读，也不可以写。</p><blockquote><p>  思考：为什么写锁是当前session可以读写，而其它session不可以读写？</p><p>  其实在并发控制中，读操作和写操作本身就是不可以并发的，因此当前session添加写操作后，其它session不能读写是很好理解的。所以主要解释为什么当前session可以读写呢？这是因为在一个session内，顺序是天生的，而并发问题的根源是由于顺序的不确定性，对于一个session内是不存在并发问题的（类似：单线程不需要考虑并发问题）</p></blockquote><h4 id="元数据锁"><a href="#元数据锁" class="headerlink" title="元数据锁"></a>元数据锁</h4><p>执行 DDL 语句时使用的并不是表级别的 X 锁、S 锁，而是称为<strong>元数据锁（Metadata Locks，简称MDL）</strong>。</p><p>总结：</p><ul><li>DML、DQL语句对应的是操作表中的数据，此时添加MDL中的共享锁。<ul><li>SELECT FOR SHARE：共享读锁</li><li>SELECT FOR UPDATE：共享写锁</li><li>INSERT、DELETE、UPDATE：共享写锁</li><li>SELECT：不添加任何锁</li></ul></li><li>DDL 修改表结构，例如添加、删除列，此时添加MDL中的排他锁。</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517110130380.png" alt="image-20230517110130380"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查看元数据锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> performance_schema<span class="token punctuation">.</span>metadata_locks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517112646989.png" alt="image-20230517112646989"></p><h4 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h4><p>在事务A为表添加行锁后，如果事务B此时想要为表添加表锁，那么事务B需要判断表中每一行是否添加了行锁，这样效率太低，因此产生了意向锁。</p><p>意向锁是事务A在添加行锁后，再为表添加一个意向锁。事务B检查表的意向锁与当前想要添加的表锁之间是否兼容，如果兼容则事务B添加表锁成功；否则事务B阻塞。</p><p>意向共享锁（IS）</p><p>意向排他锁（IX）</p><p>意向锁产生是作为一种辅助工具，或称为行锁的副产品，因此意向锁之间都是兼容的，例如，对行1读和对行2写，分别产生IS和IX锁，但本质上都是对独立的行进行处理。只有IS锁能够和表锁中的S锁兼容，其它都不兼容。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 查看意向锁以及行锁的加锁情况</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> performance_schema<span class="token punctuation">.</span>data_locks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517115515287.png" alt="image-20230517115515287"></p><blockquote><p>  总结：</p><ul><li>同级别的锁，只有S锁和S锁是兼容的</li><li>低级别的锁在高级别中对应的锁可能会降级（也可能不会），例如，行锁中的X锁，在MDL中降级为S锁，而在意向锁中仍然对应IX锁。（这里写的有点不清楚，并不是说行锁中X锁是MDL中的S锁。而是某一个行为，导致行锁中添加X锁，MDL中添加S锁，意向锁中添加IX锁。）</li></ul></blockquote><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>InnoDB 的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。（查询数据最终都要落到主索引上）</p><blockquote><p>  InnoDB的行锁是针对索引加的锁，如果不通过索引条件检索数据，那么行锁会自动升级为表锁，InnoDB引擎会对表中的所有记录添加锁。</p></blockquote><ul><li><p>在唯一索引上（UNIQE）进行等值查询，给不存在的记录加锁时，会添加间隙锁</p><p>例如，数据库中存在id=3和id=8的数据，此时给id=5的记录（不存在的数据）添加锁，这把锁即为间隙锁。在其它事务insert一条id=7的数据时，会因为间隙锁的存在而被阻塞，在这个场景下，间隙锁的范围是（3,8）。</p></li><li><p>在非唯一索引上进行等值查询时，会在前后都添加间隙锁</p><p>例如，数据库中存在age=1、age=3、age=8的数据，现在对age=3的数据进行操作，由于age上的索引是非唯一索引，因此除了对age=3的数据本身添加记录锁外，还会添加（1,3）和（3,8）的间隙锁，相当于（1,8）的范围全部被锁住。实际实现中，将分为两把锁 <code>(1,3]</code> 的临键锁和 <code>(3,8)</code> 的间隙锁。</p></li><li><p>在唯一索引上进行范围查询时，可能会添加大量的锁</p><p>例如，存在数据 [1,3,5,19,25,38]，执行 id &gt; 19 时，会在 25、38、supremum pseudo-record（+∞） 上都添加临键锁。</p><p>25 上的临键锁只锁 (19,25] 这部分范围，38 上的临键锁只锁 (25,38] 这部分范围，因此需要多把临键锁才能满足 id &gt; 19 的范围表示。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">WHERE</span> id <span class="token operator">>=</span> <span class="token number">19</span><span class="token keyword">FOR</span> SHARE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h4><p>Record Lock</p><p>S锁</p><p>X锁</p><h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h4><p>Gap Lock</p><p>间隙锁不锁记录，是为了确保索引记录之间的间隙不变，防止其它事务在这个间隙进行insert，避免产生幻读现象。</p><p>间隙锁的目的是防止其它事务插入间隙，间隙锁可以共存。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230517121924656.png" alt="image-20230517121924656"></p><h4 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h4><p>记录锁和间隙锁的组合，锁住数据的同时还锁住间隙。</p><h2 id="InnoDB-存储引擎"><a href="#InnoDB-存储引擎" class="headerlink" title="InnoDB 存储引擎"></a>InnoDB 存储引擎</h2><h3 id="逻辑存储结构-1"><a href="#逻辑存储结构-1" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h3><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230511185815007.png" alt="image-20230511185815007"></p><h4 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h4><p><strong>Buffer Pool（缓冲池）</strong></p><p>Buffer Pool 是主内存的一个区域，在执行增删改查操作时，先操作缓冲区中的数据，然后以一定的频率刷新到磁盘，从而减少磁盘IO。</p><p>缓冲池以 Page（页）为单位，底层采用链表结构管理。根据状态，将 Page 分为三种类型：</p><ul><li>free Page：空闲页，没有将磁盘数据导入，处于未使用状态</li><li>clean Page：磁盘数据导入，但是只执行了查询操作，并没有执行修改操作</li><li>dirty Page：脏页，缓冲池中的数据和磁盘中的数据不一致。所谓的 dirty page，就是本应该直接写入磁盘的数据暂时还保存在内存缓冲区中，此时内存中的page 称为 dirty page。将 dirty page 刷新到磁盘中即可以实现数据的一致。（TODO：但这样似乎 dirty page 应该称为 real page 才对吧？哪里的理解不对呢？）</li></ul><p><strong>Change Buffer（更改缓冲区）</strong></p><p>Change Buffer 是针对<strong>非 UNIQUE 索引</strong>的<strong>二级索引页</strong>。在执行 DML 语句时，如果</p><p>TODO</p><p><strong>Log Buffer（日志缓冲区）</strong></p><p>日志缓冲区，用来保存写入到磁盘中的 log 日志数据（redo log、undo log）。默认大小为 16 MB。</p><p>日志缓冲区中的数据会定期刷新到磁盘中，增加日志缓冲区的大小可以节省磁盘I/O。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 设置日志缓冲区大小</span><span class="token attr-name">innodb_log_buffer_size</span><span class="token punctuation">=</span><span class="token attr-value">16MB</span><span class="token comment" spellcheck="true"># 设置日志刷新到磁盘的时机</span><span class="token comment" spellcheck="true"># 0: 每秒写入并刷新一次</span><span class="token comment" spellcheck="true"># 1: 每次事务提交时写入并刷新到磁盘</span><span class="token comment" spellcheck="true"># 2: 每次事务提交后写入, 每秒刷新一次 </span><span class="token attr-name">innodb_flush_log_at_trx_commit</span><span class="token punctuation">=</span><span class="token attr-value">0|1|2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h4><p><strong>System Tablespace（系统表空间）</strong></p><p><strong>TableSpace（表空间）</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLESPACE</span> <span class="token operator">&lt;</span>表空间名<span class="token operator">></span><span class="token keyword">ADD</span> DATAFILE <span class="token string">'&lt;idb文件名>'</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Doublewrite Buffer Files（双写缓冲区）</strong></p><p>InnoDB 引擎在将 Buffer Pool 中的 Page 刷新到磁盘前，会先将数据也写入双写缓冲区文件中，便于系统异常时恢复数据。</p><h3 id="事务原理（InnoDB的价值）"><a href="#事务原理（InnoDB的价值）" class="headerlink" title="事务原理（InnoDB的价值）"></a>事务原理（InnoDB的价值）</h3><ul><li><p>ACD 特性：由 redo log 和 undo log 实现</p></li><li><p>I（隔离性）：由 锁 和 MVCC 实现</p></li></ul><h4 id="redo-log（保证持久性）"><a href="#redo-log（保证持久性）" class="headerlink" title="redo log（保证持久性）"></a>redo log（保证持久性）</h4><ul><li><p>redo log buffer（重做日志缓冲区）</p><p>保存在内存中</p></li><li><p>redo log file（重做日志文件）</p><p>保存在磁盘中</p></li></ul><p>当事务提交后，所有的修改信息都保存在 redo log file 中。当脏页（dirty page）刷新到磁盘时，如果不幸发生错误，可以使用 redo log file 进行数据恢复使用。这里的发生错误是指，数据在内存中已经被成功保存，事务提交成功，并且告知用户事务执行成功，但是实际上在将内存数据保存到磁盘这个过程中发生错误时，持久性就没有得到保障。</p><p>大致流程：</p><ol><li>对某个数据执行 update、delete 等操作</li><li>在 Buffer Pool 中查找是否存在该数据的缓存；如果不存在，则通过后台线程从 idb 文件中将 page 读取到 buffer pool 中</li><li>对 buffer pool 中的 page 进行相应的操作（update、delete等），修改 buffer pool 中的数据，此时 buffer pool 和 idb 文件存在差异，即 page 称为 dirty page。</li><li>每隔一定的时间间隔，后台线程会将 dirty page 刷新到 idb 文件中。</li></ol><p>redo log 的功能在于：步骤3到步骤4之间，添加一个redo log buffer，将当前数据执行的操作的信息保存到 redo log buffer 中，然后 redo log buffer 中的数据立即刷新到磁盘中的 redo log file 中保存。保存成功后，才向用户返回事务提交成功？</p><blockquote><p>  <strong>redo log buffer 是顺序的追加方式，操作 I/O 的效率高。</strong>而执行数据的 update、delete 等操作时，数据所在的 page 是随机分布的，需要执行大量的随机读写 I/O，而这种效率低。因此每次事务提交后，可以将 redo log buffer 中的数据刷新到磁盘中，但是出于效率考虑，而 buffer pool 中的数据则是每隔一段时间刷新一次。换言之，如果每次刷新都提交 buffer pool 中的数据，那 buffer pool 作为缓冲的价值也就没有必要了。</p><p>  在 dirty page 成功刷新到磁盘中后，实际上 redo log file 也就没有存在意义了，可以认为 redo log file 是一个环形队列，会覆盖掉原来的数据，文件不会无限制增长。</p></blockquote><h4 id="undo-log（保证原子性）"><a href="#undo-log（保证原子性）" class="headerlink" title="undo log（保证原子性）"></a>undo log（保证原子性）</h4><p>undo log 用于记录数据被修改前的信息，用于事务回滚或MVCC（多版本并发控制）。</p><p>与 redo log 记录实际执行的物理操作不同，undo log 并不是记录实际执行的数据操作，甚至是<strong>记录与当前操作相反的操作（逆操作）</strong>，例如当前实际执行的是delete 操作，那 undo log 中需要对该操作进行还原，因此记录 insert 操作。</p><ul><li><p>insert undo log：保存插入记录的主键值，回滚时只需要删除该主键对应的记录即可</p></li><li><p>update undo log：保存记录的旧值，回滚时将记录更新回旧值</p></li><li><p>delete undo log：理论上将记录的旧值保存下来，回滚的时候重新插入记录即可（主键变化怎么办呢？）。但实际为了效率并没有这么处理。</p><p>设置删除标志位（隐藏字段），InnoDB 引擎通过专门的 purge 线程来清理这些删除标志位被设置true的记录。这种情况下如何实现回滚呢？</p></li></ul><p>undo log 在事务提交之后，并不会立即删除，因为这些日志还可能用于 MVCC。undo log 采用 segment（段）的方式进行管理和记录，存放在 rollback segment （回滚段）中，内部包含 1024 个 rollback segment。这里是什么的内部？</p><blockquote><p>  undo log 日志中，insert undo log 日志只在事务回滚的情况下需要，因此在事务commit之后，insert undo log 可以被立即删除。但是 delete undo log 和 update undo log 不仅在回滚的时候需要，在快照读的时候也需要，因此不能被立即删除。</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515200431099.png" alt="undo log 的本质就是一个链表"></p><h2 id="MySQL-管理"><a href="#MySQL-管理" class="headerlink" title="MySQL 管理"></a>MySQL 管理</h2><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li>什么是事务？事务的四大特性是什么？</li><li>事务的隔离级别有哪些？MySQL 默认是哪个？</li><li>内连接和左外连接的区别是什么？</li><li>常用的存储引擎有哪些？InnoDB 和 MyISAM 的区别？</li><li>MySQL 默认 InnoDB 引擎的索引是什么数据结构？</li><li>如何查看 MySQL 的执行计划？</li><li>索引失效的情况有哪些？</li><li>什么是回表查询？</li><li>什么是 MVCC？</li><li>MySQL 的主从复制的原理是什么？</li><li>主从复制之后的读写分离是如何实现的？</li><li>数据库的分库分表是如何实现的？</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Data</title>
      <link href="/2023/05/05/spring-springdata-01/"/>
      <url>/2023/05/05/spring-springdata-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h1><h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>查询方式有五种:</p><ol><li>调用父接口中的方法</li><li>方法命名规则查询（按照一定的规范定义接口中的方法, 自动生成SQL）</li><li>JPQL查询</li><li>本地SQL查询</li><li>Specification动态查询</li></ol><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><h4 id="OneToOne-关系"><a href="#OneToOne-关系" class="headerlink" title="OneToOne 关系"></a>OneToOne 关系</h4><p>（略）</p><h4 id="OneToMany-关系"><a href="#OneToMany-关系" class="headerlink" title="OneToMany 关系"></a>OneToMany 关系</h4><p>One：主表</p><p>Many：从表</p><p>OneToMany 关系通过<strong>从表的外键</strong>来刻画</p><h4 id="ManyToMany-关系"><a href="#ManyToMany-关系" class="headerlink" title="ManyToMany 关系"></a>ManyToMany 关系</h4><p>不区分主表和从表，通过<strong>中间表</strong>来代替外键，对 ManyToMany 关系进行刻画</p><blockquote><p>  OneToMany 和 ManyToMany 的区别：</p><ul><li>OneToMany 关系中，站在主表到从表的角度看，是一对多关系；而站在从表到主表的角度看，是一对一关系。</li><li>ManyToMany 关系中，无论站在两张表的那一方去看，都是一对多关系。</li></ul></blockquote><p>所谓的维护关系和放弃关系的维护权，本质上就是在调用save()方法时，需不需要额外去保存关系（可能是中间表，也可能是外键）。在保存维护关系的类之前，需要将不维护关系的实体类先保存。如果先保存维护关系的实体类A，那么同时触发保存关系表，而关系表设计到实体类A和实体类B，此时实体类B还没有保存，因此会报错。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230510153934822.png" alt="image-20230510153934822"></p><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"article"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * GenerationType.IDENTITY: 数据库的主键需要设置为AUTO_INCREMENT才会生效, 否则报错     * &lt;p>     * 虽然id可以唯一的标识一个对象, 但是如果重写hashCode和equals方法并不可以仅仅通过id, 因为在插入的时候, id还并没有生成     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"author"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span>    <span class="token comment" spellcheck="true">// 上面设置Article本身的属性字段, 下面设置与其它类的关系</span>    <span class="token comment" spellcheck="true">// 使用@JoinTable表示负责维护关系, 需要后保存</span>    <span class="token annotation punctuation">@ManyToMany</span>    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">// 中间表在数据库中的名称</span>            name <span class="token operator">=</span> <span class="token string">"article_types"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 中间表中对应到本表主键的列名, 因为主键可能是多列共同组成的一个复合列, 因此使用数组</span>            joinColumns <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"aid"</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 中间表中对应到另一张表主键的列名</span>            inverseJoinColumns <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tid"</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Type<span class="token operator">></span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addType</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 类型id     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 类型名称     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * mappedBy用来表示主动放弃关系的维护权     */</span>    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"types"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Article<span class="token operator">></span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArticle</span><span class="token punctuation">(</span>Article article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationMainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ArticleRepository articleRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeRepository typeRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">manyToManyRelationshipTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Article</span>        Article article01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"JPA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Article article02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Type</span>        Type type01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        type01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TypeA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type type02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        type02<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TypeB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置关系</span>        article01<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type01<span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type02<span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type01<span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO: 1. 为什么会在这里报错java.lang.StackOverflowError呢?</span>        <span class="token comment" spellcheck="true">//  上面的也没有报错. hashCode的问题.</span>        <span class="token comment" spellcheck="true">//  并且奇怪的是, 在将@Data注解换成getter和setter方法后就正常了</span>        <span class="token comment" spellcheck="true">//  [解决]: 由于两个循环依赖的对象会互相调用toString方法, 从而导致栈溢出, @Data注解中默认包含@ToString注解. 可以显式地使用@ToString注解</span>        type01<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article01<span class="token punctuation">)</span><span class="token punctuation">;</span>        type01<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article02<span class="token punctuation">)</span><span class="token punctuation">;</span>        type02<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article01<span class="token punctuation">)</span><span class="token punctuation">;</span>        type02<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO: 为什么在保存成功后(insert)会执行select和update?</span>        <span class="token comment" spellcheck="true">//  [解决]: 莫名其妙地解决</span>        <span class="token comment" spellcheck="true">// 和OneToMany关系一样, 需要先保存不维护关系的实体Type, 否则会报错. </span>        <span class="token comment" spellcheck="true">// 不维护关系的实体可以认为仅仅保存自己, 不会产生循环依赖.</span>        <span class="token comment" spellcheck="true">// 而维护关系的实体, 在保存自己的时候, 还要去保存关系, 因此如果此时type没有保存, 就不会有tid, 因此报错</span>        typeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>type01<span class="token punctuation">)</span><span class="token punctuation">;</span>        typeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>type02<span class="token punctuation">)</span><span class="token punctuation">;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article01<span class="token punctuation">)</span><span class="token punctuation">;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230510163559617.png" alt="测试结果：没有多余的select语句"></p><h3 id="级联操作（需要改进）"><a href="#级联操作（需要改进）" class="headerlink" title="级联操作（需要改进）"></a>级联操作（需要改进）</h3><p><strong>TODO：对级联操作的理解有误，下面的涉及到cascade的不一定正确，有待改进。</strong></p><p>操作一个对象时，同时操作与他相关联的对象。</p><blockquote><p>  以User和Role为例，User和Role是多对多关系，数据库中有三张表 <code>user</code>、<code>role</code>、<code>user_role</code></p><ul><li><p>情况1：User和Role都不使用<code>@JoinTable</code>（没有维护关系）</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时user表和role表中都有数据, 但是user_role表中没有数据</span><span class="token comment" spellcheck="true">// 维护关系发生在save()时, 但是User和Role都没有去维护关系, 即都没有向user_role表中添加数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>情况2：User和Role都使用<code>@JoinTable</code>（都维护关系）</p><p>（TODO：期待报错主键重复，目前测试失败）</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时roleDao.save()时出现主键重复的问题, </span><span class="token comment" spellcheck="true">// 假设userId=1, roleId=2, 在userDao.save()时向user_role表中添加数据, 但是在roleDao.save()时再次向user_role表中添加相同的主键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>情况2改进：User和Role任意一方放弃关系的维护，即调用save方法不会向user_role表中添加数据</p><p>放弃关系的维护，通过<code>@ManyToMany</code>中的<code>mappedBy</code>属性</p><p>（TODO：期待在任意一方添加上mappedBy属性后执行成功，目前测试失败）</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>情况3：在负责维护关系的实体类中使用级联操作（cascade）</p><p>不妨假设维护关系的实体类为User，那么期待仅仅通过userDao.save()就可以同时保存role</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote><h2 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h2><p>Spring Data Redis中提供的序列化器，可以通过 <code>RedisSerializer</code> 接口来查看有哪些序列化器</p><table><thead><tr><th>序列化器</th><th>作用</th></tr></thead><tbody><tr><td>StringRedisSerializer</td><td>简单的字符串序列化</td></tr><tr><td>GenericToStringSerializer</td><td>可以将任何对象泛化为字符串并序列化</td></tr><tr><td>Jackson2jsonRedisSerializer</td><td>序列化对象为json字符串</td></tr><tr><td>GenericJackson2jsonRedisSerializer</td><td>序列化对象为json字符串，更容易反序列化</td></tr><tr><td>OxmSerializer</td><td>序列化对象为xml字符串</td></tr><tr><td>JdkSerializationRedisSerializer（默认）</td><td>序列化对象为二进制数据</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码解析</title>
      <link href="/2023/05/01/spring-jie-mi/"/>
      <url>/2023/05/01/spring-jie-mi/</url>
      
        <content type="html"><![CDATA[<p>通过 <code>new RuntimeException().getStackTrace()</code> 从方法调用栈的栈帧 StackTraceElement 里面来找到主启动类</p><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取initializer, 排序</span>SpringApplication application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>primaryClass<span class="token punctuation">)</span><span class="token punctuation">;</span>application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 利用前面分类好的bootstrapInitializer来初始化DefaultBootstrapContext</span><span class="token function">createBootstrapContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为系统变量 SYSTEM_PROPERTY_JAVA_AWT_HEADLESS 设置默认值为 "true"</span><span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationRunListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 比较复杂, 暂时略过</span>listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span>bootstrapContext<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Servlet方式, 非WebFlux方式</span>ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationServletEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类型转换器的设置(核心方法)</span>ApplicationConversionService conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加各种类型转换器和类型转换器工厂, GenericConversionService</span>conversionService<span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>converterFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取factory上的两个泛型: FromType 和 ToType</span>ResolvableType<span class="token punctuation">[</span><span class="token punctuation">]</span> typeInfo <span class="token operator">=</span> <span class="token function">getRequiredTypeInfo</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ConverterFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConverterFactoryAdapter</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConvertiblePair</span><span class="token punctuation">(</span>typeInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typeInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ConverterFactory、ConvertiblePair-和-Converter-类"><a href="#ConverterFactory、ConvertiblePair-和-Converter-类" class="headerlink" title="ConverterFactory、ConvertiblePair 和 Converter 类"></a>ConverterFactory、ConvertiblePair 和 Converter 类</h1><ul><li>ConverterFactory 通过调用 <code>getConverter()</code> 来获取具体的 Converter</li><li>ConvertiblePair 封装 ConverterFactory 中的两个泛型：sourceType 和 targetType </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NumberToNumberConverterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ConverterFactory</span><span class="token operator">&lt;</span>Number<span class="token punctuation">,</span> Number<span class="token operator">></span><span class="token punctuation">,</span> ConditionalConverter <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> Converter<span class="token operator">&lt;</span>Number<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">getConverter</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NumberToNumber</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Integer没有必要转换成Integer</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>TypeDescriptor sourceType<span class="token punctuation">,</span> TypeDescriptor targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>sourceType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NumberToNumber</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>Number<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> targetType<span class="token punctuation">;</span>        <span class="token function">NumberToNumber</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>targetType <span class="token operator">=</span> targetType<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> T <span class="token function">convert</span><span class="token punctuation">(</span>Number source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> NumberUtils<span class="token punctuation">.</span><span class="token function">convertNumberToTargetClass</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ResolvableType-类"><a href="#ResolvableType-类" class="headerlink" title="ResolvableType 类"></a>ResolvableType 类</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 书籍阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/20/lun-wen-05-tu-shen-jing-wang-luo/"/>
      <url>/2023/04/20/lun-wen-05-tu-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="图深度学习"><a href="#图深度学习" class="headerlink" title="图深度学习"></a>图深度学习</h1><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><h3 id="1-1-图深度学习的动机"><a href="#1-1-图深度学习的动机" class="headerlink" title="1.1 图深度学习的动机"></a>1.1 图深度学习的动机</h3><blockquote><ul><li>为什么要将现实数据表示为图？</li><li>为什么要将深度学习与图联系起来？</li><li>图深度学习面临哪些挑战？</li></ul></blockquote><h4 id="为什么要将现实数据表示为图？"><a href="#为什么要将现实数据表示为图？" class="headerlink" title="为什么要将现实数据表示为图？"></a>为什么要将现实数据表示为图？</h4><p>现实世界应用产生的数据可以有多种表示形式：矩阵、张量、序列等。将数据表示为图有两个原因：</p><ul><li><strong>图提供了数据的通用表示形式，来自各个领域的系统的数据可以直接表示为图</strong>，例如，社交网络、交通运输网络、知识图谱等，许多其它类型的数据可以转换为图的表示</li><li><strong>许多现实问题可以通过图上的计算任务解决</strong>，例如，推断节点的属性、检测异常节点、识别与疾病相关的基因、向患者推荐药物，都可以归结为<strong>节点分类问题</strong>。对于朋友推荐、多药副作用预测、知识图谱补全，在本质上都是<strong>图上的链接预测问题</strong>。</li></ul><h4 id="为什么要将深度学习与图联系起来？"><a href="#为什么要将深度学习与图联系起来？" class="headerlink" title="为什么要将深度学习与图联系起来？"></a>为什么要将深度学习与图联系起来？</h4><p>图上的节点是自然相连的，这表明节点不是独立的，但是传统的机器学习方法通常假设数据是独立同分布的，因此它们不适合直接用来解决图上的计算任务，解决思路主要有两种：</p><ul><li>一种思路是建立一种特定于图的新机制，这种针对图设计的分类问题称为<strong>集体分类问题（collective classification）</strong>，与传统分类不同，对于结点来说，集体分类不仅考虑其特征与其标签之间的映射，而且还要考虑其邻域相应的映射</li><li>另一种思路是通过构建一组特征来表示其节点，在该表示上可以应用传统的分类技术，这种思路变得越来越流行且主流。<strong>该思路的关键是如何为节点构造一组特征，或者说如何构造节点表示。而深度学习在表示学习方面具有强大的功能。</strong></li></ul><h4 id="图深度学习面临哪些挑战？"><a href="#图深度学习面临哪些挑战？" class="headerlink" title="图深度学习面临哪些挑战？"></a>图深度学习面临哪些挑战？</h4><ul><li>传统的深度学习只是针对常规数据（例如图像和序列）进行设计的，而图可以具有不同的大小，图中的节点是无序的，并且可以具有不同的邻域</li><li>规则数据的结构信息很简单，而图的结构信息很复杂，并且节点和边可以包含丰富的额外信息。为传统数据设计的深度学习技术不足以捕获如此丰富的信息</li></ul><h3 id="1-2-图特征学习"><a href="#1-2-图特征学习" class="headerlink" title="1.2 图特征学习"></a>1.2 图特征学习</h3><p>为了利用传统的机器学习执行图上的计算任务，人们期望找到节点的表示形式，主要有两种方法可以实现此目标：特征工程和特征学习。</p><p>特征工程依赖手工设计的特征，例如节点度的统计信息；而特征学习是自动学习节点特征：</p><ul><li>一方面，人们通常没有办法事先知道哪些特征是重要的，特别是对于给定的下游任务而言，因此来自特诊工程的特征对于下游任务而言可能不是最理想的，并且该过程需要大量的人力；</li><li>另一方面，特征学习是自动学习特征，该过程可以由下游任务直接知道，因此学习到的特征可能适合于下游任务，且通常比通过特诊工程获得的特征能够取得更好的性能，同时该过程需要最少的人工干预，并且可以轻松地适应新任务。</li></ul><p>图的特征学习技术可以粗略地划分为：</p><ul><li>图特征选择，用于移除节点上的无关和冗余的特征</li><li>图表示学习，目的是生成一组新的节点特征</li></ul><h4 id="图特征选择"><a href="#图特征选择" class="headerlink" title="图特征选择"></a>图特征选择</h4><p>现实世界中的数据通常是高维度的，并且存在着嘈杂的、不相关的和多余的特征。<strong>特征选择的目的是</strong>自动地选择一小部分特征，这些子集具有最小的冗余度，但与学习目标有最大的相关性。在许多应用中，原始特征对于知识提取和模型解释至关重要，例如，在用于研究癌症的遗传分析中，除了区分癌组织，鉴定诱导癌症发生的基因（即原始特征）更重要。在这种应用场景下，特征选择是优先考虑的，因为它可以保留原始特征，并且他们的语义通常为学习问题提供关键见解和解释。<strong>传统的特征选择假定数据样本是独立同分布的，然而，许多应用中的数据样本都嵌入在图上，因此，它们本质上不是独立同分布的，这就是图特征选择研究的领域。</strong></p><ol><li>首先，在有监督的情况下，对该问题进行研究，这些方法使用线性分类器将所选特征映射到类别标签，并引入图正则化项，以捕获结构信息来选择特征，该正则化项的目的是确保具有所选特征的连接的节点可以映射到相似的标签中。</li><li>然后，在无监督的情况下，对问题进一步研究，首先从结构信息中提取伪标签，然后用伪标签充当监督信息知道特征选择过程。（假定节点内容和结构信息都是从一组高质量的特征中生成的，而这些特征可以通过最大化生成过程获得）</li><li>在后续的工作中，问题从简单图扩展到复杂图，例如，动态图、多维图、有符号图、属性图等等</li></ol><h4 id="图表示学习"><a href="#图表示学习" class="headerlink" title="图表示学习"></a>图表示学习</h4><p>图表示学习是学习一组新的节点特征，这个问题被研究了数十年，通过深度学习得到了极大的加速。</p><p>在早期阶段，图表示学习在谱聚类、基于图的降维和矩阵分解的背景下进行了研究。</p><ul><li><p>在谱聚类中，数据点被视为图的节点，然后聚类问题变成了将图划分为节点社区。谱聚类的关键一步是谱嵌入，它的目的是将节点嵌入到低维空间中，然后在该空间中可以将传统的聚类算法应用于识别聚类。</p></li><li><p>基于图的降维技术可以直接应用于学习节点表示，这些方法通常基于数据样本的原始特征，使用预定义的距离或相似度函数构建亲和度图，然后通过保留该亲和度图的结构信息学习节点表示。例如，IsoMap 通过测地线保留全局几何，而 LLE 和 eigenmap 保留亲和图中的局部邻域信息。因为前述方法经常需要在亲和矩阵（邻接矩阵或拉普拉斯矩阵）上进行特征分解，所以它们通常具有很高的计算复杂度。</p></li><li><p>矩阵分解可以自然地用于学习节点表示，矩阵分解的目的是将节点嵌入低维空间，在该低维空间中可以利用新的节点表示重建邻接矩阵</p></li><li><p>DeepWalk首先把Word2vec应用于图的节点表示学习，它首先把给定图中的节点视为人类语言的单词，并通过在图中随机游走生成该语言的句子。然后使用Skip-gram模型学习节点表示，从而保留了这些随机游走中的节点共现。（什么是节点共现？为什么在图中随机游走就是一个句子，该句子什么时候结束？）</p><ul><li>开发先进的方法保存节点共现</li><li>保留其他类型的信息，例如，节点的结构角色、社区信息和结点状态</li><li>设计复杂图的嵌入框架，例如，有向图、异构图、二分图、多维图、有符号图、超图、动态图</li></ul></li><li><p>因为深度学习在表示学习中的强大功能和成功经验，将深度学习扩展到图中的方法称为图神经网络（GNN），大致可以分为两类：空间方法和谱方法</p><p>空间方法显式地利用了图结构，例如空间上接近的邻居；谱方法通过图的傅里叶变换和逆变换得到图的谱视图。GNN在一下几个方面得到迅速发展：</p><ul><li>提出了大量新的GNN模型，包括谱方法和空间方法</li><li>侧重于图的任务，例如，图分类（需要得到整个图的表示）。<strong>因此，许多池化方法被提出来，目的是为了从节点表示中获得图表示</strong>。</li></ul></li></ul><h3 id="1-3-章节依赖关系"><a href="#1-3-章节依赖关系" class="headerlink" title="1.3 章节依赖关系"></a>1.3 章节依赖关系</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420104208006.png" alt="image-20230420104208006" style="zoom:50%;"><h2 id="第2章-图论基础"><a href="#第2章-图论基础" class="headerlink" title="第2章 图论基础"></a>第2章 图论基础</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>首先讨论图的邻接矩阵和拉普拉斯矩阵及其重要性质，接着介绍节点带有属性的图（属性图），并通过将属性定义为函数或者信号来对这类图进行新的理解。然后讨论为图深度学习奠定了重要基础的图傅里叶分析和图信号处理的基本概念。</p><h3 id="2-2-性质（特征工程）"><a href="#2-2-性质（特征工程）" class="headerlink" title="2.2 性质（特征工程）"></a>2.2 性质（特征工程）</h3><h4 id="中心性"><a href="#中心性" class="headerlink" title="中心性"></a>中心性</h4><p>节点的中心性（centrality）用于衡量节点在图中的重要性，中心性有多种类型的定义</p><ul><li><p><strong>度中心性</strong>（degree centrality）</p><p>如果有许多节点连接到某个节点 X，那么该结点 X 可以被认为是重要的。因此，可以基于一个结点的度来衡量它的中心性，即直接以节点的度作为其度中心性的定义。</p></li><li><p><strong>特征向量中心性</strong>（eigenvector centrality）</p><p>度中心性认为度越大的节点越重要，且认为所有邻居节点的贡献度是一样的。然而，这些相邻节点本身的重要性是不同的，因此，它们对于中心节点的影响也不相同。</p><p>对邻居节点的中心性的平均值，是一种<strong>递归定义</strong>。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420120627745.png" alt="image-20230420120627745"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420120639053.png" alt="image-20230420120639053"></p><p>其中 $\lambda$ 是矩阵 A 的最大的特征值，将最大特征值对应的特征向量作为中心性向量。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420121101708.png" alt="image-20230420121101708"></p><p>在上图的案例中，$v_2,v_3,v_4$ 的度都是 2，但是根据 A 得到的中心性向量 $[1,0.675,0.675,0.806,1]$，其中 $v_4$ 的中心性值为 0.806，高于另外两个度为 2 的节点，这是因为 $v_4$ 和 $v_1,v_5$ 这两个高中心性（度为3）的节点直接相连。</p></li><li><p><strong>Katz 中心性</strong></p><p>不仅考虑邻居的中心性，而且包含了一个常数来考虑中心节点本身。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420121535363.png" alt="image-20230420121535363"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420121549405.png" alt="image-20230420121549405"></p><p>$\beta$ 表示一个包含所有节点的常数项的向量。类比特征向量中心性，应该满足 $\alpha = \frac{1}{\lambda_{max}}$，但实际往往是  $\alpha &lt; \frac{1}{\lambda_{max}}$，目的是保证矩阵 $I-\alpha \cdot A$的可逆性</p></li><li><p><strong>介数中心性</strong>（Betweenness Centrality）</p><p>前面提到的中心性都是基于和相邻节点的连接，另一种度量节点重要性的方法是检查该结点是否位于图中的重要位置，例如，许多路通过同一个结点，那么该节点处于图中的一个重要位置。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420122232905.png" alt="image-20230420122232905"></p></li></ul><h3 id="2-3-谱图论"><a href="#2-3-谱图论" class="headerlink" title="2.3 谱图论"></a>2.3 谱图论</h3><p>图的拉普拉斯矩阵<br>$$<br>L = D-A<br>$$<br>归一化拉普拉斯矩阵<br>$$<br>L = D^{-\frac{1}{2}} (D-A) D^{\frac{1}{2}}<br>$$<br>拉普拉斯矩阵是半正定的，即对于任意一个实向量 $x$，满足 $x ^T L x \ge 0$。因此拉普拉斯矩阵的特征值是非负的。</p><p>拉普拉斯矩阵的零特征值的数量是图中连通分量的数目。</p><h3 id="2-4-图信号处理"><a href="#2-4-图信号处理" class="headerlink" title="2.4 图信号处理"></a>2.4 图信号处理</h3><p>图中的节点常常关联一些特征或属性，这种图结构数据可以看做图信号，它捕获结构信息（即节点之间的连接）和数据（即节点上的属性）。</p><p>图信号由图 G={V,E} 和映射函数 f 构造，其中映射函数 f 将节点域上节点映射为实数值。</p><p><strong>如果图中相邻的节点的值是相似的，那么认为这个图是平滑的（smooth）</strong>。一个平滑的图信号是低频率的，因为这些值通过图中的边在缓慢地变化。拉普拉斯矩阵的二次型可以用来测量一个图信号 f 的平滑度（频率），因为 $f^T L f$ 是所有相邻节点对的平方差之和。一个图信号 f 越平滑，则 $f^T L f$ 的值越小，<strong>即 $f^T L f$ 的值被称为信号的平滑度（频率）。</strong></p><p>在传统的信号处理，信号可以表示在两个域：时域和频域。同样，图信号也可以表示在两个域，即空间域和谱域（频域）。图信号的谱域基础是图傅里叶变换（GFT），GFT 建立在谱图论之上。</p><h3 id="2-5-复杂图"><a href="#2-5-复杂图" class="headerlink" title="2.5 复杂图"></a>2.5 复杂图</h3><h4 id="异质图"><a href="#异质图" class="headerlink" title="异质图"></a>异质图</h4><p>同质图中，每个节点都认为是同一个类型的节点，或者说每个节点具有的属性都相同；而异质图中，图中存在多种类型的节点，例如，知识图谱中存在作者节点、论文节点、会议节点等不同类型的节点。</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420133546299.png" alt="image-20230420133546299" style="zoom:50%;"><h4 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h4><h4 id="多维图"><a href="#多维图" class="headerlink" title="多维图"></a>多维图</h4><p>节点和节点之间可以同时存在多种关系，例如，用户可以对视频进行点赞、分享、投币等</p><h4 id="符号图"><a href="#符号图" class="headerlink" title="符号图"></a>符号图</h4><p>包含正边和负边的符号图（signed graphs），例如，用户关注用户为正，用户屏蔽用户为负</p><h4 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h4><p>每个节点或每条边都与时间戳相关联，例如，下图中每条边都与一个时间戳相关联，而节点的时间戳是该节点产生第一条边的时间。</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420134209184.png" alt="image-20230420134209184" style="zoom:67%;"><p>在实际情况中，无法记录每个节点和每条边的时间戳，通常在每隔一段时间记录图的快照，这种动态图称为离散动态图，它由一系列快照图组成。离散动态图可以认为是一个时间序列。</p><h3 id="2-6-图的计算任务"><a href="#2-6-图的计算任务" class="headerlink" title="2.6 图的计算任务"></a>2.6 图的计算任务</h3><p>图上的各种计算任务可以分为两大类：</p><ul><li><p>一类侧重于节点的任务（node-level tasks），其中整个数据通常表示为一个图，每个数据样本是图中的一个节点</p><ul><li><p>节点分类</p><p>在现实世界的图中，节点常常与有用的信息相关联，这些信息可以被视为节点的标签。在社交网络中，这类信息可以是用户的人口统计属性，例如，年龄、性别、职业、兴趣、爱好等。这些标签有助于描述该节点的特征。但是通常很难为所有节点获得完整的标签集，只有不到1%的用户提供了完整的个人属性，因此<strong>很多时候得到的是一个只有一部分节点有标签的图，而哪些无标签的节点就需要通过模型预测标签。这就是节点分类问题。</strong></p></li><li><p>节点排序</p></li><li><p>链接预测</p><p>在许多实际应用中，图并不是完整的，会缺失一些节点之间的连接。一方面，这些连接是真实存在的，但是它们没有被观察到或者被记录下来，这就导致在图中丢失一些边。另外，许多图是自然演变的，例如，用户可以不断地与其它用户成为朋友。推断或预测这些缺失的连接可以用于许多场景，例如，好友推荐（friend recommendation）、知识图谱补全（knowledge graph completion）和犯罪情报分析（criminal intelligence analysis）。简单来说，连接预测就是预测在邻接矩阵中，哪些0值的位置最有可能变成1。</p></li><li><p>社区检测</p></li></ul></li><li><p>另一类侧重于图的任务（graph-level tasks），其中数据往往包括一组图，每个数据样本是一个图</p><ul><li><p>图分类</p><p>图分类任务的本质是预测未标记图的标签。</p></li><li><p>图匹配</p></li><li><p>图生成</p></li></ul></li></ul><h2 id="第4章-图嵌入（表示学习）"><a href="#第4章-图嵌入（表示学习）" class="headerlink" title="第4章 图嵌入（表示学习）"></a>第4章 图嵌入（表示学习）</h2><p>通过无监督学习，将节点学习为向量表示，不需要考虑下游任务。</p><p><strong>将节点特征和图结构作为输入，以一组新的节点特征作为输出的过程称为图滤波操作（graph filtering）</strong>。图深度学习目的是学习每个节点的代表性特征，这些节点特征有助于该类任务的后续处理。</p><p>对于侧重于节点的任务来说，仅仅使用图滤波操作就足够了，通常通过连续堆叠多个图滤波操作来生成最终的节点特征。但是对于侧重于图的任务来说，最终目标是学习整个图的代表性特征，而学习节点特征通常只是一个中间步骤，还需要其他的操作从节点特征生成整个图的特征，例如，池化操作（pooling）被用来汇总节点特征以生成图特征。<strong>由于图结构是不规则的，这就要求图的池化操作和传统的池化操作有所不同，图的池化操作应该利用图结构信息来指导池化过程。</strong>实际上，池化操作通常将图作为输入，然后生成节点更少的粗化图。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420155754867.png" alt="image-20230420155754867"></p><h3 id="4-3-图滤波器"><a href="#4-3-图滤波器" class="headerlink" title="4.3 图滤波器"></a>4.3 图滤波器</h3><h4 id="基于谱的图滤波器（graph-spectral-filtering）"><a href="#基于谱的图滤波器（graph-spectral-filtering）" class="headerlink" title="基于谱的图滤波器（graph spectral filtering）"></a>基于谱的图滤波器（graph spectral filtering）</h4><p>图谱滤波器是在图信号的谱域中设计的，图谱滤波的思想是调制图信号的频率，使得其中一些频率分量被保留或放大，而另一些频率分量被移除或减小。给定一个图信号，首先需要对其进行图傅里叶变换（GFT）以获得它的图傅里叶系数，然后对这些系数进行调制，再在图域（空间域）中重构该信号。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420161524269.png" alt="image-20230420161524269"></p><h2 id="第10章-自然语言处理中的图神经网络"><a href="#第10章-自然语言处理中的图神经网络" class="headerlink" title="第10章 自然语言处理中的图神经网络"></a>第10章 自然语言处理中的图神经网络</h2><p>首先介绍常见的 NLP 任务，包括语义角色标注、神经机器翻译、关系抽取、问答系统和图到序列学习，以及它们对应的图神经网络模型。然后介绍知识图谱的概念，以及如何将 GNN 应用于知识图谱。</p><p>GNN 已经被用来辅助解决许多种 NLP 任务，例如，语义角色标注，多跳问答系统、关系抽取、神经机器翻译和图表示学习。以图的形式编码多种关系信息的知识图谱也在 NLP 任务中得到了广泛的应用，许多工作致力于将 GNN 模型推广到知识图谱领域。</p><h3 id="10-1-语义角色标注（Semantic-Role-Labeling，SRL）"><a href="#10-1-语义角色标注（Semantic-Role-Labeling，SRL）" class="headerlink" title="10.1 语义角色标注（Semantic Role Labeling，SRL）"></a>10.1 语义角色标注（Semantic Role Labeling，SRL）</h3><p>SRL 的目的是发现句子中隐藏的谓语-论元（predicate-argument）结构，可以非正式地被定义为发现<strong>“谁在哪里对谁做了什么”</strong>的任务。SRL 的步骤：</p><ol><li>检测谓语</li><li>识别论元并贴上语义角色的标签。（区分 agent 和 theme，即主语和宾语）</li><li></li></ol><h1 id="学习路线与必读论文清单"><a href="#学习路线与必读论文清单" class="headerlink" title="学习路线与必读论文清单"></a>学习路线与必读论文清单</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515092225089.png" alt="image-20230515092225089"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515120745128.png" alt="image-20230515120745128"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515095047646.png" alt="image-20230515095047646"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515095615609.png" alt="image-20230515095615609"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515101526430.png" alt="本体图"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515104136860.png" alt="image-20230515104136860"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515104713618.png" alt="image-20230515104713618"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230515111437569.png" alt="image-20230515111437569"></p><p>不仅节点和边可以有特征，子图和全图也可以有特征</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>NetworkX</p><p>DGL</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/16/lun-wen-00-cai-liao/"/>
      <url>/2023/04/16/lun-wen-00-cai-liao/</url>
      
        <content type="html"><![CDATA[<p><strong>social network(社交网络)</strong>: graphs of people</p><p>Graphs are powerful structures useful not only for representing connected information, but also for supporting multiple types of analysis.</p><p>应用场景</p><ul><li>推荐系统Recommendation</li><li>欺诈检测Fraud detection</li></ul><p>性能</p><ul><li><p>精度accuracy</p></li><li><p>速度speed</p><p>例如推荐系统中提供预测的速度会影响整个产品的可用性</p></li></ul><p>图的优势：</p><ul><li>以一种易于理解和易于访问的方式来表示数据representing data in a way that is easily understandable and easily accessible</li><li>图对于数据的表示更快、更准确、更有效（全面）</li><li>图算法也是一种有效的机器学习工具：graph community detection 和 page rank 算法</li></ul><p>学习是将经验转化为专业知识或知识的过程，学习是要提升泛化能力，要能举三反一。模型要能够归纳推理</p><p>从错误的数据学习到错误的结果，无论使用的算法如何高级或者性能如何优异</p><p>为图上的顶点和边分配不同的语义来表示不同的网络：设计网络、交通网络、信息网络等等</p><p>contextalized word embedding（CoVe：Context Vector）：看完一整个句子后，才对每个单词进行编码。这样能够获取上下文信息，避免相同的单词一定输出相同的向量（普通的word2vec模型没有考虑语义信息，例如，单身狗和一只狗）</p><p>输入：</p><ul><li>one sentence</li><li>multiple sentences</li></ul><p>输出：</p><ul><li><p>one class</p><p>每个token的embedding vector平均，或RNN，…</p></li><li><p>class for each token</p></li></ul><ul><li><p>copy from input</p><p>例如，从文章里面提取答案，即答案完完全全从文章材料中获得。</p></li><li><p>general sequence</p></li></ul><p><strong>如何 pre train</strong></p><p>使用翻译任务作为预训练的任务，可以如实地呈现词语的语义信息，不会受到具体的下游任务的影响而造成embedding vector。但是需要成对的训练资料，英文资料和翻译后的中文资料，这给训练任务的数据收集造成困难。</p><p>因此提出self supervised learning技术，希望通过没有标注的文本来进行训练。self supervised learning是将训练数据x产生两个方向，分别是x‘和x’‘，其中x’作为模型的输入，而x’‘作为模型的输出。在NLP领域，用预测下一个token的任务来取代翻译任务作为模型预训练过程中的任务，此时有一个句子x（token1，token2，…，tokenn），将token1输入到模型中，其目标输出是token2，此时输入和目标输出都来源于原始的数据x中。</p><p>和时间序列一样，训练过程需要使用self-attention时需要使用mask，来防止模型直接使用后面的输入来作为前一个时刻的目标输出（这是self supervised的trick，但是不希望pre train的模型只学习到这个，因为没有泛化能力，所以需要<strong>使用mask来防止pre train的模型在训练过程中“偷看”答案</strong>）</p><p>BERT中似乎也有重构损失（reconstruction loss）</p><p>用pre-train的模型来作为encoder，用具体的task-specific的模型作为decoder。但是这样会导致task specific模型没有被预训练过</p><p><strong>如何 fine tune</strong></p><p>fine-tune阶段既可以将pre-train的模型中的参数固定住（fix），将pre-train模型作为一个特征提取器（feature extractor）；也可以将pre train模型和task specific模型一起fine tune（微调），一般而言，一起fine tune的效果可能更好，但是一起fine tune存在的问题是pre train模型会跟下游任务相关，导致一个下游任务产生一个pre train模型的参数。现在的想法是，下游任务对pre train模型造成的影响通过另外一个小模型体现出来（Apt适配器部分），对于一个具体的下游任务只需要保存小模型Apt适配器即可.</p><h2 id="Fastformer（2021-反例）"><a href="#Fastformer（2021-反例）" class="headerlink" title="Fastformer（2021 反例）"></a>Fastformer（2021 反例）</h2><p>宣称使用 O(n) 的加法注意力机制</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418144735823.png" alt="image-20230418144735823" style="zoom:67%;"><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418145140790.png" alt="image-20230418145140790"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418145154292.png" alt="image-20230418145154292"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418145212751.png" alt="image-20230418145212751"></p><p>批评点：</p><ul><li>不是attention机制，w在模型完成之后就定死了，而attention机制中qk都是跟随序列可变的，本质上是MLP</li><li>没有进行消融实验验证 最后一步拼接操作<code>+</code>的有效性，有些莫名其妙</li></ul><h2 id="Specformer（2023-ICLR）"><a href="#Specformer（2023-ICLR）" class="headerlink" title="Specformer（2023 ICLR）"></a>Specformer（2023 ICLR）</h2><p>对图特征的利用方式分类</p><ul><li><p>spatial GNN</p><p>采用消息传递框架（message passing framework），通过GCN来传播局部信息</p><ul><li>GAT</li><li>MPNN</li></ul><p>可能存在<strong>过度平滑和过度挤压的问题，GCN的层数不能太深，一般2到3层，需要平衡局部信息和全局信息</strong>，这也是spatial GNN研究的一个重点</p></li><li><p>spectral GNN</p><p>通过<strong>在图的拉普拉斯矩阵上应用spectral filter来替代GCN，利用图拉普拉斯矩阵的谱在谱域内进行卷积</strong>。</p><ul><li>一个主流方向是<strong>利用不同的正交多项式（正交基）来近似滤波器</strong>，依赖对称矩阵的对角化来避免高代价的矩阵的谱分解</li><li>另一个方向多多少少需要进行谱分解，例如SpectralCNN、LanczosNet。这个方向通过神经网络参数来表示spectral filter，因此比预定义的正交基有更强的表示能力，但是这种滤波器还是不能捕获多个特征值之间的依赖关系。</li></ul></li><li><p>Graph Transformer</p><p>Transformer 和 GNN 有着强关联，Transformer的attention weight可以看做是节点和节点之间的邻接矩阵。Graph Transformer仍然属于spatial GNN的一类。例如，Graphormer、SAN、GPS（graph signal process）。spatial attention 相较于 spectral attention 有一些限制，参考文献Bastos 2022。</p></li></ul><p>spectral GNN 目前发展不如 spatial GNN，原因有下：<strong>（引出关键是对spectral filter的设计，即论文贡献）</strong></p><ol><li><strong>现有大多数的 spectral filter 本质上是标量到标量的函数（scalar-to-scalar function）</strong>，具体来说，将单个特征值（eigenvalue）作为输入，<strong>对所有的特征值使用相同的 spectral filter</strong>，<strong>这种过滤机制忽略了嵌入在spectrum（频谱）中的丰富信息</strong>。例如，从spectral GNN的理论中，特征值为0的代数重数表示图中连通分量的个数，但是这些信息不能被scalar-to-scalar filter捕获到。</li><li><strong>spectral filter通常使用固定阶的标准正交基（切比雪夫多项式、图小波等）来表示</strong>，从而避免高代价的拉普拉斯矩阵的谱分解。虽然正交基有着很好的性质，但是<strong>固定阶（代表截断）</strong>的这种近似的表达能力比较差，可能会严重限制图表示的学习。</li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418135911797.png" alt="image-20230418135911797"></p><p>利用 Transformer 来捕获所有特征值的大小和相对差异</p><ol><li><p>如果直接使用特征值（标量scalar）来计算attention map，那么self-attention受到严重限制。所以<strong>使用一个encoding function使其从标量转换成向量</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418140838212.png" alt="image-20230418140838212"></p><p>该函数的三个优点：</p><ul><li>能够捕获特征值的相对频移（relative frequency shifts of eigenvalues ？？？），从标量转换成向量</li><li>波长范围是2pi到 10000*2pi，构成特征值的多尺度表示（？？？）</li><li>能够通过调节参数e来控制特征值的影响，并且该影响是巨大的，通过实验进行说明</li></ul><p>EE（eigenvalue encoding）和 PE（position encoding）相似，PE描述的是spatial domain中的位置信息，EE代表的是spectral domain中连续特征值（continuous eigenvalues）的信息，但是将PE应用于特征值的位置信息上会破坏permutation equivariance properties（排列等方差性），损害学习能力。</p></li><li><p>一个Zm对应经过decoder之后对应一个特征值的spectral filter，然后重构</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418142853870.png" alt="image-20230418142853870"></p><p>​                                         <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418142802735.png" alt="image-20230418142802735"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418154417233.png" alt="image-20230418154417233"></p></li></ol><p>和其它模型的对比</p><ul><li><p>和Polynomial GNN对比：</p><p>Polynomial GNN使用多项式（x，x^2，x^3，…）来进行表示。</p><ul><li>Specformer更通用，Specformer可以近似表示任何多项式，多项式是Specformer的一种特例。</li><li>Specformer更灵活，Polynomial GNN对于所有的特征值都使用共享的function，而Specformer是每个特征值使用一个专门的function</li></ul></li><li><p>和MPNN对比：</p><ul><li>MPNN通过GCN聚合局部的邻居节点的信息，计算效率高，但是捕获全局信息的能力弱（存在过度平滑的问题）</li><li>Specformer由于使用了稠密的特征值，本质上是非局部的（no local）。</li></ul><p>全局信息 &gt; 局部信息吗？Specformer能够捕获全局信息就更优秀？</p></li><li><p>和 Graph Transformer对比：</p><p>现有的Graph Transformer在graph-level tasks上效果好，但是在node-level tasks上没有竞争力，例如node classification（最近一些研究在证明这个现象）。而Specformer 在这两类任务上表现都良好。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BERT</title>
      <link href="/2023/04/16/lun-wen-03-zi-jian-du-xue-xi-bert/"/>
      <url>/2023/04/16/lun-wen-03-zi-jian-du-xue-xi-bert/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/14/spring-yuan-ma-jie-xi-05/"/>
      <url>/2023/04/14/spring-yuan-ma-jie-xi-05/</url>
      
        <content type="html"><![CDATA[<h1 id="ComponentScan-组件扫描的实现逻辑"><a href="#ComponentScan-组件扫描的实现逻辑" class="headerlink" title="@ComponentScan 组件扫描的实现逻辑"></a>@ComponentScan 组件扫描的实现逻辑</h1><ol><li>通过 <code>AnnotationUtils.findAnnotation()</code> 来获取该注解的信息（注解信息主要是扫描的包，以及配置类中是否包含该注解）</li><li>解析并拼接转换字符串（从设置的包名到实际的文件路径名）</li><li>通过 <code>getResource()</code> 获取这些资源（二进制字节码 <code>.class</code>）</li><li>判断这些资源是否是 Spring 的组件：包含 <code>@Component</code> 或其衍生注解</li><li>创建并根据信息（信息通过反射工具类获取）设置 <code>BeanDefinition</code></li><li>在 BeanFactory 中注册 BeanDefinition</li></ol><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Order接口的排序逻辑</title>
      <link href="/2023/04/13/spring-yuan-ma-jie-xi-06/"/>
      <url>/2023/04/13/spring-yuan-ma-jie-xi-06/</url>
      
        <content type="html"><![CDATA[<h1 id="OrderComparator-的排序逻辑"><a href="#OrderComparator-的排序逻辑" class="headerlink" title="OrderComparator 的排序逻辑"></a>OrderComparator 的排序逻辑</h1><ol><li><p>OrderComparator 实现了 Comparator 接口，重写 <code>compare()</code> 方法</p></li><li><p><code>compare()</code> 方法内部仅仅是调用了 <code>doCompare()</code> 方法，因此 <code>doCompare()</code> 方法的排序规则即为 <code>compare()</code> 方法的排序规则</p></li><li><p>接下来是对于 <code>compare(o1,o2)</code> 本身的讨论</p><p>对于任何排序来说，我们假定只有唯一一条本质的排序规则：<strong>优先级（weight）高的排在前面</strong>。</p><p>而其它各种自定义的排序规则（比较器）被认为是该规则的具体化。例如，对数字的升序排序，可以认为是数值小的优先级高；对数字的降序排序，可以认为是数值大的优先级高。<strong>在当前的假设下，compare() 的设计者对方法的约定为：当 o1 的优先级比 o2 高时，compare(o1, o2) 的返回值为负；当 o1 的优先级比 o2 低时，compare(o1, o2) 的返回值为正。（充要条件，前推后，后推前）</strong></p></li><li><p>最后回到 <code>doCompare()</code> 本身上来，实现逻辑为：</p><ul><li>如果是 PriorityOrder 类型，那么拥有更高的优先级（weight）</li><li>如果类型相同，那么 order 值越小，优先级（weight）越高。没有 order 值的按 order = Integer.MAX_VALUE 处理</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> OrderComparator INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Comparator<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">withSourceProvider</span><span class="token punctuation">(</span>OrderSourceProvider sourceProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">doCompare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">,</span> sourceProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object o1<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">doCompare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. PriorityOrdered 比 Order 拥有更高的优先级 (o1拥有更高优先级, 但是doCompore(o1,o2)的返回值是-1)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">doCompare</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object o1<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object o2<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> OrderSourceProvider sourceProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span>o2 <span class="token keyword">instanceof</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token function">getOrder</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> sourceProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token function">getOrder</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span> sourceProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object obj<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> OrderSourceProvider sourceProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer order <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> sourceProvider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object orderSource <span class="token operator">=</span> sourceProvider<span class="token punctuation">.</span><span class="token function">getOrderSource</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>orderSource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>orderSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>Object source <span class="token operator">:</span> ObjectUtils<span class="token punctuation">.</span><span class="token function">toObjectArray</span><span class="token punctuation">(</span>orderSource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        order <span class="token operator">=</span> <span class="token function">findOrder</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    order <span class="token operator">=</span> <span class="token function">findOrder</span><span class="token punctuation">(</span>orderSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> null <span class="token operator">?</span> order <span class="token operator">:</span> <span class="token function">getOrder</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Integer order <span class="token operator">=</span> <span class="token function">findOrder</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> order<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">protected</span> Integer <span class="token function">findOrder</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Ordered</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Integer <span class="token function">getPriority</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sortIfNecessary</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderSourceProvider</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Nullable</span>        Object <span class="token function">getOrderSource</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的生命周期</title>
      <link href="/2023/04/13/spring-yuan-ma-jie-xi-04/"/>
      <url>/2023/04/13/spring-yuan-ma-jie-xi-04/</url>
      
        <content type="html"><![CDATA[<h1 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h1><p>执行顺序：</p><ol><li>无参构造函数</li><li>依赖注入（包括属性注入）</li><li>初始化方法</li><li>销毁方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PreDestroy<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ComponentBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 由于没有进行日志设置的配置, 因此默认情况下logger.debug()并不会被输出     */</span>    <span class="token keyword">public</span> <span class="token function">ComponentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"无参构造函数:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Autowired注解添加在方法上, 和@Bean的效果类似, 会从Spring容器中按类型查找形参对象,      * 但是如果形参是String类型, 则需要额外使用@Value进行注入. 暂且将其当作@Value为成员变量进行依赖注入     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAutowired</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${JAVA_HOME}"</span><span class="token punctuation">)</span> String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Autowired方法:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"set方法进行属性注入:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"postConstruct注解:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"preDestroy注解:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BeanPostProcessor-Bean后置处理器"><a href="#BeanPostProcessor-Bean后置处理器" class="headerlink" title="BeanPostProcessor Bean后置处理器"></a>BeanPostProcessor Bean后置处理器</h2><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><p>模板方法中的某个位置：对应一个函数式接口</p><p>一种增强：对应函数式接口的一个实现（或者称为一个lambda表达式）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodMain</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>MyPostProcessor<span class="token operator">></span> postProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPostProcessor</span><span class="token punctuation">(</span>MyPostProcessor myPostProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        postProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理每一个的增强功能</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MyPostProcessor postProcessor <span class="token operator">:</span> postProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            postProcessor<span class="token punctuation">.</span><span class="token function">deal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TemplateMethodMain templateMethodMain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateMethodMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用者添加功能即可, 不需要修改原有的类</span>        templateMethodMain<span class="token punctuation">.</span><span class="token function">addPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析@MyAutowired注解"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMethodMain<span class="token punctuation">.</span><span class="token function">addPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析@MyResource注解"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMethodMain<span class="token punctuation">.</span><span class="token function">runV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MyPostProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230414105952274.png" alt="Bean生命周期的各个阶段(注解+Bean后处理器)"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/11/lun-wen-02-shi-jian-xu-lie/"/>
      <url>/2023/04/11/lun-wen-02-shi-jian-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="StemGNN（2020-NIPS"><a href="#StemGNN（2020-NIPS" class="headerlink" title="StemGNN（2020 NIPS)"></a>StemGNN（2020 NIPS)</h1><h2 id="Preliminary"><a href="#Preliminary" class="headerlink" title="Preliminary"></a>Preliminary</h2><p>此文做的是多变量时序预测任务。像通过一支股票的走势预测它未来的价格是单变量时序预测，如果同时观察多支股票并作出相应预测即可看成是多变量时序预测。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123338567.png" alt="image-20230411123338567"></p><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><p>多变量时序预测往往需要对单个变量内在的时间模式和多个变量间的关系同时进行建模。现有的多变量时序预测模型大多是直接堆叠例如GRU、TCN、GCN等时空间模块来捕捉时空间依赖，只能捕捉到时域的时间模式并且需要预先定义好的邻接矩阵。</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>现在已经有工作使用离散傅里叶变换（DFT）与神经网络结合对时间序列做分析。考虑到<strong>将序列转到频域后能有更清晰的时间模式，作者选择在频域上提取时空依赖。</strong></p><h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><ul><li>此文设计了名为StemGNN的结构，<strong>通过离散傅里叶变换（DFT）和图傅里叶变换（GFT）将时空域转到频域，并同时在频域上捕捉时空间依赖。</strong></li><li>此文使用数据驱动的方法学习序列间的相关性来构建邻接矩阵从而<strong>不再需要预先定义邻接矩阵。</strong></li><li>StemGNN在9个基准上取得了sota的结果。</li></ul><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="Overview："><a href="#Overview：" class="headerlink" title="Overview："></a>Overview：</h3><p>如下图所示，输入首先经过Latent correlation layer学习变量间的隐关联并作为邻接矩阵。然后将输入和学习到的邻接矩阵一同输入到两层StemGNN模块中。StemGNN模块首先使用GFT将空间维度从空域转换到频域，然后使用DFT将时间维度从时域转到频域。紧接着此文在时间频域中使用1D-CNN和GLU提取时间频域中的时间模式，然后再使用IDFT将时间维度从频域转回时域。最后使用GCN提取空间频域的空间依赖并使用IGFT将空间维度从频域转回空域。</p><p><img src="https://pic1.zhimg.com/80/v2-7e6445924efac84660be9fc9f2cb3dc4_1440w.webp" alt="img"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123456093.png" alt="image-20230411123456093"></p><p>上式的前一部分是预测loss，后一部分是重建loss。因为模型是迭代预测，那么模型是否能准确识别每一次的输入也至关重要，重建loss能让模型更好的识别每一次的输入。</p><h3 id="Latent-Correlation-Layer："><a href="#Latent-Correlation-Layer：" class="headerlink" title="Latent Correlation Layer："></a>Latent Correlation Layer：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123521433.png" alt="image-20230411123521433"></p><h3 id="StemGNN-Block："><a href="#StemGNN-Block：" class="headerlink" title="StemGNN Block："></a>StemGNN Block：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123536616.png" alt="image-20230411123536616"></p><h3 id="Spectral-Sequential-Cell-Spe-Seq-Cell-："><a href="#Spectral-Sequential-Cell-Spe-Seq-Cell-：" class="headerlink" title="Spectral Sequential Cell (Spe-Seq Cell)："></a>Spectral Sequential Cell (Spe-Seq Cell)：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123551002.png" alt="image-20230411123551002"></p><h3 id="Spectral-Graph-Convolution："><a href="#Spectral-Graph-Convolution：" class="headerlink" title="Spectral Graph Convolution："></a>Spectral Graph Convolution：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123607535.png" alt="image-20230411123607535"></p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Datasets："><a href="#Datasets：" class="headerlink" title="Datasets："></a>Datasets：</h3><p>本文一共使用了9个数据集如下图所示</p><p><img src="https://pic4.zhimg.com/80/v2-30f840a10f17bf506441d58cab1fc9ff_1440w.webp" alt="img"></p><h3 id="Results："><a href="#Results：" class="headerlink" title="Results："></a>Results：</h3><p>StemGNN与单变量时序预测模型TCN、NBeats；多变量时序预测模型等DCRNN、ST-GCN等进行比较。下图中可以看到StemGNN除了PEMS08的MAE外均取得了最好的结果，同时多变量时序模型在多变量任务上优于单变量模型。</p><p><img src="https://pic1.zhimg.com/80/v2-7b423d902f8c7c5e0f62ac4b96d20588_1440w.webp" alt="img"></p><h3 id="Ablation-Study："><a href="#Ablation-Study：" class="headerlink" title="Ablation Study："></a>Ablation Study：</h3><p>此文进行消融实验验证了提出的各个部分的有效性，可以看出没有时间提取Spe-Seq后效果最差。</p><p><img src="https://pic2.zhimg.com/80/v2-7e9cbc75b8ff0cbd6489c58cab02f3fd_1440w.webp" alt="img"></p><h3 id="Analysis："><a href="#Analysis：" class="headerlink" title="Analysis："></a>Analysis：</h3><p>此文对学习到的邻接矩阵进行可视化如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-7733320f40e5a7c0854f7f426731baf5_1440w.webp" alt="img"></p><p>此文还对COVID-19数据集进行实验并可视化了邻接矩阵，如下图所示。</p><p><img src="https://pic4.zhimg.com/80/v2-e92c85e74506ed2b634bc52afe45b8cf_1440w.webp" alt="img"></p><p>最后此文可视化了GFT和DFT后的时间序列并可视化，可以看到频域上的序列更加平滑容易预测。</p><p><img src="https://pic4.zhimg.com/80/v2-8061f51725a3a716edca61b31d5a5787_1440w.webp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/07/dozer-de-shi-yong/"/>
      <url>/2023/04/07/dozer-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Dozer"><a href="#Dozer" class="headerlink" title="Dozer"></a>Dozer</h1><p>作用：BeanUtils 的升级版，用于实现的对两个 Java Bean 对象之间进行字段的映射，从而进行实体之间的转换。</p><p>dozer 映射文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappings</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dozermapper.github.io/schema/bean-mapping<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dozermapper.github.io/schema/bean-mapping                              https://dozermapper.github.io/schema/bean-mapping.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    可以使用map-id指定映射的标识，在程序中通过此标识来确定使用当前这个映射关系    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapping</span> <span class="token attr-name">date-format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yyyy-MM-dd<span class="token punctuation">"</span></span> <span class="token attr-name">map-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class-a</span><span class="token punctuation">></span></span>org.example.model.po.UserEntity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class-b</span><span class="token punctuation">></span></span>org.example.model.dto.UserDTO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class-b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>userId<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>userName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>age<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>userAge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限管理系统</title>
      <link href="/2023/04/06/hei-ma-pin-da-quan-xian-guan-li-xi-tong/"/>
      <url>/2023/04/06/hei-ma-pin-da-quan-xian-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="权限管理系统"><a href="#权限管理系统" class="headerlink" title="权限管理系统"></a>权限管理系统</h1><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><h3 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/1581494294533.png" alt="1581494294533"></p><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/1581494316483.png" alt="1581494316483"></p><h2 id="SpringBoot-Starter-原理"><a href="#SpringBoot-Starter-原理" class="headerlink" title="SpringBoot Starter 原理"></a>SpringBoot Starter 原理</h2><p>SpringBoot 简化 Spring 的原因就是提供了许多 starter，而 starter 本质上就是引入了一些相关依赖和进行一些初始化的自动配置。</p><ul><li><p>打包依赖</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406110749971.png" alt="spring-boot-starter-web打包相关功能的依赖"></p></li><li><p>自动配置</p></li></ul><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><ol><li><p>基于 Java 代码的 Bean 配置</p><p>@Configuration + @Bean</p></li><li><p>自动配置条件依赖</p><p>@Conditional</p></li><li><p>Bean 参数获取</p><p>@EnableConfigurationProperties + @ConfigurationProperties（读取配置文件，转换为 Bean 对象）</p></li><li><p>Bean 的发现</p><p>@EnableAutoConfiguration + @Import</p><p>（解决的是 jar 包中的自动配置类 <code>XXXAutoConfiguration</code> 这些是如何被我们的 <code>@SpringBootApplication</code> 发现的）</p></li><li><p>Bean 的加载</p></li></ol><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="Nacos-配置"><a href="#Nacos-配置" class="headerlink" title="Nacos 配置"></a>Nacos 配置</h3><p>修改 Nacos 的配置文件，将由 Nacos 管理的数据保存到自定义的数据库中，而不是保存到 Nacos 内部的数据库。</p><ol><li><p>修改 <code>conf/application.properties</code> 文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token comment" spellcheck="true">## Count of DB:</span><span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">## Connect URL of DB:</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><span class="token attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行 <code>conf</code> 目录下的 sql 文件</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406190326374.png" alt="nacos数据库的表结构"></p></li><li><p>一般一个项目对应一个 namespace，默认情况下是 public，这里创建一个自定义的命名空间，同时可以在表中查看到相应的变化</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406192623599.png" alt="新建命名空间"></p></li><li><p>在 Nacos 中导入一些和项目相关的配置文件</p></li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="不使用签名"><a href="#不使用签名" class="headerlink" title="不使用签名"></a>不使用签名</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwtNoSignTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成JWT Token</span>        String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jwt jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Header 和 Body 直接打印输出就是 hash 表</span>        Header jwtHeader <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtHeader = "</span> <span class="token operator">+</span> jwtHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object alg <span class="token operator">=</span> jwtHeader<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> jwtBody <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> jwt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtBody = "</span> <span class="token operator">+</span> jwtBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object userId <span class="token operator">=</span> jwtBody<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-HS256-对称加密算法签名"><a href="#使用-HS256-对称加密算法签名" class="headerlink" title="使用 HS256 对称加密算法签名"></a>使用 HS256 对称加密算法签名</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwtWithSignTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String secretKey <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span> SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtToken = "</span> <span class="token operator">+</span> jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jwt jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Header jwtHeader <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object jwtBody <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtHeader = "</span> <span class="token operator">+</span> jwtHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtBody = "</span> <span class="token operator">+</span> jwtBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-RS256-非对称加密算法签名"><a href="#使用-RS256-非对称加密算法签名" class="headerlink" title="使用 RS256 非对称加密算法签名"></a>使用 RS256 非对称加密算法签名</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readBytesFromFile</span><span class="token punctuation">(</span>String filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        DataInputStream dataInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResourceAsStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            dataInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>dataInputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dataInputStream<span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataInputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dataInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwtRS256Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: 这里需要替换成从指定的密钥文件读取的字节</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyBytes <span class="token operator">=</span> <span class="token function">readBytesFromFile</span><span class="token punctuation">(</span><span class="token string">"pri.key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PKCS8EncodedKeySpec privateKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>privateKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyBytes <span class="token operator">=</span> <span class="token function">readBytesFromFile</span><span class="token punctuation">(</span><span class="token string">"pub.key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        X509EncodedKeySpec publicKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>publicKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>publicKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>RS256<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jwt jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Header jwtHeader <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object jwtBody <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtHeader = "</span> <span class="token operator">+</span> jwtHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtBody = "</span> <span class="token operator">+</span> jwtBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h2><p><strong>引入 <code>@EnableLoginArgsResolver</code> 注解才开启相应的功能</strong>，这种功能的实现是通过在配置类中完成相应功能的设置，但是此时配置类不添加 <code>@Configuration</code>，即该类拥有配置类的功能，但是不被 Spring 框架的组件扫描发现（不被认为是配置类）。而 <code>@EnableLoginArgsResolver</code> 做的事情可以认为是就是 <code>@Import(XXXConfig)</code>，即对 <code>@Import</code> 注解的封装，从而让 Spring 框架发现该配置类。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>如果不进行异常处理，那么程序中如果发生异常，则异常错误会直接显示在页面上，造成不友好的用户体验</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义 Spring-Boot-Starter</title>
      <link href="/2023/04/06/springboot-starter-zi-ding-yi/"/>
      <url>/2023/04/06/springboot-starter-zi-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义-spring-boot-starter"><a href="#自定义-spring-boot-starter" class="headerlink" title="自定义 spring-boot-starter"></a>自定义 spring-boot-starter</h1><h2 id="spring-boot-starter-的作用"><a href="#spring-boot-starter-的作用" class="headerlink" title="spring-boot-starter 的作用"></a>spring-boot-starter 的作用</h2><p>xxx-spring-boot-starter 本质上也是一个 Spring 项目。将其作为一个 pom 依赖引入后，当前项目中可以直接使用在 xxx-spring-boot-starter 项目里面配置好的设置，达到一个配置重用的效果，即自动配置。下面以自定义的一个 <code>hello-spring-boot-starter</code> 为例，分别介绍如何使用和如何创建这样的一个 starter。</p><h2 id="spring-boot-starter-的使用"><a href="#spring-boot-starter-的使用" class="headerlink" title="spring-boot-starter 的使用"></a>spring-boot-starter 的使用</h2><p>hello-spring-boot-starter 是自定义的一个 springboot 项目，没有主启动类，也不需要主启动类。其功能是读取配置文件的值，利用这些值配置一个 <code>HelloService</code> 对象，从而达到其它项目在引入 <code>hello-spring-boot-starter</code>的 pom 依赖后可以直接利用 <code>@Autowired</code> 使用该 <code>HelloService</code> 对象。</p><ol><li><p>引入 pom 依赖</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--hello-spring-boot-starter是自定义的一个springboot项目--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件（可以省略，不省略则表示覆盖默认值）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 覆盖设置的默认值（root和root）</span><span class="token key atrule">hello</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>@SpringBootTest</code> 中使用 <code>HelloService</code> 对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">HeimaSecurityApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloService helloService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHelloSpringBootStarterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406140250664.png" alt="输出测试结果"></p></li></ol><h2 id="spring-boot-starter-的创建"><a href="#spring-boot-starter-的创建" class="headerlink" title="spring-boot-starter 的创建"></a>spring-boot-starter 的创建</h2><ol><li><p>hello-spring-boot-starter 项目的结构</p><ul><li><code>HelloServiceAutoConfiguration</code>：（自动）配置类</li><li><code>HelloServiceProperties</code>：配置文件读取类</li><li><code>HelloService</code>：（自动）配置的目标类</li><li><code>META-INF/spring.factories</code>：在引入 hello-spring-boot-starter 的其它 SpringBoot 项目中，会扫描该文件路径来获取自动配置类（Spring自动配置源码硬编码）</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406141116924.png" alt="项目结构图"></p></li><li><p>pom 文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入spring-boot-starter-parent来进行版本管理, 减少需要手动管理的依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--本项目的相关信息--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--xxx-spring-boot-starter项目的核心依赖, 其它的都是次要的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HelloService 自动配置的目标类（可以不是 hello-spring-boot-starter 项目中的类，或者说往往不是，这里为了简化问题的处理）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HelloService</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello{"</span> <span class="token operator">+</span>                <span class="token string">"username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>HelloServiceAutoConfiguration 自动配置类</p><p>自动配置是相对于使用 hello-spring-boot-starter 作为其 pom 依赖的 SpringBoot 项目而言的，在 hello-spring-boot-starter 项目本身中，所谓的自动配置类就是一个配置类。（对于 hello-spring-boot-starter 项目的维护者来说，这是手动配置类，我配置好了，别人再去使用就是自动配置了）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>EnableConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自动配置类, 用于自动配置HelloService */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloServiceProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloServiceProperties helloServiceProperties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 另外一种注入方式</span>    <span class="token comment" spellcheck="true">// public HelloServiceAutoConfiguration(HelloServiceProperties helloServiceProperties) {</span>    <span class="token comment" spellcheck="true">//     this.helloServiceProperties = helloServiceProperties;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">/**     * 添加 @Bean 注解才会自动调用该方法     * &lt;p>     * 添加 @ConditionalOnMissingBean 注解, 用户手动注入, 则默认的该设置则失效     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span>                helloServiceProperties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                helloServiceProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HelloServiceProperties 配置文件读取类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml 配置文件</p><p>配置文件对于 hello-spring-boot-starter 项目而言不是必须的，因为 hello-spring-boot-starter 项目本身并不执行，项目的配置文件是一种设置默认值的体现。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">hello</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> root  <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>spring.factories 自动配置类的地址指示文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 告诉使用hello-spring-boot-starter的SpringBoot项目去哪里加载 HelloService 的自动配置类</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">com.example.config.HelloServiceAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="自定义-spring-boot-starter-进阶（AOP编程）"><a href="#自定义-spring-boot-starter-进阶（AOP编程）" class="headerlink" title="自定义 spring-boot-starter 进阶（AOP编程）"></a>自定义 spring-boot-starter 进阶（AOP编程）</h1><p>两个关键点：</p><ul><li>自定义注解 + 拦截器（拦截器体现的是 AOP 编程）</li><li>在配置类中注入拦截器的方式（和一般的 Bean 对象不同）</li></ul><p>在上面 hello-spring-boot-starter 的基础上，进一步拓展</p><ol><li><p>自定义注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyLog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 方法描述     *     * @return     */</span>    String <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义拦截器（即AOP编程，对所有标注 <code>@MyLog</code> 注解的原始方法进行增强）</p><p>这里决定了 <code>@MyLog</code> 的生效范围是 web 中的 controller 方法？为什么在 <code>@SpringBootTest</code> 中进行测试无法正常输出信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>HandlerMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>HandlerInterceptorAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Long<span class="token operator">></span> startTimeThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 原始方法之前执行     *     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyLog annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyLog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 说明当前拦截的方法上添加了自定义的 @MyLog 注解</span>            <span class="token comment" spellcheck="true">// 1. 用 ThreadLocal 来记录该方法的开始执行时间</span>            <span class="token comment" spellcheck="true">// TODO 为什么要使用 ThreadLocal 呢?</span>            startTimeThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 该拦截器为添加 @MyLog 注解的方法进行功能增强, 而不是真正意义上的拦截某个请求, 因此所有方法都会放行（返回true）</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 原始方法之后执行     *     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyLog annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyLog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自定义一些日志的输出信息</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的执行时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTimeThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MyLogAutoConfiguration 配置类中注入拦截器的 Bean 对象（和一般的 Bean 对象有所不同）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mylog<span class="token punctuation">.</span>MyLogInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建 web 层相关的配置类需要实现 WebMvcConfigurer */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对于拦截器对象(AOP编程)的专门处理, 不使用@Bean注入, 而是使用registry.addInterceptor()的方式进行添加     *     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyLogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 spring.factories 文件中设置配置类的全类名（多个配置类之间使用逗号 <code>,</code> 进行分隔，换行需要添加 <code>\</code>）</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\  com.example.config.HelloServiceAutoConfiguration,\  com.example.config.MyLogAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过 controller 来进行测试（必须通过 controller 层）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mylog<span class="token punctuation">.</span>MyLog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSpringBootStarterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloService helloService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"mylog"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@MyLog</span>    <span class="token keyword">public</span> String <span class="token function">testMyLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试结果</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406161731766.png" alt="自定义拦截器的测试结果"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群</title>
      <link href="/2023/04/05/redis-03-ji-qun/"/>
      <url>/2023/04/05/redis-03-ji-qun/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h1><h2 id="Redis-集群的安装配置"><a href="#Redis-集群的安装配置" class="headerlink" title="Redis 集群的安装配置"></a>Redis 集群的安装配置</h2><ol><li><p>解压缩<code>tar -zxvf /opt/module/redis-6.2.7.tar.gz -C /opt/module</code></p></li><li><p>编译<code>make -C /opt/module/redis-6.2.7</code></p></li><li><p>安装<code>make install -C /opt/module/redis-6.2.7</code></p></li><li><p>将配置文件 <strong>redis.conf</strong> 复制到 <strong>/etc/opt/redis</strong> 目录下:  <code>cp /opt/module/redis-6.2.7/redis.conf /etc/opt/redis/redis.conf</code></p></li><li><p>修改配置文件, 抽取公共的配置, 内容如下</p><pre class="line-numbers language-conf"><code class="language-conf"> # 任意主机可连接 bind 0.0.0.0 # 允许远程访问连接 protected-mode no # 开启集群模式 cluster-enabled yes # 设置密码为root # requirepass root tcp-backlog 511 timeout tcp-keepalive 300 # 后台启动 daemonize yes # 日志级别 loglevel notice # 某一段slot的全部节点都宕机, 整个集群其他节点是否也变得不可用. yes表示不可用, no表示可用 cluster-require-full-coverage no databases 16 always-show-logo no set-proc-title yes proc-title-template "{title} {listen-addr} {server-mode}" stop-writes-on-bgsave-error yes rdbcompression yes rdbchecksum yes rdb-del-sync-files no replica-serve-stale-data yes replica-read-only yes repl-diskless-sync no repl-diskless-sync-delay 5 repl-diskless-load disabled repl-disable-tcp-nodelay no replica-priority 100 acllog-max-len 128 lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no replica-lazy-flush no lazyfree-lazy-user-del no lazyfree-lazy-user-flush no oom-score-adj no oom-score-adj-values 0 200 800 disable-thp yes appendonly no appendfilename "appendonly.aof" appendfsync everysec no-appendfsync-on-rewrite no auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb aof-load-truncated yes aof-use-rdb-preamble yes lua-time-limit 5000 slowlog-log-slower-than 10000 slowlog-max-len 128 latency-monitor-threshold 0 notify-keyspace-events "" hash-max-ziplist-entries 512 hash-max-ziplist-value 64 list-max-ziplist-size -2 list-compress-depth 0 set-max-intset-entries 512 zset-max-ziplist-entries 128 zset-max-ziplist-value 64 hll-sparse-max-bytes 3000 stream-node-max-bytes 4096 stream-node-max-entries 100 activerehashing yes client-output-buffer-limit normal 0 0 0 client-output-buffer-limit replica 256mb 64mb 60 client-output-buffer-limit pubsub 32mb 8mb 60 hz 10 dynamic-hz yes aof-rewrite-incremental-fsync yes rdb-save-incremental-fsync yes jemalloc-bg-thread yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>另外新建两份配置文件, 一份命名为 <strong>redis6379.conf</strong>, 另一份命名为 <strong>redis6380.conf</strong>. (同时将配置文件的内容中的6379替换为6380). 其中 <strong>redis6379.conf</strong> 配置文件的内容如下</p><pre class="line-numbers language-conf"><code class="language-conf"> # 引入公共配置文件 include /etc/opt/redis/redis.conf # 端口号 port 6379 # 当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定 pidfile /opt/module/redis-6.2.7/xredis/pid/redis_6379.pid # 日志文件保存位置 logfile "/opt/module/redis-6.2.7/xredis/log/redis_6379.log" # 指定rdb转储文件名 dbfilename dump_6379.rdb # 指定本地数据库(即rdb转储文件)存放目录, 两台redis服务器的数据存放目录必须区分, 否则会报错无法启动redis从服务器 dir /opt/module/redis-6.2.7/xredis/data/redis6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230222124240035.png" alt="image-20230222124240035"></p></li><li><p>创建配置文件中自定义设置的文件夹</p><ul><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/pid</code></li><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/log</code></li><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/data</code></li></ul></li><li><p>根据两个配置文件, 启动redis主从服务器 <code>ls /etc/opt/redis | xarg -n1 redis-server</code></p></li><li><p>将多个redis服务器合并成为一个redis集群</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 安装包下的src目录中的redis-cli命令</span> /opt/module/redis-6.2.7/src/redis-cli \ <span class="token comment" spellcheck="true"># 将启动的多个redis服务器构建称为一个集群</span> --cluster create \ <span class="token comment" spellcheck="true"># 一主多从, 其中n由下面的参数决定</span> --cluster-replicas 1 \ <span class="token comment" spellcheck="true"># 这里使用host名称映射失败过, 但是在没有配置从服务器的时候使用host名称映射也成功过</span> <span class="token comment" spellcheck="true"># 前面的为主服务器</span> 192.168.248.101:6379 192.168.248.102:6379 192.168.248.103:6379 \ <span class="token comment" spellcheck="true"># 后面的为从服务器</span> <span class="token comment" spellcheck="true"># todo: 存在疑惑, 哪一台从服务器和哪一台主服务器相对应呢? 也有可能集群中设计成多个主服务器, 多个从服务器, 任意一个主服务器宕机都可以由从服务器顶替, 但这种设计的可能性不大, 相当于从服务器要拷贝所有主服务器中的数据保存</span> 192.168.102:6380 192.168.248.103:6380 192.168.248.101:6380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 前面三个为主节点, 后面三个为从节点</p><pre class="line-numbers language-bash"><code class="language-bash"> /opt/module/redis-6.2.7/src/redis-cli \ --cluster create \ --cluster-replicas 1 \ 192.168.248.101:6379 192.168.248.102:6379 192.168.248.103:6379 \ 192.168.102:6380 192.168.248.103:6380 192.168.248.101:6380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>连接redis集群<code>redis-cli -c -p 6379</code>, 执行一条命令, 查看效果</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101021811676.png" alt="image-20221101021811676" style="zoom: 67%;"></li></ol><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><ol><li><p>根据之前的配置, 执行<code>cluster nodes</code>命令可以查看集群的主服务器节点和从服务器节点</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101155640192.png" alt="image-20221101155640192"></p></li><li><p>进入到<code>192.168.248.101:6379</code>的redis服务器中执行<code>shutdown</code>命令关闭一台redis的主服务器后, 再次查看集群信息</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101160830327.png" alt="image-20221101160830327"></p></li><li><p>再次启动<code>192.168.248.101:6379</code>的redis服务器, 查看集群信息, <strong>故障恢复后的原主服务器不会抢占当前的主服务器</strong></p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101162420668.png" alt="image-20221101162420668"></p></li><li><p>关闭整个redis集群后, 再重启redis集群, 仍然按照最初创建集群时的主服务器和从服务器的配置</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试指南</title>
      <link href="/2023/04/04/java-mian-shi-zhi-nan/"/>
      <url>/2023/04/04/java-mian-shi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-面试指南"><a href="#Java-面试指南" class="headerlink" title="Java 面试指南"></a>Java 面试指南</h1><p>答题时，可以按下面三个步骤：</p><ol><li>是什么？</li><li>有什么用？</li><li>要注意什么？</li></ol><h2 id="第一章-Java-基础"><a href="#第一章-Java-基础" class="headerlink" title="第一章 Java 基础"></a>第一章 Java 基础</h2><h3 id="比较-amp-和-amp-amp-的区别"><a href="#比较-amp-和-amp-amp-的区别" class="headerlink" title="比较 &amp; 和 &amp;&amp; 的区别"></a>比较 <code>&amp;</code> 和 <code>&amp;&amp;</code> 的区别</h3><p>相同点：</p><ul><li>都可以作为逻辑与的运算符</li></ul><p>不同点：</p><ul><li>作为<strong>逻辑与</strong>的运算符，<code>&amp;</code> 不会短路，而 <code>&amp;&amp;</code> 会短路</li><li><code>&amp;</code> 还可以作为<strong>位运算与</strong>的操作符</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">booleanOperationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// &amp; 可以作为逻辑与的运算符, 但是不会短路, 因此 y 的值会发生改变</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token operator">++</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y = "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// &amp;&amp; 会短路, 因此 z 的值不会发生改变</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>z <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"z = "</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bitOperationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java-中跳出多层嵌套循环的方法（类似-goto）"><a href="#Java-中跳出多层嵌套循环的方法（类似-goto）" class="headerlink" title="Java 中跳出多层嵌套循环的方法（类似 goto）"></a>Java 中跳出多层嵌套循环的方法（类似 goto）</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FLAG<span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 跳转到 FLAG 作用域结束的位置</span>                        <span class="token keyword">break</span> FLAG<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// FLAG 标号作用域结束的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Break FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch-语句作用的数据类型"><a href="#switch-语句作用的数据类型" class="headerlink" title="switch 语句作用的数据类型"></a>switch 语句作用的数据类型</h3><p><code>int</code> 、<code>String</code> 和枚举类型。以及<strong>所有能够被编译器隐式转换为 <code>int</code> 类型的数据类型</strong>：<code>byte</code>、<code>short</code>、<code>char</code> 以及它们对应的包装类 <code>Integer</code>、<code>Byte</code>、<code>Short</code>、<code>Character</code> 等。</p><p>由于 long 和 boolean 类型数据无法被编译器隐式地转换为 int 类型，所以不可以用于 switch 语句中，强制类型转换相当于生成了一个新的 int 类型数据。<strong>无法被编译器隐式转换而造成错误</strong>的类似案例还有很多，例如下面代码中，两处去掉强制类型转换后都会被编译器报错</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">switchTest</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shortTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// += 会被 Java 编译器进行特殊处理</span>        s <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BigInteger的源码学习"><a href="#BigInteger的源码学习" class="headerlink" title="BigInteger的源码学习"></a>BigInteger的源码学习</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><p><code>final</code> 修饰的变量的值不能发生改变，但是该值可能是一个地址，而地址中对应的数据是可以发生改变的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaBaseMainV4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaBaseMainV4 app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaBaseMainV4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一个新的地址值复制给final关键字修饰的person变量, 因此报错</span>        <span class="token comment" spellcheck="true">// app.person = new Person("root", 18);</span>        app<span class="token punctuation">.</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404212022306.png" alt="image-20230404212022306"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crossformer</title>
      <link href="/2023/04/04/lun-wen-01-shi-jian-xu-lie/"/>
      <url>/2023/04/04/lun-wen-01-shi-jian-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="Crossformer（2023-ICLR）"><a href="#Crossformer（2023-ICLR）" class="headerlink" title="Crossformer（2023 ICLR）"></a>Crossformer（2023 ICLR）</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="MTS-介绍"><a href="#MTS-介绍" class="headerlink" title="MTS 介绍"></a>MTS 介绍</h3><p>MTS（multivariate time series）中每一个维度都代表一个时间序列，且维度与维度之间是相互关联的，利用其它维度的历史信息可以更好地预测当前维度的信息。例如预测气温，不仅可以依据历史气温的信息，还可以依据历史风速的信息。</p><p>MTS需要考虑两个方面的依赖性：<strong>cross-time dependency（时间依赖性）</strong>和 <strong>cross-dimension dependency（维度依赖性）</strong>。</p><h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><p>cross-dimension dependency：</p><ul><li>CNN</li><li>GNN</li></ul><p>cross-time dependency：</p><ul><li>Transformer-based</li></ul><p>现有的 Transformer-based 模型没有充分（显式）地利用上 cross-dimension dependency，将多元时间序列当做单时间序列处理，如图所示：</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404095438641.png" alt="现有 Transformer-based 模型预测 MTS"></p><h3 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h3><ul><li>指出现有的 transformer-based 模型没有充分利用上 MTS 中的 cross-dimension dependency</li><li>提出 Crossformer 模型：第一个显式利用上 cross-dimension dependency 的 Transformer-based 模型</li><li>进行了大量实验论证 Crossformer 模型的效果</li></ul><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><ul><li><p>基于统计模型（VAR 和 VARMA）的 MTS</p><p>假定 cross-time dependency 和 cross-dimension dependency 是线性关系</p></li><li><p>基于其它神经网络（CNN、RNN、GNN）的 MTS </p><p>难以处理 long-term 依赖</p></li><li><p>基于 Transformer 的 MTS</p><p>主要研究方向都在 cross-time dependency 以及降低模型处理的时间复杂度</p></li><li><p>Vision Transformer</p><p>ViT 在 CV 领域取得不错的效果，启发论文作者设计 DSW</p></li></ul><h2 id="Crossformer-模型的设计"><a href="#Crossformer-模型的设计" class="headerlink" title="Crossformer 模型的设计"></a>Crossformer 模型的设计</h2><h3 id="设计-DSW-embedding（dimension-segment-wise-embedding）"><a href="#设计-DSW-embedding（dimension-segment-wise-embedding）" class="headerlink" title="设计 DSW embedding（dimension-segment-wise embedding）"></a>设计 DSW embedding（dimension-segment-wise embedding）</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>显式利用MTS中的 cross-dimension dependency</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li><p>Transformer 一开始用于 NLP 领域，每个词对应一个向量。但是对于 MTS 来说，一个时间步对应一个 attention value 所包含的信息不够。所以现有的基于 Transformer 的模型直接应用于 MTS 考虑还不够。</p></li><li><p>针对 MTS 的特点：时域（time domain）附近的 attention value 是相近的。时间维度上按 segment 进行划分不仅可以提高局部相关性，还可以降低计算复杂度。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404104730398.png" alt="MTS 中的 attention value"></p></li></ol><h4 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h4><p>MTS 中每个 dimension 的时间序列被划分为多个 segment，每个 segment 对应一个 feature vector。<br>$$<br>x_{1:T}= { x_{i,d}^{(s)}| \leq i \leq \frac{T}{L_{seg},},1 \leq d \leq D } \<br>x_{i,d}^{(s)}= { x_{i,d}= { x_{t,d}|(i-1)\times L_{seg}&lt;t \leq i \times L_{seg}} \<br>h_{i,d}=Ex_{i,d}^{(s)}+E_{i,d}^{(pos)}<br>$$<br>MTS 的编码结果 $H= \left{ h_{i,d}|1 \leq i \leq \frac{T}{L_{seg}},1 \leq d \leq D \right} $ 是一个 2D 数组</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404101425489.png" alt="DSW 的输出结果"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404105438846.png" alt></p><h3 id="设计-TSA（two-stage-attention）layer"><a href="#设计-TSA（two-stage-attention）layer" class="headerlink" title="设计 TSA（two-stage-attention）layer"></a>设计 TSA（two-stage-attention）layer</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><p>用来高效处理 DSW 中的 cross-time dependency 和 cross-dimension dependency</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ol><li>Vision Transformer 中将 2D array 摊平成 1D vector，然后作为模型的输入。因为图片的 height axe 和 width axe 有着相同的含义，所以是可交换的，但是对于 MTS 而言，time axe 和 dimension axe 的含义是不同的，所以应该差别对待。</li><li>直接在 $H_{D \times L}$ 上应用 self-attention 的计算复杂度为 $O(D^2 L^2)$</li></ol><h4 id="具体设计-1"><a href="#具体设计-1" class="headerlink" title="具体设计"></a>具体设计</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404111442525.png" alt="Two-Stage-Attention的架构图"></p><h5 id="Cross-Time-Stage"><a href="#Cross-Time-Stage" class="headerlink" title="Cross-Time Stage"></a>Cross-Time Stage</h5><p>对单个维度的时间序列计算multi-head self-attention（MSA），所有维度共享参数，所以上图的 Corss-Time Stage 灰色块实际上看做是同一个。<br>$$<br>\hat{Z}<em>{:,d}^{time} = LayerNorm(Z</em>{:,d}+MSA^{time}(Z_{:,d},Z_{:,d},Z_{:,d})) \<br>Z^{time}=LayerNorm(\hat{Z}^{time}+MLP(\hat{Z}^{time}))<br>$$<br>单个维度的 self-attention 计算的时间复杂度为 $O(L^2)$，因此 Cross-Time Stage 的时间复杂度为 $O(DL^2)$</p><p>L 可以通过对 segment 分片的大小来进行控制</p><h5 id="Cross-Dimension-Stage"><a href="#Cross-Dimension-Stage" class="headerlink" title="Cross-Dimension Stage"></a>Cross-Dimension Stage</h5><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404112830516.png" alt="Cross-Dimension Stage对计算复杂度的优化"></p><p>常规计算 self-attention 的时间复杂度为 $O(LD^2)$，D 的值无法通过分片手段来进行压缩，因此通过 FC 层（router 机制）来整合一个时间步中各个维度的信息（即$Z_{i,:} \to B_{i,:}$），其中 $c \ll D$ 。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404114354833.png" alt="image-20230404114354833"></p><h3 id="设计-HED（Hierarchical-Encoder-Decoder）"><a href="#设计-HED（Hierarchical-Encoder-Decoder）" class="headerlink" title="设计 HED（Hierarchical Encoder-Decoder）"></a>设计 HED（Hierarchical Encoder-Decoder）</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404114714595.png" alt="HED的架构图"></p><p>通过 DSW 对 MTS 进行 embedding，通过 TSA 来堆叠 Encoder 和 Decoder</p><h4 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404114841948.png" alt="image-20230404114841948"></p><h4 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404115236850.png" alt="image-20230404115236850"></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>略</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404115545154.png" alt="消融实验验证组件的效果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 时间序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ApplicationContext的实现</title>
      <link href="/2023/04/03/spring-yuan-ma-jie-xi-03/"/>
      <url>/2023/04/03/spring-yuan-ma-jie-xi-03/</url>
      
        <content type="html"><![CDATA[<h1 id="ApplicationContext-的实现"><a href="#ApplicationContext-的实现" class="headerlink" title="ApplicationContext 的实现"></a>ApplicationContext 的实现</h1><h2 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h2><p>从类路径下读取 Spring 配置文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XmlBeanDefinitionReader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ClassPathResource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextMainV1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上面applicationContext所做的事情大致可以被以下流程概括:</span>        <span class="token comment" spellcheck="true">// 1. applicationContext内部也是创建一个beanFactory</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 通过BeanDefinitionReader来读取配置文件, 将Bean对象注入到BeanFactory中</span>        XmlBeanDefinitionReader beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinitionReader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h2><p>从磁盘路径下读取 Spring 配置文件</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h2><p>基于 Java 配置类</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="AnnotationConfigServletWebServerApplicationContext"><a href="#AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="AnnotationConfigServletWebServerApplicationContext"></a>AnnotationConfigServletWebServerApplicationContext</h2><p>用于 Web 应用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>TomcatServletWebServerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServletWebServerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * web 应用至少需要三个基本的 Bean */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebServletConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletWebServerFactory <span class="token function">servletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DispatcherServletRegistrationBean <span class="token function">dispatcherServletRegistrationBean</span><span class="token punctuation">(</span>DispatcherServlet dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServletRegistrationBean</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 Controller（使用 Spring 的方式来配置，而不是使用 SpringBoot 中的注解 <code>@Controller</code>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 控制器的Bean的命名需要以 "/" 开头     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Controller <span class="token function">helloController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Controller 接口中只有一个方法, 即 handleRequest()</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拿到字符输出流, 向其中写入"Hello, Spring"</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello, Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP2</title>
      <link href="/2023/04/03/ji-suan-ji-ji-chu-wang-luo-http2/"/>
      <url>/2023/04/03/ji-suan-ji-ji-chu-wang-luo-http2/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h1><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: ClientHello    Server-->>Client: ServerHello    Server-->>Client: Certificate, ServerKeyExchange, CertificateRequest, ServerHelloDone    Client->>Server: Certificate, ClientKeyExchange, CertificateVerify, ChangeCipherSpec, Finished    Server-->>Client: ChangeCipherSpec, Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: ClientHello    Server->>Client: ServerHello    Server->>Client: Certificate    Server->>Client: ServerKeyExchange    Server->>Client: CertificateRequest    Server->>Client: ServerHelloDone    Client->>Server: Certificate    Client->>Server: ClientKeyExchange    Client->>Server: CertificateVerify    Client->>Server: ChangeCipherSpec    Client->>Server: Finished    Server->>Client: ChangeCipherSpec    Server->>Client: Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战</title>
      <link href="/2023/04/03/redis-00-shi-zhan/"/>
      <url>/2023/04/03/redis-00-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-实战"><a href="#Redis-实战" class="headerlink" title="Redis 实战"></a>Redis 实战</h1><h2 id="第一章-初识-Redis"><a href="#第一章-初识-Redis" class="headerlink" title="第一章 初识 Redis"></a>第一章 初识 Redis</h2><h3 id="1-1-Redis-简介"><a href="#1-1-Redis-简介" class="headerlink" title="1.1 Redis 简介"></a>1.1 Redis 简介</h3><ul><li>Redis 是内存数据库，但可以通过 RDB 和 AOF 两种方式来支持数据持久化。</li><li>Redis 通过<strong>主从复制特性</strong>来扩展读性能（主服务器写，从服务器读）</li><li>Redis 通过<strong>客户端分片</strong>来扩展写性能</li></ul><h4 id="1-1-1-持久化"><a href="#1-1-1-持久化" class="headerlink" title="1.1.1 持久化"></a>1.1.1 持久化</h4><p>Redis 拥有两种不同形式的持久化方法，这两种方式都可以用小而紧凑的格式将内存中的数据写入到磁盘中：</p><ul><li><p>方式一：时间点转储（point-in-time dump）</p><p>转储操作既可以在 ”<strong>指定时间段内有指定数量的写操作执行</strong>“ 时触发，也可以通过<strong>调用两条特定的转储命令</strong>来触发</p></li><li><p>方式二：AOF（append-only）文件</p><p>可以根据数据的重要程度，对AOF文件进行设置，从不重要到重要依次为：不同步、一秒同步一次、一次命令同步一次</p></li></ul><h4 id="1-1-2-Redis-的主从复制特性"><a href="#1-1-2-Redis-的主从复制特性" class="headerlink" title="1.1.2 Redis 的主从复制特性"></a>1.1.2 Redis 的主从复制特性</h4><ol><li>执行复制的从服务器会连接上主服务器，接收主服务器发送的整个数据库的初始副本（copy）</li><li>主服务器执行的写命令，都会被发送给从服务器，从而更新从服务器中的数据集</li><li>因为从服务器中的数据不断被更新，因此客户端可以从任意一台从服务器中读取数据，来避免对主服务器进行集中式的访问，减轻主服务器的压力</li></ol><h3 id="1-2-Redis-数据结构简介"><a href="#1-2-Redis-数据结构简介" class="headerlink" title="1.2 Redis 数据结构简介"></a>1.2 Redis 数据结构简介</h3><table><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td>String</td><td>字符串、整数、浮点数</td><td>字符串操作；<br>整数和浮点数执行自增、自减操作</td></tr><tr><td>List</td><td>双向链表结构，链表的每个节点都包含一个String</td><td></td></tr><tr><td>Set</td><td>无序集合</td><td>集合的增删查；<br>随机获取一个集合中的元素；<br>计算集合与集合之间的交集、差集、并集</td></tr><tr><td>Hash</td><td></td><td></td></tr><tr><td>ZSet</td><td>value值限制为score的一个Hash结构，<br>自动根据value值进行排序（升序）</td><td>获取[stop, end]之间的元素；<br>获取value在给定范围内的元素</td></tr></tbody></table><h3 id="1-3-Redis-应用场景"><a href="#1-3-Redis-应用场景" class="headerlink" title="1.3 Redis 应用场景"></a>1.3 Redis 应用场景</h3><p>最近越来越多的网站提供对网页链接、文章或问题进行投票的功能，以 StackOverflow 为例，网站会根据文章的发布时间和获得的投票数来计算一个分数，默认按照该分数来进行文章的排序。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403175427071.png" alt="在StackOverflow中使用Redis"></p><h4 id="1-3-1-对文章进行投票"><a href="#1-3-1-对文章进行投票" class="headerlink" title="1.3.1 对文章进行投票"></a>1.3.1 对文章进行投票</h4><p>为了产生一个能够随着时间流逝而不断减少的评分，程序需要根据文章的发布时间和当前时间来计算文章的评分，具体方法为：文章评分 = 文章得到的票数 $\times$ 某个常数 + 文章的发布时间的时间戳（秒数）。其中，常数表示的含义为一票能够等价对应的秒数。</p><p>根据评分进行排序只是展示的一种方式，还可以根据发布时间进行排序，因此需要提供多个 ZSet 集合，还是以 StackOverflow 为例</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403180845875.png" alt="一种排序方式对应一个ZSet"></p><p>为防止一个用户对同一篇文章进行多次投票，因此需要为每一篇文章记录一个已投票的用户名单。因此，每篇文章都会创建一个集合。为了节省内存，可以规定在一段时间后禁止投票，将文章的评分几乎确定下来，此时也可以自动删除这个已投票的用户名单集合（设置该集合的过期时间）。</p><h4 id="1-3-2-发布并获取文章"><a href="#1-3-2-发布并获取文章" class="headerlink" title="1.3.2 发布并获取文章"></a>1.3.2 发布并获取文章</h4><h4 id="1-3-3-对文章进行分组"><a href="#1-3-3-对文章进行分组" class="headerlink" title="1.3.3 对文章进行分组"></a>1.3.3 对文章进行分组</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>HashOperations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>SetOperations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ZSetOperations<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisInActionMainTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一周对应的毫秒数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ONE_WEEK_IN_MILLISECONDS <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一张投票对应的毫秒数, 计算得出</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> VOTE_SCORE <span class="token operator">=</span> <span class="token number">432</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录文章是否过期</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TIMEOUT_PREFIX <span class="token operator">=</span> <span class="token string">"timeout:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录文章详细信息</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String POST_PREFIX <span class="token operator">=</span> <span class="token string">"post:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录文章的投票人</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VOTED_PREFIX <span class="token operator">=</span> <span class="token string">"voted:"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发布文章     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishPostTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对文章进行投票     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">votePostTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SetOperations setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashOperations hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userId <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String postId <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查是否已经过了能够投票的时间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zSetOperations<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>TIMEOUT_PREFIX<span class="token punctuation">,</span> postId<span class="token punctuation">)</span> <span class="token operator">+</span> ONE_WEEK_IN_MILLISECONDS <span class="token operator">></span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This Post isn't voted!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// TODO: 使用Lua脚本</span>        <span class="token comment" spellcheck="true">// 为该文章进行投票</span>        <span class="token comment" spellcheck="true">// 1. 记录投票人, 如果不是重复投票的话</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>VOTED_PREFIX <span class="token operator">+</span> postId<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2. 更新文章的得分</span>            hashOperations<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>POST_PREFIX <span class="token operator">+</span> postId<span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">,</span> VOTE_SCORE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 更新文章的得票数</span>            hashOperations<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>POST_PREFIX <span class="token operator">+</span> postId<span class="token punctuation">,</span> <span class="token string">"votes"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanFactory容器的实现</title>
      <link href="/2023/04/02/spring-yuan-ma-jie-xi-02/"/>
      <url>/2023/04/02/spring-yuan-ma-jie-xi-02/</url>
      
        <content type="html"><![CDATA[<h1 id="BeanFactory-容器的实现"><a href="#BeanFactory-容器的实现" class="headerlink" title="BeanFactory 容器的实现"></a>BeanFactory 容器的实现</h1><p>BeanFactory 不会做的事情：</p><ul><li>不会主动调用 BeanFactoryPostProcessor</li><li>不会主动调用（添加）BeanPostProcessor</li><li>不会主动实例化单例对象（懒加载）</li><li>不会解析BeanFactory，且不会解析 <code>${}</code> 和 <code>#{}</code> 表达式</li></ul><h2 id="手动向-BeanFactory-容器中注入-Bean-对象"><a href="#手动向-BeanFactory-容器中注入-Bean-对象" class="headerlink" title="手动向 BeanFactory 容器中注入 Bean 对象"></a>手动向 BeanFactory 容器中注入 Bean 对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO: 此时的 BeanFactory 缺乏解析 @Bean 和 @Configuration 等注解的能力</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 默认的 BeanFactory 容器</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 创建 BeanDefinition</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 向容器中添加 BeanDefinition</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 输出容器中的 Bean</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为-BeanFactory-添加常用的后置处理器"><a href="#为-BeanFactory-添加常用的后置处理器" class="headerlink" title="为 BeanFactory 添加常用的后置处理器"></a>为 BeanFactory 添加常用的后置处理器</h2><blockquote><p>  后置处理器相当于 Spring 容器的插件，BeanFactory 容器本身的功能并没有多么丰富，很多功能都是通过后置处理器来进行实现的。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO: 后置处理器添加到BeanFactory工厂, 但是并没有运行</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析 @Bean 和 @Configuration 等注解是其它类的功能</span>        <span class="token comment" spellcheck="true">// 为 BeanFactory 添加一些常用的后处理器, 可以使得能够解析注解</span>        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402214836022.png" alt="将后置处理器添加到BeanFactory容器中"></p><h2 id="执行后置处理器的功能"><a href="#执行后置处理器的功能" class="headerlink" title="执行后置处理器的功能"></a>执行后置处理器的功能</h2><p>BeanFactoryPostProcessor 和 BeanPostProcessor 两大类后置处理器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanFactoryPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先注册Bean, 然后使用后置处理器进行解析才有效. 如果上面的registerBeanDefinition在解析过程之后则无法解析成功</span>        <span class="token comment" spellcheck="true">// 遍历执行添加到 BeanFactory 中的 BeanFactoryPostProcessor</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactoryPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// BeanPostProcessor: Bean后置处理器, 用来处理类似@Autowired和@Resource等Bean对象的生命周期</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanPostProcessor<span class="token operator">></span> beanPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在此之前, Bean对象只是简单加入到容器中, 并没有调用构造方法进行实例化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"################################################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean1 bean1 <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean2 bean2 <span class="token operator">=</span> bean1<span class="token punctuation">.</span><span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean2 = "</span> <span class="token operator">+</span> bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean1构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> Bean2 bean2<span class="token punctuation">;</span>        <span class="token keyword">public</span> Bean2 <span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean2构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402220547182.png" alt="执行后置处理器的功能"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403000547642.png" alt="默认懒加载方式创建Bean"></p><h2 id="提前创建好所有的单例对象"><a href="#提前创建好所有的单例对象" class="headerlink" title="提前创建好所有的单例对象"></a>提前创建好所有的单例对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanFactoryPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactoryPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanPostProcessor<span class="token operator">></span> beanPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提前创建好所有的单例对象</span>        beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"################################################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean1 bean1 <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean2 bean2 <span class="token operator">=</span> bean1<span class="token punctuation">.</span><span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean2 = "</span> <span class="token operator">+</span> bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean1构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> Bean2 bean2<span class="token punctuation">;</span>        <span class="token keyword">public</span> Bean2 <span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean2构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403000438951.png" alt="提前创建容器中的Bean对象"></p><h2 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h2><p>从 <code>AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</code> 开始查看后置处理器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationConfigUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>            BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">unwrapDefaultListableBeanFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getDependencyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置比较器, 用于对后置处理器进行排序, 进而确定解析顺序</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setDependencyComparator</span><span class="token punctuation">(</span>AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析@Configuration注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析@Autowired注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析@Resource注解(Common: Java中的注解)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jsr250Present <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>CommonAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jpaPresent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                def<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span>                        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        <span class="token string">"Cannot load optional framework class: "</span> <span class="token operator">+</span> PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>EventListenerMethodProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>DefaultEventListenerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> beanDefs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  思考：</p><ol><li><p><code>@Autowired</code> 的注入规则是什么?</p><p><code>@Autowired</code> 是根据类型进行注入，如果存在多个相同的类型 Bean，则再使用变量名去进行匹配，如果不存在，则进行报错。另外也可以不修改变量名，而使用  <code>@Qualified</code> 来指定匹配的 Bean 的name。</p></li><li><p>如果同时添加 <code>@Autowired</code> 和 <code>@Resource</code>，那么哪个优先级高（或者说哪个生效）？</p><p>默认不进行排序，而 <code>@Autowired</code>的后置处理器在前，所以先执行解析。如果通过代码对后置处理器进行排序的话，那优先级高的（order值小）的先解析执行，即 <code>@Resource</code> 执行。（只有排序后才和后置处理器的优先级（order）有关，order值越小，优先级越高，排序越靠前，越先解析）</p><p><strong>排序的核心逻辑：优先级越高，排序越靠前，比较器只是用来制定优先级规则，即什么情况下优先级高，可以是分数越高，也可以是序号越小</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 排序接口,默认值越大,优先级越低(升序排序, 在前的优先级高)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> HIGHEST_PRECEDENCE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> LOWEST_PRECEDENCE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationClassPostProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> order <span class="token operator">=</span> Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonAnnotationBeanPostProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CommonAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setInitAnnotationType</span><span class="token punctuation">(</span>PostConstruct<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDestroyAnnotationType</span><span class="token punctuation">(</span>PreDestroy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ignoreResourceType</span><span class="token punctuation">(</span><span class="token string">"javax.xml.ws.WebServiceContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// java.naming module present on JDK 9+?</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jndiPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>jndiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJndiBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/2023/04/01/java-10-netty/"/>
      <url>/2023/04/01/java-10-netty/</url>
      
        <content type="html"><![CDATA[<h1 id="零拷贝-性能优化"><a href="#零拷贝-性能优化" class="headerlink" title="零拷贝(性能优化)"></a>零拷贝(性能优化)</h1><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117211211130.png" alt="image-20230117211211130" style="zoom: 200%;"><p>零拷贝并不是不进行拷贝, 而是指<strong>0次CPU拷贝</strong>（从内核空间缓冲区-&gt;用户空间缓冲区）。而CPU拷贝是比DMA拷贝耗费的时间长得多, 所以减少CPU拷贝是提升性能的关键。</p><blockquote><p>mmap内存映射方式适用于小数据, 而sendFile()方式适用于大文件的传输</p></blockquote><pre class="line-numbers language-mermaid"><code class="language-mermaid">graph TD    A[应用程序] -->|1. 数据写入| B(内核缓冲区)    B -->|2. 内核复制| C(网络适配器缓冲区)    C -->|3. 发送到网络| D[目的地]    A -->|零拷贝| E(网络适配器缓冲区)    E -->|零拷贝| D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant A as 应用程序    participant B as 内核缓冲区    participant C as 网络适配器缓冲区    participant D as 目的地    A->>B: 写入数据    B->>C: 复制数据    C->>D: 发送数据    A->>C: 零拷贝发送数据    C->>D: 发送数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mmap-内存映射"><a href="#mmap-内存映射" class="headerlink" title="mmap(内存映射)"></a>mmap(内存映射)</h2><p>mmap是指让用户区和内核区的虚拟内存映射到同一片物理内存上. </p><p>mmap其实并不是零拷贝, 因为只是减少了从内核缓冲区到用户缓冲区的一次CPU拷贝, 但是仍然存在从内核缓冲区到Socket Buffer的一次CPU拷贝.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117211326776.png" alt="image-20230117211326776"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117212440029.png" alt="image-20230117212440029"></p><h2 id="sendFile-传递文件描述符"><a href="#sendFile-传递文件描述符" class="headerlink" title="sendFile(传递文件描述符)"></a>sendFile(传递文件描述符)</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117212722623.png" alt="image-20230117212722623"></p><center>图: Linux2.1版本的sendFile()函数</center><p>在Linux2.1版本中, 数据不经过用户态, 直接从内核缓冲区进入Socket Buffer. 由于不经过用户态, 因此相较于mmap方式额外减少了一次上下文切换. 但是sendFile()函数仍然存在一次从内核缓冲区到Socket Buffer的CPU拷贝. 所以也不是真正意义上的零拷贝.</p><p>但是在Linux2.4版本中, 进一步优化, 直接从内核缓冲区到<strong>网卡协议栈</strong>(protocol engine), 而从内核缓冲区到Socket Buffer的CPU拷贝并不是拷贝全部信息, 而是一种<strong>元数据的CPU拷贝(下图中的灰色部分)</strong>, 而元数据拷贝的消耗可以忽略不计. 因此在Linux2.3版本中的sendFile()函数可以认为是真正意义上的零拷贝.</p><p>这种元数据拷贝是通过将文件描述符传送给Socket缓冲区.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117213324595.png" alt="image-20230117213324595"></p><center>图: Linux2.4版本的sendFile()函数</center><h2 id="零拷贝在项目中的应用"><a href="#零拷贝在项目中的应用" class="headerlink" title="零拷贝在项目中的应用"></a>零拷贝在项目中的应用</h2><p><code>transferTo()</code></p><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="Netty快速入门"><a href="#Netty快速入门" class="headerlink" title="Netty快速入门"></a>Netty快速入门</h2><h3 id="为什么使用Netty"><a href="#为什么使用Netty" class="headerlink" title="为什么使用Netty?"></a>为什么使用Netty?</h3><ul><li>NIO的类库和API繁杂, 使用麻烦, 需要熟练掌握Selector, ServerSocketChannel, SocketChannel, ByteBuffer等</li><li>需要非常熟悉多线程编程和网络编程才能编写出高质量的NIO程序</li><li>开发工作量和难度都非常大, 例如客户端面临以下问题:<ul><li>断线重连</li><li>重复接入</li><li>消息编码和解码</li><li>安全认证</li><li>网络闪断</li><li>半包读写(什么是半包读写?)</li><li>失败缓存</li><li>网络拥塞</li><li>异常流的处理</li></ul></li><li>NIO中Epoll的bug, 会导致Selector的空轮询, 最终导致CPU占用100%</li><li>NIO是IO多路复用模式, 一个I/O线程处理多个Channel, 程序的调试和跟踪非常麻烦, 往往只能靠一些日志来辅助分析, 定位问题的难度很大</li></ul><h3 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h3><p>Netty是最流行的NIO通信框架, 在许多主流的RPC框架(例如Dubbo)中都是用Netty作为其通信组件.</p><p>Netty优点:</p><ul><li>API使用简单, 开发门槛低</li><li>功能强大, 预置了多种编码解码功能, 支持多种主流协议</li><li>定制能力强, 可以通过ChannelHandler对框架进行灵活扩展</li><li>性能高, 和其它主流NIO框架对比, 综合性能最优</li><li>成熟稳定, 修复了所有已发现的JDK NIO的bug</li><li>在多个领域的应用得到了考验(Elasticsearch, Dubbo)</li></ul><h3 id="Netty基础应用"><a href="#Netty基础应用" class="headerlink" title="Netty基础应用"></a>Netty基础应用</h3><ol><li><p>引入pom依赖</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.87.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>Server端</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>netty<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>ServerBootstrap<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioServerSocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>public class Server {    public void bind(int port) {        //配置服务端的NIO线程组        //NioEventLoopGroup是个线程组, 包含一组NIO线程, 专门用于处理网络事件, 实际上就是Reactor线程组        //bossGroup用于接收客户端的连接        //workerGroup用于进行SocketChannel的网络读写        EventLoopGroup bossGroup = new NioEventLoopGroup();        EventLoopGroup workerGroup = new NioEventLoopGroup();        //ServerBootstrap对象, 用于启动NIO服务端的辅助启动类, 下面是对其进行配置, 目的是降低服务端的开发复杂度        //group(): 将两个NIO线程组当作形参传递到serverBootstrap中        //channel(): 设置创建的Channel为NioServerSocketChannel类型, 对应ServerSocketChannel        //option(): 配置TCP参数        //childHandler(): 绑定I/O事件的处理类(使用匿名类), 处理类主要用于处理网络I/O事件, 例如记录日志, 对消息进行编码和解码等        ServerBootstrap serverBootstrap = new ServerBootstrap();        serverBootstrap.group(bossGroup, workerGroup)                .channel(NioServerSocketChannel.class)                .option(ChannelOption.SO_BACKLOG, 1024)                .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {                    @Override                    protected void initChannel(SocketChannel socketChannel) {                        socketChannel.pipeline().addLast(new ServerHandler());                    }                });        ChannelFuture channelFuture = null;        try {            //绑定服务端的监听端口, 调用同步阻塞方法sync()等待绑定操作完成            //ChannelFuture对象的功能类似于JDK并发包中的Future, 主要用于异步操作的通知回调            channelFuture = serverBootstrap.bind(port).sync();            //阻塞, 等待服务端监听端口关闭之后, main()函数才退出            channelFuture.channel().closeFuture().sync();        } catch (InterruptedException e) {            throw new RuntimeException(e);        } finally {            //优雅地关闭资源            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();        }    }    public static void main(String[] args) {        int port = 8888;        new Server().bind(port);    }}class ServerHandler extends ChannelInboundHandlerAdapter {    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        ByteBuf byteBuf = (ByteBuf) msg;        // 获取缓冲区中可读的字节数        int counts = byteBuf.readableBytes();        // 创建相应大小的字节数组, 一次读取完成        byte[] request = new byte[counts];        byteBuf.readBytes(request);        String s = new String(request, Charset.defaultCharset());        System.out.println(&quot;The time server receive order : &quot; + s);        String currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(s) ? new Date(System.currentTimeMillis()).toString() : &quot;BAD ORDER&quot;;        ByteBuf response = Unpooled.copiedBuffer(currentTime.getBytes());        //将响应消息通过write()方法异步发送给Client客户端        ctx.write(response);    }    @Override    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {        //flush()方法的作用: 将消息发送队列中的消息写入到SocketChannel中发送给对方        // 从性能角度考虑, 为了防止频繁地唤醒Selector进行消息发送,        // write()方法并不直接将消息写入到SocketChannel, 而是将消息发送到发送缓冲区,        // 再通过调用flush()方法, 将发送缓冲区中的响应消息全部写入到SocketChannel中        ctx.flush();    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        //当发生异常时, 关闭ChannelHandlerContext, 释放相关的句柄资源        ctx.close();    }}```</code></pre><ol start="3"><li><p>Client端</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>Bootstrap<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioSocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>         <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>         EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//客户端的辅助启动类Bootstrap</span>         Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">/**                      * 当创建NioSocketChannel成功之后, 在进行初始化时,                      * 将其ChannelHandler设置到ChannelPipeline中, 用于处理网络I/O事件                      * @param socketChannel            the {@link Channel} which was registered.                      */</span>                     <span class="token annotation punctuation">@Override</span>                     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>class ClientHandler extends ChannelInboundHandlerAdapter {    private static final Logger LOGGER = Logger.getLogger(ClientHandler.class.getName());    private final ByteBuf firstMessage;    public ClientHandler() {        //将字符串写入到ByteBuf对象中:        // 1. getBytes(): String-&gt;byte[]        // 2. writeBytes(): byte[]-&gt;ByteBuf        byte[] request = &quot;QUERY TIME ORDER&quot;.getBytes();        firstMessage = Unpooled.buffer(request.length);        firstMessage.writeBytes(request);    }    /**     * 当客户端和服务端TCP链路建立成功之后, Netty的NIO线程会调用channelActive()方法,     * 发送查询时间的指令给客户端, 调用ChannelHandlerContext对象的writeAndFlush()方法将请求消息发送给服务端     *     * @param ctx     * @throws Exception     */    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        ctx.writeAndFlush(firstMessage);    }    /**     * 当服务端返回应答消息时, channelRead()方法被调用     *     * @param ctx     * @param msg     * @throws Exception     */    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        ByteBuf byteBuf = (ByteBuf) msg;        byte[] request = new byte[byteBuf.readableBytes()];        byteBuf.readBytes(request);        String s = new String(request, Charset.defaultCharset());        System.out.println(&quot;Now is : &quot; + s);    }    /**     * 发生异常时, 打印日志, 释放客户端资源     *     * @param ctx     * @param cause     * @throws Exception     */    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        LOGGER.warning(&quot;Unexpected exception from downstream&quot; + cause.getMessage());        ctx.close();    }}```</code></pre><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="ChannelHandler接口"><a href="#ChannelHandler接口" class="headerlink" title="ChannelHandler接口"></a>ChannelHandler接口</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230119225926279.png" alt="image-20230119225926279"></p><p>ChannelInboundHandler: 包含处理入站事件的方法</p><p>ChannelInboundHandlerAdapter: ChannelInboundHandler的默认实现类</p><ul><li>channelRead(): 每个传入的消息都要调用</li><li>channelReadComplete(): </li></ul><h2 id="Netty的组件和设计"><a href="#Netty的组件和设计" class="headerlink" title="Netty的组件和设计"></a>Netty的组件和设计</h2><h3 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h3><p>Java NIO中提供了ByteBuffer, 其完全可以满足NIO编程的需要, 但是也有一些缺点:</p><ul><li>ByteBuffer长度固定, 容量不能动态扩展和收缩</li><li>ByteBuffer只有一个标识位置的指针position, 读写的时候需要通过flip()和rewind()进行切换</li><li>ByteBuffer的API功能有限, 一些常用的实用的高级特性需要额外编程实现</li></ul><p>为了弥补上面的这些不足, Netty提供了自己的ByteBuffer实现(ByteBuf)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelFuture<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelFutureListener<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>kqueue<span class="token punctuation">.</span>KQueueDatagramChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Channel channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KQueueDatagramChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//异步执行, 即运行该代码时不会等待执行完成, 因此channelFuture是操作成功的结果, 也可能是操作失败的结果</span>        ChannelFuture channelFuture <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果在添加监听器之前操作结果就已知了, 那么会立即调用该部分的处理逻辑</span>        channelFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ChannelFutureListener<span class="token punctuation">)</span> future <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//操作执行成功的处理逻辑</span>                ByteBuf byteBuf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//操作执行失败的处理逻辑</span>                Throwable cause <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cause = "</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Channel-EventLoop和ChannelFuture"><a href="#Channel-EventLoop和ChannelFuture" class="headerlink" title="Channel, EventLoop和ChannelFuture"></a>Channel, EventLoop和ChannelFuture</h3><p>Channel: Socket</p><p>EventLoop: 控制流, 多线程, 并发</p><p>ChannelFuture: 异步通知</p><h4 id="Channel接口"><a href="#Channel接口" class="headerlink" title="Channel接口"></a>Channel接口</h4><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120010544256.png" alt="image-20230120010544256" style="zoom: 67%;"><p>每个 Channel 都将会被分配一个 ChannelPipeline 和 ChannelConfig. ChannelConfig包含了该Channel的所有配置设置, 并且支持热更新.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223436759.png" alt="image-20230120223436759"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223447811.png" alt="image-20230120223447811"></p><p>Channel 的正常生命周期如图 6-1 所示. 当这些状态发生改变时, 将会生成对应的事件. 这些事件将会被转发给 ChannelPipeline 中的 ChannelHandler, 其可以随后对它们做出响应</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223725233.png" alt="image-20230120223725233"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223958357.png" alt="image-20230120223958357"></p><p>ChannelHandler中的方法和Channel的生命周期密切相关.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120224306022.png" alt="image-20230120224306022"></p><h4 id="channelFuture接口"><a href="#channelFuture接口" class="headerlink" title="channelFuture接口"></a>channelFuture接口</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120135058710.png" alt="image-20230120135058710"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120151350291.png" alt="image-20230120151350291"></p><h2 id="TCP粘包-拆包问题的解决方案"><a href="#TCP粘包-拆包问题的解决方案" class="headerlink" title="TCP粘包/拆包问题的解决方案"></a>TCP粘包/拆包问题的解决方案</h2><p>对于TCP编程, 无论是客户端还是服务端, 当读取或者发送数据的时候, 都需要考虑TCP底层的粘包/拆包机制.</p><h3 id="TCP粘包-拆包"><a href="#TCP粘包-拆包" class="headerlink" title="TCP粘包/拆包"></a>TCP粘包/拆包</h3><p>TCP是一个“流”协议, TCP底层并不了解上层业务数据的具体含义, 底层会根据TCP缓冲区的实际情况进行包的划分. 所以在业务上认为, <strong>一个完整的包可能会被TCP拆分成多个包进行发送, 也有可能把多个小的包封装成一个大的数据包发送, 这就是所谓的TCP粘包和拆包问题.</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230118112657837.png" alt="image-20230118112657837"></p><p>假设Client客户端发送两个数据包D1和D2, 由于Server端一次读取的字节数是不确定的, 所以有以下可能情况:</p><ul><li>第1次读取D1, 第2次读取D2</li><li>第1次读取D1和D2(粘包)</li><li>第1次读取D1和D2的一部分, 第2次读取D2的剩余部分(拆包)</li><li>第1次读取D1的一部分, 第2次读取D1的剩余部分和D2(拆包)</li><li>由于D1和D2远大于TCP接收的滑动窗口, 所以D1和D2都需要进行多次拆包</li></ul><h3 id="由于TCP粘包-拆包导致功能异常的案例展示"><a href="#由于TCP粘包-拆包导致功能异常的案例展示" class="headerlink" title="由于TCP粘包/拆包导致功能异常的案例展示"></a>由于TCP粘包/拆包导致功能异常的案例展示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取缓冲区中可读的字节数</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建相应大小的字节数组, 一次读取完成</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>counts<span class="token punctuation">]</span><span class="token punctuation">;</span>        byteBuf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>length <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order : "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\n the counter is : "</span> <span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        String currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>        currentTime <span class="token operator">=</span> currentTime <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf response <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将响应消息通过write()方法异步发送给Client客户端</span>        ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//flush()方法的作用: 将消息发送队列中的消息写入到SocketChannel中发送给对方</span>        <span class="token comment" spellcheck="true">// 从性能角度考虑, 为了防止频繁地唤醒Selector进行消息发送,</span>        <span class="token comment" spellcheck="true">// write()方法并不直接将消息写入到SocketChannel, 而是将消息发送到发送缓冲区,</span>        <span class="token comment" spellcheck="true">// 再通过调用flush()方法, 将发送缓冲区中的响应消息全部写入到SocketChannel中</span>        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当发生异常时, 关闭ChannelHandlerContext, 释放相关的句柄资源</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h2><h3 id="协议要素"><a href="#协议要素" class="headerlink" title="协议要素"></a>协议要素</h3><ul><li><strong>魔数</strong>: 用来第一时间判断是否为无效包</li><li><strong>版本号</strong>: 支持协议的升级</li><li><strong>序列化算法</strong>:  消息正文采用哪种序列化和反序列化方法</li><li><strong>指令类型</strong>: 登录, 注册, 私聊, 群聊等</li><li><strong>请求序号</strong>: 为了双工通信, 提供异步能力</li><li><strong>正文长度</strong></li><li><strong>消息正文</strong><ul><li>xml格式(早期)</li><li>json格式</li></ul></li></ul><h2 id="编解码器"><a href="#编解码器" class="headerlink" title="编解码器"></a>编解码器</h2><h3 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h3><p>解码器用于处理入站数据, 本质上也是一个ChannelInboundHandler, 用于将数据从一种格式转换为另一种格式</p><ul><li><p><strong>将字节解码为消息</strong></p><p>  ByteToMessageDecoder和ReplayingDecoder</p></li><li><p><strong>将一种消息类型解码为另一种消息类型</strong></p><p>  MessageToMessageDecoder</p></li></ul><h4 id="ByteToMessageDecoder"><a href="#ByteToMessageDecoder" class="headerlink" title="ByteToMessageDecoder"></a>ByteToMessageDecoder</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO多路复用</title>
      <link href="/2023/04/01/java-io-duo-lu-fu-yong/"/>
      <url>/2023/04/01/java-io-duo-lu-fu-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><ul><li><p>BIO: 同步阻塞式</p><p>  适用于连接数目比较少且固定的架构</p></li><li><p>NIO: 同步非阻塞式</p><p>  适用于连接数目多, 但是连接比较短(轻量操作)的架构</p></li><li><p>AIO: 异步非阻塞式</p><p>  适用于连接数目多, 且连接比较长(重操作)的架构</p></li></ul><h2 id="对于同步、异步和阻塞、非阻塞的理解"><a href="#对于同步、异步和阻塞、非阻塞的理解" class="headerlink" title="对于同步、异步和阻塞、非阻塞的理解"></a>对于同步、异步和阻塞、非阻塞的理解</h2><p>同步和异步</p><ul><li>同步: 顺序执行，例如线程同步</li><li>异步: 通过回调函数执行</li></ul><p>阻塞和非阻塞</p><ul><li>阻塞: 执行代码后，除非事件发生，否则不会继续向下执行。</li><li>非阻塞: 可以继续向下执行代码</li></ul><p><code>accept()</code> 和 <code>read()</code> 会被阻塞</p><h1 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h1><p>BIO(Blocking IO)是同步阻塞式的IO通信, 服务器实现模式为<strong>一个连接一个线程</strong>, 如果这个连接不做任何事情则会造成不必要的开销, 因此可以<strong>使用线程池机制来改善</strong>, 但是线程池机制也会引入<strong>新的问题: 如果请求数量超过线程池的最大连接数量, 则会造成后续请求失败</strong>. 因此<strong>BIO模式适用于连接数目比较少且固定的架构</strong>.</p><h2 id="客户端与服务器通信过程-BIO模式"><a href="#客户端与服务器通信过程-BIO模式" class="headerlink" title="客户端与服务器通信过程(BIO模式)"></a>客户端与服务器通信过程(BIO模式)</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230114235458276.png" alt="image-20230114235458276"></p><h3 id="服务端流程"><a href="#服务端流程" class="headerlink" title="服务端流程"></a>服务端流程</h3><ol><li>定义一个ServerSocket对象, 进行服务端的端口注册</li><li>监听客户端的Socket连接请求</li><li>从Socket管道中得到InputStream, 获取客户端发送过来的请求数据</li><li>进行业务逻辑的处理</li><li>向Socket管道中推送OutputStream, 向客户端返回响应数据</li></ol><h3 id="客户端流程"><a href="#客户端流程" class="headerlink" title="客户端流程"></a>客户端流程</h3><ol><li>连接服务器端口</li><li>发送请求信息(即向Socket中发送OutputStream)</li><li>等待服务器响应, 从Socket中得到InputStream</li></ol><h3 id="总交互流程"><a href="#总交互流程" class="headerlink" title="总交互流程"></a>总交互流程</h3><ol><li>服务端: 进行端口注册, 并监听客户端的Socket连接请求</li><li>客户端: 连接服务器端口, 发送请求数据</li><li>服务端: 从Socket中获取客户端发送的请求数据, 进行业务处理, 然后返回响应数据</li><li>客户端: 从Socket中获取服务器返回的响应数据</li></ol><h2 id="伪异步IO"><a href="#伪异步IO" class="headerlink" title="伪异步IO"></a>伪异步IO</h2><p>伪异步IO的概念来源于实践, 表示通过线程池来做缓冲区的方法.</p><h2 id="同步阻塞案例的演示"><a href="#同步阻塞案例的演示" class="headerlink" title="同步阻塞案例的演示"></a>同步阻塞案例的演示</h2><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//为了简化处理, 并没有实现BIO模式中的一个客户端一个线程, 而是将处理逻辑写在了主线程中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按行读取字符需要使用BufferedReader</span>        <span class="token comment" spellcheck="true">// BufferedReader只能通过Reader获取, 因此需要将InputStream->Reader, 即使用InputStreamReader</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg = "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于服务端的处理逻辑是读取完一行后打印, 所以这里故意使用print()而不是使用println()</span>        ps<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端线程睡5s,更易观察效果</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>阻塞原因分析</strong> </p><ol><li>在总交互流程的第3步中, 从<code>br.readLine()</code>的代码逻辑中, 服务端Server会一直等待客户端发送至少一行数据. </li><li>而客户端Client在发送<code>“hello world”</code>之后并没有换行符, 服务端接收到<code>“hello world”</code>之后并不会认为这是一行数据, 所以阻塞继续等待客户端发送剩下的数据.</li><li>客户端由于<code>Thread.sleep(5000)</code>阻塞了5s之后(此时服务端线程也阻塞了5s)会结束, 此时服务端发现客户端的Socket连接断开, 因此会报错.</li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230115003352673.png" alt="image-20230115003352673"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230115003424794.png" alt="image-20230115003424794"></p><h3 id="多发和多收消息的演示案例"><a href="#多发和多收消息的演示案例" class="headerlink" title="多发和多收消息的演示案例"></a>多发和多收消息的演示案例</h3><h3 id="多客户端演示案例"><a href="#多客户端演示案例" class="headerlink" title="多客户端演示案例"></a>多客户端演示案例</h3><p>需要引入线程, 每有一个socket连接请求则创建一个线程</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p>JVM是一把双刃剑，它提供了统一的操作系统，与特定操作系统平台的细枝末节都被隐藏起来，因此方便编程，但是隐藏操作系统同时意味着特定操作系统下那些独具特色、功能强大的特性被挡在JVM之外。现代操作系统底层提供一些高效的I/O操作，新的IO就是为了利用上这些操作系统提供的新特性。总结：本质上还是操作系统的进步。</p><blockquote><p>Java NIO 需要看所处的操作系统环境来判断是 非阻塞式IO（Windows系统） 还是 IO多路复用（Linux系统）。非阻塞式IO 和 IO多路复用 的区别在于是用户态进行轮询还是在内核态进行轮询。非阻塞式IO是在用户态进行轮询，则循环中每次调用 <code>read()</code> 都需要进行一次用户态和内核态的切换，开销过大。而IO多路复用则是在内核态进行轮询，减少了用户态和内核态的切换次数。</p><p>IO多路复用技术包括：select、poll 和 epoll。假如有 100w 个文件描述符（客户端连接），那么 select 会调用 100w 次 read 操作，而可能其中只有 2 个文件描述符中存在数据读写，使用 epoll 则只会调用 2 次 read 操作。目前理解：select 和 epoll 都不可避免的去判断这 100w 个文件描述符中是否有事件发生，但是 epoll 只需要再进行 2 次 read 系统调用；但 select 需要进行 100w 次 read 系统调用，根据每一次 read 的返回结果来读取数据，没有数据的客户端连接也会调用一次，只是没有读取到数据而已。</p></blockquote><h2 id="NIO开发步骤"><a href="#NIO开发步骤" class="headerlink" title="NIO开发步骤"></a>NIO开发步骤</h2><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>ServerSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这一部分可以放置到</span>        ServerSocketChannel serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Selector只能和非阻塞模式的Channel配合使用, 而FileChannel是不可以配置成非阻塞模式的</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ServerSocketChannel-> OP_ACCEPT服务器准备好接受连接</span>        <span class="token comment" spellcheck="true">//SocketChannel->OP_CONNECT客户端可以连接到服务器</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Server服务端只需要监听ACCEPT和READ事件</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey selectionKey <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 所有客户端的第一次请求都是向serverSocketChannel中发送连接请求</span>                    <span class="token comment" spellcheck="true">// 每有一个连接请求, 分配一个通道socketChannel</span>                    <span class="token comment" spellcheck="true">// 而socketChannel中监听读事件, 也就是服务端等待客户端发送请求信息, 然后在isReadable()的处理逻辑中执行处理逻辑然后返回给Client客户端响应数据</span>                    SocketChannel socketChannel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//读就绪</span>                    SocketChannel socketChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//读逻辑处理</span>                    <span class="token comment" spellcheck="true">//todo: 可以在try-catch中处理Client离线的逻辑: (1).SelectionKey取消, (2).Channel关闭</span>                    <span class="token comment" spellcheck="true">//todo: 优化时可以将处理逻辑另开一个线程, 而选择器只作轮询的选择和判断就绪操作</span>                    <span class="token comment" spellcheck="true">//todo: 更进一步, 可以使用线程池来执行处理逻辑</span>                    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> readCounts<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCounts <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readCounts<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//将选择键从Selected Key Set中移除. 需要使用迭代器的remove(), 而不是使用selectionKey.cancel().</span>                <span class="token comment" spellcheck="true">//cancel()方法&lt;->register()方法, 会取消Channel和Selector的注册关系</span>                <span class="token comment" spellcheck="true">//使用增强for的缺点就是不能访问下标和删除集合中的元素</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SocketChannel socketChannel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel fileChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//transferTo底层使用到了零拷贝</span>        <span class="token comment" spellcheck="true">//在Windows系统中, 一次transferTo最多传送8MB, 对于大文件需要多次发送, position, count也需要计算得出</span>        <span class="token comment" spellcheck="true">//在Linux系统中, 一次transferTo即可</span>        fileChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fileChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buffer缓冲区"><a href="#Buffer缓冲区" class="headerlink" title="Buffer缓冲区"></a>Buffer缓冲区</h2><h2 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h2><p>Channel是双向操作的, 既可以用于读(ReadableByteChannel接口), 也可以用于写(WritableByteChannel接口), 还可以用于读写同时操作(ReadableByteChannel接口和WritableByteChannel接口), 所有的Channel类都实现了读写接口, 即Channel是双向操作的.</p><p>Channel相较于Stream而言, <strong>Channel是全双工的</strong>, 而Stream是单向的.</p><p>I/O广义上可以分为两大类:</p><ul><li>File IO(文件IO)</li><li>Stream IO(流IO)</li></ul><p>通道作为I/O服务的导管, 相应地也有两种类型地Channel:</p><ul><li><p>File文件通道</p><p>  <code>FileChannel</code>: 文件</p></li><li><p>Socket套接字通道</p><ul><li><code>DatagramChannel</code>: UDP</li><li><code>SocketChannel</code>: TCP</li><li><code>ServerSocketChannel</code>: 服务器TCP</li></ul></li></ul><h3 id="FileChannel类"><a href="#FileChannel类" class="headerlink" title="FileChannel类"></a>FileChannel类</h3><h4 id="打开Channel"><a href="#打开Channel" class="headerlink" title="打开Channel"></a>打开Channel</h4><p>SocketChannel可以直接创建, 而FileChannel只能通过调用下面三类实例对象的<code>getChannel()</code>方法来获取:</p><ul><li>FileInputStream</li><li>FileOutputStream</li><li>RandomAccessFile</li></ul><pre class="line-numbers language-java"><code class="language-java">RandomAccessFile file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"C:/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileChannel channel <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="关闭Channel"><a href="#关闭Channel" class="headerlink" title="关闭Channel"></a>关闭Channel</h4><h4 id="从Channel中读取数据-从-Channel-到-Buffer"><a href="#从Channel中读取数据-从-Channel-到-Buffer" class="headerlink" title="从Channel中读取数据(从 Channel 到 Buffer)"></a>从Channel中读取数据(从 Channel 到 Buffer)</h4><p><code>channel.read(buffer)</code>操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// readCounts代表实际读取数据的字节长度</span><span class="token comment" spellcheck="true">// 计算逻辑:</span><span class="token comment" spellcheck="true">// 1. readCounts = min(bufferSize, 文件剩余数据长度);</span><span class="token comment" spellcheck="true">// 2. readCounts = (readCounts != 0) ? readCounts : -1;</span><span class="token keyword">int</span> readCounts <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时buffer中存在数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="向Channel中写入-从-Buffer-到-Channel"><a href="#向Channel中写入-从-Buffer-到-Channel" class="headerlink" title="向Channel中写入(从 Buffer 到 Channel)"></a>向Channel中写入(从 Buffer 到 Channel)</h4><p><code>channel.write(buffer)</code>操作</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DatagramChannel类"><a href="#DatagramChannel类" class="headerlink" title="DatagramChannel类"></a>DatagramChannel类</h3><h3 id="SocketChannel类"><a href="#SocketChannel类" class="headerlink" title="SocketChannel类"></a>SocketChannel类</h3><h3 id="ServerSocketChannel类"><a href="#ServerSocketChannel类" class="headerlink" title="ServerSocketChannel类"></a>ServerSocketChannel类</h3><h3 id="Channel源码"><a href="#Channel源码" class="headerlink" title="Channel源码"></a>Channel源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Closeable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Channel</span> <span class="token keyword">extends</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h2><p>Selector，SelectableChannel 和 SelectionKey 这三个类组成了使得在 Java 平台上使得<strong>就绪检查</strong>变得可行的三驾马车.</p><h3 id="SelectableChannel类"><a href="#SelectableChannel类" class="headerlink" title="SelectableChannel类"></a>SelectableChannel类</h3><p>SelectableChannel并不是Selector选择器的一个组成部分, 而是属于Channel, 所有的SocketChannel都属于SelectableChannel, 而FileChannel不是SelectableChannel.</p><p>由于Selector中涉及使用到的Channel都属于SelectableChannel, 所以将SelectableChannel在这部分引入一下.</p><h3 id="SelectionKey类"><a href="#SelectionKey类" class="headerlink" title="SelectionKey类"></a>SelectionKey类</h3><h4 id="取消逻辑"><a href="#取消逻辑" class="headerlink" title="取消逻辑"></a>取消逻辑</h4><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230116222431922.png" alt="image-20230116222431922" style="zoom:50%;"><ul><li><p>当Channel关闭, 所有相关的键会被自动取消(即添加到相应Selector的取消键集合中)</p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230116222903906.png" alt="image-20230116222903906" style="zoom:50%;"></li><li><p>当Selector关闭, 所有注册到该Selector的Channel都被注销, 相关的键被取消</p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230116223229206.png" alt="image-20230116223229206" style="zoom:50%;"></li></ul><h3 id="Selector类"><a href="#Selector类" class="headerlink" title="Selector类"></a>Selector类</h3><p>Selector是注册各种IO事件的地方, 当我们关注的事件发生时, 由Selector对象进行通知.</p><p>每个Selector对象维护三个与SelectionKey相关集合: </p><ul><li>Registered Key Set (已注册键的集合)</li><li>Selected Key Set (已选择键的集合)</li><li>Cancelled Key Set (已取消键的集合)</li></ul><h4 id="选择过程select"><a href="#选择过程select" class="headerlink" title="选择过程select()"></a>选择过程select()</h4><ol><li><p>检查<code>Cancelled Key Set</code>.</p><p> 遍历每一个已取消的键, 从集合中移除, 也从其它两个集合(<code>Registered Key Set</code> 和 <code>Selected Key Set</code>)中移除, 注销相关的通道</p></li><li><p>检查<code>Registered Key Set</code>中每一个<code>SelectionKey</code>键的<code>interest</code>集合</p></li><li></li></ol><h4 id="停止选择过程wakeup"><a href="#停止选择过程wakeup" class="headerlink" title="停止选择过程wakeup()"></a>停止选择过程wakeup()</h4><p><code>wakeup()</code>提供了使线程从被阻塞的<code>select()</code>方法中优雅退出的能力.</p><p><code>wakeup()</code>作用:</p><ul><li>如果当前正在执行<code>select()</code>方法, 那么使得Selector选择器上的<strong>第一个还没有返回的</strong><code>select()</code>操作立即返回. </li><li>如果当前没有执行<code>select()</code>方法, 那么<strong>后续第一次(下一次)</strong>对<code>select()</code>的调用将立即返回. <strong>除后续第一次外</strong>的<code>select()</code>方法将正常进行. (<strong>延迟处理特性</strong>)</li><li>两次<code>select()</code>方法中连续多次调用<code>wakeup()</code>和只调用一次<code>wakeup()</code>的作用相同</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NIO </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security权限管理</title>
      <link href="/2023/03/31/spring-security-quan-xian-guan-li/"/>
      <url>/2023/03/31/spring-security-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUXT框架使用</title>
      <link href="/2023/03/26/qian-duan-qian-tai-xiang-mu/"/>
      <url>/2023/03/26/qian-duan-qian-tai-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="NUXT（不是必须的，直接使用vue-admin-template也不是不可以）"><a href="#NUXT（不是必须的，直接使用vue-admin-template也不是不可以）" class="headerlink" title="NUXT（不是必须的，直接使用vue-admin-template也不是不可以）"></a>NUXT（不是必须的，直接使用vue-admin-template也不是不可以）</h1><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ol><li><code>npm install -g npx</code></li><li><code>yarn install create-app nuxt-demo</code> 创建项目</li><li>先执行<code>npm install</code>，再执行 <code>npm install vue-awesome-swiper@3.1.3 swiper --save</code> 进行覆盖（后面不要再进行npm install操作，否则可能重新将swiper的版本覆盖）。后面执行npm install会覆盖掉的原因可能是因为lock.json文件的原因</li><li>配置 <code>nuxt.config.json</code></li></ol><h3 id="模仿vue-admin-template封装-axios"><a href="#模仿vue-admin-template封装-axios" class="headerlink" title="模仿vue-admin-template封装 axios"></a>模仿vue-admin-template封装 axios</h3><ol><li><p>安装 axios，<code>npm install axios</code></p></li><li><p>建立 utils 包，创建 request.js 文件，填充下面内容</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:8001'</span><span class="token punctuation">,</span>    timeout<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>创建 api 包，在 api 文件夹下创建前端接口，例如 banner.js 文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"@/utils/request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有的banner数据     * @returns {Promise&lt;AxiosResponse&lt;any>>}     */</span>    <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/edu/crm/banner/user/list`</span></span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="固定路由"><a href="#固定路由" class="headerlink" title="固定路由"></a>固定路由</h3><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>传入课程的 id，不同课程有着不同的课程 id</p><p>NUXT 的动态路由是以下划线开头的 vue 文件，参数名为下划线后面的文件名，例如 <code>_id.vue</code> 表示接收参数为 id 的动态路由</p><h1 id="轮播图业务"><a href="#轮播图业务" class="headerlink" title="轮播图业务"></a>轮播图业务</h1><h1 id="对首页（访问量大）进行缓存"><a href="#对首页（访问量大）进行缓存" class="headerlink" title="对首页（访问量大）进行缓存"></a>对首页（访问量大）进行缓存</h1><p>Redis 中适合存放什么类型的数据？</p><blockquote><ul><li>经常进行查询，并且不经常修改的数据适合用 Redis 进行缓存。</li><li>不是特别重要的数据可以放到 Redis 中进行缓存</li></ul></blockquote><p>这些注解用于Service层还是Controller层呢？感觉应该存放在Service层中。</p><p><code>@Cacheable</code> 和 <code>@CachePut</code> 是 Spring Framework 中用于缓存的注解。</p><p><code>@Cacheable</code> 注解用于<strong>将方法的返回值缓存起来，以便在相同的参数传递给该方法时，可以直接返回缓存中的结果，而不需要执行实际的方法。</strong>(用于查询方法)</p><p><code>@CachePut</code> 注解用于更新缓存中的数据，即使被注解的方法每次都会执行，也会将结果缓存起来。与 <code>@Cacheable</code> 不同的是，<code>@CachePut</code> 注解的方法始终会被执行，并将结果放入缓存中，以便后续使用。（用于新增方法）</p><p><code>@CacheEvict</code>注解用于清空指定的缓存，一般用于更新方法或删除方法</p><p>需要注意的是，<code>@Cacheable</code> 和 <code>@CachePut</code> 注解的使用需要在 Spring Framework 中启用缓存支持，可以通过在配置类上添加 <code>@EnableCaching</code> 注解来启用缓存支持。</p><p>似乎添加上这些注解就不需要显式地使用redisTemplate来进行Redis的数据操作吗？</p><h1 id="登录业务"><a href="#登录业务" class="headerlink" title="登录业务"></a>登录业务</h1><h2 id="单一服务器登录方式"><a href="#单一服务器登录方式" class="headerlink" title="单一服务器登录方式"></a>单一服务器登录方式</h2><p>使用session对象实现，在用户登录成功后，把用户数据放到session中。通过判断session中是否有数据来判断是否登录。</p><pre class="line-numbers language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方式只适合单一服务器，不适合服务器是集群和分布式的情况，不能实现单点登录的需求，只适合学习使用。</p><p>微服务模块在不同的服务器中，如果使用session对象，那么在某一个微服务中登录并保存，那么在另一个微服务中还需要再次登录。<strong>实际需求是要实现单点登录，即在项目中的任何一个模块中登录，在其他模块都不需要再次登录</strong></p><p>单点登录的应用场景：登录百度账号后，访问百度文库、百度贴吧、百度知道等服务时自动登录，不需要再次输入账号密码来进行登录验证。</p><h2 id="SSO（Single-Sign-On单点登录）"><a href="#SSO（Single-Sign-On单点登录）" class="headerlink" title="SSO（Single Sign On单点登录）"></a>SSO（Single Sign On单点登录）</h2><p>单点登录的实现方式：</p><ul><li>使用 session 的广播机制（session复制，复制造成浪费，现在被淘汰）</li><li>使用 cookie + redis 来实现</li><li>使用 token 来实现</li></ul><blockquote><p>  随机值state由应用程序生成，传递给认证服务器，之后认证服务器返回token时会顺带返回state值，state值的作用是为了防止伪造攻击，在应用程序收到token时会验证state值，确认这真的是认证服务器发送过来的token</p><p>  token由认证服务器生成</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230326210751846.png" alt="image-20230326210751846"></p><p>使用cookie和redis实现步骤：</p><ol><li>用户访问应用程序A。用户在浏览器中输入应用程序A的网址，然后浏览器将向应用程序A发送请求。</li><li>应用程序A检查用户是否已登录。应用程序A检查浏览器中是否存在SSO cookie，如果存在，则检查Redis中是否有相应的会话数据。如果会话数据存在，则说明用户已经在其他应用程序登录过，并且可以直接访问应用程序A。</li><li>应用程序A重定向到认证服务器。如果用户没有登录，则应用程序A将重定向用户到认证服务器，并将当前应用程序A的URL作为参数传递给认证服务器。此外，应用程序A还需要生成一个随机的state值，并将其保存在Redis中，以便后续验证。</li><li>用户登录认证服务器。用户在认证服务器上输入其凭据（用户名和密码）以登录。</li><li>认证服务器验证用户凭据并生成令牌。认证服务器验证用户凭据，并生成一个包含有关用户身份的令牌。</li><li>认证服务器重定向到应用程序A。认证服务器将用户重定向回应用程序A，并将令牌作为参数传递给应用程序A。此外，还需要将步骤3中生成的state值一并传递给应用程序A。</li><li>应用程序A验证state值和令牌。应用程序A检查传递回来的state值是否与之前保存在Redis中的相同。如果不同，则说明这个请求可能来自恶意的第三方，并且应用程序A应该拒绝这个请求。如果state值相同，则应用程序A从Redis中获取令牌，并验证令牌的有效性。如果令牌有效，则为用户创建一个会话，并设置SSO cookie以便在其他应用程序中进行验证。</li><li>用户访问应用程序B。用户访问应用程序B时，应用程序B首先检查浏览器中是否存在SSO cookie。如果存在，则应用程序B将检查Redis中是否有相应的会话数据。如果会话数据存在，则说明用户已经在其他应用程序登录过，并且可以直接访问应用程序B。</li></ol><p>需要注意的是，使用cookie和Redis来实现SSO时，需要确保Redis中保存的会话数据和cookie中保存的数据一致。此外，为了提高安全性，还需要定期清理Redis中的过期数据。</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant ClientApp    participant AuthorizationServer    participant UserAgent    ClientApp->>UserAgent: 1. Redirect to AuthorizationServer(携带生成的随机state值)    UserAgent->>AuthorizationServer: 2. Send authorization request    AuthorizationServer->>UserAgent: 3. Ask for user credentials    UserAgent->>AuthorizationServer: 4. Send user credentials    AuthorizationServer->>ClientApp: 5. Redirect to client callback URL with authorization code    ClientApp->>AuthorizationServer: 6. Request access token using authorization code    AuthorizationServer->>ClientApp: 7. Return access token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant User    participant App1    participant App2    participant AuthServer    participant Redis    User->>+App1: Login request    App1->>+AuthServer: Redirect to AuthServer for authentication    AuthServer->>+User: Prompt for credentials    User->>+AuthServer: Enter credentials    AuthServer->>+Redis: Create SSO session and generate token    Redis->>-AuthServer: Store SSO session and token    AuthServer->>-App1: Redirect back to App1 with token    App1->>+AuthServer: Request user info using token    AuthServer->>+Redis: Validate token and retrieve user info    Redis->>-AuthServer: Return user info    AuthServer->>-App1: Return user info    App1->>+App2: Forward user info to App2    App2->>+AuthServer: Request user info using token    AuthServer->>+Redis: Validate token and retrieve user info    Redis->>-AuthServer: Return user info    AuthServer->>-App2: Return user info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用token实现步骤：</p><ol><li><strong>用户访问应用程序。</strong>用户在浏览器中输入应用程序的网址，然后浏览器将向应用程序发送请求。</li><li><strong>应用程序重定向到认证服务器。</strong>当应用程序收到请求后，它将重定向用户到认证服务器。在重定向时，应用程序将向认证服务器传递一个特定的标识符，以便认证服务器可以识别应用程序。</li><li><strong>用户登录认证服务器</strong>。用户输入其凭据（用户名和密码）来登录认证服务器。</li><li><strong>认证服务器发放令牌。</strong>认证服务器通过验证用户凭据，然后发放一个令牌给用户。这个令牌包含有关用户身份的信息，例如用户名和权限等。</li><li><strong>用户被重定向回应用程序。</strong>认证服务器将用户重定向回应用程序，并将令牌一并发送给应用程序。</li><li><strong>应用程序验证令牌。应用程序收到令牌后，将与认证服务器通信以验证令牌的有效性。</strong>如果令牌有效，则应用程序会为用户创建一个会话，使用户可以在不需要再次登录的情况下访问应用程序。</li><li>用户访问应用程序。现在，用户已经被授权访问应用程序，并且可以在不需要再次输入凭据的情况下访问应用程序。</li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>给定一个生成 token 的规则。用来保存用户信息，至少应该保存用户id（唯一标识符），为了尽可能少的查询数据库，还可以包含一些基本的重要信息，例如用户身份（普通用户、vip、svip等）。</p><h2 id="整合阿里云短信服务"><a href="#整合阿里云短信服务" class="headerlink" title="整合阿里云短信服务"></a>整合阿里云短信服务</h2><h2 id="微信扫码登录"><a href="#微信扫码登录" class="headerlink" title="微信扫码登录"></a>微信扫码登录</h2><p>OAuth2流程图</p><p>单点登录解决是同一个系统内部的各个微服务之间的问题，OAuth2是解决不同系统之间的互相访问，OAuth2并不会授予客户端全部的权限。</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant User    participant Client    participant Authorization_Server    participant Resource_Server    User->>Client: 1.发起请求（请求通过微信登录应用程序）    Client->>Authorization_Server: 2.请求授权    Authorization_Server->>User: 3.用户登录并授权    User->>Authorization_Server: 4.同意授权    Authorization_Server->>Client: 5.返回授权码/验证码（code）    Client->>Authorization_Server: 6.请求访问令牌（code+app_id+app_secret）    Authorization_Server->>Client: 7.返回访问令牌（access_token）    Client->>Resource_Server: 8.请求资源    Resource_Server-->>Client: 9.返回受保护资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230327144745298.png" alt="image-20230327144745298"></p><blockquote><p>  为什么要先获取授权码，再获取token令牌？</p><p>  授权码是尽可能确认是用户本人在操作，例如用曾经登录过的手机扫码，而新手机无法直接登录。<strong>授权码可以理解成发送给手机的动态验证码</strong>，即使用户的账号密码泄露，也需要授权码才能获得访问令牌（真实的访问权限）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis高级特性</title>
      <link href="/2023/03/26/redis-02-gao-ji-te-xing/"/>
      <url>/2023/03/26/redis-02-gao-ji-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-高级特性"><a href="#Redis-高级特性" class="headerlink" title="Redis 高级特性"></a>Redis 高级特性</h1><h2 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h2><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="单-Redis-实例做分布式锁（setnx）"><a href="#单-Redis-实例做分布式锁（setnx）" class="headerlink" title="单 Redis 实例做分布式锁（setnx）"></a>单 Redis 实例做分布式锁（setnx）</h3><p>这里的单 Redis 实例并不是指单机版的 Redis，这里可以是 Redis 集群，也可以是 Redis 主从哨兵。之所以称之为<strong>单Redis实例分布式锁</strong>，是因为只主动在一个 Redis节点上添加分布式锁，而锁的复制是通过 Redis 的主从复制被动进行的。这样可能存在锁的单点故障问题，例如：</p><blockquote><p>  某个线程在 master 节点（A）上成功添加分布式锁（即 Redis 数据库中添加了一个key），在节点 A 将该分布式锁同步到其它 slave 节点（B）前，A 节点发生故障，此时 B 节点称为新的 master 节点，但是此时 B 节点中并没有这把分布式锁。那其它的线程接着请求该锁时，B 节点会为其它线程分配锁，此时整个系统中存在两个线程拥有同一把锁，因此锁失效。</p></blockquote><h3 id="多-Redis-实例做分布式锁（Redisson）"><a href="#多-Redis-实例做分布式锁（Redisson）" class="headerlink" title="多 Redis 实例做分布式锁（Redisson）"></a>多 Redis 实例做分布式锁（Redisson）</h3><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><ol><li><p>引入 pom 依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.20.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig 配置类中注入一个 Redisson 对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Redisson <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">useClusterServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span><span class="token string">"redis://hadoop002:6379"</span><span class="token punctuation">,</span> <span class="token string">"redis://hadoop002:6380"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Redisson<span class="token punctuation">)</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ol><h4 id="Reddisson-源码解析"><a href="#Reddisson-源码解析" class="headerlink" title="Reddisson 源码解析"></a>Reddisson 源码解析</h4><ul><li>默认过期时间为 30 s</li></ul><ul><li>WatchDog 的执行间隔是 1/3 个过期时间间隔，即 10 s </li></ul><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>应用场景：</p><p>共有50亿个电话号码，现有10万个电话号码，如何快速准确地判断这些电话号码是否存在？</p><p>安全连接网址，全球数10亿的网址判断</p><p>黑名单校验，识别垃圾邮件</p><p>白名单校验，识别出合法用户进行后续处理</p><p>布隆过滤器是一种空间效率高、判定效率高的数据结构，主要用于检索一个元素是否在一个集合中。它是一个长向量（位数组）和一系列随机映射函数的组合。</p><p><strong>布隆过滤器的基本思想是对于一个集合中的每个元素，将其通过 K 个哈希函数映射到一个位数组中的 K 个位置上，并将这些位置置为 1。判断一个元素是否在集合中时，只需要看一下这 K 个位置是否都为 1 即可。</strong></p><p>由于布隆过滤器对于存在和不存在的元素都有一定的误判率，因此它适合于那些可以容忍一定误判率的场景，比如黑名单过滤、URL去重等。</p><p>布隆过滤器的优点是空间利用率高、判定效率高，而缺点是存在一定的误判率，且难以删除元素。</p><p>误判的原因：布隆过滤器会将数据通过 K 个哈希函数进行映射，如果 K 个哈希映射都能够找到，则认为该数据存在。这种确定一个数据是否存在的方式是不精确的，可能将原本不存在的数据误判为存在。即布隆过滤器判断为真的数据未必为真，布隆过滤器判断为假的数据必定为假（存在假阳现象，不存在假阴现象）。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在加入事务队列的时候发现命令错误，则队列中的全部命令都不会执行。（类似于编译错误）</p><p>事务队列中的命令在执行时才发现错误，则跳过错误命令，其他命令执行。（类似于运行时错误）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-admin-template模板使用</title>
      <link href="/2023/03/22/xiang-mu-vue-admin-template-mo-ban-shi-yong/"/>
      <url>/2023/03/22/xiang-mu-vue-admin-template-mo-ban-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-admin-template模板"><a href="#vue-admin-template模板" class="headerlink" title="vue-admin-template模板"></a>vue-admin-template模板</h1><h2 id="谷粒学苑项目框架"><a href="#谷粒学苑项目框架" class="headerlink" title="谷粒学苑项目框架"></a>谷粒学苑项目框架</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230324182411190.png" alt="image-20230324182411190"></p><h2 id="框架入口"><a href="#框架入口" class="headerlink" title="框架入口"></a>框架入口</h2><p><code>index.html</code>和 <code>src/main.js</code></p><h2 id="框架作用"><a href="#框架作用" class="headerlink" title="框架作用"></a>框架作用</h2><p>对 Vue 和 Element-ui 的封装</p><h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><h3 id="index-js-文件"><a href="#index-js-文件" class="headerlink" title="index.js 文件"></a>index.js 文件</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>        assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>        assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>         port<span class="token punctuation">:</span> <span class="token number">9528</span><span class="token punctuation">,</span>         autoOpenBrowser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        errorOverlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        notifyOnErrors<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        poll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 这里修改为false, 不需要使用这么严格的Eslint检查</span>        useEslint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        showEslintErrorsInOverlay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        devtool<span class="token punctuation">:</span> <span class="token string">'cheap-source-map'</span><span class="token punctuation">,</span>        cssSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    build<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        assetsRoot<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>        assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span>        productionGzip<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        productionGzipExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bundleAnalyzerReport<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_report <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        generateAnalyzerReport<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_generate_report <span class="token operator">||</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dev-env-js-开发环境配置"><a href="#dev-env-js-开发环境配置" class="headerlink" title="dev.env.js 开发环境配置"></a>dev.env.js 开发环境配置</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prod.env'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>    NODE_ENV<span class="token punctuation">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// BASE_API: '"https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin"',</span>    <span class="token comment" spellcheck="true">// 修改BASE_API, 使得可以登录成功</span>    BASE_API<span class="token punctuation">:</span> <span class="token string">'"http://localhost:8001"'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工具目录"><a href="#工具目录" class="headerlink" title="工具目录"></a>工具目录</h2><p>request.js 文件中通过将 axios 封装成</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Message<span class="token punctuation">,</span> MessageBox<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'../store'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>getToken<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/auth'</span><span class="token comment" spellcheck="true">// 创建axios实例</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_API<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// api 的 base_url</span>    timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment" spellcheck="true">// 请求超时时间</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// request拦截器</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让每个请求携带自定义token 请根据实际情况自行修改</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> config    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Do something with request error</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for debug</span>        Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// response 拦截器</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * code为非20000是抛错 可结合自己业务进行修改         */</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span> res<span class="token punctuation">.</span>message<span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>                duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">50008</span> <span class="token operator">||</span> res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">50012</span> <span class="token operator">||</span> res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">50014</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>                    <span class="token string">'你已被登出，可以取消继续留在该页面，或者重新登录'</span><span class="token punctuation">,</span>                    <span class="token string">'确定登出'</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        confirmButtonText<span class="token punctuation">:</span> <span class="token string">'重新登录'</span><span class="token punctuation">,</span>                        cancelButtonText<span class="token punctuation">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>                        type<span class="token punctuation">:</span> <span class="token string">'warning'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'FedLogOut'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 为了重新实例化vue-router对象 避免bug</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>data        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for debug</span>        <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>            duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue.config.js</p><p>配置文件, 修改访问端口地址</p><ul><li><p>src目录</p><ul><li><p>api目录</p><p>自定义方法</p></li><li><p>asset目录</p><p>静态资源</p></li><li><p>components目录</p><p>存放组件</p></li><li><p>icons目录</p><p>存放图标</p></li><li><p>router目录</p><p>路由</p></li><li><p>style目录</p><p>样式文件</p></li><li><p>utils目录</p><p>request文件</p></li><li><p>views目录</p><p>项目中的具体页面</p></li></ul></li></ul><p>@RestController表示交给Spring管理, 并返回数据</p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><ol><li>修改vue.config.js中的端口号为8001</li></ol><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><ol><li>在router/index.js中添加</li><li>title属性决定页面的标题</li><li>component表示点击路由跳转到指定页面</li></ol><h2 id="讲师列表的前端实现"><a href="#讲师列表的前端实现" class="headerlink" title="讲师列表的前端实现"></a>讲师列表的前端实现</h2><h3 id="添加路由-1"><a href="#添加路由-1" class="headerlink" title="添加路由"></a>添加路由</h3><ol><li><p>在<code>router/index.js</code>中模仿样例改造一级路由<code>讲师管理</code>和二级路由</p></li><li><p>创建路由对应的页面并修改<code>router/index.js</code>中对应的路由映射路径</p><ol><li>讲师列表<code>views/edu/teacher/list.vue</code></li><li>添加讲师<code>views/edu/teacher/save.vue</code></li></ol></li><li><p><code>vue</code>页面的基本写法</p><pre class="line-numbers language-vue"><code class="language-vue"> <template>   <div class="app-container">     <!-- template和div标签是固定写法, 框架对其进行了封装 -->     添加讲师   </div> </template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>api</code>文件夹中创建<code>teacher.js</code>, 在其中定义接口的访问地址</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 引入utils/request, request中封装了axios</span> <span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span> <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span> <span class="token string">'/vue-admin-template/table/list'</span><span class="token punctuation">,</span>     method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>     params   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="vue-admin-template-项目改造"><a href="#vue-admin-template-项目改造" class="headerlink" title="vue-admin-template 项目改造"></a>vue-admin-template 项目改造</h1><h2 id="后端请求路径改造"><a href="#后端请求路径改造" class="headerlink" title="后端请求路径改造"></a>后端请求路径改造</h2><p>vue-admin-template 默认使用 <a href="https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin/user/login" target="_blank" rel="noopener">https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin/user/login</a> 地址进行请求，需要修改 dev.env.js 中的 <code>BASE_API</code> 属性</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prod.env'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>    NODE_ENV<span class="token punctuation">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>    BASE_API<span class="token punctuation">:</span> <span class="token string">'"http://localhost:8001"'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面改造"><a href="#页面改造" class="headerlink" title="页面改造"></a>页面改造</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230323003906516.png" alt="image-20230323003906516"></p><h3 id="讲师管理模块页面改造"><a href="#讲师管理模块页面改造" class="headerlink" title="讲师管理模块页面改造"></a>讲师管理模块页面改造</h3><h4 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h4><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// src/router/index.js</span>    <span class="token comment" spellcheck="true">// 侧边栏, 主体框架</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/teacher'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 重定向到子路由的路径上, 相当于这一个分支的默认展示页面</span>        redirect<span class="token punctuation">:</span> <span class="token string">'/teacher/table'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'讲师管理'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// title 的修改会反映到对应页面上</span>            title<span class="token punctuation">:</span> <span class="token string">'讲师管理'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// icon 是 src/icons/svg 目录下存储的矢量图片</span>            icon<span class="token punctuation">:</span> <span class="token string">'user'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子路由的路径: /teacher/table</span>                path<span class="token punctuation">:</span> <span class="token string">'table'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'讲师列表'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// '@/views/edu/teacher/table' 这些页面从现有的模板中进行拷贝, 或者自己写页面</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/edu/teacher/table'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'讲师列表'</span><span class="token punctuation">,</span>                    icon<span class="token punctuation">:</span> <span class="token string">'table'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子路由的路径: /teacher/tree</span>                path<span class="token punctuation">:</span> <span class="token string">'tree'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'讲师层次'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/edu/teacher/tree'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'讲师层次'</span><span class="token punctuation">,</span>                    icon<span class="token punctuation">:</span> <span class="token string">'tree'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/add'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'添加讲师'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/edu/teacher/add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'添加讲师'</span><span class="token punctuation">,</span>                    icon<span class="token punctuation">:</span> <span class="token string">'form'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h4><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230323005923169.png" alt="image-20230323005923169" style="zoom:150%;"><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230323005958836.png" alt="image-20230323005958836"></p><h1 id="后台的前端项目开发"><a href="#后台的前端项目开发" class="headerlink" title="后台的前端项目开发"></a>后台的前端项目开发</h1><h2 id="login-登录业务"><a href="#login-登录业务" class="headerlink" title="login 登录业务"></a>login 登录业务</h2><h4 id="前端接口修改（src-api-login-js）"><a href="#前端接口修改（src-api-login-js）" class="headerlink" title="前端接口修改（src/api/login.js）"></a>前端接口修改（src/api/login.js）</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/edu/user/login'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            username<span class="token punctuation">,</span>            password        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/edu/user/info'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        params<span class="token punctuation">:</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/edu/user/logout'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'post'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后端接口修改"><a href="#后端接口修改" class="headerlink" title="后端接口修改"></a>后端接口修改</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RestController注解: 表示该类交给Spring管理并返回数据 * &lt;p> * CrossOrigin注解: 用来解决跨域问题 * &lt;p> * 这里的逻辑纯粹是为了迎合前端vue-admin-template模板中的要求 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/edu/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"登录管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduLoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        "token"是由于vue-admin-template模板登录功能store/user中使用的token</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        这里的name和avatar应该和前端关键字相同吧</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span> <span class="token string">"[admin]"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">,</span> <span class="token string">"https://gw.alicdn.com/i4/710600684/O1CN01bNcLnV1GvJd3wK1k2_!!710600684.jpg_Q75.jpg_.webp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分页查询业务"><a href="#分页查询业务" class="headerlink" title="分页查询业务"></a>分页查询业务</h2><h3 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"带条件的分页查询"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"pageTeacherCondition/{current}/{limit}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">pageTeacherCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"当前页"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span>                                       <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"limit"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"每页最多个数"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">,</span>                                       <span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> TeacherQuery teacherQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> wrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teacherQuery <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            构建查询条件</span>            wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Teacher<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            多条件组合查询, 相当于mybatis中的动态sql</span>            String name <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer level <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String begin <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String end <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            拼接上下面的查询条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        对数据进行排序, 按照创建时间倒序排序</span>            wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//current和limit的参数类型是根据代码内部逻辑确定的, 而不是固定的String类型</span>        Page<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teacherPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据封装到teacherPage对象中</span>        teacherService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>teacherPage<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取返回数据的总条数</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> teacherPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取每一条返回数据</span>        List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> records <span class="token operator">=</span> teacherPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端接口"><a href="#前端接口" class="headerlink" title="前端接口"></a>前端接口</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token comment" spellcheck="true">// 导出为一个对象(例如为teacher), 可以通过teacher.pageQuery来调用方法, 不需要import {pageQuery, add, logout} from '@/api/edu/teacher'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">pageQuery</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> queryObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过路径进行传递值</span>            url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/edu/teacher/pageTeacherCondition/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// data 的作用是将对象转为json</span>                <span class="token comment" spellcheck="true">// 通过 post 请求体进行传递值, 对应后端的 @RequestBody (将json数据变为对象)</span>                queryObject            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 添加一位教师     * @param teacherObject 待添加的teacher对象     */</span>    <span class="token function">add</span><span class="token punctuation">(</span>teacherObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'/edu/teacher/add'</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                teacherObject            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'/edu/user/logout'</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端页面调用接口"><a href="#前端页面调用接口" class="headerlink" title="前端页面调用接口"></a>前端页面调用接口</h3><pre class="line-numbers language-vue"><code class="language-vue"><script>import teacher from '@/api/edu/teacher'export default {  filters: {    statusFilter(status) {      const statusMap = {        published: 'success',        draft: 'gray',        deleted: 'danger'      }      return statusMap[status]    }  },  // 定义页面或方法中需要使用的变量  data() {    return {      list: null,      total: 0,      // 当前页      currentPage: 1,      // 每页数量      pageSize: 3,      // 用于进行条件查询的对象      teacherQueryObject: {}    }  },  // 页面渲染前执行, 初始化方法  created() {    // todo: 默认进行一次全部的查询(这里可以进行优化)    this.pageQuery()  },  // 定义页面中的方法, 用来调用api中的接口  methods: {    pageQuery() {      teacher.pageQuery(this.currentPage, this.pageSize, this.teacherQueryObject)          //.then()方法中处理成功请求          .then(response => {            // response表示接口返回的数据            console.log(response)            // 用页面内定义的变量接收返回结果            this.list = response.data.rows            this.total = response.data.total          })          //.catch()方法中处理失败请求          .catch(error => {            console.log(error)          })    },    handleEdit(index, row) {      console.log(index, row);    },    handleDelete(index, row) {      console.log(index, row);    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端页面内容"><a href="#前端页面内容" class="headerlink" title="前端页面内容"></a>前端页面内容</h3><h4 id="表单组件"><a href="#表单组件" class="headerlink" title="表单组件"></a>表单组件</h4><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="app-container">    <!--Element-ui中定义的table组件-->    <!--:data绑定一个数组, Element-ui会对该数组进行遍历-->    <el-table        :data="list"        element-loading-text="Loading..."        border        fit        highlight-current-row>      <!--      label: 页面显示的内容      prop: 对应response.data.rows中单个对象的属性      -->      <el-table-column align="center" label="ID" prop="id">      </el-table-column>      <el-table-column align="center" label="姓名" prop="name">        <template slot-scope="scope">          <el-popover trigger="hover" placement="top">            <p>姓名: {{ scope.row.name }}</p>            <p>头衔: {{ scope.row.level === 1 ? '高级' : '首席' }}</p>            <div slot="reference" class="name-wrapper">              <el-tag size="medium">{{ scope.row.name }}</el-tag>            </div>          </el-popover>        </template>      </el-table-column>      <el-table-column label="简介" align="center" prop="intro">      </el-table-column>      <!--头衔在数据库中保存的内容是数值, 但实际希望呈现的高级讲师, 初级讲师这种文字内容, 因此需要进一步处理-->      <el-table-column label="头衔" align="center" prop="level">        <template slot-scope="scope">          <!--          scope.row.<prop>来获取属性值          ===: 判断类型和值, 例如 '1' === 1 为false          ==: 判断值, 例如 '1'== 1为true          -->          {{ scope.row.level === 1 ? '高级讲师' : '首席讲师' }}        </template>      </el-table-column>      <el-table-column label="入职时间" align="center" prop="gmtCreate">      </el-table-column>      <el-table-column label="操作">        <template slot-scope="scope">          <el-button              size="mini"              @click="handleEdit(scope.$index, scope.row)">编辑          </el-button>          <el-button              size="mini"              type="danger"              @click="handleDelete(scope.$index, scope.row)">删除          </el-button>        </template>      </el-table-column>    </el-table>  </div></template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h4><pre class="line-numbers language-vue"><code class="language-vue">    <div>      <!--当只有一页时, 通过设置按钮来隐藏分页-->      <el-switch v-model="paginationHiddenValue">      </el-switch>      <!--      element-ui中和分页插件相关的事件定义      1. @size-change: pageSize 改变时会触发      2. @current-change: currentPage 改变时会触发      3. @prev-click: 用户点击上一页按钮改变当前页后触发      4. @next-click: 用户点击下一页按钮改变当前页后触发      -->      <el-pagination          @size-change="pageQuery"          @current-change="pageQuery"          @prev-click="pageQuery"          @next-click="pageQuery"          :hide-on-single-page="paginationHiddenValue"          :page-sizes="[100, 200, 300, 400]"          :current-page="currentPage"          :page-size="pageSize"          :total="total"          background          layout="total, sizes, prev, pager, next, jumper">      </el-pagination>    </div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件查询组件"><a href="#条件查询组件" class="headerlink" title="条件查询组件"></a>条件查询组件</h4><pre class="line-numbers language-vue"><code class="language-vue"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除业务"><a href="#删除业务" class="headerlink" title="删除业务"></a>删除业务</h2><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>删除无法自动刷新，执行删除操作后需要手动进行一次刷新或者执行两次删除操作，才能看到删除效果</p><h2 id="修改业务"><a href="#修改业务" class="headerlink" title="修改业务"></a>修改业务</h2><h2 id="上传图片业务"><a href="#上传图片业务" class="headerlink" title="上传图片业务"></a>上传图片业务</h2><p>图片上传到阿里云OSS进行存储</p><p>如果想保存到自己本地的服务器该如何操作呢？这里只是图片上传功能，那通用的文件上传功能是如何实现的呢？</p><h2 id="课程分类业务-难点"><a href="#课程分类业务-难点" class="headerlink" title="课程分类业务(难点)"></a>课程分类业务(难点)</h2><h3 id="分类任务建模"><a href="#分类任务建模" class="headerlink" title="分类任务建模"></a>分类任务建模</h3><p>数据库中通过id和parentId进行实现</p><p>一级分类的parentId为默认的0</p><p>二级分类的parentId为一级分类的id</p><p>三级分类的parentId为二级分类的id</p><p>依此类推</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E6%8A%80%E6%9C%AF.svg" alt="课程分类"></p><table><thead><tr><th>id</th><th>parentId</th></tr></thead><tbody><tr><td>10（后端）</td><td>0（技术）</td></tr><tr><td>11（前端）</td><td>0（技术）</td></tr><tr><td>100（Java）</td><td>10</td></tr><tr><td>150（JavaScript）</td><td>11</td></tr></tbody></table><h3 id="EsayExcel-实现写操作"><a href="#EsayExcel-实现写操作" class="headerlink" title="EsayExcel 实现写操作"></a>EsayExcel 实现写操作</h3><h3 id="EsayExcel-实现读操作"><a href="#EsayExcel-实现读操作" class="headerlink" title="EsayExcel 实现读操作"></a>EsayExcel 实现读操作</h3><h3 id="文件上传功能"><a href="#文件上传功能" class="headerlink" title="文件上传功能"></a>文件上传功能</h3><h3 id="多级别的分类"><a href="#多级别的分类" class="headerlink" title="多级别的分类"></a>多级别的分类</h3><p><strong>多级选择框的联动问题：例如省市县</strong></p><p>可以返回一个map，其中key对应id（准确说是包含id，可能在前端还需要显示该对象的其他属性，往往显示的不是id属性），而value是一个子类别的列表。</p><p>这样在前端进行一级分类指定id后，可以获取该一级分类下的所有二级分类；同样在指定二级分类id后，可以获取三级分类列表，以此类推</p><p><strong>对于省市县这种固定的分类和不固定的分类是否需要分别考虑，固定的分类直接写死避免查询数据库吗？还是有什么其他的优化？存疑</strong></p><h2 id="课程管理业务"><a href="#课程管理业务" class="headerlink" title="课程管理业务"></a>课程管理业务</h2><h3 id="课程添加过程需求分析"><a href="#课程添加过程需求分析" class="headerlink" title="课程添加过程需求分析"></a>课程添加过程需求分析</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230324182715975.png" alt="image-20230324182715975"></p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230324191352674.png" alt="image-20230324191352674"></p><h3 id="Vo-和-Po-问题"><a href="#Vo-和-Po-问题" class="headerlink" title="Vo 和 Po 问题"></a>Vo 和 Po 问题</h3><blockquote><ol><li><strong>课程添加页面中包含各种信息，而这些信息分布在多张表中（edu_course 和 edu_course_description），因此需要创建一个 XXXVo 类来接收前端传入的对象</strong>，而 XXXPo 类则是和数据库表对应。（XXXPo 和 XXXVo 在简单的场景下可能是相同的，此时就没有必要额外创建一个 XXXVo 类）</li><li>同样由于 XXXVo 类和 XXXPo 类不完全相同，<strong>因此接收到的 XXXVo 需要将信息拆分添加到多张表中</strong>。</li><li>把 <strong>所属讲师</strong> 和 <strong>所属分类</strong> 在前端限制成下拉列表的形式，限制域的取值范围。所属分类是多级分类，需要实现<strong>多级联动效果</strong>（省市县）。</li></ol></blockquote><h3 id="添加课程业务中存在的问题"><a href="#添加课程业务中存在的问题" class="headerlink" title="添加课程业务中存在的问题"></a>添加课程业务中存在的问题</h3><p>添加课程在前端是三个阶段的过程：编辑基础信息、添加课程大纲、最终发布。但是目前在编辑基础信息的时候就将课程数据保存到数据库中，<strong>如果用户在执行到第二个阶段或第三个阶段希望取消，那该如何撤销之前保留的数据？</strong></p><p><strong>三个阶段之间的数据不能够回显，如何做到数据回显的效果？</strong></p><blockquote><p>  解决思路：第一个阶段执行完成后，保存到数据库，会自动生成课程id，此时需要获取该课程的id，传递给第二、三阶段进行使用。数据回显也可以基于课程id来实现。</p></blockquote><p>XXXVo 对象中不保存id，因此需要一个额外的属性来记录id值，该id值在第一次添加时由数据库生成并返回给前端进行记录，在进行修改时，前端需要通过该值来对数据库进行访问。类似cookie的作用。</p><h2 id="视频点播能力（阿里云）"><a href="#视频点播能力（阿里云）" class="headerlink" title="视频点播能力（阿里云）"></a>视频点播能力（阿里云）</h2><p>上传、自动化转码（普通视频转高清，怎么实现的呢？）、媒体资源管理、分发加速</p><p>这些功能如果需要存储在本地该如何实现呢？即老板愿意买磁盘，但是不愿意买阿里云的服务来存储视频。难道必须存储在阿里云，还是应该学点别的。</p><h3 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h3><p>数据库中不存储视频的地址，因为对于加密视频而言，不能通过视频地址直接播放，所以数据库中存储视频id。通过视频id来获取视频播放地址和凭证，再通过凭证来判断是否有播放（访问）权限。</p><h3 id="删除视频"><a href="#删除视频" class="headerlink" title="删除视频"></a>删除视频</h3><p>存放在阿里云的这种视频，如何保证事务一致性呢？会不会出现本地数据库中视频id被删除，但是实际阿里云存储的视频没有删除成功（先删除id，后删除视频会产生这个问题）。<strong>但先删除视频，后删除视频id，如果阿里云那边成功删除视频，但是本地删除数据库中的视频id时发生错误。这样导致本地数据库回滚，而阿里云中无法回滚，那该怎么办呢？</strong></p><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>在Controller中通过List来接收多个视频id，在阿里云存储视频的方式中，需要将List中的值拼接成一个以逗号分隔的字符串（因此用别人的接口，按照别人的要求）。这个需求可以使用Spring提供的工具类 StringUtils 中的 <code>join()</code> 方法</p><p>删除多个视频的时候，阿里云是如何保证事务的呢？会出现成功删除一部分，另外一部分删除失败吗？或者某个视频删除了一半？感觉删除还是先逻辑删除，确保业务操作简单，之后再在某个空闲的时候统一删除会更好。</p><h3 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h3><h1 id="SpringCloud-微服务框架"><a href="#SpringCloud-微服务框架" class="headerlink" title="SpringCloud 微服务框架"></a>SpringCloud 微服务框架</h1><p>模块和模块之间是相互独立的，一个模块引入另一个模块不属于微服务架构。因此微服务架构需要考虑微服务和微服务之间的相互调用问题（RPC）</p><p>SpringCloud 在接口调用上，会经过几个组件的配合：</p><ol><li><p>Feign 接口化请求调用</p><p>将restTemplate直接硬编码的请求地址给转化成接口的形式，Feign 会根据指定的服务名去服务注册中心中查找服务地址，然后向那个微服务发送调用请求</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"${nacos-service.vod}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/edu/vod/test/{id}"</span><span class="token punctuation">)</span>    String <span class="token function">getVodServiceTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Hystrix 服务熔断</p><p>通过在当前微服务模块中简单实现一个 VodClient 接口的实现类，作为VodClient 接口远程调用失败时的服务降级方案。对上面的接口进行一些简单修改，在@FeignClient注解中添加上 <code>fallback = VodClientImpl.class</code> 即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"${nacos-service.vod}"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> VodClientImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/edu/vod/test/{id}"</span><span class="token punctuation">)</span>    String <span class="token function">getVodServiceTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodClientImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Hystrix 服务降级</span>    <span class="token comment" spellcheck="true">// todo: 为什么这里会经过视图解析器, 不是添加了@ResponseBody吗? 这是IDEA的小bug</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getVodServiceTest</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"服务熔断"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>Ribbon 负载均衡</p><p>如果被调用的微服务有多个，那么会将请求通过负载均衡策略分配到该微服务的实例</p></li><li><p>Http Client / OkHttp 进行http请求调用 </p></li></ol><h1 id="前台的前端项目开发"><a href="#前台的前端项目开发" class="headerlink" title="前台的前端项目开发"></a>前台的前端项目开发</h1><h2 id="NUXT框架"><a href="#NUXT框架" class="headerlink" title="NUXT框架"></a>NUXT框架</h2><p>AJAX 请求：缺点是不利于SEO，不利于爬虫（百度、谷歌）的排名</p><p>服务端渲染技术</p><p>注意需要通过 <code>nvm use 14</code> 来切换成 node 14.x 版本，再通过 <code>npm run dev</code> 来启动nuxt项目</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ul><li>assets：一般存放静态资源，例如css、js、img等</li><li>component：存放项目相关组件，例如上传功能组件</li><li>layouts</li></ul><h2 id="整合前台系统页面"><a href="#整合前台系统页面" class="headerlink" title="整合前台系统页面"></a>整合前台系统页面</h2><h2 id="首页显示banner数据（轮播图或幻灯片）"><a href="#首页显示banner数据（轮播图或幻灯片）" class="headerlink" title="首页显示banner数据（轮播图或幻灯片）"></a>首页显示banner数据（轮播图或幻灯片）</h2><h2 id="首页显示热门课程和名师"><a href="#首页显示热门课程和名师" class="headerlink" title="首页显示热门课程和名师"></a>首页显示热门课程和名师</h2><h2 id="首页数据使用-Redis-进行缓存"><a href="#首页数据使用-Redis-进行缓存" class="headerlink" title="首页数据使用 Redis 进行缓存"></a>首页数据使用 Redis 进行缓存</h2><h1 id="Maven-加载机制"><a href="#Maven-加载机制" class="headerlink" title="Maven 加载机制"></a>Maven 加载机制</h1><p>mapper.xml 文件应该存放在resource目录下的mapper包中（这些名称都是默认指定的，不要修改为别的名称，否则容易产生mapper文件找不到的问题）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端项目模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置使用</title>
      <link href="/2023/03/22/z-za-xiang-idea-pei-zhi-shi-yong/"/>
      <url>/2023/03/22/z-za-xiang-idea-pei-zhi-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h1><h2 id="编码配置"><a href="#编码配置" class="headerlink" title="编码配置"></a>编码配置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163327212.png" alt="编码配置"></p><h2 id="自动导包配置"><a href="#自动导包配置" class="headerlink" title="自动导包配置"></a>自动导包配置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163450423.png" alt="自动导包配置"></p><h2 id="提示忽略大小写配置"><a href="#提示忽略大小写配置" class="headerlink" title="提示忽略大小写配置"></a>提示忽略大小写配置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163625094.png" alt="提示忽略大小写"></p><h2 id="Java-编译级别设置"><a href="#Java-编译级别设置" class="headerlink" title="Java 编译级别设置"></a>Java 编译级别设置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163736667.png" alt="项目编译级别的设置"></p><h2 id="取消单行显示标签页"><a href="#取消单行显示标签页" class="headerlink" title="取消单行显示标签页"></a>取消单行显示标签页</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322164119723.png" alt="取消单行显示标签页"></p><h2 id="启用注解处理器"><a href="#启用注解处理器" class="headerlink" title="启用注解处理器"></a>启用注解处理器</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322164522975.png" alt="启用注解处理器"></p><h1 id="IDEA-使用"><a href="#IDEA-使用" class="headerlink" title="IDEA 使用"></a>IDEA 使用</h1><h2 id="配置远程连接Linux服务器"><a href="#配置远程连接Linux服务器" class="headerlink" title="配置远程连接Linux服务器"></a>配置远程连接Linux服务器</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220918130050461.png" alt="image-20220918130050461"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220918130310602.png" alt="image-20220918130310602"></p><h2 id="查看类继承图"><a href="#查看类继承图" class="headerlink" title="查看类继承图"></a>查看类继承图</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/InputFormat.svg" alt></p><ul><li>使用右键可以添加属性字段等信息</li><li>使用<code>F4</code>可以直接跳转进入到图中相应的类</li></ul><h2 id="查看方法调用链"><a href="#查看方法调用链" class="headerlink" title="查看方法调用链"></a>查看方法调用链</h2><p><code>Ctrl + Alt + H</code>: 查看方法调用链</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221030214218536.png" alt="image-20221030214218536"></p><h2 id="Debug技巧"><a href="#Debug技巧" class="headerlink" title="Debug技巧"></a>Debug技巧</h2><ol><li><strong>为断点添加条件，来排除一些不必要关系的逻辑。</strong>例如，在进行 HashMap 的源码分析时，除了自己 new 的 HashMap，程序在一开始加载时也会经过一大串的 HashMap 初始化。</li><li>使用 <code>view as object</code>来查看对象比较原始的存放方式，而不使用IDEA中提供的视图优化</li></ol><h2 id="配置代码模板"><a href="#配置代码模板" class="headerlink" title="配置代码模板"></a>配置代码模板</h2><ol><li><p>使用 <code>$VAR_NAME$</code> 的方式来定义一个变量，作为占位符</p></li><li><p>在<strong>编辑变量</strong>中可以为变量设置默认值，字符串类型的默认值<strong>需要用双引号 <code>“”</code> 进行包裹</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230408235559371.png" alt="为模板中的变量设置默认值"></p></li><li><p>使用效果展示</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230408235729938.png" alt="模板自动填充"></p></li><li><p>还可以根据一些表达式来动态获取值，例如 <code>className()</code> 获取当前类的简单名，最常见的用于 springboot 应用主启动类的 main 方法中。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230409002817581.png" alt="根据表达式动态获取值"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Junit单元测试</title>
      <link href="/2023/03/22/z-za-xiang-junit-dan-yuan-ce-shi/"/>
      <url>/2023/03/22/z-za-xiang-junit-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>注解</th><th>断言</th><th>作用</th></tr></thead><tbody><tr><td><code>@BeforeAll</code></td><td></td><td>在所有测试方法运行之前，只执行一次</td></tr><tr><td><code>@BeforeEach</code></td><td></td><td>在每个测试方法运行之前，都执行一次</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus的使用</title>
      <link href="/2023/03/22/mybatisplus-de-shi-yong/"/>
      <url>/2023/03/22/mybatisplus-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus-的使用"><a href="#MyBatisPlus-的使用" class="headerlink" title="MyBatisPlus 的使用"></a>MyBatisPlus 的使用</h1><h2 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--由SpringBoot进行版本管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.guigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自定义内容, 辅助版本管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-plus-boot-starter.version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-plus-boot-starter.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger-spring-boot-starter.version</span><span class="token punctuation">></span></span>1.9.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger-spring-boot-starter.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spring套件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-plus-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring Boot 集成 swagger --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spring4all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger-spring-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token comment" spellcheck="true"># 用于打印 Mybatis 中的日志信息</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CURD-操作"><a href="#CURD-操作" class="headerlink" title="CURD 操作"></a>CURD 操作</h2><h3 id="插入操作（涉及主键策略）"><a href="#插入操作（涉及主键策略）" class="headerlink" title="插入操作（涉及主键策略）"></a>插入操作（涉及主键策略）</h3><h4 id="手动指定策略：INPUT、NONE"><a href="#手动指定策略：INPUT、NONE" class="headerlink" title="手动指定策略：INPUT、NONE"></a>手动指定策略：INPUT、NONE</h4><p>手动指定主键id，如果没有指定则插入失败</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322171714460.png" alt="INPUT 策略"></p><h4 id="自动增长策略：AUTO"><a href="#自动增长策略：AUTO" class="headerlink" title="自动增长策略：AUTO"></a>自动增长策略：AUTO</h4><p>需要数据库设置了主键自增，否则等同于 INPUT 策略</p><h4 id="UUID策略（MyBatisPlus默认）：ASSIGN-ID、ASSIGN-UUID"><a href="#UUID策略（MyBatisPlus默认）：ASSIGN-ID、ASSIGN-UUID" class="headerlink" title="UUID策略（MyBatisPlus默认）：ASSIGN_ID、ASSIGN_UUID"></a>UUID策略（MyBatisPlus默认）：ASSIGN_ID、ASSIGN_UUID</h4><p>数据库不需要设置主键自增，采用雪花算法分配一个全局唯一的值</p><ul><li><code>ASSIGN_ID</code>：支持主键为数值或字符串类型</li><li><code>ASSIGN_UUID</code>：主键必须为字符串类型</li></ul><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322171858227.png" alt="image-20230322171858227" style="zoom:150%;"><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322172113623.png" alt="image-20230322172113623"></p><h4 id="Redis-生成策略"><a href="#Redis-生成策略" class="headerlink" title="Redis 生成策略"></a>Redis 生成策略</h4><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><h2 id="其他常用功能"><a href="#其他常用功能" class="headerlink" title="其他常用功能"></a>其他常用功能</h2><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><blockquote><p>  自动填充记录的<strong>创建时间和更新时间</strong></p></blockquote><ol><li><p>实体类中的属性配置</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322174817592.png" alt="自动填充属性的配置" style="zoom:150%;"></li><li><p>创建一个处理器，分别绑定插入操作和更新操作，执行相应的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MPMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用 Mybatis Plus 进行添加时会执行该方法     *     * @param metaObject     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用 Mybatis Plus 进行更新时会执行该方法     *     * @param metaObject     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试：插入时不需要关心 createTime 和 updateTime 属性的设置</p><blockquote><p>  自动填充不仅仅局限于 createTime 和 updateTime 的设置，通过 <code>setFieldValByName</code> 可以设置任意出现的属性值，例如为乐观锁设置初始值</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322175737871.png" alt="image-20230322175737871"></p></li></ol><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><ol><li><p>在实体类中进行相应修改</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322180803058.png" alt="image-20230322180803058" style="zoom:150%;"></li><li><p>Spring 中注入乐观锁插件对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Mybatis Plus 乐观锁插件配置     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInnerInterceptor <span class="token function">optimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用自动填充插件为版本号设置初始值</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322181534378.png" alt="image-20230322181534378" style="zoom:150%;"><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322181555814.png" alt="image-20230322181555814" style="zoom:150%;"></li><li><p>测试</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322182752321.png" alt="乐观锁需要先查询后修改"></p></li></ol><h3 id="分页插件（实现分页查询）"><a href="#分页插件（实现分页查询）" class="headerlink" title="分页插件（实现分页查询）"></a>分页插件（实现分页查询）</h3><ol><li><p>在Spring中注入分页查询插件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Mybatis Plus 乐观锁插件配置     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInnerInterceptor <span class="token function">optimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分页查询插件, 这里不能使用新版本的, 否则分页插件不生效, 可能是兼容性问题     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分页查询测试</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pageQueryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//SELECT uid AS uIndex,username,password,age,gender AS sex,email,is_delete</span>        <span class="token comment" spellcheck="true">// FROM user</span>        <span class="token comment" spellcheck="true">// WHERE is_delete=0</span>        <span class="token comment" spellcheck="true">// LIMIT ?,?</span>        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取page对象中的封装的所有数据</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"page.getTotal() = "</span> <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322191039703.png" alt="分页查询测试"></p></li></ol><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>配置逻辑删除后，通过 MyBatis Plus 调用删除代码时，不会在数据库中实际删除该数据，而是</p><ol><li><p>实体类修改</p></li><li><p>测试效果</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322191329038.png" alt="逻辑删除测试效果"></p></li></ol><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/03/22/springboot-05-he-xin-yuan-li/"/>
      <url>/2023/03/22/springboot-05-he-xin-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>自动配置</p><ul><li><p>全部加载 127 自动配置类（预先写死）</p></li><li><p>按照条件装配规则，按需注入</p><ul><li><p>@ConditionalOnClass 注解</p><p>保证了在类路径下发现某个类，才会注入Bean对象。而这个“某个类”，需要导入一些特定的包。因此导入了特定的依赖，就会自动注入</p></li><li><p>@ConditionalOnProperty 注解</p><p>配置文件中是否出现某个字段，配置了则生效</p></li><li><p>@ConditionalOnBean 注解</p><p>判断容器中是否存在某种类型或某个名字的 Bean 组件。这种时候可以先在主启动类下查询容器中是否注入了这个 Bean 对象（按类型或按名字，getBeanDefinitionNames 方法）</p></li></ul></li><li><p>帮助用户的 Bean 规范化，以用户配置的 Bean 优先</p></li></ul><p>以 <code>AopAutoConfiguration</code> 为例，介绍其条件装配的设计。</p><ul><li><code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissngClass</code> 注解本质上相同，但是折磨人的设计，``@ConditionalOnClass<code>中有</code>Class[]<code>而</code>@ConditionalOnMissingClass<code>中没有</code>Class[]`。导致前者可以直接使用 Class，而后者却要写死字符串</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.aop"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AopAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>Advice<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AspectJAutoProxyingConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.aop"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"proxy-target-class"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JdkDynamicAutoProxyConfiguration</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.aop"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"proxy-target-class"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span>                matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CglibAutoProxyConfiguration</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.aspectj.weaver.Advice"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.aop"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"proxy-target-class"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span>            matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClassProxyingConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">static</span> BeanFactoryPostProcessor <span class="token function">forceAutoProxyCreatorToUseClassProxying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    BeanDefinitionRegistry registry <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>                    AopConfigUtils<span class="token punctuation">.</span><span class="token function">registerAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    AopConfigUtils<span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToUseClassProxying</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@ConditionalOnBean + @ConditionalOnMissingBean 搭配使用</p><p>如果没有手动注入一个特定类型的对象（例如：MultipartResolver），那么由于@ConditionalOnBean的限制，那么底层也不会自动注入。但是如果用户手动注入了一个对象，但是 name 是用户任意定义的，同时框架底层可能还依赖这个 name，那么@ConditionalOnMissingBean就发挥了作用，将用户定义的这个 Bean 取一个预先定义好的别名。（这个别名是框架底层依赖的）</p><p>这种设计挺巧妙，但是意义在哪里呢？如果不允许使用者在框架外面自定义多个相同类型的 Bean，那么框架底层实现时，使用getBeanByType即可，根本没必要取预先定义好的别名，这样多此一举。但是假如允许用户在框架外面自定义多个相同类型的 Bean，最终生效的是哪一个呢？</p><p>这种设计的意义在于，Spring 集成别的框架时，可能这个别名是别的框架规定死的，而不是 Spring 框架对其进行了限制。使用这种设计，框架的使用者不需要知道这个规定死的字段</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="SpringBoot-接口开发的常用注解有哪些"><a href="#SpringBoot-接口开发的常用注解有哪些" class="headerlink" title="SpringBoot 接口开发的常用注解有哪些?"></a>SpringBoot 接口开发的常用注解有哪些?</h2><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td><code>@Controller</code></td><td>标记此类是一个控制器，可以返回视图解析器指定的 html 页面，通过搭配 @ResponseBody 可以将结果返回 json、xml 等数据</td></tr><tr><td><code>@RestController</code></td><td>相当于 @Controller + @ResponseBody</td></tr><tr><td><code>@RequestMapping</code></td><td>定义接口地址，可以标记在类上，也可以标记在方法上</td></tr><tr><td><code>@RequestBody</code></td><td>定义在方法上，用于将前端传入的 JSON 串转化成 Java 对象</td></tr><tr><td><code>@PathVariable</code></td><td>接收请求路径中的占位符的值</td></tr><tr><td><code>@ApiOperation</code></td><td>Swagger 注解，对接口方法进行说明</td></tr><tr><td><code>@Api</code></td><td>Swagger 注解，对接口类进行说明</td></tr><tr><td><code>@Autowired</code></td><td>基于类型注入</td></tr><tr><td><code>@Resource</code></td><td>默认基于名称注入，如果失败则转为基于类型注入</td></tr></tbody></table><h2 id="ComponentScan-可以用于跨项目的扫描规则"><a href="#ComponentScan-可以用于跨项目的扫描规则" class="headerlink" title="@ComponentScan 可以用于跨项目的扫描规则"></a><code>@ComponentScan</code> 可以用于跨项目的扫描规则</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322204401403.png" alt="image-20230322204401403" style="zoom:150%;">]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisX代码生成器</title>
      <link href="/2023/03/22/mybatisx-dai-ma-sheng-cheng-qi/"/>
      <url>/2023/03/22/mybatisx-dai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisX-使用"><a href="#MyBatisX-使用" class="headerlink" title="MyBatisX 使用"></a>MyBatisX 使用</h1><h2 id="生成展示"><a href="#生成展示" class="headerlink" title="生成展示"></a>生成展示</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322013958894.png" alt="生成类的注解信息设置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud项目实战</title>
      <link href="/2023/03/21/springcloud-xiang-mu-shi-zhan/"/>
      <url>/2023/03/21/springcloud-xiang-mu-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-项目介绍"><a href="#SpringCloud-项目介绍" class="headerlink" title="SpringCloud 项目介绍"></a>SpringCloud 项目介绍</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="项目的背景"><a href="#项目的背景" class="headerlink" title="项目的背景"></a>项目的背景</h3><p>项目的三个端：用户端（客户端），机构端（客户端），运营端（服务端）</p><p>项目采用：</p><ul><li>前后端分离架构</li><li>后端采用 SpringBoot、SpringCloud 等技术栈进行开发；数据库使用 MySQL，还使用 Redis、MQ、分布式文件系统、ElasticSearch 等中间件系统</li></ul><p>微服务包括：</p><ul><li>内容管理服务</li><li>媒资管理服务</li><li>搜索服务</li><li>订单支付服务</li><li>学习中心服务</li><li>系统管理服务</li><li>认证授权服务</li><li>网关服务</li><li>注册中心服务</li><li>配置中心服务</li></ul><h3 id="项目的业务流程"><a href="#项目的业务流程" class="headerlink" title="项目的业务流程"></a>项目的业务流程</h3><h3 id="项目的功能模块"><a href="#项目的功能模块" class="headerlink" title="项目的功能模块"></a>项目的功能模块</h3><h3 id="项目的技术架构"><a href="#项目的技术架构" class="headerlink" title="项目的技术架构"></a>项目的技术架构</h3><h3 id="个人负责模块"><a href="#个人负责模块" class="headerlink" title="个人负责模块"></a>个人负责模块</h3><p>个人负责模块的详细说明，包括模块的设计，所用到的技术，技术的实现方案</p><h1 id="学成在线项目"><a href="#学成在线项目" class="headerlink" title="学成在线项目"></a>学成在线项目</h1><ul><li><code>xuecheng-plus-parent</code>：版本管理</li><li><code>xuecheng-plus-base</code>：</li><li><code>xuecheng-plus-content</code>：</li></ul><h2 id="媒体资源管理模块"><a href="#媒体资源管理模块" class="headerlink" title="媒体资源管理模块"></a>媒体资源管理模块</h2><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><h3 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h3><h1 id="谷粒学苑项目"><a href="#谷粒学苑项目" class="headerlink" title="谷粒学苑项目"></a>谷粒学苑项目</h1><p>后台部分：</p><ul><li>讲师管理模块</li><li>课程分类管理模块</li><li>课程管理模块</li><li>统计分析模块</li><li>订单管理</li></ul><p>前台部分</p><ul><li>首页数据显示</li><li>讲师列表和详情</li><li>课程列表和课程详情</li><li>登录与注册</li><li>支付功能</li></ul><h2 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h2><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>通过访问 <code>localhost:xxxx/swagger-ui.html</code> 进入到 Swagger-UI 的界面，其中端口号根据项目的端口号确定</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/2023/03/21/linux-02-docker-shi-yong/"/>
      <url>/2023/03/21/linux-02-docker-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装、配置与卸载"><a href="#Docker-安装、配置与卸载" class="headerlink" title="Docker 安装、配置与卸载"></a>Docker 安装、配置与卸载</h1><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><pre class="line-numbers language-sh"><code class="language-sh">yum -y install gcc gcc-c++yum -y remove docker docker-common docker-selinux docker-engineyum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y install docker-cesystemctl start dockerdocker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>安装gcc环境<code>yum -y install gcc gcc-c++</code></p></li><li><p>卸载docker旧版本(可能之前有安装)<code>yum -y remove docker docker-common docker-selinux docker-engine</code></p></li><li><p>安装需要的软件包<code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p></li><li><p>设置stable仓库</p><p> <code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p></li><li><p>更新yum软件包索引<code>yum makecache fast</code></p></li><li><p>安装Docker社区版<code>yum -y install docker-ce</code></p></li><li><p>启动Docker<code>systemctl start docker</code></p></li><li><p>测试是否安装成功</p><ul><li><code>docker version</code></li><li><code>docker run hello-world</code>: hello-world是docker仓库中提供的一个专门用于测试的镜像包</li></ul></li></ol><h2 id="Docker卸载"><a href="#Docker卸载" class="headerlink" title="Docker卸载"></a>Docker卸载</h2><pre class="line-numbers language-sh"><code class="language-sh">systemctl stop dockeryum -y remove docker-cerm -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>卸载docker之前需要先停止<code>systemctl stop docker</code></li><li>卸载docker<code>yum -y remove docker-ce</code></li><li>清除残留文件<code>rm -rf /var/lib/docker</code></li></ol><h2 id="配置Docker仓库的国内镜像加速"><a href="#配置Docker仓库的国内镜像加速" class="headerlink" title="配置Docker仓库的国内镜像加速"></a>配置Docker仓库的国内镜像加速</h2><pre class="line-numbers language-sh"><code class="language-sh">mkdir -p /etc/dockervim  /etc/docker/daemon.json#################################################################{    "registry-mirrors": ["https://zx8hwqme.mirror.aliyuncs.com"]}#################################################################systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>创建配置文件 /etc/docker/daemon.json</p><ul><li><p><code>mkdir -p /etc/docker</code></p></li><li><p><code>vim  /etc/docker/daemon.json</code></p><p>配置文件的具体内容因人而异, 需要登录<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a>进行查看</p></li></ul></li><li><p>重新加载配置文件, 重启docker</p><ul><li><code>systemctl daemon-reload</code></li><li><code>systemctl restart docker</code></li></ul></li></ol><h1 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h1><h2 id="命令分类"><a href="#命令分类" class="headerlink" title="命令分类"></a>命令分类</h2><table><thead><tr><th>子命令分类</th><th>子命令</th></tr></thead><tbody><tr><td>Docker环境信息</td><td>info、version</td></tr><tr><td>容器生命周期管理</td><td>Create、exec、kill、pause、.restart、rm、run、start、stop、unpause</td></tr><tr><td>镜像仓库命令</td><td>login、logout、pull、push、search</td></tr><tr><td>镜像管理</td><td>build、images、import、load、rmi、save、tag、commit</td></tr><tr><td>容器运维操作</td><td>attach、export、inspect、port、ps、rename、stats、top、wait、cp、diff、update</td></tr><tr><td>容器资源管理</td><td>volume、network</td></tr><tr><td>系统日志信息</td><td>events、history、logs</td></tr></tbody></table><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404130124555.png" alt="Docker 命令结构图"></p><h2 id="Docker-进程命令"><a href="#Docker-进程命令" class="headerlink" title="Docker 进程命令"></a>Docker 进程命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>systemctl start docker</code></td><td>启动docker服务</td></tr><tr><td><code>systemctl stop docker</code></td><td>停止docker服务</td></tr><tr><td><code>systemctl status docker</code></td><td>查看docker服务状态</td></tr><tr><td><code>systemctl restart docker</code></td><td>重启docker服务</td></tr><tr><td><code>systemctl enable docker</code></td><td>设置docker开机自启动</td></tr></tbody></table><h2 id="Docker-容器命令"><a href="#Docker-容器命令" class="headerlink" title="Docker 容器命令"></a>Docker 容器命令</h2><table><thead><tr><th>容器命令</th><th>作用</th></tr></thead><tbody><tr><td><code>docker run ...</code></td><td>基于镜像创建容器并启动(第一次使用, 不能重复创建同名容器)</td></tr><tr><td><code>docker rm &lt;容器名&gt;</code></td><td>删除容器</td></tr><tr><td><code>docker start &lt;容器名或容器id&gt;</code></td><td>启动容器</td></tr><tr><td><code>docker stop &lt;容器名或容器id&gt;</code></td><td>停止容器</td></tr><tr><td><code>docker kill &lt;容器名或容器id&gt;</code></td><td>杀死容器</td></tr><tr><td><code>docker ps</code></td><td>查看当前运行中的容器</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器</td></tr><tr><td><code>docker exec -it &lt;容器名&gt; /bin/bash</code></td><td>进入到容器中</td></tr><tr><td><code>docker stop &lt;容器id&gt;</code></td><td>停止容器</td></tr><tr><td><code>docker inspect &lt;容器名&gt;</code></td><td>查看容器信息（IP 地址等）</td></tr><tr><td><code>docker port &lt;容器名&gt;</code></td><td>查看容器的端口映射信息</td></tr><tr><td><code>docker attach &lt;容器名&gt;</code></td><td>用途未知</td></tr><tr><td><code>docker commit &lt;容器名&gt;</code></td><td>将正在运行的容器制作成一个镜像</td></tr></tbody></table><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404132827644.png" alt="docker commit 命令使用示例"></p><h2 id="Docker-镜像命令"><a href="#Docker-镜像命令" class="headerlink" title="Docker 镜像命令"></a>Docker 镜像命令</h2><table><thead><tr><th>镜像命令</th><th>作用</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>列出本地机器中的镜像</td></tr><tr><td><code>docker search &lt;镜像名&gt;</code></td><td>在docker hub中进行查找镜像</td></tr><tr><td><code>docker pull &lt;镜像名&gt;:&lt;版本号&gt;</code></td><td>下载镜像, 没指定版本号时默认为最新版</td></tr><tr><td><code>docker rmi -f &lt;镜像名&gt;:&lt;版本号&gt;</code></td><td>强制删除镜像</td></tr></tbody></table><h1 id="Docker-容器数据卷"><a href="#Docker-容器数据卷" class="headerlink" title="Docker 容器数据卷"></a>Docker 容器数据卷</h1><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷出现的目的是为了解决以下的两个问题:</p><ul><li>Docker容器删除后, 在容器中产生的数据也会随之消失</li><li>Docker容器和外部机器, Docker容器和Docker容器之间不可以直接交换文件</li></ul><p>如果想要进行多个docker容器之间的数据交换, 可以将多个容器挂载到同一个数据卷(共享文件夹)</p><h2 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h2><blockquote><p>  数据卷在宿主机上，挂载到 Docker 容器中。类似文件在U盘上，然后U盘接入到电脑中（挂载）。电脑重装系统并不会删除 U 盘中的数据，类似删除 Docker 容器并不会删除数据卷中的数据。</p></blockquote><p>文件挂载通过 <code>-v</code> 指定参数 <code>docker run -v &lt;宿主机目录&gt;:&lt;docker容器内目录&gt; --privileged=true</code></p><p><code>--privileged=true</code> 表示 docker </p><p>额外的功能：</p><ul><li>限制容器内的目录只能读取，在上面的命令中添加 <code>:ro</code>（read only），构成 <code>-v &lt;宿主机目录&gt;:&lt;容器内目录&gt;:ro</code></li></ul><h2 id="容器之间的数据卷继承"><a href="#容器之间的数据卷继承" class="headerlink" title="容器之间的数据卷继承"></a>容器之间的数据卷继承</h2><p>期望不同容器之间的挂载目录保持相同, 可以使用数据卷继承. 需要注意的是, <strong>继承的是文件挂载的规则</strong></p><p><code>--volumes-from &lt;希望保持相同挂载规则的容器名&gt;</code></p><p>数据卷的继承可以在不知道其它容器具体的挂载规则的情况下，复用该规则。继承的挂载规则是独立的，子容器的挂载规则不会因为父容器的删除而消失。</p><h1 id="Dockfile"><a href="#Dockfile" class="headerlink" title="Dockfile"></a>Dockfile</h1><h2 id="镜像原理"><a href="#镜像原理" class="headerlink" title="镜像原理"></a>镜像原理</h2><p>镜像是一层层文件堆叠而成，镜像是只读的，而容器是镜像上面在堆叠一层可写的文件，对于镜像生成的原始容器的操作都记录在容器层对应的文件中？</p><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><h3 id="commit-制作镜像"><a href="#commit-制作镜像" class="headerlink" title="commit 制作镜像"></a>commit 制作镜像</h3><p>对运行中的容器进行修改，然后通过 <code>docker commit &lt;容器名&gt; &lt;指定镜像名&gt;:&lt;指定版本号&gt;</code> 也可以创建镜像。这种方式的优点是简单，缺点在于不是自动化的，不适合复现。例如，在写博客教程时，读者需要按照博主相同的操作流程对 docker 容器进行修改配置，不能通过一行代码直接得到相同的环境。所以后面主要介绍通过 Dockerfile 来创建镜像。</p><p>通过 commit 方式制作的镜像不会打包挂载的数据卷吗？如果数据卷是容器和宿主机独立的两份，为什么这里又不会打包挂载的数据卷呢？数据卷是容器和宿主机共享的，正因为数据卷是宿主机的文件夹挂载在容器中（搞清楚谁挂载在谁上很重要，类比 U 盘插入电脑，数据卷挂载在容器中），数据卷不属于docker的文件系统，因此容器被打包成镜像时不会打包挂载的数据卷。</p><h3 id="Dockerfile-制作镜像"><a href="#Dockerfile-制作镜像" class="headerlink" title="Dockerfile 制作镜像"></a>Dockerfile 制作镜像</h3><p><strong>Dockerfile 文件中的每一行构建一层镜像</strong>，这就是RUN尽可能一个模块写在一起并使用 &amp;&amp; 进行连接的原因？</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># FROM: 指定基础镜像FROM centos:7# MAINTAINER: 指定作者信息MAINTAINER xiong# ENV: 设置环境变量ENV USERNAME rootENV PASSWORD root# RUN: 执行shell命令RUN yum install -y vimRUN apt-get update && apt-get install -y \    python    python-pipRUN pip install numpy# ADD: 将宿主机文件复制到容器中ADD hello.py /tmp/hello.py# WORKDIR: 指定工作目录WORKDIR /# EXPOSE: 暴露端口(谁的端口?)EXPOSE 5000# 接收docker run中的输入的字符串作为echo命令的参数, 一般用于制作一些执行后关闭的容器ENTRYPOINT ["/bin/echo"]# CMD: 容器启动时执行该命令, 后面是提供echo命令的参数CMD ["/bin/echo", "Hello, Dockerfile!"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义Dockerfile，发布SpringBoot项目（假设为springboot-hello.jar）</p><ol><li><p>创建一个 Dockerfile 文件，文件名和后缀都任意，假设为 springboot_hello.dockerfile。Dockerfile 文件和 jar 包放到同一个目录下。</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># jar包执行需要JRE环境FROM java:8ADD springboot-hello.jar ./spring-hello.jarCMD java -jar spring-hello.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入 <code>docker build -f &lt;Dockerfile文件路径&gt; -t &lt;镜像名&gt;:&lt;版本号&gt;</code> 命令来构建镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker build -f springboot_hello.dockerfile -t myHello:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h2><p>容器和镜像不能直接传输，需要将其保存成压缩文件，才能实现镜像的共享。（为什么不直接发布到 docker hub 或私有仓库上，让别人去拉取呢？）</p><ul><li>保存镜像：<code>docker save -o &lt;tar文件名&gt; &lt;镜像名&gt;:&lt;版本号&gt;</code></li><li>加载镜像：<code>docker load -i &lt;tar文件名&gt;</code></li><li>保存容器：<code>docker export</code></li><li>加载容器：<code>docker import</code></li></ul><p>保存镜像（先commit，再save）会保留它的历史，保存容器会对它的历史进行压缩，二者类似。</p><pre class="line-numbers language-sh"><code class="language-sh"># 将之前创建的redis-demo镜像保存为tar文件. docker save -o redis-docker.tar redis-demo:1.0# 输出路径为当前目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404232643032.png" alt="docker save 保存镜像"></p><h1 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h1><p><strong>每个容器中只运行一个进程</strong>。容器和容器之间通过容器链接或者其它的容器网络技术来进行通信</p><p>获取容器的 IP 地址：<code>docker inspect &lt;容器名&gt; | grep &quot;IPAddress&quot;</code></p><p>如果在创建容器时不使用端口映射，相当于在宿主机和容器之间搭建了一个私人网络，在宿主机上可以通过查找容器 IP + 容器端口号来访问容器，但是在其它机器上无法访问容器。</p><h2 id="容器链接（过时）"><a href="#容器链接（过时）" class="headerlink" title="容器链接（过时）"></a>容器链接（过时）</h2><p>容器链接 <code>docker run --link</code> 在单台主机上可以正常工作，但是在一个大规模系统中，需要使用其它的服务发现方式。可以使用键值存储和 DNS 作为解决方案。另外，Docker Network 提供了一种内建机制来将容器内的服务暴露给外部，而不必使用容器链接。</p><h2 id="用户定义网络"><a href="#用户定义网络" class="headerlink" title="用户定义网络"></a>用户定义网络</h2><p>默认情况下使用 <code>bridge</code> 网络，但该网络的问题是<strong>不能将容器名解析为 IP 地址</strong>，例如不可以通过 <code>ping &lt;容器名&gt;</code> 的方式来进行容器间的通信。而用户定义的网络则解决了这个问题。</p><p>创建网络：<code>docker network create &lt;网络名&gt;</code></p><p>连接网络：</p><ul><li>创建容器时连接到指定网络 <code>docker run --name --network &lt;指定连接的网络名&gt;</code></li><li>运行中容器连接到指定网络 <code>docker network connect &lt;指定连接的网络名&gt; &lt;容器名&gt;</code></li></ul><p>断开网络连接：<code>docker network disconnect &lt;网络名&gt; &lt;容器名&gt;</code></p><p>查看网络信息：<code>docker network inspect &lt;网络名&gt;</code></p><p>从用法上来看，网络和容器的使用方法类似，只是使用 <code>docker network</code> 作为命令的前缀，例如 <code>docker network ls</code> 等等。</p><h1 id="Docker-Compose-服务编排"><a href="#Docker-Compose-服务编排" class="headerlink" title="Docker Compose 服务编排"></a>Docker Compose 服务编排</h1><h2 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h2><p>微服务架构中一般包含多个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启动和停止，维护的工作量会非常大。而服务编排就是按照一定的业务规则批量管理容器，而 Docker Compose 就是进行服务编排的工具之一。Docker Compose 的使用步骤：</p><ol><li>编写 Dockerfile 文件</li><li>使用 docker-compose.yml 文件定义组成应用程序的各个微服务</li><li>运行 docker-compose up 来启动应用程序</li></ol><h2 id="Docker-Compose-的使用"><a href="#Docker-Compose-的使用" class="headerlink" title="Docker Compose 的使用"></a>Docker Compose 的使用</h2><p>docker compose 默认被安装，可以通过 <code>docker compose version</code> 查看</p><p>使用 docker compose 来编排 nginx + springboot 项目，其中 nginx 能够反向代理多个 springboot 项目生成的容器</p><ol><li><p>编写 docker-compose.yml 文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 短线"-"在yaml文件中的含义表示是数组</span>      <span class="token comment" spellcheck="true"># 这里的80:80是没有空格的, 因为代表的是一个属性值&lt;host_port>:&lt;docker_port></span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>    <span class="token comment" spellcheck="true"># 需要连接的其它容器, 与其进行通信</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> app1      <span class="token punctuation">-</span> app2    <span class="token comment" spellcheck="true"># 数据卷挂载</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#  nginx的配置文件名叫啥都可以, 以".conf"结尾即可, 推荐为nginx.conf, 在挂载目录中创建即可</span>      <span class="token punctuation">-</span> ./nginx/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d  <span class="token comment" spellcheck="true"># springboot-hello是springboot项目生成的一个docker镜像</span>  <span class="token comment" spellcheck="true"># app1 是生成的容器</span>  <span class="token key atrule">app1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>hello    <span class="token key atrule">expose</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080"</span>  <span class="token key atrule">app2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>hello    <span class="token key atrule">expose</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8081"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>编写 nginx 的配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server</span> <span class="token attr-value">{</span><span class="token attr-name">    listen</span> <span class="token attr-value">80;</span><span class="token attr-name">    access_log</span> <span class="token attr-value">off;</span><span class="token attr-name">    location</span> <span class="token attr-value">/ {</span><span class="token comment" spellcheck="true">        # 配置反向代理</span><span class="token attr-name">        proxy_pass</span> <span class="token attr-value">http://app1:8080 http://app2:8081;</span>    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>docker compose up</code>来执行 docker-compose.yml 文件中信息</p></li></ol><blockquote><p>  分布式系统中的容器通信该如何处理，至今未正面面对这个问题。K8S？</p></blockquote><h1 id="通过-Docker-安装其他软件"><a href="#通过-Docker-安装其他软件" class="headerlink" title="通过 Docker 安装其他软件"></a>通过 Docker 安装其他软件</h1><h2 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h2><ol><li><p>拉取 MySQL 的镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker pull mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322123351406.png" alt="docker 拉取 mysql 镜像"></p></li><li><p>查看本地镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322123428214.png" alt="docker 查看本地镜像"></p></li><li><p>运行容器</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \--name mysql-docker \-p 3306:3306 \-e MYSQL_ROOT_PASSWORD=root \-v /opt/module/data/mysql/data:/var/lib/mysql \-v /opt/module/data/mysql/log:/var/log/mysql \-v /opt/module/data/mysql/lib:/var/lib/mysql-files \-v /opt/module/data/mysql/conf:/etc/mysql \-d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数介绍</th><th></th></tr></thead><tbody><tr><td><code>--name mysql-docker</code></td><td>指定创建的容器名为 <strong>mysql-docker</strong></td></tr><tr><td><code>-p 3306:3306</code></td><td>前一个 3306 是 Linux 宿主机上的端口，后一个 3306 是 mysql-docker 容器中的端口</td></tr><tr><td><code>-e MYSQL_ROOT_PASSWORD=root</code></td><td>设置环境变量 MySQL 的 root 用户的密码为 <strong>root</strong></td></tr><tr><td><code>-v /opt/module/data/mysql/data:/var/lib/mysql</code></td><td>指定 MySQL 的数据挂载目录</td></tr><tr><td><code>-v /opt/module/data/mysql/log:/var/log/mysql</code></td><td></td></tr><tr><td><code>-v /opt/module/data/mysql/lib/mysql-files:/var/lib/mysql-files</code></td><td></td></tr><tr><td><code>-v /opt/module/data/mysql/conf:/etc/mysql</code></td><td></td></tr><tr><td><code>-d mysql:latest</code></td><td>指定使用 mysql:latest 这个镜像来启动容器</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><code>-p &lt;宿主机的port&gt;:&lt;容器的port&gt;</code>：实现容器端口到宿主机端口的映射。外部机器不可以与宿主机的容器直接通信, 宿主机可以与容器直接通信, 外部机可以与宿主机直接通信。通过端口映射,例如宿主机的3307对应着访问容器的3306,当外部机器需要访问容器的3306端口时,访问宿主机的3307端口即可</p></li><li><p>使用 <code>docker ps</code> 来查看正在运行中的容器（取名为 mysql-docker）</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322125932459.png" alt="查看 mysql-docker 是否成功启动"></p></li><li><p>在宿主机上修改 MySQL 的配置 <code>vim /opt/module/data/mysql/conf/my.cnf</code></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 防止中文乱码</span>[client]<span class="token attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span>[mysql]<span class="token attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span>[mysqld]<span class="token attr-name">init_connect</span><span class="token punctuation">=</span><span class="token attr-value">'SET collation_connection = utf8_unicode_ci'</span><span class="token attr-name">init_connect</span><span class="token punctuation">=</span><span class="token attr-value">'SET NAMES utf8'</span><span class="token attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span><span class="token attr-name">collation-server</span><span class="token punctuation">=</span><span class="token attr-value">utf8_unicode_ci</span>skip-character-set-client-handshakeskip-name-resolve<span class="token comment" spellcheck="true">#################################### 集群配置 ###################################</span><span class="token comment" spellcheck="true"># mysql集群中的id, 集群下需要唯一</span><span class="token attr-name">server_id</span><span class="token punctuation">=</span><span class="token attr-value">101</span><span class="token comment" spellcheck="true"># 指定不需要同步的数据库名称</span><span class="token attr-name">binlog-ignore-db</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token comment" spellcheck="true"># 开启二进制日志功能</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">mall-mysql-bin</span><span class="token comment" spellcheck="true"># 设置二进制日志使用内存大小（事务）</span><span class="token attr-name">binlog_cache_size</span><span class="token punctuation">=</span><span class="token attr-value">1M</span><span class="token comment" spellcheck="true"># 设置mysql集群使用的binlog日志的格式（mixed，statement，row）</span><span class="token attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token attr-value">mixed</span><span class="token attr-name">expire_logs_days</span><span class="token punctuation">=</span><span class="token attr-value">7</span><span class="token attr-name">slave_skip_errors</span><span class="token punctuation">=</span><span class="token attr-value">1062</span><span class="token comment" spellcheck="true">############################ MySQL从服务器需要额外配置下面参数 ##########################</span><span class="token comment" spellcheck="true"># relay_log 配置中继日志</span><span class="token attr-name">relay_log</span><span class="token punctuation">=</span><span class="token attr-value">mall-mysql-relay-bin</span><span class="token comment" spellcheck="true"># log_slave_updates表示slave将复制事件写入自己的binlog日志中</span><span class="token attr-name">log_slave_updates</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true"># slave设置为只读</span><span class="token attr-name">read_only</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启 mysql-docker 来应用更新后的配置</p><pre class="line-numbers language-sh"><code class="language-sh">docker restart mysql-docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 <code>docker exec -it mysql-docker</code> 进入到 mysql-docker 容器中，成功进入代表部署成功</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322131754718.png" alt="进入正在运行中的docker容器" style="zoom:150%;"></li><li><p>使用  <code>whereis mysql</code> 命令来查看 MySQL 的安装位置</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322132412368.png" alt="查看 MySQL 的安装位置" style="zoom:150%;"></li><li><p>使用 <code>cat /etc/mysql/my.cnf</code> 来查看在宿主机上修改的配置文件</p></li><li><p>使用 <code>mysql -uroot -proot</code> 来进入 MySQL，在其中创建一个数据库，方便后面的测试连接</p></li><li><p>在 IDEA 中进行外部的连接测试</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322134352404.png" alt="通过 IDEA 进行外部连接测试" style="zoom: 200%;"></li><li><p>（主从复制）MySQL 主服务器中开启主从复制</p><p>这部分感觉可以不用进行配置？直接把root用户给SLAVE服务器？</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'slave'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">';GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '</span>slave<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>（主从复制）在主服务器上获取一些用于主从复制的信息</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> MASTER <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>（主从复制）在从服务器中指定主服务器</p><pre class="line-numbers language-sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">'&lt;mysql主服务器的ip地址>'</span><span class="token punctuation">,</span>MASTER_USER<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_PORT<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">'mall-mysql-bin.000001'</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span><span class="token number">617</span><span class="token punctuation">,</span>MASTER_CONNECT_RETRY<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的信息需要根据 MySQL主服务器上情况进行修改</p></li><li><p>（主从复制）在 MySQL 从服务器中开启主从复制</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">START</span> SLAVE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="16"><li><p>（主从复制）主从复制配置成功的测试</p><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h2><ol><li><p>创建并启动 Redis</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \-p 6379:6379 \--name redis-docker \-v /opt/module/data/redis/data:/data \-v /opt/module/data/redis/conf/:/etc/redis/conf \-d redis \redis-server /etc/redis/conf/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  最后一行的 redis-server /etc/redis/redis.conf 实际上是 redis 启动服务端的命令，难道说 docker run 可以直接执行 sh 命令吗？那是否可以写上 mysql -uroot -proot 来直接登录 MySQL 呢？</p><p>  redis-server /etc/redis/conf/redis.conf 是指定redis-docker容器启动时使用的配置文件，由于上面没有创建 redis.conf 文件，所以实际上并没有成功启动。可以通过 <code>docker logs -f redis-docker</code> 查看日志，能够看到 <strong>Fatal error, can’t open config file ‘/etc/redis/conf/redis.conf’: No such file or directory</strong> 这样的错误。</p></blockquote></li><li><p>在宿主机的挂载目录 <code>/opt/module/data/redis/conf</code> 中创建 redis.conf 文件，并设置允许远程访问 Redis</p><p>挂载目录实际上就是容器内的目录，相当于创建了一个快捷方式（软链接），对挂载目录中的操作实际上是对容器内部的目录进行操作。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">bind</span> <span class="token attr-value">0.0.0.0</span><span class="token attr-name">protected-mode</span> <span class="token attr-value">no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用 <code>docker start redis-docker</code> 来真正启动Redis容器</p></li><li><p>使用 redis-docker 容器来执行连接 Redis</p><pre class="line-numbers language-sh"><code class="language-sh">docker exec -it redis-docker redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  这里标明不需要进入到容器中再去执行 redis-cli 命令，做了一点点简化。</p></blockquote></li></ol><h2 id="Docker-安装-Redis-集群"><a href="#Docker-安装-Redis-集群" class="headerlink" title="Docker 安装 Redis 集群"></a>Docker 安装 Redis 集群</h2><p>配置一个 3 主 3 从的 Redis 集群</p><ol><li><p>创建一个用户自定义网络，不妨命名为 <code>redis-network</code></p><pre class="line-numbers language-sh"><code class="language-sh">docker network create redis-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下面的配置文件复制 6 份，启动 6 个 Redis 容器<br>（redis-master-6380、redis-master-6381、redis-master-6382、redis-slave-6383、redis-slave-6384、redis-slave-6385）</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \-p 6380:6379 \--name redis-master-6380 \--network redis-network--privileged=true \-v /opt/module/data/redis/data:/data \-v /opt/module/data/redis/conf/:/etc/redis/conf \--cluster-enabled yes \--appendonly yes \-d redis \redis-server /etc/redis/conf/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将多个 Redis 节点合并成一个 Redis 集群（不指定 master 和 slave）</p><pre class="line-numbers language-sh"><code class="language-sh">redis-cli --cluster create \<ip1>:<port1> \<ip2>:<port2> \<ip3>:<port3> \<ip4>:<port4> \<ip5>:<port5> \<ip6>:<port6> \--cluster-replicas 1 \--cluster-yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为 master 节点添加 slave 节点</p><p>其中 <code>&lt;node-id&gt;</code> 通过 <code>redis-cli cluster nodes</code> 来获取</p><pre class="line-numbers language-sh"><code class="language-sh">redis-cli \-h <ip1> -p <port1> \cluster replicate <node-id><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Docker-安装-Nginx"><a href="#Docker-安装-Nginx" class="headerlink" title="Docker 安装 Nginx"></a>Docker 安装 Nginx</h2><ol><li><p>创建并启动 Nginx</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \-p 8000:80 \--name nginx-docker \-v /opt/module/data/nginx/conf:/etc/nginx/conf \-v /opt/module/data/nginx/log:/var/log/nginx \-d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ol><h1 id="安装过程中的错误记录"><a href="#安装过程中的错误记录" class="headerlink" title="安装过程中的错误记录"></a>安装过程中的错误记录</h1><h2 id="使用-docker-ps-查看正在运行的容器"><a href="#使用-docker-ps-查看正在运行的容器" class="headerlink" title="使用 docker ps 查看正在运行的容器"></a>使用 docker ps 查看正在运行的容器</h2><p><strong>使用 <code>docker logs mysql-docker</code> 来查看容器报错日志</strong></p><p>可能存在的问题：</p><ul><li>如果这里并没有 mysql 容器在运行，那么有可能是因为端口冲突，或者一些其它别的问题？（换一台主机测试成功）</li><li>可能一开始能够通过 <code>docker ps</code> 查看到运行中的 mysql-docker，但是隔一段时间后发现 mysql-docker 停止了，这也说明 mysql-docker 并没有成功运行。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAMQP的使用</title>
      <link href="/2023/03/21/spring-springamqp-de-shi-yong/"/>
      <url>/2023/03/21/spring-springamqp-de-shi-yong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的使用</title>
      <link href="/2023/03/21/rabbitmq-de-shi-yong/"/>
      <url>/2023/03/21/rabbitmq-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="同步调用方式和异步调用方式"><a href="#同步调用方式和异步调用方式" class="headerlink" title="同步调用方式和异步调用方式"></a>同步调用方式和异步调用方式</h2><p>同步调用</p><p>微服务间基于 Feign 的调用就属于同步调用方式</p><p>缺点：</p><ul><li>耦合度高，每次加入新的需求都要修改原来的代码</li><li>性能下降，调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用的时间之和</li><li>资源浪费，调用链中的每个服务在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源</li><li>级联失败，如果服务提供者出现问题，所有调用方都会跟着出问题，如同多米诺骨牌一样，迅速导致整个微服务集群故障</li></ul><p>异步调用</p><p>异步调用常见实现就是事件驱动模式</p><p>优点：</p><ul><li>服务解耦，异步方式下，服务只发布事件，而不调用其它服务。如果有新的业务需求出现，只需要去订阅该事件主题。</li><li>性能提高，吞吐量提升</li><li>服务没有强依赖关系</li><li>流量消峰</li></ul><p>缺点：</p><ul><li>依赖于 Broker(消息队列) 的可靠性、安全性、吞吐能力</li><li>架构复杂，业务没有明显的流程线，不方便问题排查和追踪管理</li></ul><h2 id="RabbitMQ-的安装部署"><a href="#RabbitMQ-的安装部署" class="headerlink" title="RabbitMQ 的安装部署"></a>RabbitMQ 的安装部署</h2><ol><li><p>启动docker容器 <code>systemctl start docker</code></p></li><li><p>下载rabbitmq镜像 <code>docker pull rabbitmq:3-management</code></p></li><li><p>安装mq并配置用户信息</p><pre class="line-numbers language-sh"><code class="language-sh"> docker run \     -e RABBITMQ_DEFAULT_USER=root \     -e RABBITMQ_DEFAULT_PASS=root \     --name mq \     --hostname hadoop001 \     -p 15672:15672 \     -p 5672:5672 \     -d \     rabbitmq:3-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h1><ol><li><p>引入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置连接信息</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">hadoop001</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="HelloWorld-案例"><a href="#HelloWorld-案例" class="headerlink" title="HelloWorld 案例"></a>HelloWorld 案例</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321174138325.png" alt="简单队列的使用"></p><h3 id="消息发送者"><a href="#消息发送者" class="headerlink" title="消息发送者"></a>消息发送者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringAmqpApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publisherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String queueName <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"Hello, Spring AMQP!"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param message 发送的消息类型是字符串, 则接收的消息类型也是字符串     */</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer receive message = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工作队列-Work-Queues"><a href="#工作队列-Work-Queues" class="headerlink" title="工作队列 Work Queues"></a>工作队列 Work Queues</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321174212647.png" alt="工作队列的使用"></p><blockquote><p>  进行案例演示测试时，先启动消费者（即SpringApplication），再启动消息发送者（SpringBootTest）。因为 SpringBootTest 框架也会扫描 @Component，所在在调用测试方法发送消息时，就已经有一部分消息被消费了。但是由于 @Test 方法的生命周期结束得更早，因此往往只会输出几条消息。产生如下图所示的场景：</p><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321181646064.png" alt="SpringBoot Test 框架中向 RbbitMQ 发送消息"></p></blockquote><h3 id="消息发送者-1"><a href="#消息发送者-1" class="headerlink" title="消息发送者"></a>消息发送者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringAmqpApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">workQueuePublisherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String queueName <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : Hello, Spring AMQP "</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">(</span>message <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消息消费者-1"><a href="#消息消费者-1" class="headerlink" title="消息消费者"></a>消息消费者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkQueueConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenByA</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumerA : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenByB</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumerB : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布-订阅模式-Publish-Subscribe"><a href="#发布-订阅模式-Publish-Subscribe" class="headerlink" title="发布-订阅模式 Publish-Subscribe"></a>发布-订阅模式 Publish-Subscribe</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321182454521.png" alt="发布-订阅模式"></p><p><strong>发布-订阅模式</strong>通过交换机来保存数据信息，发送到所有绑定的队列中，从而避免消息只能被一个消费者消费。</p><h3 id="Fanout-Exchange-交换机"><a href="#Fanout-Exchange-交换机" class="headerlink" title="Fanout Exchange 交换机"></a>Fanout Exchange 交换机</h3><blockquote><p>  发送到与 Fanout Exchange 交换机绑定的所有队列</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP自然语言处理学习笔记</title>
      <link href="/2023/03/20/nlp-zi-ran-yu-yan-chu-li-xue-xi-bi-ji/"/>
      <url>/2023/03/20/nlp-zi-ran-yu-yan-chu-li-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h1><p>上下文无关：看一个词，输出一个词的向量。相同词的向量输出是相同的，不能体现“养只狗”和“单身狗”中“狗”的区别</p><p>Contextualized Word Embedding</p><p>上下文相关：看一个句子，输出每一个词的向量</p>]]></content>
      
      
      
        <tags>
            
            <tag> NLP </tag>
            
            <tag> 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP概述</title>
      <link href="/2023/03/20/lun-wen-nlp-gai-shu/"/>
      <url>/2023/03/20/lun-wen-nlp-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="NLP-概述"><a href="#NLP-概述" class="headerlink" title="NLP 概述"></a>NLP 概述</h1><p>自然语言处理系统常常被称为“流水线”（pipeline），这是因为该系统往往包括多个处理环节，其中自然语言从“流水线”的一端输入，处理后的结果从另一端输出。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>语音识别</td><td>语言到文本</td></tr><tr><td>语音生成</td><td>文本到语音</td></tr><tr><td></td><td></td></tr></tbody></table><p>一旦从自然语言中提取出结构化的数值型数据，即向量化表示之后，就可以利用各种数学工具和机器学习工具。我们可以使用类似于将三维物体投影到二维计算机屏幕的线性代数的方法，让计算机能够解释和存储语句的“含义”，而不仅仅是对其中的词或字符进行计数。语义分析和统计学一起可以有助于解决自然语言的歧义性，歧义性是指词或短语通常具有多重含义和解释，例如：看病的是张三。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230320154809730.png" alt="image-20230320154809730"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230320170708641.png" alt="image-20230320170708641"></p><h1 id="构建自己的词汇表-分词"><a href="#构建自己的词汇表-分词" class="headerlink" title="构建自己的词汇表(分词)"></a>构建自己的词汇表(分词)</h1><blockquote><ul><li>将文本切分成词或词条(n-gram)</li><li>处理非标准的标点符号和表情符号(例如社交媒体帖子上的表情符号)</li><li>利用词干还原和词形归并方法来压缩词汇表</li><li>构建语句的向量表示</li><li>基于手工标注的词条得分构建情感分析工具</li></ul></blockquote><p>第一件事是需要<strong>一个强大的词汇表</strong>，使用的技术只涉及词、标点符号和数值，但是这些技术可以推广到任何其他有意义的单元，例如ASCII表情符号、Unicode表情符号和数学符号等。</p><p>本章将给出将输入串切分成词的直接算法，同时我们还可以提取出连续 2 个、3 个、4 个甚至 5 个词条组成的词对、三元组、四元组和五元组。这些语言单位称为 <em>n</em>-gram（<em>n</em> 元）。连续两个词称为 2-gram（bigram），连续 3 个词称为 3-gram（trigram），连续 4 个词称为 4-gram，其余以此类推。</p><p><strong>在自然语言处理中，从文本中产生其数值向量实际是一个特别“有损”的特征提取过程。</strong>尽管如此，词袋（bag-of-words，BOW）向量从文本中保留了足够的信息内容来产生有用和有趣的机器学习模型。</p><p>一旦从文档中确定好要加入词汇表中的词条之后，需要使用正则表达式工具来将意义相似的词合并在一起，这个过程称为<strong>词干还原（stemming）</strong>。</p><h2 id="词干还原"><a href="#词干还原" class="headerlink" title="词干还原"></a>词干还原</h2><p>所谓词干还原，指的是将某个词的不同变化形式统统“打包”到同一个“桶”或者类别中。</p><p>要将“ending”中的动词后缀“ing”去掉，那么就需要有个称为“end”的词干来表示上面两个词。同样，我们将词“running”还原成“run”，于是这两个词可以同等对待。当然，上述处理过程实际上有些棘手，因为“running”中要去掉的不仅仅是“ing”还有一个额外的字母“n”。还有，对于“sing”来说，我们期望不要去掉后面的“ing”而保留整个词，否则，最后就会得到单个字母“s”。</p><p>或者，大家再设想一下如何区分名词复数后面加的“s”（如 words）和词本身（如 bus 和 lens）后面就有的“s”。词当中一个个独立的字母或者词的一部分是否为整个词的意义提供了信息？这些字母是否可能产生误导？这两个问题的答案都是 yes。</p><h2 id="利用分词器构建词汇表"><a href="#利用分词器构建词汇表" class="headerlink" title="利用分词器构建词汇表"></a>利用分词器构建词汇表</h2><p>在 NLP 中，<strong>分词（tokenization，也称切词）</strong>是一种特殊的文档切分（segmentation）过程。</p><p>文档切分可以是将文档分成段落，将段落分成句子，将句子分成短语，或将短语分成词条（通常是词）和标点符号。</p><p>于编译计算机语言的<strong>分词器</strong>通常称为扫描器（scanner）或者词法分析器（lexer）。某种计算机语言的词汇表（所有有效的记号合）构成所谓的<strong>词库（lexicon）</strong>，如果分词器合并到计算机语言编译器的分析器（parser）中，则该分析器常常称为无扫描器分析器（scannerless parser）。</p><p>而<strong>记号（token）</strong>则是用于分析计算机语言的上下文无关语法（context-free grammar，CFG）的最终输出结果，由于它们终结了 CFG 中从根节点到叶子节点的一条路径，因此它们也称为<strong>终结符（terminal）</strong>。</p><table><thead><tr><th>NLP</th><th>编译器</th></tr></thead><tbody><tr><td>分词器</td><td>扫描器、词法分析器</td></tr><tr><td>词汇表</td><td>词库</td></tr><tr><td>分析器</td><td>编译器</td></tr><tr><td>词条、词项、词、n-gram</td><td>标识符、终结符</td></tr></tbody></table><p>分词是 NLP 流水线的第一步，分词器将自然语言文本这种非结构化数据切分成多个信息块，每个块都可看成可计数的离散元素。这些元素在文档中的出现频率可以直接用于该文档的向量表示。</p><p>上面的词向量表示及文档的表格化表示有一个优点，就是任何信息都没有丢失。只要记录了哪一列代表哪个词，就可以基于整张表格中的独热向量重构出原始文档。即使分词器在生成我们认为有用的词条时只有 90%的精确率，上述重构过程的精确率也是 100%。因此，和上面一样的独热向量常常用于神经网络、序列到序列语言模型及生成式语言模型中。对任何需要保留原始文本所有含义的模型或 NLP 流水线来说，独热向量模式提供了一个好的选择。</p><p>即使将表格中的每个元素用单个位来表示，这个表格也超过了百万位乘以百万位的规模。在单个位表示一个元素的情况下，大概需要 20 TB 来存储上述小小书架上的书籍。即使对于长达几页的文档，<strong>词袋向量</strong>也可以用来概括文档的本质内容。</p><p>词袋向量：一个hashmap</p><h2 id="计算向量之间的相似度"><a href="#计算向量之间的相似度" class="headerlink" title="计算向量之间的相似度"></a>计算向量之间的相似度</h2><p>点积（内积）</p><h1 id="词的重要度"><a href="#词的重要度" class="headerlink" title="词的重要度"></a>词的重要度</h1><p>将词表示为连续空间后，可以用更高级的数学方法对这些表示进行计算。我们的目标是寻找这些词的数值表示，这些表示在某种程度上刻画了次所代表的信息内容或重要度。</p><blockquote><ul><li>词袋</li><li>n-gram</li><li>TF-IDF</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-JVM概述和监控工具的使用</title>
      <link href="/2023/03/20/jvm-01-jvm-gai-shu-he-jian-kong-gong-ju-de-shi-yong/"/>
      <url>/2023/03/20/jvm-01-jvm-gai-shu-he-jian-kong-gong-ju-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-JVM"><a href="#什么是-JVM" class="headerlink" title="什么是 JVM"></a>什么是 JVM</h1><p>JVM 是 Java 二进制字节码（.class）的运行环境（JRE）的一部分</p><h2 id="JVM-的优点"><a href="#JVM-的优点" class="headerlink" title="JVM 的优点"></a>JVM 的优点</h2><ul><li>Java 跨平台的基础，屏蔽底层操作系统的差异</li><li>自动的垃圾回收机制 GC</li><li>数组下标越界检查（不会像 C 语言一样覆盖越界空间）</li></ul><h2 id="JVM、JRE、JDK-的关系"><a href="#JVM、JRE、JDK-的关系" class="headerlink" title="JVM、JRE、JDK 的关系"></a>JVM、JRE、JDK 的关系</h2><ul><li>JRE是Java Runtime Environment(Java运行时环境)的简称, 包括JVM虚拟机和Java基础类库, 为编译好的Java程序(.class字节码文件)提供运行环境. </li><li>JDK是Java Development Kit(Java开发工具包)的简称, 不仅包括JRE, 而且包括编译Java源文件(.java)所需的编译器和各种调试分析的工具.</li><li>JRE提供给想运行Java程序的用户使用; JDK提供给Java开发者使用</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230606163851306.png" alt="image-20230606163851306"></p><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230606164508042.png" alt="image-20230606164508042"></p><ol><li>类通过 ClassLoader（类加载器）加载到内存中</li><li>类模板（元数据 Class）存放在方法区 Method Area 中</li><li>类对象存放在堆 Heap 中</li><li>当对象调用方法时，需要使用到虚拟机栈（JVM Stacks）、程序计数器（PC Register）、本地方法栈（Native Method Stacks）</li><li>代码的逐行执行需要使用到解释器（解释器：将字节码指令翻译成0101的机器码供CPU执行）</li><li>对于热点代码会使用即时编译器（JIT）进行优化</li><li>垃圾回收GC会自动回收一些不被引用的对象</li><li>本地方法接口用于实现一些 Java 代码不方便实现的功能，涉及操作系统底层，使用 C 语言进行实现</li></ol><h2 id="学习顺序"><a href="#学习顺序" class="headerlink" title="学习顺序"></a>学习顺序</h2><ol><li>JVM 内存结构：堆、栈、方法区等</li><li>GC 垃圾回收机制</li><li>前端编译器的优化（.java到.class）</li><li>字节码文件、类加载器</li><li>运行时的 JIT 优化</li></ol><h1 id="JVM-监控工具的使用"><a href="#JVM-监控工具的使用" class="headerlink" title="JVM 监控工具的使用"></a>JVM 监控工具的使用</h1><p>使用 <code>System.in.read()</code> 来阻塞应用程序</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS队列同步器</title>
      <link href="/2023/03/20/juc-10-aqs-dui-lie-tong-bu-qi/"/>
      <url>/2023/03/20/juc-10-aqs-dui-lie-tong-bu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node 节点"></a>Node 节点</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// static final 修饰的常量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Node EXCLUSIVE <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待状waitStatus的取值</span>    <span class="token comment" spellcheck="true">// static final int INITIAL = 0;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 节点在等待队列中, 等待其它线程调用condition.signal().</span>    <span class="token comment" spellcheck="true">// 当其它线程调用condition.signal()之后, 该节点会从等待队列转移到同步队列中</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待状态</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> Node prev<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> Node next<span class="token punctuation">;</span>    <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span>    Node nextWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// head和tail对应</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Node tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加锁的数量     * 对一个线程多次加可重入锁时, 该值会增加     */</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> spinForTimeoutThreshold <span class="token operator">=</span> 1000L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Unsafe对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> stateOffset<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> headOffset<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> tailOffset<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> waitStatusOffset<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> nextOffset<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nextWaiter <span class="token operator">==</span> SHARED<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> Node <span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NullPointerException <span class="token punctuation">{</span>        Node p <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Used by SHARED</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Used by addWaiter</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> mode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Used by Condition</span>    <span class="token function">Node</span><span class="token punctuation">(</span>Thread thread<span class="token punctuation">,</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> waitStatus<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Condition-对象"><a href="#Condition-对象" class="headerlink" title="Condition 对象"></a>Condition 对象</h1><h2 id="Condition-类"><a href="#Condition-类" class="headerlink" title="Condition 类"></a>Condition 类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionObject</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 等待队列的第一个节点</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node firstWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待队列(condition queue)的最后一个结点</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> Node lastWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Mode meaning to reinterrupt on exit from wait */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> REINTERRUPT <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Mode meaning to throw InterruptedException on exit from wait */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> THROW_IE    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1173984872572414699L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 唯一构造器, 默认情况下firstWaiter和lastWaiter都为null</span>    <span class="token keyword">public</span> <span class="token function">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="addConditionWaiter-方法（添加到等待队列）"><a href="#addConditionWaiter-方法（添加到等待队列）" class="headerlink" title="addConditionWaiter() 方法（添加到等待队列）"></a>addConditionWaiter() 方法（添加到等待队列）</h2><p>功能：将当前线程封装成Node节点添加到等待队列（condition queue）的末尾</p><p>执行流程：</p><ul><li><p>首次调用 await() 方法时，等待队列中 firstWaiter 和 lastWaiter 均为 null。将当前线程封装成 Node 后，为 firstWaiter 和 lastWaiter 赋值</p></li><li><p>非首次调用 await() 方法时，TODO</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Node <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 首次调用时, lastWaiter为null</span>    <span class="token comment" spellcheck="true">// 2. 非首次调用时, 找到等待队列中的最后一个Node节点</span>    Node t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这段的含义是什么?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 为当前调用await()方法的线程创建Node节点</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span>        firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">else</span>        t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="release-int-arg-方法（释放锁）"><a href="#release-int-arg-方法（释放锁）" class="headerlink" title="release(int arg) 方法（释放锁）"></a>release(int arg) 方法（释放锁）</h2><p>功能：释放指定arg数量的可重入锁</p><p>执行流程：</p><ol><li>调用tryRelease()方法，释放指定数量的锁</li><li>首次调用时，会释放掉全部的锁，此时tryRelease返回true。</li><li>非首次调用时，</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// head并不为null</span>        Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当前线程即将park()阻塞, 调用unpark()唤醒后续节点</span>            <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// AQS中并没有真正意义上地实现tryRelease(), 而是交给子类</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ReentrantLock中对tryRelease()的实现</span><span class="token comment" spellcheck="true">// tryRelease()的返回值表示当前线程是否释放掉锁, true表示释放掉锁, false表示还没有完全释放掉锁</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对Node节点的state值减去指定的数: 释放指定数量的锁</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果state值为0, 那么</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> free<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         * If status is negative (i.e., possibly needing signal) try         * to clear in anticipation of signalling.  It is OK if this         * fails or if status is changed by waiting thread.         */</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*         * Thread to unpark is held in successor, which is normally         * just the next node.  But if cancelled or apparently null,         * traverse backwards from tail to find the actual         * non-cancelled successor.         */</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fullyRelease-Node-node-方法"><a href="#fullyRelease-Node-node-方法" class="headerlink" title="fullyRelease(Node node) 方法"></a>fullyRelease(Node node) 方法</h2><p>执行流程：</p><ol><li>调用 getState() 方法，获取 node 节点对应线程上可重入锁的次数（state值）</li><li>调用 release(savedState) 一次性全部释放掉添加的可重入锁<ul><li>如果release()释放成功，返回释放掉的可重入锁的数量</li><li>如果release()释放失败，将当前线程的等待状态waitStatus设置为CANCELLED</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">release</span><span class="token punctuation">(</span>savedState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放成功, 将标志为设置为false, 避免finally中将node的waitStatus状态设置为取消</span>            failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> savedState<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            node<span class="token punctuation">.</span>waitStatus <span class="token operator">=</span> Node<span class="token punctuation">.</span>CANCELLED<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="await-方法"><a href="#await-方法" class="headerlink" title="await() 方法"></a>await() 方法</h2><p>执行流程：</p><ol><li><p>对被中断的线程调用await()方法，产生中断异常</p></li><li><p>调用addConditionWaiter()方法，将当前线程加入等待队列</p></li><li><p>调用fullyRelease(node)方法，释放当前线程添加的可重入锁（针对绑定该Condition对象的那把锁，<code>Condition condition = lock.newCondition()</code>）</p></li><li><p>调用 isOnSyncQueue(node) 方法，判断当前线程是否在<strong>同步队列</strong>中，对于首次调用的线程来说，必定返回false，因此进入while循环中，并调用LockSupport中的park方法将当前线程进行阻塞。</p><blockquote><p>  同步队列和等待队列似乎是同一个队列？只是通过Node节点的等待状态位waitStatus来进行区分吗？</p></blockquote></li><li></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对被中断的线程调用await()方法, 产生异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将当前线程添加到等待队列中</span>    Node node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 释放当前线程添加的全部的可重入锁</span>    <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用LockSupport中的park()方法阻塞当前线程, 具体来说, this是Condition对象</span>        LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// acquireQueued()中包含获取锁的操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>        interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// clean up if cancelled</span>        <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 状态为等待状态, 或者是等待队列的第一个, 说明不在同步队列中. 这是为什么?</span>    <span class="token comment" spellcheck="true">// 首次调用时, 二者均满足, 直接返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>waitStatus <span class="token operator">==</span> Node<span class="token punctuation">.</span>CONDITION <span class="token operator">||</span> node<span class="token punctuation">.</span>prev <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用signalAll之后, 等待队列中的节点的waitStatus值会变成(第1个是自动生成的head节点)-1,-1,...,-1,0(最后一个是0). 被唤醒的线程只会从第2个节点开始, 因此上面判断如果node.prev == null, 说明是添加到等待队列中. </span>    <span class="token comment" spellcheck="true">// 总结: 上面是添加到等待队列, 下面是从等待队列中唤醒</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If has successor, it must be on queue</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * node.prev can be non-null, but not yet on queue because         * the CAS to place it on queue can fail. So we have to         * traverse from tail to make sure it actually made it.  It         * will always be near the tail in calls to this method, and         * unless the CAS failed (which is unlikely), it will be         * there, so we hardly ever traverse much.         */</span>    <span class="token comment" spellcheck="true">// 从同步队列的尾部向头部开始遍历来唤醒</span>    <span class="token comment" spellcheck="true">// 这里不可能是添加到等待队列中, 因为waitStatus==-2时, 就会走第一个if判断条件返回</span>    <span class="token comment" spellcheck="true">// 在正常情况下, 这里的作用仅仅判断了tail这个在等待队列中, 且tail.next == null的需要被唤醒的节点, 因为tail节点无法从上面的if中返回</span>    <span class="token keyword">return</span> <span class="token function">findNodeFromTail</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 对于先进先出的公平锁, 那第一个被唤醒的线程对应第一个等待队列中的第一个node, 此时p = node.prev, 即p为head</span>            <span class="token comment" spellcheck="true">// TODO: 但是对于非公平锁, p == head便有可能不成立吗? 好像也成立?</span>            <span class="token comment" spellcheck="true">// tryAcquire(arg) 尝试获取锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// head节点向后移动</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取非公平锁</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// state值为0才可以被线程去获取, 否则说明已经有线程占用了锁</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过CAS操作来尝试添加锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果当前线程是锁的拥有者, 获取可重入锁</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 除了上诉两种情况外, 不可以获取锁</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="signalAll-方法"><a href="#signalAll-方法" class="headerlink" title="signalAll() 方法"></a>signalAll() 方法</h2><p>执行流程：</p><ol><li>判断调用signalAll()方法的线程是否是锁的拥有者（鉴权）</li><li>调用doSignalAll()方法唤醒等待队列中的线程<ol><li>doSignalAll() 方法会清空等待队列，同时将链表中的节点一个个拆散</li><li>对等待队列中的每一个线程调用transferForSignal()方法<ol><li>使用CAS操作，将线程的等待状态位由-2（CONDITION)设置为0。如果没有修改成功，说明signal()操作取消</li></ol></li></ol></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断调用signalAll的线程是否持有锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node first <span class="token operator">=</span> firstWaiter<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span>        <span class="token function">doSignalAll</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSignalAll</span><span class="token punctuation">(</span>Node first<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 等待队列靠firstWaiter和lastWaiter这两个指针, 这里相当于把等待队列清空</span>    lastWaiter <span class="token operator">=</span> firstWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待队列从头到尾, 通过nextWaiter指针, 并不是next指针, 依次调用transferForSignal()方法</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        Node next <span class="token operator">=</span> first<span class="token punctuation">.</span>nextWaiter<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">transferForSignal</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">transferForSignal</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*         * If cannot change waitStatus, the node has been cancelled.         */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>CONDITION<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*         * Splice onto queue and try to set waitStatus of predecessor to         * indicate that thread is (probably) waiting. If cancelled or         * attempt to set waitStatus fails, wake up to resync (in which         * case the waitStatus can be transiently and harmlessly wrong).         */</span>    <span class="token comment" spellcheck="true">// 返回node节点的前驱节点, 对于等待队列的链表头, 返回的是最初的那个tail, 目前tail已经指向最新入队的Node节点</span>    Node p <span class="token operator">=</span> <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> p<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果前驱节点的等待状态位大于0 或者 通过CAS操作无法将p对应的线程的ws设置为SIGNAL, 那么唤醒当前线程node.thread</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 唤醒node节点对应的线程</span>        <span class="token comment" spellcheck="true">// 目前来看, 这里应该就是关键, 对应await()方法产生的LockSupport.park()</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在等待队列中的Node的prev和next均为null, 在这里才为Node的prev和next进行设置</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置不仅建立t和node的关系, 还将tail设置为新插入的node</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断Condition对象是否由当前对象持有, 即拥有锁才能调用Condition中的signal()和await()方法</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// While we must in general read state before owner,</span>    <span class="token comment" spellcheck="true">// we don't need to do so to check if current thread is owner</span>    <span class="token keyword">return</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-JVM内存结构</title>
      <link href="/2023/03/20/jvm-02-jvm-nei-cun-jie-gou/"/>
      <url>/2023/03/20/jvm-02-jvm-nei-cun-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-内存结构"><a href="#JVM-内存结构" class="headerlink" title="JVM 内存结构"></a>JVM 内存结构</h1><h2 id="共享区域和私有区域"><a href="#共享区域和私有区域" class="headerlink" title="共享区域和私有区域"></a>共享区域和私有区域</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.svg" alt="线程共享和线程私有的JVM内存区域" style="zoom:25%;"><h2 id="相关虚拟机-VM-参数项"><a href="#相关虚拟机-VM-参数项" class="headerlink" title="相关虚拟机 VM 参数项"></a>相关虚拟机 VM 参数项</h2><h3 id="StringTable-相关配置项"><a href="#StringTable-相关配置项" class="headerlink" title="StringTable 相关配置项"></a>StringTable 相关配置项</h3><table><thead><tr><th>参数项</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:+PrintStringTableStatistics</code></td><td>输出 StringTable 的统计信息</td></tr><tr><td><code>-XX:StringTableSize=&lt;counts&gt;</code></td><td>设置 StringTable 中桶的数量<br>桶越多，哈希冲突的概率越低</td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>参数项</th><th>描述</th></tr></thead><tbody><tr><td><code>-client</code></td><td>选择client VM。</td></tr><tr><td><code>-server</code></td><td>选择server VM。</td></tr><tr><td><code>-version</code></td><td>输出JVM版本。</td></tr><tr><td><code>-showversion</code></td><td>输出JVM版本并继续执行。</td></tr><tr><td><code>-help</code></td><td>输出帮助信息并退出。</td></tr><tr><td><code>-X</code></td><td>显示非标准选项的帮助信息。</td></tr><tr><td><code>-Xms&lt;size&gt;</code></td><td>设置初始堆大小。</td></tr><tr><td><code>-Xmx&lt;size&gt;</code></td><td>设置最大堆大小。</td></tr><tr><td><code>-Xss&lt;size&gt;</code></td><td>设置线程栈大小。<br>在默认情况下， Linux 和 MacOS 的栈大小为 1MB，Windows 中会根据虚拟内存的大小来确定</td></tr><tr><td><code>-XX:+UseSerialGC</code></td><td>使用串行垃圾回收器。</td></tr><tr><td><code>-XX:+UseParallelGC</code></td><td>使用并行垃圾回收器。</td></tr><tr><td><code>-XX:+UseConcMarkSweepGC</code></td><td>使用并发标记-清除垃圾回收器。</td></tr><tr><td><code>-XX:+UseG1GC</code></td><td>使用G1垃圾回收器。</td></tr><tr><td><code>-XX:NewSize=&lt;size&gt;</code></td><td>设置新生代初始大小。</td></tr><tr><td><code>-XX:MaxNewSize=&lt;size&gt;</code></td><td>设置新生代最大大小。</td></tr><tr><td><code>-XX:SurvivorRatio=&lt;ratio&gt;</code></td><td>设置Eden区和Survivor区的比例。</td></tr><tr><td><code>-XX:MaxTenuringThreshold=&lt;threshold&gt;</code></td><td>设置对象进入老年代的阈值。</td></tr><tr><td><code>-XX:+TraceClassLoading</code></td><td>输出类加载信息。</td></tr><tr><td><code>-XX:+TraceClassUnloading</code></td><td>输出类卸载信息。</td></tr><tr><td><code>-XX:+DisableExplicitGC</code></td><td>禁止调用System.gc()。</td></tr><tr><td><code>-XX:+PrintCompilation</code></td><td>输出JIT编译器编译方法的信息。</td></tr><tr><td><code>-XX:+PrintInlining</code></td><td>输出方法内联信息。</td></tr><tr><td><code>-XX:CompileThreshold=&lt;threshold&gt;</code></td><td>设置方法触发JIT编译的调用次数阈值。</td></tr><tr><td><code>-XX:+PrintGC</code></td><td>输出 GC 信息</td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="程序计数器（PC）"><a href="#程序计数器（PC）" class="headerlink" title="程序计数器（PC）"></a>程序计数器（PC）</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>记录下一条 JVM 指令的执行地址。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>程序计数器是线程私有的，即每个线程都有自己的程序计数器。例如发生线程切换的时候，可以通过PC来实现类似<strong>断点续传</strong>的效果</li><li>不存在内存溢出问题</li></ul><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230606171555008.png" alt="程序计数器PC效果图" style="zoom: 50%;"><h1 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h1><p>栈：线程运行时需要的内存空间</p><h2 id="栈帧-Frame"><a href="#栈帧-Frame" class="headerlink" title="栈帧 Frame"></a>栈帧 Frame</h2><p>每个方法运行时需要的内存空间，一个方法对应一个栈帧。</p><p>方法中出现的局部变量（非成员变量和 static 静态变量）保存栈帧的局部变量表中。</p><p>活动栈帧即为线程当前正在执行的那个方法，也就是栈顶</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230606173739282.png" alt="通过debugger来查看栈和栈帧"></p><h2 id="问题讨论"><a href="#问题讨论" class="headerlink" title="问题讨论"></a>问题讨论</h2><p><strong>问：栈内存是否需要进行垃圾回收机制管理？</strong></p><p>答：不需要，栈所占用的内存本质上就是一个个栈帧所占用的内存。栈帧会随着方法的结束自动被弹出栈，这部分内存会被自动回收复用，不需要GC来进行管理。GC主要针对堆内存。</p><p><strong>问：栈内存分配越大越好吗？</strong></p><p>答：并不是，栈内存分配的太大可能会造成能够分配的线程数量减少。</p><p><strong>问：方法内的局部变量是否是线程安全的？</strong></p><p>答：需要判断该局部变量是否逃离了方法的作用范围。因为<font color="red"><strong>线程共享的数据才会产生线程安全问题</strong></font>，例如，成员变量和类变量。但是局部变量是栈帧中定义的，而栈又是线程私有的，因此局部变量是线程私有的。但是私有的局部变量如果是引用类型的变量，那么可能修改所指向的共享数据（引用对象）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 形参逃离方法作用域</span><span class="token keyword">public</span> String <span class="token function">append</span><span class="token punctuation">(</span>StringBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回值逃离方法作用域</span><span class="token keyword">public</span> StringBuilder <span class="token function">getBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> builder<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注：</strong></p><ol><li>成员变量、类变量都不会出现在栈帧的局部变量表 LocalVariableTable 中</li><li><strong>区分引用变量和引用对象</strong>，引用变量是局部变量，本身不会逃离方法作用域，但是引用对象可能会逃离方法的作用域</li></ol></blockquote><h2 id="栈内存溢出（Stack-Overflow）"><a href="#栈内存溢出（Stack-Overflow）" class="headerlink" title="栈内存溢出（Stack Overflow）"></a>栈内存溢出（Stack Overflow）</h2><h3 id="栈帧过多"><a href="#栈帧过多" class="headerlink" title="栈帧过多"></a>栈帧过多</h3><p>没有退出条件的递归调用</p><h3 id="循环引用问题"><a href="#循环引用问题" class="headerlink" title="循环引用问题"></a>循环引用问题</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonIgnore<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NonNull<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>RequiredArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>ToString<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">// 这是解决Lombok输出时候的循环依赖</span><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token string">"owner"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这是解决序列化时候的循环依赖</span>    <span class="token annotation punctuation">@JsonIgnore</span>    <span class="token keyword">private</span> Person owner<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOverflowV1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">setCat</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程运行诊断"><a href="#线程运行诊断" class="headerlink" title="线程运行诊断"></a>线程运行诊断</h2><h3 id="案例一：CPU占用过多"><a href="#案例一：CPU占用过多" class="headerlink" title="案例一：CPU占用过多"></a>案例一：CPU占用过多</h3><p>使用 nohup 来运行 Java 程序，nohup 的作用是让 Java 代码在后台运行</p><ol><li><p>先使用<code>top</code>来定位哪个进程对CPU的占用过高</p></li><li><p>再使用<code>ps H -eo pid,tid,%cpu | grep &lt;指定过滤的进程id&gt;</code>来定位哪个线程对CPU的占用过高</p></li><li><p>使用<code>jstack &lt;进程id&gt;</code></p><p>使用jstack输出的tid是十六进制表示, 而ps输出的是tid是十进制表示, 因此需要进行一定的转换.</p></li></ol><h3 id="案例二：迟迟没有输出程序运行结果-发生死锁"><a href="#案例二：迟迟没有输出程序运行结果-发生死锁" class="headerlink" title="案例二：迟迟没有输出程序运行结果(发生死锁)"></a>案例二：迟迟没有输出程序运行结果(发生死锁)</h3><p>同样使用 jstack 进行诊断，查看后面的输出信息</p><h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p><code>native</code>修饰的方法占用的内存空间存放在本地方法栈中</p><p>Java 代码有时候不能直接和操作系统底层交互，需要通过调用 C 或 C++ 实现的方法，例如 Object 类中的 <code>clone()</code> 方法</p><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><ul><li>通过 new 关键字创建的对象都会使用堆空间</li><li>堆中的变量是线程共享的，堆中对象都需要考虑线程安全问题</li><li>有垃圾回收机制</li></ul><h2 id="堆内存溢出-OutOfMemory"><a href="#堆内存溢出-OutOfMemory" class="headerlink" title="堆内存溢出(OutOfMemory)"></a>堆内存溢出(OutOfMemory)</h2><h2 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h2><ul><li>jps 工具: 查看当前系统中有哪些java进程</li><li>jmap 工具: 查看堆内存占用情况</li><li>jconsole 工具: 图形化界面, 多功能监测工具, 可以连续监测</li><li>jvisualvm</li></ul><h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区用来存放类的元数据 Class 对象，内存溢出问题没有演示出来。</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><h2 id="字符串常量池-StringTable"><a href="#字符串常量池-StringTable" class="headerlink" title="字符串常量池 StringTable"></a>字符串常量池 StringTable</h2><h2 id="StringTable性能调优"><a href="#StringTable性能调优" class="headerlink" title="StringTable性能调优"></a>StringTable性能调优</h2><ul><li>-XX:StringTableSize=桶的个数</li><li>将字符串对象存放到字符串常量池中</li></ul><h1 id="直接内存（Direct-Memory）"><a href="#直接内存（Direct-Memory）" class="headerlink" title="直接内存（Direct Memory）"></a>直接内存（Direct Memory）</h1><p>使用 <code>ByteBuffer.allocateDirect()</code> 来分配直接内存</p><p>文件数据从磁盘 -&gt; 系统内存 -&gt; JVM 虚拟机内存（堆栈） -&gt; 程序使用</p><p>JVM 不能够直接使用系统内存中的数据，因此存在需要将系统内存中的数据复制到 JVM 的内存中</p><p>直接内存则是 JVM 可以直接从中读取数据的系统内存，直接内存的分配、回收成本比较高，但是读写性能也高</p><p>磁盘-&gt;直接内存-&gt;程序使用</p><p>直接内存并不由 JVM 的垃圾回收机制处理，而是由 unsafe 对象的 freeMemory 方法来释放，只有当 unsafe 对象被 gc 处理，才会去释放由其创建的直接内存。</p><p>调用 gc 方法会回收掉 unsafe 对象，因此，调用 gc 方法也会回收直接内存，不会存在内存泄漏问题。</p><p>Unsafe 对象的 allocateMemory() 分配直接内存，freeMemory() 释放直接内存。直接内存由 JAVA 中的 Unsafe 对象进行管理。</p><p>Cleaner 虚引用对象关联的 ByteBuffer 被回收  =&gt;  Cleaner.clean()  =&gt; Unsafe 对象的 freeMemory</p><p>System.gc() 显式地执行一次 Full GC，使用 VM 参数 <code>-XX:DisableExplicitGC</code> 可以使得这行代码失效。但是这个参数也会造成直接内存不能够及时被回收，</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全的集合</title>
      <link href="/2023/03/16/juc-ji-he-de-xian-cheng-an-quan/"/>
      <url>/2023/03/16/juc-ji-he-de-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC中的线程安全的集合"><a href="#JUC中的线程安全的集合" class="headerlink" title="JUC中的线程安全的集合"></a>JUC中的线程安全的集合</h1><blockquote><p>  所谓的线程安全的集合，指的是集合中的每一个方法是原子操作，例如 <code>get()</code>、<code>put()</code>等。但这并不表示使用了线程安全的集合就不会造成线程安全问题，正如事务不是简单地由一系列原子操作堆叠就可以实现的一样，只有正确地使用线程安全的集合，才能保证线程安全问题。</p></blockquote><h2 id="Blocking-类"><a href="#Blocking-类" class="headerlink" title="Blocking 类"></a>Blocking 类</h2><p>Blocking 大部分基于锁，并提供阻塞的方法</p><h2 id="CopyOnWrite-类"><a href="#CopyOnWrite-类" class="headerlink" title="CopyOnWrite 类"></a>CopyOnWrite 类</h2><p>CopyOnWrite类的容器使用修改时拷贝，在修改时开销比较大，适用于读多写少的场景</p><h2 id="Concurrent-类"><a href="#Concurrent-类" class="headerlink" title="Concurrent 类"></a>Concurrent 类</h2><p>内部使用CAS操作进行优化，一般可以提供比较高的吞吐量，性能相对较高</p><h3 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h3><h4 id="遍历时弱一致性"><a href="#遍历时弱一致性" class="headerlink" title="遍历时弱一致性"></a>遍历时弱一致性</h4><p>当利用迭代器进行遍历时，如果Concurrent容器发生修改，迭代出来的数据还是旧值。</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于非安全容器来讲，遍历时发生修改会利用 fail-fast 机制让遍历立刻失败，抛出 ConcurrentModificationException 异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoSafeCollectionMain</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 迭代次数应该设置得稍微大些, 保证在执行 forEach() 方法时还有线程没有加入到集合中, 这样才能正常显示错误</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ITER_COUNTS <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用非线程安全的集合类</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> threadNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ITER_COUNTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                threadNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"thread-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 主线程的 threadNames 进行遍历时, 可能其它线程对 threadNames 这个集合进行修改, 此时报错 ConcurrentModificationException</span>        threadNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402141740586.png" alt="线程不安全的集合的fast-fail机制演示"></p><h4 id="求大小时弱一致性"><a href="#求大小时弱一致性" class="headerlink" title="求大小时弱一致性"></a>求大小时弱一致性</h4><p><code>size()</code> 获取的值未必准确，例如另一个线程对容器进行修改</p><h4 id="读取时弱一致性"><a href="#读取时弱一致性" class="headerlink" title="读取时弱一致性"></a>读取时弱一致性</h4><h3 id="使用-ConcurrentHashMap-进行-WordCount-案例"><a href="#使用-ConcurrentHashMap-进行-WordCount-案例" class="headerlink" title="使用 ConcurrentHashMap 进行 WordCount 案例"></a>使用 ConcurrentHashMap 进行 WordCount 案例</h3><ol><li><p>生成测试数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStreamWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMapMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALPHA <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> ALPHA<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PrintWriter printWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                printWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G:/java/juc/src/main/resources/words/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String collect <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i <span class="token operator">*</span> COUNT<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> COUNT<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注意这里的flush(), 否则生成的文件中没有数据</span>            printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>正确地使用 ConcurrentHashMap</p><p>ConcurrentHashMap 相较于 synchronized 等锁的优势在于锁的粒度更细，可以提供更高的并发度，这是使用 ConcurrentHashMap 来替代 synchronized + HashMap 的原因。和 Redis 中通过 Lua 脚本来将多条非原子指令拼接成一条指令的操作类似，应该去寻找 ConcurrentHashMap 中是否提供某些方法，将多个方法拼接成一个原子方法。</p><p>ConcurrentHashMap 提供在多线程环境下还能够正常使用的集合（不需要显式加锁），搭配 CAS 操作的其他类型或方法才能够完成正确的并发控制。</p></li><li></li></ol><h3 id="多线程下扩容时的并发死链问题"><a href="#多线程下扩容时的并发死链问题" class="headerlink" title="多线程下扩容时的并发死链问题"></a>多线程下扩容时的并发死链问题</h3><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><ol><li><p>JDK7 中的 HashMap 在遇到哈希冲突时，使用头插法。</p><p>这样可能会造成 e 节点两次被访问，第一次访问 e.next = null，第二次访问 e.next = next，而 next.next = e，则可能产生链表环路。</p></li></ol><h4 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h4><ol><li><p>需要在 JDK7 的环境下进行测试，因为 JDK7 时 HashMap 的拉链法是使用的头插法，而 JDK8 中使用的是尾插法。另外 JDK8 对于扩容机制和 hash 值的计算方法都发生的改变</p></li><li><p>测试代码</p><ul><li>找到扩容前和扩容后桶下标相同的key</li><li>触发扩容：元素个数达到阈值（总容量的3/4），初始容量是16</li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数仓</title>
      <link href="/2023/03/16/shu-cang/"/>
      <url>/2023/03/16/shu-cang/</url>
      
        <content type="html"><![CDATA[<h1 id="数仓项目"><a href="#数仓项目" class="headerlink" title="数仓项目"></a>数仓项目</h1><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316220838709.png" alt="技术选型" style="zoom:50%;"><h3 id="系统数据流程图"><a href="#系统数据流程图" class="headerlink" title="系统数据流程图"></a>系统数据流程图</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316221729706.png" alt="系统架构图"></p><h3 id="版本选型"><a href="#版本选型" class="headerlink" title="版本选型"></a>版本选型</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316222459855.png" alt="版本选型" style="zoom:50%;"><h3 id="集群资源规划"><a href="#集群资源规划" class="headerlink" title="集群资源规划"></a>集群资源规划</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316223030415.png" alt="image-20230316223030415"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316223041971.png" alt="image-20230316223041971"></p><h2 id="用户行为日志"><a href="#用户行为日志" class="headerlink" title="用户行为日志"></a>用户行为日志</h2><h3 id="用户行为日志概述"><a href="#用户行为日志概述" class="headerlink" title="用户行为日志概述"></a>用户行为日志概述</h3><p>用户行为日志的内容，主要包含用户的各项行为信息以及行为所处的环境信息。收集这些信息的主要目的是为了优化产品和为各项分析统计指标提供数据支撑。收集用户行为数据的手段称为 <strong>埋点</strong>。</p><p><strong>埋点方式</strong>：</p><ul><li><p>代码埋点（前端埋点、后端埋点）</p><p>通过 <code>onClick()</code> 等事件触发函数，向用户行为服务器发送数据。</p></li><li><p>可视化埋点</p></li><li><p>全埋点（第三方公司提供SDK）</p></li></ul><h3 id="用户行为日志内容"><a href="#用户行为日志内容" class="headerlink" title="用户行为日志内容"></a>用户行为日志内容</h3><h4 id="页面浏览记录"><a href="#页面浏览记录" class="headerlink" title="页面浏览记录"></a>页面浏览记录</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316224604490.png" alt="页面浏览记录"></p><h4 id="动作记录"><a href="#动作记录" class="headerlink" title="动作记录"></a>动作记录</h4><p>比如，因为领劵进行的点击动作，不能单单记录点击，因为点击对于分析没有意义，而是要记录因为领券而进行的点击，即领券动作。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316224821041.png" alt="动作记录"></p><h4 id="曝光记录"><a href="#曝光记录" class="headerlink" title="曝光记录"></a>曝光记录</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316224917667.png" alt="曝光记录"></p><h4 id="启动记录"><a href="#启动记录" class="headerlink" title="启动记录"></a>启动记录</h4><p>启动类型：</p><ul><li>图标启动：用户主动点击 app 的图标 来启动 app</li><li>推送启动：用户由推送信息来启动 app</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316225357461.png" alt="image-20230316225357461"></p><h4 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h4><p>500 错误码</p><p>404 错误码</p><p>……</p><h3 id="用户行为日志格式"><a href="#用户行为日志格式" class="headerlink" title="用户行为日志格式"></a>用户行为日志格式</h3><h4 id="页面日志"><a href="#页面日志" class="headerlink" title="页面日志"></a>页面日志</h4><p>页面日志，以页面浏览为单位，即一个页面浏览记录生成一条页面埋点日志。一条完整的页面日志包含：</p><ul><li>一个页面浏览记录</li><li>若干个用户在该页面上所做的动作记录</li><li>若干个该页面的曝光记录</li><li>一个在该页面发生的错误记录</li><li>各种环境信息：<ul><li>用户信息</li><li>时间信息</li><li>地理位置信息</li><li>设备信息</li><li>应用信息</li><li>渠道信息</li></ul></li></ul><h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p>启动日志以启动为单位，一起启动行为生成一条启动日志。一条完整的启动日志包括：</p><ul><li>一个启动记录</li><li>一个本次启动的错误记录</li><li>各种环境信息</li></ul><h2 id="Maxwell（Mysql到Kafka）"><a href="#Maxwell（Mysql到Kafka）" class="headerlink" title="Maxwell（Mysql到Kafka）"></a>Maxwell（Mysql到Kafka）</h2><p>Maxwell 是一款开源软件，用 Java 编写的 MySQL 变更数据抓取软件。<strong>它会实时监控 MySQL 数据库的数据变更操作（包括 insert、update、delete），并将变更数据以 JSON 格式发送给 Kafka 等流数据处理平台。</strong></p><h3 id="Maxwell-的工作原理"><a href="#Maxwell-的工作原理" class="headerlink" title="Maxwell 的工作原理"></a>Maxwell 的工作原理</h3><p>实时读取 MySQL 数据库的二进制日志<strong>（Binlog）</strong>，从中获取变更数据，再将变更数据以 JSON 格式发送到 Kafka 等流处理平台。</p><p>Binlog 日志是 MySQL 服务端非常重要的一种日志，它会保存 MySQL 数据库的所有数据变更记录。Binlog 的主要作用包括主从复制和数据恢复。<strong>Maxwell 的工作原理和主从复制密切相关。（伪装成 MySQL slave，监控 MySQL master 中的 Binlog 日志，但数据不存入从数据库，而是以 JSON 格式发送给Kafka）</strong></p><p>Binlog 日志不是 redo log 日志，整体流程是：</p><ol><li>先写 redo log 日志</li><li>数据库执行写操作</li><li>再写 Binlog 日志</li><li>redo log 日志提交</li></ol><p>MySQL 中的主从复制和读写分离和 Redis 中有些类似，又有些不同：</p><ul><li>主从复制：只有一台服务器对外工作，另一台作为备份提供容错，备份服务器不对外提供服务（Redis 中从服务器会提供服务）</li><li>读写分离：一台服务器提供写操作服务，另一台服务器提供读操作服务，两台服务器都对外提供服务。</li></ul><h3 id="Maxwell-的部署安装"><a href="#Maxwell-的部署安装" class="headerlink" title="Maxwell 的部署安装"></a>Maxwell 的部署安装</h3><ol><li><p>下载 Maxwell 合适的版本 </p><p>Maxwell 1.30.0 及以上版本不支持 JDK8，所以下载 Maxwell 1.29.2 版本。下载地址：<a href="https://maxwells-daemon.io/" target="_blank" rel="noopener">Maxwell’s Daemon (maxwells-daemon.io)</a></p></li><li><p>通过修改 MySQL 的配置文件 <code>/etc/my.cnf</code> 来开启 MySQL 的 Binlog 日志（默认情况下不开启）</p><pre class="line-numbers language-properties"><code class="language-properties">[mysqld]<span class="token comment" spellcheck="true"># 数据库id, 单节点MySQL原本没有必要开启, 但为了使用Maxwell则必须开启. Maxwell当做是一台MySQL slave</span><span class="token attr-name">server-id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true"># 启动Binlog, 该参数值会作为Binlog的文件名</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">mysql-binlog</span><span class="token comment" spellcheck="true"># Binlog类型, Maxwell要求其为row类型</span><span class="token attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token attr-value">row</span><span class="token comment" spellcheck="true"># MySQL中需要启用Binlog的数据库, 即Maxwell需要监控的数据库. 根据实际情况进行更改</span><span class="token attr-name">binlog-do-db</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Binlog 日志的模式</strong></p><ul><li><strong>Statement-based 模式</strong>：基于 SQL 语句，会记录所有的写操作的 SQL 语句。<ul><li>优点：节省空间</li><li>缺点：如果 SQL 语句中存在 <code>now()</code> 这种函数，可能造成数据的不一致</li></ul></li><li><strong>Row-based 模式</strong>：基于行，Binlog 日志会记录每次写操作后被操作行的变化。<strong>Maxwell 要求使用 MySQL 使用 Row-based 模式</strong><ul><li>优点：保证数据的绝对一致性</li><li>缺点：如果一条 SQL 的影响行数非常多，那么占用空间会很大</li></ul></li><li><strong>mixed 模式</strong>：混合模式，默认是 Statement-based 模式，如果 SQL 语句可能导致数据不一致，那么自动切换到 Row-based 模式</li></ul></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resource接口</title>
      <link href="/2023/03/16/spring-yuan-ma-jie-xi-02-resource/"/>
      <url>/2023/03/16/spring-yuan-ma-jie-xi-02-resource/</url>
      
        <content type="html"><![CDATA[<h1 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h1><ol><li>AbstractBeanDefinitionReader 通过 ResourceLoader 将资源文件路径转换成对应的 Resource 文件</li><li>DocumentLoader 将 Resource 文件转换成 Document 文件</li><li>通过实现接口 BeanDefinitionDocumentReader 的 DefaultBeanDefinitionDocumentReader 类对 Document 进行解析，并使用 BeanDefinitionParserDelegate 对 Element 进行解析</li></ol><h1 id="ClassPathResource"><a href="#ClassPathResource" class="headerlink" title="ClassPathResource"></a>ClassPathResource</h1><p>作用：将文件路径处理成 Resource</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ClassPathResource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathResourceDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">newClassPathResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">classLoaderTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">newClassPathResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在 classpath 下准备任意一个文件, 可以是 xml/properties 等</span>        Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"person.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里相当于将前面的 "/" 去掉</span>        File file <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">classLoaderTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassLoader classLoader <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String protocol <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String file <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"protocol = "</span> <span class="token operator">+</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file = "</span> <span class="token operator">+</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clazzTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里必须使用 "/" 开头</span>        URL url2 <span class="token operator">=</span> ClassPathResourceDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/person.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url2Protocol <span class="token operator">=</span> url2<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url2File <span class="token operator">=</span> url2<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"url2Protocol = "</span> <span class="token operator">+</span> url2Protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"url2File = "</span> <span class="token operator">+</span> url2File<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ClassPathResource-源码解析"><a href="#ClassPathResource-源码解析" class="headerlink" title="ClassPathResource 源码解析"></a>ClassPathResource 源码解析</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathResource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFileResolvingResource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 传入的文件路径: 会进行一个标准化处理</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String path<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类加载器, 从getDefaultClassLoader()方法中可以看出其默认顺序:</span>    <span class="token comment" spellcheck="true">// 1. Thread.currentThread().getContextClassLoader()</span>    <span class="token comment" spellcheck="true">// 2. ClassUtils.class.getClassLoader()</span>    <span class="token comment" spellcheck="true">// 3. ClassLoader.getSystemClassLoader()</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> ClassLoader classLoader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ClassPathResource</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"Path must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String pathToUse <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">cleanPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用"/person.properties"最终还是会被处理成"person.properties"</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pathToUse<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pathToUse <span class="token operator">=</span> pathToUse<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>path <span class="token operator">=</span> pathToUse<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classLoader <span class="token operator">=</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null <span class="token operator">?</span> classLoader <span class="token operator">:</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getDefaultClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeanDefinitionReader-接口"><a href="#BeanDefinitionReader-接口" class="headerlink" title="BeanDefinitionReader 接口"></a>BeanDefinitionReader 接口</h1><p>作用：加载上面处理好的 Resource 对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 读取资源文件并转换到 BeanDefinition</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionReader</span> <span class="token punctuation">{</span>    BeanDefinitionRegistry <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ResourceLoader: 资源加载器, 根据给定的资源文件地址返回对应的 Resource</span>    ResourceLoader <span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClassLoader <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BeanNameGenerator <span class="token function">getBeanNameGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关键方法loadBeanDefinitions()</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String location<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> locations<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AbstractBeanDefinitionReader"><a href="#AbstractBeanDefinitionReader" class="headerlink" title="AbstractBeanDefinitionReader"></a>AbstractBeanDefinitionReader</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBeanDefinitionReader</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">,</span> EnvironmentCapable <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Log logger <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用于注册 BeanDefinition</span>    <span class="token comment" spellcheck="true">// BeanDefinitionRegistry 约等于 BeanFactory</span>    <span class="token comment" spellcheck="true">// @Getter</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BeanDefinitionRegistry registry<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载资源对象</span>    <span class="token comment" spellcheck="true">// 缺省实现: PathMatchingResourcePatternResolver()</span>    <span class="token comment" spellcheck="true">// @Setter</span>    <span class="token comment" spellcheck="true">// @Getter</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> ResourceLoader resourceLoader<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @Setter</span>    <span class="token comment" spellcheck="true">// @Getter</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> ClassLoader beanClassLoader<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用于读取环境相关的信息</span>    <span class="token comment" spellcheck="true">// 缺省实现: StandardEnvironment()</span>    <span class="token comment" spellcheck="true">// @Setter</span>    <span class="token comment" spellcheck="true">// @Getter</span>    <span class="token keyword">private</span> Environment environment<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用于生成 Bean 的 name(id)</span>    <span class="token comment" spellcheck="true">// 缺省实现</span>    <span class="token comment" spellcheck="true">// @Setter(防止破坏默认值的设计)</span>    <span class="token comment" spellcheck="true">// @Getter</span>    <span class="token keyword">private</span> BeanNameGenerator beanNameGenerator <span class="token operator">=</span> DefaultBeanNameGenerator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token function">AbstractBeanDefinitionReader</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"BeanDefinitionRegistry must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果传入的 registry 同时实现了 ResourceLoader 接口, 那么 resourceLoader 设置为 registry</span>        <span class="token comment" spellcheck="true">// 如果传入的 registry 就是一个单纯的 BeanDefinitionRegistry 实现类对象, 那么 resourceLoader 设置为 PathMatchingResourcePatternResolver 对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">ResourceLoader</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span>ResourceLoader<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 动机同上, 缺省实现为 StandardEnvironment</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>EnvironmentCapable<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> <span class="token string">"Resource array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 具体加载单个 Resource 的方法由 XmlBeanDefinitionReader 等子类进行实现</span>            count <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>String location<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>Resource<span class="token operator">></span> actualResources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        ResourceLoader resourceLoader <span class="token operator">=</span> <span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                    <span class="token string">"Cannot load bean definitions from location ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]: no ResourceLoader available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果 ResourceLoader 是 ResourcePatternResolver 对象, 可以通过模式匹配批量加载 Source 对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token keyword">instanceof</span> <span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Resource pattern matching available.</span>            <span class="token comment" spellcheck="true">// 提供的是一个支持模式匹配的路径location, 可能对应多个Resource对象</span>            Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ResourcePatternResolver<span class="token punctuation">)</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actualResources <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>actualResources<span class="token punctuation">,</span> resources<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Can only load single resources by absolute URL.</span>            <span class="token comment" spellcheck="true">// 一般的 ResourceLoader 只能通过绝对路径来加载单个 Source</span>            Resource resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>actualResources <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 将 Resource 对象添加到 actualResources 集合中</span>                actualResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="XmlBeanDefinitionReader"><a href="#XmlBeanDefinitionReader" class="headerlink" title="XmlBeanDefinitionReader"></a>XmlBeanDefinitionReader</h2><h3 id="loadBeanDefinitions-方法"><a href="#loadBeanDefinitions-方法" class="headerlink" title="loadBeanDefinitions 方法"></a>loadBeanDefinitions 方法</h3><ul><li>通过 Resource 对象加载，即 <code>loadBeanDefinitions(Resource resource)</code> 由子类（XmlBeanDefinitionReader等）实现</li><li>通过 String 路径加载，即 <code>loadBeanDefinitions(String location, Set&lt;Resource&gt; actualResources)</code> <ol><li>如果 ResourceLoader 是 ResourcePatternResolver，那么支持 location 中使用模式匹配，可以解析 location，批量导入多个 Resource</li><li>如果 ResourceLoader 不是 ResourcePatternResolver，那么 location 只能使用绝对路径</li><li>解析出来的 Resource 对象都会被添加到传入的（形参） Set 集合（actualResources）中</li><li>通过 String 路径加载最后还是落实到通过 Resource 方式加载上</li></ol></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>EncodedResource encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前正在被加载的 Resources</span>    Set<span class="token operator">&lt;</span>EncodedResource<span class="token operator">></span> currentResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查是否重复加载, 什么情况下会出现这种情况?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream inputStream <span class="token operator">=</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从encodedResource中获取InuptStream, 封装成InputStore</span>        InputSource inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            inputSource<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 真正的处理操作doLoadBeanDefinitions()</span>        <span class="token keyword">return</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// resource处理完成, 从集合中删除</span>        currentResources<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="getEntityResolver-方法"><a href="#getEntityResolver-方法" class="headerlink" title="getEntityResolver 方法"></a>getEntityResolver 方法</h3><p>主要考虑在没有设置 EntityResolver 的情况下，根据 ResourceLoader 有两种可能：</p><ol><li>如果 ResourceLoader 为 null，那么 <code>new DelegatingEntityResolver(getBeanClassLoader())</code></li><li>如果 ResourceLoader 不为 null，那么 <code>new ResourceEntityResolver(resourceLoader)</code></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义处理外部实体时, 需要向SAX驱动器注册一个EntityResolver</span><span class="token comment" spellcheck="true">// EntityResolver的作用是由项目本身来提供一个如何寻找DTD声明的方法</span><span class="token keyword">protected</span> EntityResolver <span class="token function">getEntityResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>entityResolver <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Determine default EntityResolver to use.</span>        <span class="token comment" spellcheck="true">// 如果没有设置EntityResolver</span>        ResourceLoader resourceLoader <span class="token operator">=</span> <span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>entityResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>entityResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingEntityResolver</span><span class="token punctuation">(</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entityResolver<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doLoadBeanDefinitions-方法"><a href="#doLoadBeanDefinitions-方法" class="headerlink" title="doLoadBeanDefinitions 方法"></a>doLoadBeanDefinitions 方法</h3><p><code>loadBeanDefinitions(Source source)</code> 被包装成 <code>loadBeanDefinitions(EncodedSource source)</code>，再进一步实际处理的是 <code>doLoadBeanDefinitions(..)</code> 方法，其中 InputStore 是从 Source 中获取的 InputStream 的一层包装。</p><p>doLoadBeanDefinition() 方法的步骤：</p><ol><li><code>doLoadDocument(inputSource, resource)</code>：将 Resource 转变为 Document，通过调用 <code>documentLoader.loadDocument(..)</code> 方法</li><li><code>registerBeanDefinitions(doc, resource)</code>：解析 Document 并转化成 BeanDefinition 进行注册</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 核心方法</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>InputSource inputSource<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Resource -> Document</span>    Document doc <span class="token operator">=</span> <span class="token function">doLoadDocument</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="registerBeanDefinitions-方法"><a href="#registerBeanDefinitions-方法" class="headerlink" title="registerBeanDefinitions 方法"></a>registerBeanDefinitions 方法</h3><ol><li>创建一个 BeanDefinitionDocumentReader，默认是 DefaultBeanDefinitionDocumentReader 对象，由 <code>private Class documentReaderClass</code> 字段的默认值 <code>DefaultBeanDefinitionDocumentReader.class</code> 决定</li><li>通过该 BeanDefinitionDocumentReader 对象的 <code>registerBeanDefinitions(Document doc, XmlReaderContext readerContext)</code> 方法来进行注入 BeanDefinition</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 核心方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个 BeanDefinitionDocumentReader, 默认是DefaultBeanDefinitionDocumentReader对象, 由 private Class&lt;? extends BeanDefinitionDocumentReader> documentReaderClass = DefaultBeanDefinitionDocumentReader.class;决定</span>    BeanDefinitionDocumentReader documentReader <span class="token operator">=</span> <span class="token function">createBeanDefinitionDocumentReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取注入前BeanFactory中BeanDefinition的数量</span>    <span class="token keyword">int</span> countBefore <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用documentReader中的方法完成</span>    <span class="token comment" spellcheck="true">// 对resource再一次进行封装成XmlReaderContext</span>    documentReader<span class="token punctuation">.</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token function">createReaderContext</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取注入后BeanFactory中BeanDefinition的数量</span>    <span class="token comment" spellcheck="true">// 二者相减, 返回当前注入BeanFactory中BeanDefinition的数量</span>    <span class="token keyword">return</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> countBefore<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DefaultBeanDefinitionDocumentReader"><a href="#DefaultBeanDefinitionDocumentReader" class="headerlink" title="DefaultBeanDefinitionDocumentReader"></a>DefaultBeanDefinitionDocumentReader</h1><h2 id="doRegisterBeanDefinitions-方法"><a href="#doRegisterBeanDefinitions-方法" class="headerlink" title="doRegisterBeanDefinitions 方法"></a>doRegisterBeanDefinitions 方法</h2><p><code>registerBeanDefinitions(..)</code> 方法获取到 Document 的 root 节点后，调用 <code>doRegisterBeanDefinitions(Element root)</code> 方法进行真正的工作。</p><p>在 doRegisterBeanDefinitions 方法中：</p><ol><li><code>createDelegate(..)</code> 创建 BeanDefinitionParserDelegate 对象，对 ReaderContext 的包装（似乎还是对 Resource、Document 的包装）？或者含有什么方便的解析工具？</li><li>处理了 <code>&lt;beans&gt;</code> 标签中的 <strong>profile</strong> 属性，（如果没有 profile 属性，则不进行额外处理）。处理完成后，调用 <code>parseBeanDefinitions(root, this.delegate)</code> 进行根节点的解析</li><li>调用 <code>parseBeanDefinitions(..)</code> 方法</li><li>疑问：<code>BeanDefinitionParserDelegate parent = this.delegate;</code> 和 <code>this.delegate = parent;</code> 是为什么？</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> BeanDefinitionParserDelegate <span class="token function">createDelegate</span><span class="token punctuation">(</span>XmlReaderContext readerContext<span class="token punctuation">,</span> Element root<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanDefinitionParserDelegate parentDelegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BeanDefinitionParserDelegate delegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionParserDelegate</span><span class="token punctuation">(</span>readerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    delegate<span class="token punctuation">.</span><span class="token function">initDefaults</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> parentDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> XmlReaderContext readerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 为readerContext进行赋值, 本质上是一个Source的包装</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext <span class="token operator">=</span> readerContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对doc的根节点进行解析 (Spring配置文件的根节点: beans)</span>    <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 核心方法</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BeanDefinitionParserDelegate parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token function">createDelegate</span><span class="token punctuation">(</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取&lt;beans>根节点中的profile属性</span>        String profileSpec <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>profileSpec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> specifiedProfiles <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>profileSpec<span class="token punctuation">,</span> BeanDefinitionParserDelegate<span class="token punctuation">.</span>MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>specifiedProfiles<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// preProcessXml(root) 和 postProcessXml(root) 这两个方法都是空实现, 什么都没有做</span>    <span class="token comment" spellcheck="true">//preProcessXml(root);</span>    <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//postProcessXml(root);</span>    <span class="token comment" spellcheck="true">// 还原回去, 这是为什么?</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="parseDefaultElement-方法"><a href="#parseDefaultElement-方法" class="headerlink" title="parseDefaultElement 方法"></a>parseDefaultElement 方法</h2><p><code>parseBeanDefinitions(..)</code> 方法是常规的 XML 解析技术，获取根节点 root 的非空白子元素，即获取 <code>&lt;beans&gt;</code> 标签的 <code>&lt;bean&gt;</code>。</p><p>通过调用 <code>parseDefaultElement(ele, delegate)</code> 来解析 <code>&lt;beans&gt;</code> 的子标签，包括 <code>&lt;import&gt;</code>、<code>&lt;alias&gt;</code>、<code>&lt;bean&gt;</code> 以及嵌套的 <code>&lt;beans&gt;</code>，针对前三种子标签，有对应专门的解析方法，对于嵌套的 <code>&lt;beans&gt;</code> 则采用递归处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 默认情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        NodeList nl <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 上面都是常规的XML解析, 如果root对应&lt;beans>标签, 那么ele就是一个&lt;bean>标签</span>                Element ele <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// TODO: XML解析技术中的Namespace需要再了解下, 应该是schema</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义元素? 怎么解释?</span>        <span class="token comment" spellcheck="true">// 例如 &lt;tx:annotation> 这些标签</span>        delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 核心方法: 解析单个bean标签</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">"import"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">importBeanDefinitionResource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">"alias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processAliasRegistration</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">"bean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token string">"beans"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// recurse</span>        <span class="token comment" spellcheck="true">// 递归调用</span>        <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="importBeanDefinitionResource-方法"><a href="#importBeanDefinitionResource-方法" class="headerlink" title="importBeanDefinitionResource 方法"></a>importBeanDefinitionResource 方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">importBeanDefinitionResource</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String location <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Resource location must not be empty"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Resolve system properties: e.g. "${user.dir}"</span>    location <span class="token operator">=</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>Resource<span class="token operator">></span> actualResources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Discover whether the location is an absolute or relative URI</span>    <span class="token keyword">boolean</span> absoluteLocation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    absoluteLocation <span class="token operator">=</span> ResourcePatternUtils<span class="token punctuation">.</span><span class="token function">isUrl</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">||</span> ResourceUtils<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Absolute or relative?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>absoluteLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> importCount <span class="token operator">=</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> actualResources<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No URL -> considering resource location as relative to the current file.</span>        <span class="token keyword">int</span> importCount<span class="token punctuation">;</span>        Resource relativeResource <span class="token operator">=</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRelative</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>relativeResource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            importCount <span class="token operator">=</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>relativeResource<span class="token punctuation">)</span><span class="token punctuation">;</span>            actualResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>relativeResource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            String baseLocation <span class="token operator">=</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            importCount <span class="token operator">=</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>                StringUtils<span class="token punctuation">.</span><span class="token function">applyRelativePath</span><span class="token punctuation">(</span>baseLocation<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">,</span> actualResources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> actResArray <span class="token operator">=</span> actualResources<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireImportProcessed</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> actResArray<span class="token punctuation">,</span> <span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="processAliasRegistration-方法"><a href="#processAliasRegistration-方法" class="headerlink" title="processAliasRegistration 方法"></a>processAliasRegistration 方法</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processAliasRegistration</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String alias <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"alias"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Name must not be empty"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        valid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>alias<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Alias must not be empty"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        valid <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> alias<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireAliasRegistered</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> alias<span class="token punctuation">,</span> <span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="processBeanDefinition-方法"><a href="#processBeanDefinition-方法" class="headerlink" title="processBeanDefinition 方法"></a>processBeanDefinition 方法</h2><ol><li><code>&lt;bean&gt;</code> 标签的解析</li><li>holder 的注册</li><li>利用事件机制通知监听器</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 处理bean标签</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 委托delegate对象来解析bean标签, 返回一个holder, holder中包含bean标签中的各种属性: class/name/id/alias等</span>    BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 如果bean标签下面还有自定义属性、标签, 还需要再次对自定义的标签进行解析</span>        bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 对解析完成后的holder进行注册, 委托给BeanDefinitionReaderUtils</span>        BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 发出事件, 通知相关的监听器EventListener</span>        <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BeanDefinitionParserDelegate"><a href="#BeanDefinitionParserDelegate" class="headerlink" title="BeanDefinitionParserDelegate"></a>BeanDefinitionParserDelegate</h1><h2 id="parseBeanDefinitionElement-方法（解析Bean标签）"><a href="#parseBeanDefinitionElement-方法（解析Bean标签）" class="headerlink" title="parseBeanDefinitionElement 方法（解析Bean标签）"></a>parseBeanDefinitionElement 方法（解析Bean标签）</h2><ol><li><p>name 属性可以通过指定的分隔符来指定多个字段，这些字段都会被作为 alias</p></li><li><p>id 属性作为 beanName 的默认值。</p><blockquote><p>但如果没有设置 id 属性，同时设置了 name 属性，就会将第一个 name 作为 beanName</p></blockquote></li><li><p>检查是否有重复的 beanName</p></li><li><p>通过 parseBeanDefinitionElement 去进一步解析 bean 标签</p></li><li><p>考虑在 id 属性和 name 属性都没有设置的情况下，生成 beanName</p><ol><li>如果 <code>containingBean != null</code>，通过 <code>BeanDefinitionReaderUtils.generateBeanName()</code> 来生成 beanName</li><li>如果 <code>containingBean == null</code>，通过 <code>readerContext.generateBeanName()</code> 来生成 beanName</li></ol></li><li><p>通过 beanName、aliases、BeanDefinition 来创建一个 BeanDefinitionHolder。</p><p>换句话说，这是否意味着 BeanDefinition 中 beanName 是可以为 null 的，而 BeanDefinitionHolder 中 beanName 必须不为 null ？也许不是，但 BeanDefinition 中不包含 aliases</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String id <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String nameAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. name 属性可以通过指定的分隔符来指定多个字段，这些字段都会被作为 alias</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> aliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据StringTokenizer进行分词, 去除首尾空格和空元素, 例如, "a,,b"只会保留a和b</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> nameArr <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">,</span> <span class="token string">",; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        aliases<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nameArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. id 属性作为 beanName 的默认值</span>    String beanName <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>aliases<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果id属性为null, 并且name属性不为null, 就会将第一个name作为beanName</span>        beanName <span class="token operator">=</span> aliases<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3. 检查是否有重复的beanName</span>        <span class="token function">checkNameUniqueness</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> aliases<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 得到BeanDefinition</span>    AbstractBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 正常的BeanDefinition处理流程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 5. id属性和name属性都没有设置的情况下, beanName为null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// containingBean什么情况下不为null呢?</span>                beanName <span class="token operator">=</span> BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                String beanClassName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClassName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> beanClassName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBeanNameInUse</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    aliases<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliasesArray <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>aliases<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> aliasesArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析出来是个不正常的Beandefinition(null), 直接返回null</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="parseBeanDefinitionElement-方法（重载、重点）"><a href="#parseBeanDefinitionElement-方法（重载、重点）" class="headerlink" title="parseBeanDefinitionElement 方法（重载、重点）"></a>parseBeanDefinitionElement 方法（重载、重点）</h2><ol><li>解析 class 和 parent 属性</li><li>通过 className（class属性值） 和 parent 来创建 BeanDefinition</li><li>各种真正的解析逻辑<ol><li>parseBeanDefinitionAttributes：设置 BeanDefinition 的各个属性值，没有设置的使用默认值</li><li>parseMetaElements：</li></ol></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> AbstractBeanDefinition <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanEntry</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 解析class属性和parent属性</span>    String className <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        className <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        parent <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 通过 className（class属性值） 和 parent 来创建 BeanDefinition</span>        AbstractBeanDefinition bd <span class="token operator">=</span> <span class="token function">createBeanDefinition</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 各种解析逻辑</span>        <span class="token comment" spellcheck="true">// 3.1 设置属性值</span>        <span class="token function">parseBeanDefinitionAttributes</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>DomUtils<span class="token punctuation">.</span><span class="token function">getChildElementValueByTagName</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> DESCRIPTION_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.2 </span>        <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseLookupOverrideSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseReplacedMethodSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseConstructorArgElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parsePropertyElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseQualifierElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bd<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="parseBeanDefinitionAttributes-方法（设置-BeanDefinition-属性）"><a href="#parseBeanDefinitionAttributes-方法（设置-BeanDefinition-属性）" class="headerlink" title="parseBeanDefinitionAttributes 方法（设置 BeanDefinition 属性）"></a>parseBeanDefinitionAttributes 方法（设置 BeanDefinition 属性）</h3><ol><li>singleton 属性被 scope 属性取代，不能在 bean 标签中使用 singleton 属性</li><li>如果当前 bean 未定义 <strong>scope 属性</strong>, 但是内部的 bean 定义了 scope 属性, 那么使用内部 bean 的 scope 属性</li><li><strong>设置 abstract 属性</strong>，默认值为 false</li><li><strong>设置 lazy-init 属性</strong></li><li><strong>设置 autowire 属性</strong>，自动注入方式：<ul><li>AbstractBeanDefinition.AUTOWIRE_NO</li><li>AbstractBeanDefinition.AUTOWIRE_BY_NAME</li><li>AbstractBeanDefinition.AUTOWIRE_BY_TYPE</li><li>AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR</li><li>AbstractBeanDefinition.AUTOWIRE_AUTODETECT</li></ul></li><li><strong>设置 depends-on 属性</strong>，可以设置多个，使用分隔符分隔即可</li><li>设置 autowire-candidate 属性</li><li>设置 primary 属性</li><li>设置 init-method 属性</li><li>设置 destroy-method 属性</li><li>设置 factory-method 属性</li><li>设置 factory-bean 属性</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> AbstractBeanDefinition <span class="token function">parseBeanDefinitionAttributes</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span>                                                            <span class="token annotation punctuation">@Nullable</span> BeanDefinition containingBean<span class="token punctuation">,</span> AbstractBeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 检查 scope 属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"singleton"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"scope"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 如果当前 bean 未定义 scope 属性, 但是内部的 bean 定义了 scope 属性, 那么使用内部 bean 的 scope 属性</span>        bd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>containingBean<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 如果 abstract 属性设置为 true, 进行设置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"abstract"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setAbstract</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"abstract"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 设置lazy-init</span>    String lazyInit <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"lazy-init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultValue</span><span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lazyInit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 设置autowire</span>    String autowire <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"autowire"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bd<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span><span class="token function">getAutowireMode</span><span class="token punctuation">(</span>autowire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 设置depends-on</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"depends-on"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String dependsOn <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"depends-on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setDependsOn</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">,</span> <span class="token string">",; "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 7. 设置autowire-candidate</span>    String autowireCandidate <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"autowire-candidate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultValue</span><span class="token punctuation">(</span>autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String candidatePattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getAutowireCandidates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO: 为什么获取到默认值后还判断是否为null呢?</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidatePattern <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> patterns <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>candidatePattern<span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span>PatternMatchUtils<span class="token punctuation">.</span><span class="token function">simpleMatch</span><span class="token punctuation">(</span>patterns<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 8. 设置primary</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 9. 设置init-method 或默认的init-method</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"init-method"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String initMethodName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"init-method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getInitMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getInitMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setEnforceInitMethod</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 10. 设置destroy-method 或默认destroy-method</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"destroy-method"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String destroyMethodName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"destroy-method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getDestroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getDestroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setEnforceDestroyMethod</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 11. 设置factory-method</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"factory-method"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"factory-method"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 12. 设置factory-bean</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span><span class="token string">"factory-bean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bd<span class="token punctuation">.</span><span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"factory-bean"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="parseMetaElements-方法（解析-bean-标签的-meta-子标签）"><a href="#parseMetaElements-方法（解析-bean-标签的-meta-子标签）" class="headerlink" title="parseMetaElements 方法（解析 bean 标签的 meta 子标签）"></a>parseMetaElements 方法（解析 bean 标签的 meta 子标签）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanMetadataAttributeAccessor attributeAccessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取bean标签下的子标签</span>    NodeList nl <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析&lt;bean>标签下面的&lt;meta>标签</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">"meta"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Element metaElement <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>            String key <span class="token operator">=</span> metaElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String value <span class="token operator">=</span> metaElement<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanMetadataAttribute attribute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanMetadataAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            attribute<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>metaElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// attributeAccessor 就是一个 BeanDefinition, AbstractBeanDefinition 继承于 BeanMetadataAttributeAccessor</span>            <span class="token comment" spellcheck="true">// 但 BeanDefinition 是一个接口, 且和该父类没有关系, 似乎是一种设计模式, 适配器? 忘了!</span>            attributeAccessor<span class="token punctuation">.</span><span class="token function">addMetadataAttribute</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="parseLookupOverrideSubElements-方法"><a href="#parseLookupOverrideSubElements-方法" class="headerlink" title="parseLookupOverrideSubElements 方法"></a>parseLookupOverrideSubElements 方法</h3><p>TODO</p><h3 id="parseReplacedMethodSubElements-方法"><a href="#parseReplacedMethodSubElements-方法" class="headerlink" title="parseReplacedMethodSubElements 方法"></a>parseReplacedMethodSubElements 方法</h3><p>TODO</p><h3 id="parseConstructorArgElements-方法"><a href="#parseConstructorArgElements-方法" class="headerlink" title="parseConstructorArgElements 方法"></a>parseConstructorArgElements 方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseConstructorArgElements</span><span class="token punctuation">(</span>Element beanEle<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NodeList nl <span class="token operator">=</span> beanEle<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> CONSTRUCTOR_ARG_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">parseConstructorArgElement</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体细节</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseConstructorArgElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String indexAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>INDEX_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    String typeAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>TYPE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    String nameAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>NAME_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>indexAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>indexAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"'index' cannot be lower than 0"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstructorArgumentEntry</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object value <span class="token operator">=</span> <span class="token function">parsePropertyValue</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ConstructorArgumentValues<span class="token punctuation">.</span>ValueHolder valueHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorArgumentValues<span class="token punctuation">.</span>ValueHolder</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>typeAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        valueHolder<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>typeAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        valueHolder<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    valueHolder<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasIndexedArgumentValue</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Ambiguous constructor-arg entries for index "</span> <span class="token operator">+</span> index<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        bd<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addIndexedArgumentValue</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> valueHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstructorArgumentEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object value <span class="token operator">=</span> <span class="token function">parsePropertyValue</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            ConstructorArgumentValues<span class="token punctuation">.</span>ValueHolder valueHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorArgumentValues<span class="token punctuation">.</span>ValueHolder</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>typeAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                valueHolder<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>typeAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                valueHolder<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            valueHolder<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>valueHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="parsePropertyElements-方法（复杂-TODO）"><a href="#parsePropertyElements-方法（复杂-TODO）" class="headerlink" title="parsePropertyElements 方法（复杂 TODO）"></a>parsePropertyElements 方法（复杂 TODO）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parsePropertyElements</span><span class="token punctuation">(</span>Element beanEle<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NodeList nl <span class="token operator">=</span> beanEle<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> PROPERTY_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">parsePropertyElement</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parsePropertyElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String propertyName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>NAME_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Tag 'property' must have a 'name' attribute"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyEntry</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Multiple 'property' definitions for property '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object val <span class="token operator">=</span> <span class="token function">parsePropertyValue</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyValue pv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> pv<span class="token punctuation">)</span><span class="token punctuation">;</span>        pv<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="parseQualifierElements-方法"><a href="#parseQualifierElements-方法" class="headerlink" title="parseQualifierElements 方法"></a>parseQualifierElements 方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseQualifierElements</span><span class="token punctuation">(</span>Element beanEle<span class="token punctuation">,</span> AbstractBeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    NodeList nl <span class="token operator">=</span> beanEle<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> QUALIFIER_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">parseQualifierElement</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanFactory接口与ApplicationContext接口功能介绍</title>
      <link href="/2023/03/16/spring-yuan-ma-jie-xi-01/"/>
      <url>/2023/03/16/spring-yuan-ma-jie-xi-01/</url>
      
        <content type="html"><![CDATA[<h1 id="类关系结构"><a href="#类关系结构" class="headerlink" title="类关系结构"></a>类关系结构</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316120503562.png" alt="ApplicationContext接口和BeanFactory接口"></p><h1 id="BeanFactory-功能介绍"><a href="#BeanFactory-功能介绍" class="headerlink" title="BeanFactory 功能介绍"></a>BeanFactory 功能介绍</h1><p><code>BeanFactory</code> 是核心容器，负责管理 Bean 对象</p><ul><li><p>BeanFactory 接口的功能只有一个 <code>getBean()</code> 方法</p></li><li><p>BeanFactory 的实现类（<code>DefaultListableBeanFactory</code>）包含：<strong>控制反转、基本的依赖注入、Bean 生命周期的各种功能</strong>，不能只考虑接口功能</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultSingletonBeanRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableApplicationContext context <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplicationMain<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射方式来获取私有成员变量</span>        Field singletonObjectsField <span class="token operator">=</span> DefaultSingletonBeanRegistry<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"singletonObjects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singletonObjectsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> singletonObjectsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事先已经通过注解为Spring容器中注入两个以"component_"开头的组件, 这里过滤得到</span>        singletonObjects<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"component_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402185349601.png" alt="断点调试获取默认实现类"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316121640791.png" alt="BeanFactory接口的默认实现类"></p></li></ul><h1 id="ApplicationContext-功能介绍"><a href="#ApplicationContext-功能介绍" class="headerlink" title="ApplicationContext 功能介绍"></a>ApplicationContext 功能介绍</h1><table><thead><tr><th>接口</th><th>功能</th></tr></thead><tbody><tr><td><code>MessageSource</code></td><td>国际化的能力</td></tr><tr><td><code>ResourcePatternResolve</code></td><td>根据通配符去匹配文件资源（磁盘路径、类路径等）</td></tr><tr><td><code>ApplicationEventPublisher</code></td><td>发布事件对象（ApplicationEvent）</td></tr><tr><td><code>EnvironmentCapable</code></td><td>读取系统环境变量或配置文件中的信息，定义获取 Environment 方法</td></tr></tbody></table><h2 id="MessageSource-接口"><a href="#MessageSource-接口" class="headerlink" title="MessageSource 接口"></a>MessageSource 接口</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>提供了 <code>getMessage()</code> 方法，以实现国际化的能力</p><ol><li><p>需要准备各种不同语言的资源，例如 <code>messages_en.properties</code> 和 <code>messages_zh.properties</code> 文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">hi</span><span class="token punctuation">=</span><span class="token attr-value">Hello</span><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">hi</span><span class="token punctuation">=</span><span class="token attr-value">嗨</span><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>提供 <code>resource_en.properties</code> 和 <code>resource_zh.properties</code> 文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">username</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过调用 <code>getMessage()</code> 来获取资源</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultSingletonBeanRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableApplicationContext context <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplicationMain<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认情况下, 文件必须以"messages.properties"命名</span>        String hiZh <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        String hiEn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hiZh<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hiEn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认情况下会报错, 希望正常运行需要进行一些配置</span>        String usernameZh <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        String passwordEn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usernameZh = "</span> <span class="token operator">+</span> usernameZh<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"passwordEn = "</span> <span class="token operator">+</span> passwordEn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>额外对Spring配置文件 <code>application.properties</code> 进行修改</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">messages,resource</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><ol><li><p>找到自动配置类 <code>MessageSourceAutoConfiguration</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 自动配置类标配@ConditionalOnMissingBean注解</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> AbstractApplicationContext<span class="token punctuation">.</span>MESSAGE_SOURCE_BEAN_NAME<span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. @Conditional注解, 在ResourceBundleCondition注入之后进行注入, 指定前置依赖项</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>ResourceBundleCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. @EnableConfigurationProperties搭配@ConfigurationProperties使用</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> NO_RESOURCES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. MessageSourceProperties配置类, 对应一些默认配置项</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> MessageSourceProperties <span class="token function">messageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MessageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span>MessageSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils                    <span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duration cacheDuration <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getCacheDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheDuration <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setCacheMillis</span><span class="token punctuation">(</span>cacheDuration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setUseCodeAsDefaultMessage</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isUseCodeAsDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResourceBundleCondition</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootCondition</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> ConcurrentReferenceHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConditionOutcome<span class="token operator">></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentReferenceHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String basename <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.messages.basename"</span><span class="token punctuation">,</span> <span class="token string">"messages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConditionOutcome outcome <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>basename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outcome <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                outcome <span class="token operator">=</span> <span class="token function">getMatchOutcomeForBasename</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> basename<span class="token punctuation">)</span><span class="token punctuation">;</span>                cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>basename<span class="token punctuation">,</span> outcome<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> outcome<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> ConditionOutcome <span class="token function">getMatchOutcomeForBasename</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> String basename<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConditionMessage<span class="token punctuation">.</span>Builder message <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span><span class="token string">"ResourceBundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> <span class="token function">getResources</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"bundle with basename "</span> <span class="token operator">+</span> basename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResources</span><span class="token punctuation">(</span>ClassLoader classLoader<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String target <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath*:"</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">".properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> NO_RESOURCES<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看配置文件类 <code>MessageSourceProperties</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里使用lombok注解对一些冗余代码进行修改</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Message bundles encoding.     */</span>    <span class="token keyword">private</span> Charset encoding <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Loaded resource bundle files cache duration. When not set, bundles are cached     * forever. If a duration suffix is not specified, seconds will be used.     */</span>    <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span>ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token keyword">private</span> Duration cacheDuration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether to fall back to the system Locale if no files for a specific Locale have     * been found. if this is turned off, the only fallback will be the default file (e.g.     * "messages.properties" for basename "messages").     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> fallbackToSystemLocale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether to always apply the MessageFormat rules, parsing even messages without     * arguments.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> alwaysUseMessageFormat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether to use the message code as the default message instead of throwing a     * "NoSuchMessageException". Recommended during development only.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useCodeAsDefaultMessage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>     public boolean isFallbackToSystemLocale() {         return this.fallbackToSystemLocale;     }     public boolean isAlwaysUseMessageFormat() {         return this.alwaysUseMessageFormat;     }     public boolean isUseCodeAsDefaultMessage() {         return this.useCodeAsDefaultMessage;     } } ```</code></pre><h2 id="ApplicationEventPublisher-接口"><a href="#ApplicationEventPublisher-接口" class="headerlink" title="ApplicationEventPublisher 接口"></a>ApplicationEventPublisher 接口</h2><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p>自定义一类事件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// source代表事件源, 即谁发送的事件</span>    <span class="token keyword">public</span> <span class="token function">MyEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义一个或多个事件监听器（任意一个Spring组件即可）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MyEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 任意一个Spring组件都可以作为事件监听器</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEventListenerComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法参数需要和监听的事件类型保持一致, 例如发送的事件类型是String.class, 那么方法参数中也应该是String.class</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStringEvent</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String Event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMyEvent</span><span class="token punctuation">(</span>MyEvent myEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyClass Event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 ApplicationContext 中的功能进行事件发布</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationV5Main</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableApplicationContext context <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplicationV5Main<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token string">"Hello Event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="ResourcePatternResolve-接口"><a href="#ResourcePatternResolve-接口" class="headerlink" title="ResourcePatternResolve 接口"></a>ResourcePatternResolve 接口</h2><h2 id="EnvironmentCapable-接口"><a href="#EnvironmentCapable-接口" class="headerlink" title="EnvironmentCapable 接口"></a>EnvironmentCapable 接口</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先搜索</title>
      <link href="/2023/03/15/leetcode-shen-du-you-xian-sou-suo/"/>
      <url>/2023/03/15/leetcode-shen-du-you-xian-sou-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵背景"><a href="#矩阵背景" class="headerlink" title="矩阵背景"></a>矩阵背景</h1><h2 id="面试题13-机器人的运动范围"><a href="#面试题13-机器人的运动范围" class="headerlink" title="面试题13. 机器人的运动范围"></a><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">面试题13. 机器人的运动范围</a></h2><blockquote><p>  <strong>问题描述</strong>：</p><p>  地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。</p><p>  <strong>案例展示</strong>：</p><p>  例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。</p><p>  <strong>问题</strong>：</p><p>  请问该机器人能够到达多少个格子？</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">digSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkPosition</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> visited<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> visited<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标准化检查: 检查下标合法性和访问标志</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定制化检查: 根据题目要求确定, 行坐标和列坐标数位之和不大于k</span>        <span class="token keyword">return</span> <span class="token function">digSum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">digSum</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// dfs核心逻辑</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前遍历位置[i,j]的合法性检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkPosition</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 位置合法</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置访问标记</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每次允许的运动策略: 上、下、左、右</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前位置允许访问, 结果值 + 1</span>        <span class="token keyword">return</span> <span class="token operator">++</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 入口函数, 从[0,0]位置开始即可, 可以不需要嵌套两层for循环从任意位置开始扫描, 这个取决于具体问题, 这里采用通用模板</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="图背景"><a href="#图背景" class="headerlink" title="图背景"></a>图背景</h1><h2 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode.cn/problems/course-schedule/" target="_blank" rel="noopener">207. 课程表</a></h2><blockquote><p>  <strong>问题描述</strong>：</p><p>  你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程  bi 。</p><p>  <strong>案例展示</strong>：</p><p>  例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。</p><p>  <strong>问题</strong>：</p><p>  请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。</p></blockquote><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>思路：</p><ul><li>邻接表 + 入度表 + BFS队列</li><li>依次 <strong>“删除”</strong> 入度为 0 的节点 </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indegrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> adjs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adjs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisite <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>            indegrees<span class="token punctuation">[</span>prerequisite<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            adjs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prerequisite<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>prerequisite<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化队列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indegrees<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                numCourses<span class="token operator">--</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> adjNode <span class="token operator">:</span> adjs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>indegrees<span class="token punctuation">[</span>adjNode<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    numCourses<span class="token operator">--</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>adjNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numCourses <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>思路：</p><ul><li>三种遍历状态<ul><li>0：未遍历</li><li>1：正在遍历</li><li>-1：已遍历</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="210-课程表"><a href="#210-课程表" class="headerlink" title="210. 课程表"></a>210. 课程表</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度优先搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无锁并发</title>
      <link href="/2023/03/14/juc-00-wu-suo-bing-fa/"/>
      <url>/2023/03/14/juc-00-wu-suo-bing-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="无锁并发"><a href="#无锁并发" class="headerlink" title="无锁并发"></a>无锁并发</h1><h2 id="使用-CAS-代替锁"><a href="#使用-CAS-代替锁" class="headerlink" title="使用 CAS 代替锁"></a>使用 CAS 代替锁</h2><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadUnsafeAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ThreadUnsafeAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ThreadUnsafeAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SynchronizedAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicInteger balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CASAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CASAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> expect <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> update <span class="token operator">=</span> expect <span class="token operator">-</span> amount<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// CAS操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ACCOUNT <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runDemo</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>Thread<span class="token operator">:</span><span class="token operator">:</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>thread <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 主线程中调用每一个子线程的join()方法, 主线程等待每一个子线程运行结束</span>                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getBalance() = "</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cost times = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span> <span class="token operator">/</span> 1_000_000 <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadUnsafeAccount threadUnsafeAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadUnsafeAccount</span><span class="token punctuation">(</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            SynchronizedAccount synchronizedAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedAccount</span><span class="token punctuation">(</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            CASAccount casAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CASAccount</span><span class="token punctuation">(</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runDemo</span><span class="token punctuation">(</span>threadUnsafeAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runDemo</span><span class="token punctuation">(</span>synchronizedAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runDemo</span><span class="token punctuation">(</span>casAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CAS-底层原理"><a href="#CAS-底层原理" class="headerlink" title="CAS 底层原理"></a>CAS 底层原理</h3><p>用当前线程获取到的值和共享变量的最新值进行比较，如果相同，则通过CAS原子操作进行设置。（最终一致性）</p><p>因此，CAS 需要搭配 volatile 关键字进行使用，而 AtomicInteger 类中的值 value 则是使用了 volatile 进行修饰。</p><h3 id="最终一致性（ABA问题）演示"><a href="#最终一致性（ABA问题）演示" class="headerlink" title="最终一致性（ABA问题）演示"></a>最终一致性（ABA问题）演示</h3><p><strong>线程无法感知到其它线程对共享变量的修改，在大多数情况下是没有影响的。但是如果希望判断是否有其他线程对该共享变量进行修改，那么需要额外使用版本号，即不仅比较值，而且比较版本号，每次更新版本号加1。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABACAS</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicInteger num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> prev <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> prev <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> prev <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主线程无法感知到这个1经历过1->0->1的变化, 只要满足最终一致性即可</span>        num<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num.get() = "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABACASV2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// version版本号是int类型, 如果发生整数上溢该怎么办?</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicStampedReference<span class="token operator">&lt;</span>String<span class="token operator">></span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> version <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String prev <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String next <span class="token operator">=</span> <span class="token string">"HELLO"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> version<span class="token punctuation">,</span> version <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getReference() = "</span> <span class="token operator">+</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> version <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String prev <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String next <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> version<span class="token punctuation">,</span> version <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getReference() = "</span> <span class="token operator">+</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getReference() = "</span> <span class="token operator">+</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AtomicXXX-工具类"><a href="#AtomicXXX-工具类" class="headerlink" title="AtomicXXX 工具类"></a>AtomicXXX 工具类</h2><h3 id="AtomicInteger-原子整数"><a href="#AtomicInteger-原子整数" class="headerlink" title="AtomicInteger 原子整数"></a>AtomicInteger 原子整数</h3><h3 id="AtomicReference-原子引用"><a href="#AtomicReference-原子引用" class="headerlink" title="AtomicReference 原子引用"></a>AtomicReference 原子引用</h3><h3 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h3><h3 id="AtomicReferenceFieldUpdater-字段更新器"><a href="#AtomicReferenceFieldUpdater-字段更新器" class="headerlink" title="AtomicReferenceFieldUpdater 字段更新器"></a>AtomicReferenceFieldUpdater 字段更新器</h3><ul><li>通过静态方法 <code>newUpdater()</code> 来创建字段更新器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReferenceFieldUpdater<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CAS 相关工具类必须搭配 volatile 变量</span>    <span class="token keyword">volatile</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldUpdater</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AtomicReferenceFieldUpdater<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> String<span class="token operator">></span> studentNameUpdater <span class="token operator">=</span> AtomicReferenceFieldUpdater<span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                studentNameUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"thread-0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                studentNameUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student = "</span> <span class="token operator">+</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-Unsafe-类来模拟实现-AtomicInteger-原子整数类"><a href="#使用-Unsafe-类来模拟实现-AtomicInteger-原子整数类" class="headerlink" title="使用 Unsafe 类来模拟实现 AtomicInteger 原子整数类"></a>使用 Unsafe 类来模拟实现 AtomicInteger 原子整数类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFake</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过反射获取unsafe对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里在JDK8之后可以直接通过Unsafe.getUnsafe()来获取Unsafe对象</span>            Field theUnsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            theUnsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> theUnsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>AtomicIntegerFake<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFake</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> prev<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 这些方法都必须通过unsafe对象直接进行调用, 而不能通过方法重用的思想调用当前类中的其它方法     *     * @param amount     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义的 AtomicIntegerFake 来替换掉原有的 AtomicInteger 来进行测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>cas<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicIntegerFake<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFakeAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicIntegerFake balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFakeAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFakeAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerFake</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerFake</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        balance<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锁</title>
      <link href="/2023/03/14/juc-00-suo/"/>
      <url>/2023/03/14/juc-00-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="锁的两种实现"><a href="#锁的两种实现" class="headerlink" title="锁的两种实现"></a>锁的两种实现</h1><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可以多次加锁, 加锁几次就要解锁几次 </p><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>读写分离, 提高多线程的并发读的能力.</p><ul><li>不同线程: 读锁和写锁互斥, 写锁和写锁互斥.</li><li>同一线程: 支持锁降级, 不支持锁升级(写锁级别比读锁高, 获取到写锁后可以继续获取读锁, 但是反之则不行)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 锁降级案例演示: 成功</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func01Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读写锁对象并没有实现Lock接口, 需要获取其内部的读锁对象或写锁对象</span>    ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock readLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock writeLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 锁升级案例演示: 失败</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func02Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock readLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock writeLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 会阻塞在这里, 主线程获取到readLock后无法再获取writeLock</span>    writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h1><p>非公平锁: 效率更高, 但可能某个线程饥饿</p><p>公平锁: 线程放入到一个阻塞队列中, 每次将锁分配给队首线程</p><p>默认情况是非公平锁.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认情况是非公平锁    </span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7316153563782823691L<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在队列中没有线程等待, 突然多个并发线程竞争一把锁的时候会导致多个线程同时进入到CAS操作, 可能造成不公平</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read fields in reverse initialization order</span>    Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>     Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node s<span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h1><h1 id="AQS抽象队列同步器"><a href="#AQS抽象队列同步器" class="headerlink" title="AQS抽象队列同步器"></a>AQS抽象队列同步器</h1><h2 id="加锁过程"><a href="#加锁过程" class="headerlink" title="加锁过程"></a>加锁过程</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// tryAcquire(arg)->true: 成功获取锁, 直接返回</span>    <span class="token comment" spellcheck="true">// tryAcquire(arg)->false: 未能成功获取锁, 说明锁已经被其它线程占用, 进入阻塞队列acquireQueued()</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程放置到阻塞队列后, 中断当前线程, 等待被唤醒</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 公平锁的tryAcquire()重载方法</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// state属性表示上了几次锁, 如果一个线程上了3次锁, 则state属性值为3</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// c为0表示锁没有被任意一个线程占用</span>        <span class="token comment" spellcheck="true">// hasQueuedPredecessors()在并发的情况下可能多个线程都能判断成功, 相当于设置一道简单的门槛</span>        <span class="token comment" spellcheck="true">// CAS操作只会有一个线程能够成功, 通过第一道门槛筛选一部分线程, 减轻CAS的压力</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 此时成功进行CAS的那个唯一的线程获取到锁, 其它未能成功CAS的线程跳出if直接返回false</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程已经是锁的拥有者, 这是获取锁的线程又一次上锁, 也是为什么state会增加的原因</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加锁次数太多, 导致发生int上溢</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 公平锁只有在上面两种情况下才能够成功获取锁, 否则获取锁失败</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 非公平锁的tryAcquire()重载方法</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将当前线程封装成Node节点, 准备放入到阻塞队列末尾</span><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将当前线程封装到为一个Node, 准备放入队列中</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非首次入队可以不需要考虑初始化</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试通过CAS快速加入到队列中, 如果失败再通过enq()来加入队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 首次入队或CAS快速入队失败</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自旋入队, 这里面是一个死循环</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非首次入队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理CAS快速入队失败的情况, 并且这里面的CAS也可能再次失败, 因此使用死循环</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自旋机制的标志: 出现死循环(伪)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取前一个节点</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前线程是队列中的第一个节点, 则会再次进行获取锁的操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果当前线程获取了锁, 那么当前节点出队列(相当于设置其为head)</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没有获取到锁或者不是队列中的第一个线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// pred是node的前驱节点, 一直重复尝试, 直到将pred的状态设置为SIGNAL才停止</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ws > 0 &lt;-> 获取锁的操作已经取消</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找到第一个没有被取消的节点, 通过双向链表操作将中间的取消节点删除掉</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果获取锁的操作没有被取消, 则尝试设置其等待状态为SIGNAL(设置操作在此执行)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// LockSupport是一个工具类, park()方法将线程挂起, 直到其它线程发送一个unpack()信号或者interrupt()中断信号</span>    LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解锁过程"><a href="#解锁过程" class="headerlink" title="解锁过程"></a>解锁过程</h2>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized关键字详解</title>
      <link href="/2023/03/13/juc-02-synchronized-guan-jian-zi-xiang-jie/"/>
      <url>/2023/03/13/juc-02-synchronized-guan-jian-zi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Synchronized关键字详解"><a href="#Synchronized关键字详解" class="headerlink" title="Synchronized关键字详解"></a>Synchronized关键字详解</h1><h2 id="Monitor对象"><a href="#Monitor对象" class="headerlink" title="Monitor对象"></a>Monitor对象</h2><p>普通对象</p><h2 id="wait-和notify"><a href="#wait-和notify" class="headerlink" title="wait()和notify()"></a>wait()和notify()</h2><p>只有获取了锁的线程才能够调用 <code>wait()</code> 方法和 <code>notify()</code> 方法。</p><h1 id="可重入锁-ReentrantLock"><a href="#可重入锁-ReentrantLock" class="headerlink" title="可重入锁 ReentrantLock"></a>可重入锁 ReentrantLock</h1><p>通过 lockInterruptibly() 方法和 isHeldByCurrentThread() 方法来处理死锁</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ReentrantLock lockA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReentrantLock lockB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程先对A加锁, 再对B加锁</span>        Thread threadX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                lockA<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lockB<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 真正执行的工作</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : finished!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lockA<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lockB<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"thread-X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                lockB<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lockA<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : finished!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lockA<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lockA<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    lockB<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"thread-Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadX<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadY<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定一个任务的超时时间, 如果在该时间内任务没有完成, 则认为发生死锁</span>        <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        threadY<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TODO: 这里应该使用if判断</span>        <span class="token comment" spellcheck="true">// 释放所拥有的锁</span>        threadY<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadY<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : interrupt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO: 为什么这里不可以重新对线程使用start()?</span>        <span class="token comment" spellcheck="true">// 解决死锁</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : finished!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interrupt方法详解</title>
      <link href="/2023/03/13/juc-03-interrupt-fang-fa-xiang-jie/"/>
      <url>/2023/03/13/juc-03-interrupt-fang-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Interrupt方法详解"><a href="#Interrupt方法详解" class="headerlink" title="Interrupt方法详解"></a>Interrupt方法详解</h1><h2 id="Interrupt打断阻塞态线程"><a href="#Interrupt打断阻塞态线程" class="headerlink" title="Interrupt打断阻塞态线程"></a>Interrupt打断阻塞态线程</h2><blockquote><p>  打断阻塞态的线程会抛出异常，同时清空打断状态。该异常常用来作为唤醒手段</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptBlockedMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 目前看来, 打断标志在执行异常处理前就被重新设置为false. </span>                <span class="token comment" spellcheck="true">// 目前认为打断标志经历: false(初始值) -> true(主线程调用interrupt()方法) -> false(清空打断状态)</span>                <span class="token comment" spellcheck="true">// todo: 打断标志是否会进行更改? 如果实际上没有更改那么如何检测到被打断呢? 可能是直接抛出溢出, 根本没有修改打断标志</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为了确保threadA启动, 调用sleep()方法进入阻塞状态</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断threadA是否被打断</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> threadA<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Interrupt打断运行态线程"><a href="#Interrupt打断运行态线程" class="headerlink" title="Interrupt打断运行态线程"></a>Interrupt打断运行态线程</h2><blockquote><p>  打断标志可以认为是线程与线程之间的一个接口，主线程调用<code>interrupt()</code>是希望其他线程能够被打断，但实际的实现逻辑取决于其他线程的代码逻辑（由程序员编写）。即 <code>interrupted</code>打断标志并不能真正意义上的停止线程。</p></blockquote><h3 id="isInterrupted-方法不会清空打断标志"><a href="#isInterrupted-方法不会清空打断标志" class="headerlink" title="isInterrupted() 方法不会清空打断标志"></a>isInterrupted() 方法不会清空打断标志</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptRunningMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 线程被打断, 执行退出逻辑</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被打断, 退出!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// interrupted() 不会清空打断标志, 所以这里输出true</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> threadA<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313112652385.png" alt="isInterrupted()方法调用结果" style="zoom:150%;"><h3 id="interrupted-方法清空打断标志"><a href="#interrupted-方法清空打断标志" class="headerlink" title="interrupted() 方法清空打断标志"></a>interrupted() 方法清空打断标志</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptRunningMainWithCleanFlag</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 线程被打断, 执行退出逻辑</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被打断, 退出!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// interrupted() 会清空打断标志, 所以这里输出false</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里线程结束后打断标志重置为默认值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> threadA<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313112622230.png" alt="image-20230313112622230"></p><h2 id="两阶段终止模式"><a href="#两阶段终止模式" class="headerlink" title="两阶段终止模式"></a>两阶段终止模式</h2><h3 id="不合适的思路"><a href="#不合适的思路" class="headerlink" title="不合适的思路"></a>不合适的思路</h3><ul><li><p>使用<code>stop()</code>方法强制杀死线程</p><p>直接杀死占用锁的线程，会使得其无法释放锁，导致其他线程无法获取该锁</p></li><li><p>使用<code>System.exit()</code>方法退出整个程序</p><p>小题大做</p></li></ul><h3 id="使用interrupt实现优雅退出的两阶段终止模式"><a href="#使用interrupt实现优雅退出的两阶段终止模式" class="headerlink" title="使用interrupt实现优雅退出的两阶段终止模式"></a>使用interrupt实现优雅退出的两阶段终止模式</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>例如监控程序，每隔一段时间执行一次，相比于上面的直接打断运行态线程的方式，两阶段终止模式由于使用了<code>sleep()</code>，所以对CPU的占用更小。监控进程每隔一段时间执行一次即可，不需要 <code>while(true)</code> 死循环重复不断地执行。</p><h4 id="两阶段的含义"><a href="#两阶段的含义" class="headerlink" title="两阶段的含义"></a>两阶段的含义</h4><ul><li>第一阶段：考虑线程被中断时处于运行态的情况</li><li>第二阶段：考虑线程被中断时处于阻塞态的情况</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> exitFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exitFlag <span class="token operator">||</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果被打断, 进行善后处理, 然后退出</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行善后处理工作, 优雅退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// threadA的处理逻辑</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"监控中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果没有被打断</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    exitFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 这里也可以不使用exitFlag变量来辅助判断, 再次执行interrupt()重新设置打断标志即可, 取消下面注释即可</span>                    <span class="token comment" spellcheck="true">// Thread.currentThread().interrupt();</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313110314610.png" alt="image-20230313110314610" style="zoom:150%;"><h2 id="interrupt打断park线程"><a href="#interrupt打断park线程" class="headerlink" title="interrupt打断park线程"></a>interrupt打断park线程</h2><blockquote><p>  <code>park()</code>是LockSupport类中的一个方法，作用也是阻塞线程，但其原理是通过判断打断标志<code>interrupted</code>：</p><ul><li>如果打断标志为false，那么会阻塞</li><li>如果打断标志为true，那么相当于没有效果</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>LockSupport<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptParkMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// interrupted打断标志为false, pack生效, unpack time cost接近10s(主线程sleep的时间)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpack time cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// interrupted打断标志为true, pack失效, unpack time cost接近0</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpack time cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Join方法详解</title>
      <link href="/2023/03/13/juc-01-join-fang-fa-xiang-jie/"/>
      <url>/2023/03/13/juc-01-join-fang-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Join-方法详解"><a href="#Join-方法详解" class="headerlink" title="Join 方法详解"></a>Join 方法详解</h1><blockquote><p>  <code>join()</code> 用来等待一个线程的结束，是一种<strong>比较”暴力“的线程同步机制</strong>，必须等到一个线程结束后另一个线程才开始执行接下来的代码。</p><p>  同时，<code>join(3000)</code>指定最长等待时间，如果等待时间超过指定的最长等待时间，那么会直接执行下面的方法。</p></blockquote><h2 id="默认无限等待"><a href="#默认无限等待" class="headerlink" title="默认无限等待"></a>默认无限等待</h2><h3 id="测试案例1"><a href="#测试案例1" class="headerlink" title="测试案例1"></a>测试案例1</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin: "</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// threadA在sleep的时候, threadB也在sleep</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//-------假设threadA和threadB都已经出于running运行态阶段</span>            threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------此时threadA和threadB都已经睡眠1s</span>            threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------threadB再睡眠1s, 主线程便可以执行后面的逻辑</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end: "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果约等于2s</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run time cost is: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试案例2"><a href="#测试案例2" class="headerlink" title="测试案例2"></a>测试案例2</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin: "</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// threadA在sleep的时候, threadB也在sleep</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadA已经出于running运行态阶段</span>            threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------此时threadA已经睡眠1s, 主线程可以执行启动threadB的代码</span>            threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadB已经出于running运行态阶段</span>            threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------threadB睡眠2s, 主线程便可以执行后面的逻辑</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end: "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果约等于3s</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run time cost is: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：<code>join()</code>方法执行后，如果不满足条件，则调用线程阻塞，不会执行 <code>join()</code> 方法后面的代码。</p><h2 id="指定最长等待时间"><a href="#指定最长等待时间" class="headerlink" title="指定最长等待时间"></a>指定最长等待时间</h2><blockquote><p>  <strong>最长等待时间并不是必须等待指定时间</strong>，而是如果在该指定时间内还没结束，则不再等待；如果在该指定时间内结束，也可以执行下面的流程。</p></blockquote><h3 id="测试案例3"><a href="#测试案例3" class="headerlink" title="测试案例3"></a>测试案例3</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin: "</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// threadA在sleep的时候, threadB也在sleep</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadA已经出于running运行态阶段</span>            threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------此时threadA已经睡眠1s, 主线程可以执行启动threadB的代码</span>            threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadB已经出于running运行态阶段</span>            threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------threadB睡眠2s, join(3000)至多等待3s, 任一条件满足即可, 因此阻塞时间为: min(max_wait_time, thread_run_time);</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end: "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果约等于3s</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run time cost is: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2023/03/13/z-za-lei-bo-ke-da-jian-hexo/"/>
      <url>/2023/03/13/z-za-lei-bo-ke-da-jian-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo搭建个人博客"><a href="#hexo搭建个人博客" class="headerlink" title="hexo搭建个人博客"></a>hexo搭建个人博客</h1><h2 id="下载nodejs使用npm"><a href="#下载nodejs使用npm" class="headerlink" title="下载nodejs使用npm"></a>下载nodejs使用npm</h2><h2 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h2><p><strong>全局安装的作用是以后没有网络的时候也能建立工程</strong></p><ol><li><p>全局安装淘宝的cnpm, 方便加速</p><pre class="line-numbers language-shell"><code class="language-shell"> npm install -g cnpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>全局安装hexo</p><pre class="line-numbers language-shell"><code class="language-shell"> cnpm install -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="hexo使用流程"><a href="#hexo使用流程" class="headerlink" title="hexo使用流程"></a>hexo使用流程</h2><ol><li><p>在IDEA中新建工程<code>blogtest</code></p></li><li><p>打开命令行终端, 进入resources文件夹, 使用<code>hexo init</code>命令建立hexo项目. <strong>必须为空文件夹才能用来初始化hexo项目</strong></p><p> <img src="https://gitee.com/andewkarsa/pictures/raw/master/image-20220127041335213.png" alt="image-20220127041335213"></p></li><li><p>使用<code>hexo n</code>命令新建文章, 存放在生成的<code>source</code>-&gt;<code>_posts</code>文件夹下<br> <img src="https://gitee.com/andewkarsa/pictures/raw/master/image-20220126231641532.png" alt="image-20220126231641532"></p></li><li><p>使用<code>Typora</code>软件对文章进行修改后保存</p></li><li><p>使用<code>hexo g</code>命令对<code>_post</code>文件夹下的文章进行处理生成<code>html</code>文件, 以便放到网站上展示</p></li><li><p>使用<code>hexo s</code>命令启动项目进行本地预览</p></li><li><p>在github上新建仓库, 必须将其命名为:  <strong>&lt;用户名&gt;.github.io</strong> (不需要尖括号“&lt;”)</p></li><li><p>使用<code>cnpm install --save hexo-deployer-git</code>命令下载部署插件</p></li><li><p>修改<code>_config.yml</code>配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token comment" spellcheck="true"># Deployment</span> <span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span> <span class="token key atrule">deploy</span><span class="token punctuation">:</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> git   <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;用户名<span class="token punctuation">></span>/&lt;用户名<span class="token punctuation">></span>.github.io <span class="token comment" spellcheck="true">#如果部署到gitee上, 则将github该层gitee即可</span>   <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防止一些莫名奇妙的问题</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global http.sslVerify "false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="11"><li><p>使用<code>hexo d</code>命令推送到远端</p></li><li><p>输入网址 <a href="https://yimeisuren.github.io" target="_blank" rel="noopener">https://yimeisuren.github.io</a> 对个人博客进行访问</p></li></ol><h2 id="修改博客主题"><a href="#修改博客主题" class="headerlink" title="修改博客主题"></a>修改博客主题</h2><ul><li><p>网上搜索hexo主题,找到github的地址, 并克隆到blog文件夹下. 下载慢速的情况下加入<code>.cnpmjs.org</code>后缀</p><pre class="line-numbers language-shell"><code class="language-shell">  git clone https://github.com.cnpmjs.org/next-theme/hexo-theme-next.git themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="https://gitee.com/andewkarsa/pictures/raw/master/image-20220127001135016.png" alt="image-20220127001135016"></p><p>  其中<code>themes/next</code>为<code>blog</code>文件夹下的子文件夹</p></li><li><p>修改配置文件<code>_config.yml</code><br>  theme部分修改为</p><pre class="line-numbers language-yaml"><code class="language-yaml">  <span class="token key atrule">theme</span><span class="token punctuation">:</span> next <span class="token comment" spellcheck="true">#和文件夹保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="hexo操作"><a href="#hexo操作" class="headerlink" title="hexo操作"></a>hexo操作</h2><ol><li><p><strong>必须使用hexo n来新建文章, 否则文章的名字属于“无标题”</strong></p></li><li><p>在<code>hexo d</code>推送之前, 要先下载部署器</p></li></ol><pre class="line-numbers language-shell"><code class="language-shell">hexo clean#清楚public里面的文件(待推送的文件)hexo n#新建markdown文档hexo g#由source/_post中的文件生成public中的html文件hexo s#启动hexo服务hexo d #推送到github上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volatile关键字</title>
      <link href="/2023/03/12/juc-02-volatile-guan-jian-zi/"/>
      <url>/2023/03/12/juc-02-volatile-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h1><p>Java 多线程需要解决三个问题：</p><ul><li><strong>原子性</strong>：保证指令不会受到线程上下文切换的影响</li><li><strong>可见性</strong>：保证指令不会受到 CPU 缓存的影响</li><li><strong>有序性</strong>：保证指令不会受到 CPU 指令重排序和 JIT 即时编译器的指令重排序的影响</li></ul><p>其中，<strong>原子性</strong>通过<code>synchronized</code>关键字（锁）来实现；而<strong>可见性</strong>和<strong>有序性</strong>则通过<code>volatile</code>关键字来实现（也可以通过<code>synchronized</code>来实现）。</p><h2 id="Java内存模型造成的可见性问题"><a href="#Java内存模型造成的可见性问题" class="headerlink" title="Java内存模型造成的可见性问题"></a>Java内存模型造成的可见性问题</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313002403327.png" alt="image-20230313002403327"></p><h2 id="指令重排序造成的有序性问题"><a href="#指令重排序造成的有序性问题" class="headerlink" title="指令重排序造成的有序性问题"></a>指令重排序造成的有序性问题</h2><h3 id="指令重排序现象"><a href="#指令重排序现象" class="headerlink" title="指令重排序现象"></a>指令重排序现象</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 没有相互依赖关系，可能发生指令重排序</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种情况下不会发生指令重排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="潜在问题演示"><a href="#潜在问题演示" class="headerlink" title="潜在问题演示"></a>潜在问题演示</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Volatile的实现原理"><a href="#Volatile的实现原理" class="headerlink" title="Volatile的实现原理"></a>Volatile的实现原理</h2><p>volatile 通过<strong>读写屏障</strong>来实现在多线程环境下共享变量的可见性和有序性。</p><h3 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h3><ul><li><strong>写屏障之前</strong>执行的代码，对共享变量的修改都会立即同步到主内存中（可见性保证之一）</li><li><strong>写屏障之前</strong>的代码不会发生重排序（有序性保证之一）</li></ul><h3 id="读屏障"><a href="#读屏障" class="headerlink" title="读屏障"></a>读屏障</h3><ul><li><strong>读屏障之后</strong>执行的代码，对共享变量的读取都必须从主内存中获取最新值，而不能使用工作内存中的缓存之（可见性保证之一）</li><li><strong>读屏障之后</strong>的代码不会发生重排序（有序性保证之一）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="双重检测锁机制的完善（DCL）"><a href="#双重检测锁机制的完善（DCL）" class="headerlink" title="双重检测锁机制的完善（DCL）"></a>双重检测锁机制的完善（DCL）</h2><h3 id="双重检测锁"><a href="#双重检测锁" class="headerlink" title="双重检测锁"></a>双重检测锁</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-内存分配与垃圾回收</title>
      <link href="/2023/03/12/jvm-04-nei-cun-fen-pei-yu-la-ji-hui-shou/"/>
      <url>/2023/03/12/jvm-04-nei-cun-fen-pei-yu-la-ji-hui-shou/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>问：为什么需要 GC？</strong></p><ul><li>回收内存，防止内存消耗完</li><li>进行碎片整理，防止因内存碎片太多造成无法分配大的连续空间</li></ul><p><strong>问：什么是内存泄漏？</strong></p><p>答：在 C 语言中，开辟了一片内存空间，并通过指针指向该地址。 如果在后面使用完后，将该指针指向了其它地方，且没有事先释放这片内存空间，则会造成这片<strong>内存空间不再被使用，但是又不能被系统回收再利用</strong>， 这种情况称为内存泄漏。</p><p><strong>问：有了自动内存管理和 GC，Java 中会发生内存泄漏吗？</strong></p><p>答：在有 GC 的编程语言中，所谓的内存泄漏是指对象的声明周期被意外地延长。例如，流使用完毕后没有及时关闭。</p><p><strong>问：内存动态分配和内存回收技术已经相当成熟，一切似乎进入到“自动化”时代，为什么需要了解垃圾收集和内存分配技术？</strong></p><ul><li>当需要排查各种内存溢出，内存泄漏问题时；</li><li>当垃圾收集成为系统达到更高并发量的瓶颈时，我们需要对这些<strong>自动化技术</strong>进行监控和调节</li></ul><h2 id="分代收集理论（经验法则）"><a href="#分代收集理论（经验法则）" class="headerlink" title="分代收集理论（经验法则）"></a>分代收集理论（经验法则）</h2><ul><li><p>弱分代假说：绝大多数对象的生命周期都是短暂的</p></li><li><p>强分代假说：经历越多次垃圾收集存活下来的对象越难以消亡</p></li></ul><p>垃圾收集器的设计原则基于分代收集理论：<strong>收集器应该将 Java 堆划分出不同的区域，然后将回收对象根据其年龄分配到不同的区域之中进行存储。</strong></p><h2 id="垃圾收集-GC-的三个步骤"><a href="#垃圾收集-GC-的三个步骤" class="headerlink" title="垃圾收集 GC 的三个步骤"></a>垃圾收集 GC 的三个步骤</h2><ol><li><p>定义垃圾内存（What）</p><p>哪些内存需要回收，或者说，什么是垃圾内存？</p></li><li><p>回收策略（How）</p><p>使用什么回收算法来进行回收？</p></li><li><p>回收时机（When）</p><p>什么时候回收？</p></li></ol><h1 id="垃圾对象标记"><a href="#垃圾对象标记" class="headerlink" title="垃圾对象标记"></a>垃圾对象标记</h1><p>什么是垃圾? 或哪些内存需要回收?</p><p>生命周期结束的对象需要回收，即已死亡的对象需要回收。</p><p>具体来说，<strong>只有方法区和堆中需要进行GC，并且方法区中还可以不进行GC</strong>。 所以说，GC的主要工作是回收堆内存。</p><h2 id="引用计数算法（Reference-Counting）"><a href="#引用计数算法（Reference-Counting）" class="headerlink" title="引用计数算法（Reference Counting）"></a>引用计数算法（Reference Counting）</h2><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><table><thead><tr><th>引用类型</th><th>含义</th></tr></thead><tbody><tr><td>强引用</td><td>传统认为的引用，只有当引用计数器为 0 时才会被回收</td></tr><tr><td>软引用</td><td>内存空间不够的时候会被回收，如果回收完还是不够才发生内存溢出异常</td></tr><tr><td>弱引用</td><td>发生GC的时候回收</td></tr><tr><td>虚引用</td><td>虚引用和引用的关系不大，唯一目的是在这个对象被收集器回收时收到一个系统通知</td></tr></tbody></table><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>为对象添加一个引用计数器，初始值为1</li><li>每当有一个地方引用时，计数器加1; 每当引用失效时，计数器减1</li><li>任何时刻计数器为0时，说明该对象不可再被使用</li></ol><h3 id="缺点与措施"><a href="#缺点与措施" class="headerlink" title="缺点与措施"></a>缺点与措施</h3><p><strong>缺点：</strong>当存在循环引用，即有向图中存在环的时候，无法回收环中的对象。</p><p><strong>解决办法:</strong></p><ul><li><p>手动解除</p><p>  在合适的时机，手动设置引用计数为0</p></li><li><p>使用弱引用（weakref）</p><p>  弱引用只要发生 GC 就会被回收，不用考虑弱引用的引用计数。 有点类似用户线程计数为 0，则不用考虑守护线程就可以退出。</p></li></ul><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p><strong>从一系列被称为 GC Root 的根对象出发</strong>，根据引用关系构成一张有向图（若 A 引用 B，则有 A $\to$ B），通过在图上遍历，遍历完成后，未访过的对象被认为是垃圾对象。</p><p>GC Root对象（一定不可以被垃圾回收的对象）包括:</p><ul><li>在虚拟机栈中引用的对象：例如各个线程被调用的方法堆栈中使用到的参数，局部变量，临时变量等</li><li>在方法区中常量引用的对象：例如字符串常量池（String Table）中的引用</li><li>在本地方法栈中JNI引用的对象</li><li>Java虚拟机内部的引用：例如基本数据类型对应的 Class 对象，一些常驻的异常对象（NullPointException等），系统类加载器</li><li>所有被同步锁持有的对象</li><li>反映Java虚拟机内部情况的JMXBean，JVMTI中注册的回调，本地代码缓存</li></ul><p>确定 GC Root 的方法步骤：</p><ol><li>通过 jmap 获取快照</li><li>使用 MemoryAnalyzerTool 进行分析</li><li>扫描堆空间，确定与 GC Root 相连通的对象</li></ol><h2 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h2><p>验证 Java 并不是使用 Reference Counting 算法</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="垃圾回收策略"><a href="#垃圾回收策略" class="headerlink" title="垃圾回收策略"></a>垃圾回收策略</h1><blockquote><p><strong>假定：</strong></p><ul><li>新生代总是会有大量对象死亡（对新生代进行垃圾收集的效率最高）</li><li>新生代中的对象可能被老年代中的对象指向引用（老年代中的对象可能需要放入到 GC Roots 中进行遍历）</li><li>跨代引用（老年代引用新生代）的占比极低（对老年代进行进一步划分，可能有跨代引用的对象放入专门的区域，这个区域是什么？）</li></ul></blockquote><p><strong>根据分代收集理论，新生代中总是会有大量对象死亡，因此新生代的垃圾收集效率最高。</strong> 而对于新生代中经历 GC 之后存活的对象会逐渐晋升到老年代中。 对于新生代的垃圾收集，由于使用可达性分析算法，<strong>而新生代中的对象可能被老年代中的对象引用，因此需要将老年代中的对象添加到GC Roots中进行遍历</strong>。 然而将整个老年代中的对象全部添加到GC Roots中代价太高，并且<strong>跨代引用（老年代引用新生代）的占比极低，但是又不能不对跨代引用进行处理，因此进一步对老年代进行划分</strong>，有可能进行跨代引用的老年代对象专门放在一个区域，同样由于跨代引用占比低的事实，添加到 GC Roots 中的老年代对象也会少得多，从而提高了可达性分析的效率。</p><h2 id="收集范围"><a href="#收集范围" class="headerlink" title="收集范围"></a>收集范围</h2><table><thead><tr><th>类型</th><th>GC</th><th>范围</th></tr></thead><tbody><tr><td>部分收集（Partial GC）</td><td>新生代收集（Minor GC）</td><td>只收集新生代中的死亡对象</td></tr><tr><td></td><td>老年代收集（Marjor GC）</td><td>只收集老年代中的死亡对象</td></tr><tr><td></td><td>混合收集（Mixed GC）</td><td>收集新生代和部分老年代中的死亡对象</td></tr><tr><td>整堆收集（Full GC）</td><td>整堆收集（Full GC）</td><td>收集整个Java堆和方法区</td></tr></tbody></table><h2 id="收集算法"><a href="#收集算法" class="headerlink" title="收集算法"></a>收集算法</h2><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>垃圾收集过程中，存活对象不移动，可能存在大量内存碎片</p><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p>以空间换时间的做法，将内存区域一分为二，每次轮流使用其中一块，当发生垃圾收集时只需要通过两个指针完成从一个区域到另一个区域的复制，同时也处理了内存碎片的问题。 </p><p>缺点：</p><ul><li>复制的开销大，因此只适用于对象存活率低的新生代</li><li>内存利用率低，只有50%。为此HotSpot虚拟机进一步对新生代的内存布局进行优化，<strong>按8:1:1的比例分配一片Eden区域和两片Survivor区域</strong>，每次可以使用Eden和一片Survivor，当发生垃圾收集时将存活对象复制到另一片Survivor中。另外在特殊情况下，可能一片Survivor的空间不足以保存所有的存活对象，此时一般将剩余对象保存到老年代中。</li></ul><blockquote><p>标记-复制算法一般用于新生代的垃圾收集，不用于老年代的垃圾收集。因为该算法复制存活的对象，新生代中只有少部分存活的对象，而老年代中可能有着 100% 的存活率。</p></blockquote><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>垃圾收集过程中，存活对象移动整理，清除了内存碎片，但是相较于标记-清除算法更加复杂和耗时。 但是由于程序不仅仅考虑到收集过程，还有内存的分配和访问过程，<strong>每次垃圾收集都进行内存的整理能够简化内存分配和访问</strong>。 而<strong>内存分配和访问的频率是远远大于垃圾回收的频率的</strong>，因此HotSpot选择在老年代中使用标记-整理算法。</p><p>标记-整理算法在移动对象的期间会使得应用程序不可访问，这种现象被最初的虚拟机设计者称为“Stop The World”，目前 ZGC 收集器使用<strong>读屏障技术实现了整理过程与用户线程的并发执行</strong>。</p><blockquote><p>标记-清除算法和标记-整理算法的比较：</p><p>标记-整理算法可以算是标记-清除算法的一种变体，二者从不同的角度出发：</p><ul><li>标记-清除算法简化垃圾收集过程，不为其添加额外的负担，但是这会造成内存分配和访问时的消耗；</li><li>标记-整理算法则是在垃圾收集过程中进行额外的整理移动过程，这个移动过程会造成 stop the world（应用程序在这段时间内被暂停），但是这让更频繁的内存分配和访问过程受益，因此还是值得的。</li></ul><p>另外，CMS 垃圾收集器使用一种折中的方法，在大多数时候使用标记-清除算法，容忍内存碎片的存在，</p></blockquote><h1 id="对象的finalization机制"><a href="#对象的finalization机制" class="headerlink" title="对象的finalization机制"></a>对象的finalization机制</h1><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207163638846.png" alt="image-20230207163638846"></p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230207163945620.png" alt="image-20230207163945620" style="zoom:150%;">]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-深入理解StringTable</title>
      <link href="/2023/03/12/jvm-03-shen-ru-li-jie-stringtable/"/>
      <url>/2023/03/12/jvm-03-shen-ru-li-jie-stringtable/</url>
      
        <content type="html"><![CDATA[<h1 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    String s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    String s3 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ab</span>    String s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    String s5 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    String s6 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// s4放入之前已经存在"ab", 因此s4放入失败, s6是StringTable中的字符串对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>    String x2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String x1 <span class="token operator">=</span> <span class="token string">"cd"</span><span class="token punctuation">;</span>    x2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x2 <span class="token operator">==</span> x1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    String x3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    x3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String x4 <span class="token operator">=</span> <span class="token string">"zw"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x3 <span class="token operator">==</span> x4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="String-的基本特性"><a href="#String-的基本特性" class="headerlink" title="String 的基本特性"></a>String 的基本特性</h1><h2 id="String-的不可变性"><a href="#String-的不可变性" class="headerlink" title="String 的不可变性"></a>String 的不可变性</h2><pre class="line-numbers language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改s变量指向的字符串对象, 而不是改变原本的字符串对象</span>s <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过StringBuilder的append()方法来拼接, 然后改变s的指向</span>s <span class="token operator">+=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 将app.str作为实参传入, 相当于s和app.str指向同一个字符串对象</span>        <span class="token comment" spellcheck="true">// 2. s = "world" 是改变局部变量s的引用对象, 并没有对原本的引用对象"hello"产生影响</span>        s <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringMain app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>str<span class="token punctuation">,</span> app<span class="token punctuation">.</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206141304607.png" alt="image-20230206141304607" style="zoom:150%;"><h2 id="字符串常量池（String-Pool）中不会存储两个相同内容的字符串"><a href="#字符串常量池（String-Pool）中不会存储两个相同内容的字符串" class="headerlink" title="字符串常量池（String Pool）中不会存储两个相同内容的字符串"></a>字符串常量池（String Pool）中不会存储两个相同内容的字符串</h2><p>和Set的性质一样, 底层也是使用HashTable来实现的.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加断点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一次遇到字面量字符串, 会添加到字符串常量池中, 调试时字符串计数会增加.</span>        <span class="token comment" spellcheck="true">// 注意应该用运行完一行代码后的值来进行比较</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后面再次遇到相同的字符串, 就不会再次添加, 而是直接从常量池中获取, 此时字符串计数不再增加</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206151437938.png" alt="image-20230206151437938"></p><h1 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h1><p>8种基本数据类型和String类型提供了一个<strong>常量池</strong>. 常量池类似一个Java系统级别的缓存.</p><p>在Java8中字符串常量池在堆中.</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">// 方式一: 通过双引号声明的String对象会直接存储在常量池中String s = "hello";// 方式二: 使用intern()方法添加到字符串常量池中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><ul><li>常量 + 常量 =&gt; 编译期优化 =&gt; 常量池</li><li>变量 + 常量(变量) =&gt; StringBuilder() =&gt; 堆</li></ul><blockquote><p>  StringBuilder类的toString()方法会通过new String()来在堆空间创建一个字符串</p></blockquote><h2 id="常量拼接"><a href="#常量拼接" class="headerlink" title="常量拼接"></a>常量拼接</h2><p>注意final修饰的量会在编译期优化, 相当于符号常量</p><h3 id="Java源代码"><a href="#Java源代码" class="headerlink" title="Java源代码"></a>Java源代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true. 由于编译期优化, 本质上String s1 = "abc";</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字节码反编译的Java代码"><a href="#字节码反编译的Java代码" class="headerlink" title="字节码反编译的Java代码"></a>字节码反编译的Java代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StringMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class字节码"><a href="#class字节码" class="headerlink" title="class字节码"></a>class字节码</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206155400962.png" alt="image-20230206155400962" style="zoom:150%;"><h2 id="变量拼接"><a href="#变量拼接" class="headerlink" title="变量拼接"></a>变量拼接</h2><p>只要拼接过程中出现变量, 那么就属于变量拼接</p><h3 id="Java源代码-1"><a href="#Java源代码-1" class="headerlink" title="Java源代码"></a>Java源代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 常量</span>        String s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 变量</span>        String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class字节码-1"><a href="#class字节码-1" class="headerlink" title="class字节码"></a>class字节码</h3><p>注: 使用Java8</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206175146341.png" alt="image-20230206175146341"></p><h3 id="正确使用-StringBuilder-提高效率"><a href="#正确使用-StringBuilder-提高效率" class="headerlink" title="正确使用 StringBuilder 提高效率"></a>正确使用 StringBuilder 提高效率</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func01</span><span class="token punctuation">(</span><span class="token keyword">int</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每次拼接都会创建一个StringBuilder对象, 完成append()和toString()操作, 重复counts次</span>            <span class="token comment" spellcheck="true">// 每次toString()都会创建一个新的字符串</span>            <span class="token comment" spellcheck="true">// 过多的String对象和StringBuilder对象需要回收, 增加了垃圾回收的负担</span>            s <span class="token operator">+=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func02</span><span class="token punctuation">(</span><span class="token keyword">int</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只会创建一个StringBuilder()对象, 不会将每个中间临时结果都保存成一个字符串</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin<span class="token punctuation">;</span>        begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func01</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"func01: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func02</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"func02: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 常量 + 常量</span>        String s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 常量</span>        String s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 变量</span>        String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="intern-与字符串常量池-重点图解"><a href="#intern-与字符串常量池-重点图解" class="headerlink" title="intern() 与字符串常量池(重点图解)"></a>intern() 与字符串常量池(重点图解)</h1><p>将堆中字符串放入到常量池中</p><ul><li>如果常量池中已经存在该字符串, 那么intern()会返回该字符串在常量池中的地址</li><li>如果常量池中不存在该字符串, 那么会在常量池中创建一个引用变量, 指向字符串已经在堆中分配的内存空间. 即放入常量池并不是在常量池中新开辟一片内存空间来保存这个字符串对象, 而是复用堆空间中已有的字符串对象.</li></ul><p><code>s.intern() == t.intern() &lt;=&gt; s.equals(t)</code></p><blockquote><p>注：在 JDK 1.8 之前，<code>intern()</code> 放入字符串时也会创建一份副本，然后将副本放入到 StringTable 中。在 JDK 1.8 及以后，不会创建额外的字符串副本对象。</p></blockquote><h2 id="字符串常量池中存在相同内容的字符串"><a href="#字符串常量池中存在相同内容的字符串" class="headerlink" title="字符串常量池中存在相同内容的字符串"></a>字符串常量池中存在相同内容的字符串</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// "abc"已经放入到字符串常量池中</span>        String sc <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (1)</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (2)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为常量池中已经有相同内容的字符串, 因此返回sc的值</span>        <span class="token comment" spellcheck="true">// 问: 这里如何快速判断s字符串是否出现在字符串常量池中呢? 通过挨个字符比较吗? 那样效率太低了吧. 通过hashCode可能会有hash冲突啊, 相同hashCode也不能说明两个字符串内容相同啊</span>        <span class="token comment" spellcheck="true">// 答: 通过equals()方法</span>        String intern <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (3)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206172929418.png" alt="image-20230206172929418" style="zoom:150%;"><h2 id="字符串常量池中不存在相同内容的字符串-易错"><a href="#字符串常量池中不存在相同内容的字符串-易错" class="headerlink" title="字符串常量池中不存在相同内容的字符串(易错)"></a>字符串常量池中不存在相同内容的字符串(易错)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// s指向是堆空间的一个字符串对象"abc", 因为是通过StringBuilder的toString()方法生成的字符串对象, 而toString()底层又是调用new String(char[], int, int), 所以"abc"以字符数组['a','b','c']的形式存在于StringBuilder对象的value属性中, 并不会将"abc"记录到字符串常量池中. 因此这里创建了一个s = "abc", 但是</span>        String s <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (1)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将s指向的字符串对象放入到字符串常量池中, 之后对于"abc"的引用都是引用s指向的字符串对象</span>        String intern <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (2)</span>        <span class="token comment" spellcheck="true">// sc一定指向字符串常量池中指向的字符串对象</span>        String sc <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206172652616.png" alt="image-20230206172652616" style="zoom:150%;"><h1 id="new-String-到底创建了多少个对象"><a href="#new-String-到底创建了多少个对象" class="headerlink" title="new String() 到底创建了多少个对象"></a>new String() 到底创建了多少个对象</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 字面量"x" =></span>        <span class="token comment" spellcheck="true">//      1.1. 如果字符串常量池中不存在"x", 那么会在堆空间中创建一个字符串对象"x"(假设地址为0x100), 并自动放入到字符串常量池中</span>        <span class="token comment" spellcheck="true">//      1.2. 如果字符串常量池中存在"x", 那么不会再次创建对象(说明之前已经创建过), 直接返回即可</span>        <span class="token comment" spellcheck="true">// 2. new String("x") => 堆空间中再创建一个字符串对象"x"(假设地址为0x200), 则s1 = 0x200</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建两个字符串对象</span>        String s2 <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 创建一个字符串对象, 并放入到字符串常量池中</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只创建一个字符串对象</span>        <span class="token comment" spellcheck="true">// 1. +                     => 创建一个StringBuilder对象</span>        <span class="token comment" spellcheck="true">// 2. 字面量"a"              => 创建一个字符串对象"a", 并放入常量池</span>        <span class="token comment" spellcheck="true">// 3. a = new String("a")   => 在堆空间中再次创建一个字符串对象"a"</span>        <span class="token comment" spellcheck="true">// 4. append(a)             => 添加到字符数组中 value = ['a',...]</span>        <span class="token comment" spellcheck="true">// 5. 字面量"b"              => 创建一个字符串对象"b", 并放入常量池</span>        <span class="token comment" spellcheck="true">// 6. b = new String("b")   => 在堆空间中再次创建一个字符串对象"b"</span>        <span class="token comment" spellcheck="true">// 7. append(b)             => 添加到字符数组中 value = ['a', 'b', ...]</span>        <span class="token comment" spellcheck="true">// 8. builder.toString()    => 底层调用new String(char[], int, int)再次创建一个字符串对象</span>        String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="什么时候会放入字符串常量池"><a href="#什么时候会放入字符串常量池" class="headerlink" title="什么时候会放入字符串常量池"></a>什么时候会放入字符串常量池</h1><p>结论: 显式地出现了字面量就会放入到常量池中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// new String("hello")时已经将"hello"放入到字符串常量池中, 而s1是在堆空间中的一个引用变量</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// intern()返回值和字面量都是从字符串常量池中获得, 因此是同一个对象</span>        String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "hello"和"world"作为字面量都保存在字符串常量池中, 但是"helloworld"并没有出现在字符串常量池中</span>        <span class="token comment" spellcheck="true">// 这里是通过StringBuilder的toString()方法, 底层是new String(char[] value, int begin, int offset), 所以此时和new String("helloworld")还是存在差距.</span>        <span class="token comment" spellcheck="true">// 通过chars[]方式生成的字符串, 并没有将该字符串放入到字符串常量池中, 因为使用的是字符数组.</span>        <span class="token comment" spellcheck="true">// 对于StringBuilder中的append(String str), 会先获取str的字符数组, 然后再追加</span>        String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将"helloworld"通过intern()方法添加到字符串常量池中, 因为s4是第一个, 所以常量池中保存的实际上就是s4这个堆空间的字符串对象</span>        String s5 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="证明-StringTable-所在的内存空间位置"><a href="#证明-StringTable-所在的内存空间位置" class="headerlink" title="证明 StringTable 所在的内存空间位置"></a>证明 StringTable 所在的内存空间位置</h1><p>在 JDK 1.7 之前，StringTable 在方法区中，而方法区在永久代中。而在 JDK 1.7 及以后，StringTable 在堆中。</p><p>验证思路：给 StringTable 中不断地添加字符串，当发生内存溢出时，查看报错信息显示是哪个区域的空间不足即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">positionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String s <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        String t <span class="token operator">=</span> s <span class="token operator">+</span> s<span class="token punctuation">;</span>        s <span class="token operator">=</span> t<span class="token punctuation">;</span>        tables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tables<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="StringTable-的应用案例"><a href="#StringTable-的应用案例" class="headerlink" title="StringTable 的应用案例"></a>StringTable 的应用案例</h1><p>对于存在<strong>大量重复</strong>的字符串对象的场景，例如，收件地址，几乎一个学校上万人使用重复的字符串，放入 StringTable 和不放入 StringTable 的内存占用比例达到 10000:1。</p><h1 id="StringTable-的垃圾回收"><a href="#StringTable-的垃圾回收" class="headerlink" title="StringTable 的垃圾回收"></a>StringTable 的垃圾回收</h1>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/09/springcloud-01-eureka/"/>
      <url>/2023/03/09/springcloud-01-eureka/</url>
      
        <content type="html"><![CDATA[<h1 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h1><ol><li><p>引入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--eureka的server端--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7001</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># eureka服务端的实例名称</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> eureka7001.com  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># eureka server端不需要将当前微服务注册到eureka服务注册表中</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true"># false表示当前微服务即为注册中心, 不需要去检索服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 设置Eureka Server交互的地址查询服务</span>      <span class="token comment" spellcheck="true"># 注册服务都需要依赖该地址</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> <span class="token string">"http://eureka7002.com:7002/eureka"</span>  <span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 关闭eureka的自我保护机制</span>    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li>注解编码</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/26/java-ji-chu/"/>
      <url>/2023/02/26/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="JVM、JRE-和-JDK-的关系"><a href="#JVM、JRE-和-JDK-的关系" class="headerlink" title="JVM、JRE 和 JDK 的关系"></a>JVM、JRE 和 JDK 的关系</h2><ul><li>JRE是Java Runtime Environment(Java运行时环境)的简称, 包括JVM虚拟机和Java基础类库, 为编译好的Java程序(.class字节码文件)提供运行环境. </li><li>JDK是Java Development Kit(Java开发工具包)的简称, 不仅包括JRE, 而且包括编译Java源文件(.java)所需的编译器和各种调试分析的工具.</li><li>JRE提供给想运行Java程序的用户使用; JDK提供给Java开发者使用</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230606163851306.png" alt="image-20230606163851306"></p><h2 id="为什么-Java-代码可以实现一次编写-到处运行"><a href="#为什么-Java-代码可以实现一次编写-到处运行" class="headerlink" title="为什么 Java 代码可以实现一次编写, 到处运行?"></a>为什么 Java 代码可以实现一次编写, 到处运行?</h2><ol><li><strong>JVM</strong>(Java虚拟机)是Java跨平台的关键, JVM在Java应用程序和操作系统之间采用<strong>适配器模式</strong>, 屏蔽了操作系统的异构性</li><li>在Java程序<strong>运行前</strong>, 通过<strong>java编译器</strong>将源代码文件(xxx.java)<strong>编译</strong>成字节码文件(.class)</li><li>在Java程序<strong>运行时</strong>, 通过<strong>jvm</strong>将字节码文件<strong>翻译</strong>成对应操作系统平台的机器码文件 </li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230114153502232.png" alt="image-20230114153502232"></p><h2 id="和-equals-的区别"><a href="#和-equals-的区别" class="headerlink" title="== 和 equals() 的区别"></a>== 和 equals() 的区别</h2><p><code>==</code>: 基本数据类型比较值, 引用数据类型比较地址(实际上还是比较引用变量的值是否相同)</p><p><code>equals()</code>: 由于所有的类都继承自Object, 所以默认情况下equals()和==相同, 只有当重写equals()方法时, 二者才产生区别. 例如String重写的equals()为字符串比较</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s1 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串常量池</span>    String s2 <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串常量池</span>    String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//堆空间对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.equals(s2) = "</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(s1==s2) = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s1.equals(s3) = "</span> <span class="token operator">+</span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(s1==s3) = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230125155853436.png" alt="image-20230125155853436" style="zoom:150%;"><h2 id="为什么重写equals-方法的同时要重写hashCode-方法"><a href="#为什么重写equals-方法的同时要重写hashCode-方法" class="headerlink" title="为什么重写equals()方法的同时要重写hashCode()方法"></a>为什么重写equals()方法的同时要重写hashCode()方法</h2><ol><li>Java对象默认情况下比较的是两个对象的地址值是否相等，而Object类中的equals()方法的实现也是简单地使用<code>==</code>来实现。但很多时候我们实际想要比较的是两个对象的内容在逻辑层面是否相等，所以我们需要重写equals()方法。（<strong>equals()方法的存在是为了体现对象逻辑层面的一个相等</strong>）</li><li>例如，Java中的String类中重写的equals()方法就是比较两个字符串的内容是否完全相同。对于任意一个对象，如果都去调用equals()对象来判断两个字符串是否相等，那么遍历整个字符串，时间复杂度是O(n)。所以引入hashCode作为缓存，重写hashCode()方法是为了让逻辑层面上相等的两个对象（equals()方法判断返回true的两个对象）拥有相同的hashCode。这样，在判断的时候，根据逆否命题，hashCode值不同，则equals()返回false，从而实现加速判断两个对象是否相等。如果重写equals()方法而没有重写hashCode()方法，那么即使两个对象的hashCode不相同，也不能推断出equals()方法返回false，从而失去了hashCode作为缓存而存在的意义。（<strong>hashCode存在的意义是为了作为equals()方法的缓存，hashCode()方法应该按照equals()方法的实现逻辑进行重写</strong>）</li></ol><h2 id="普通for循环和增强for循环的比较"><a href="#普通for循环和增强for循环的比较" class="headerlink" title="普通for循环和增强for循环的比较"></a>普通for循环和增强for循环的比较</h2><table><thead><tr><th>差异</th><th>普通for循环</th><th>增强for循环</th></tr></thead><tbody><tr><td>适用</td><td>底层数组</td><td>底层链表</td></tr><tr><td>局限</td><td>用于链表的遍历时可能导致系统崩溃</td><td>item不能是基本数据类型, 除了static修饰的类成员变量</td></tr><tr><td>原因</td><td></td><td>基本数据类型在赋值操作时, 是将内容进行复制,而不是将引用进行复制</td></tr></tbody></table><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="TCP为什么建立连接需要三次握手-释放连接需要四次挥手"><a href="#TCP为什么建立连接需要三次握手-释放连接需要四次挥手" class="headerlink" title="TCP为什么建立连接需要三次握手, 释放连接需要四次挥手?"></a>TCP为什么建立连接需要三次握手, 释放连接需要四次挥手?</h2><ul><li><p><strong>TCP三次握手</strong></p><p>  TCP连接的目的是在不可靠传输的信道上建立可靠的传输. </p><p>  对于客户端发送过来的一个连接请求报文段, 由于链路的不可靠, 所以服务端无法分辨其<strong>真实性: 是此时此刻客户端想建立连接? 还是由于网络延迟接收到的以前的请求报文?</strong> 但无论其真实性, 服务端都会返回一个允许连接的响应. 如果客户端此时对服务端返回的响应做出了反应, 则服务端可以判断确实是客户端想要建立连接. 而如果客户端没有反应, 那么说明可能是以前发送的失效的报文. (但也有可能是网络问题导致的服务端的响应丢失了吧, 这种情况应该不会超时重传, 所以才有重试机制吗?)</p></li><li><p><strong>TCP四次挥手</strong></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/24/javaweb-01-shi-yong-tomcat-jin-xing-web-kai-fa/"/>
      <url>/2023/02/24/javaweb-01-shi-yong-tomcat-jin-xing-web-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Tomcat进行Web开发"><a href="#使用Tomcat进行Web开发" class="headerlink" title="使用Tomcat进行Web开发"></a>使用Tomcat进行Web开发</h1><p>要部署一个 Web 服务器，本身不依赖于任何语言，因为最终客户端都是通过 url 来访问资源文件</p><h2 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230224180420621.png" alt="image-20230224180420621"></p><h2 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230224180609195.png" alt="image-20230224180609195"></p><h2 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h2><p>在 bin 目录下双击 <code>startup.bat</code> 即可</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019124908369.png" alt="image-20221019124908369"></p><p>浏览器中输入<code>localhost:8080</code>进行访问, 显示如下则表示成功</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019125013337.png" alt="image-20221019125013337"></p><h2 id="部署任意Web项目（核心基础）"><a href="#部署任意Web项目（核心基础）" class="headerlink" title="部署任意Web项目（核心基础）"></a>部署任意Web项目（核心基础）</h2><ol><li><p>在<code>webapps</code>目录下创建任意一个文件夹, 例如: <code>xplan</code>, 称为项目的<strong>content root</strong></p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019125401061.png" alt="image-20221019125401061" style="zoom:50%;"></li><li><p>在<code>xplan</code>目录下创建名为<code>WEB-INF</code>的文件夹, 此时项目即部署成功</p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019130001003.png" alt="image-20221019130001003" style="zoom: 67%;"></li><li><p>在<code>xplan</code>下面放置任意可访问的资源, 例如: 存放一个<code>hello.txt</code>文件</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019130706793.png" alt="image-20221019130706793"></p></li><li><p>通过<strong>http方式</strong>进行资源的访问</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019131026458.png" alt="image-20221019131026458"></p></li></ol><h2 id="在IDEA中使用Tomcat"><a href="#在IDEA中使用Tomcat" class="headerlink" title="在IDEA中使用Tomcat"></a>在IDEA中使用Tomcat</h2><blockquote><p>  注意将前面的 Tomcat 服务器退出，否则会出现端口被占用的错误</p></blockquote><h3 id="1-为项目添加web框架支持"><a href="#1-为项目添加web框架支持" class="headerlink" title="1. 为项目添加web框架支持"></a>1. 为项目添加web框架支持</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019132743513.png" alt="image-20221019132743513" style="zoom: 150%;"><h3 id="2-添加web框架后的项目目录结构"><a href="#2-添加web框架后的项目目录结构" class="headerlink" title="2. 添加web框架后的项目目录结构"></a>2. 添加web框架后的项目目录结构</h3><ul><li><code>index.jsp</code>和<code>web.xml</code>都可以删除</li><li>删除<code>index.jsp</code>后如下所示</li><li><code>index.jsp</code>: 作为一个默认的html页面, 其中也可以书写java代码</li><li><code>web.xml</code>: 建立http路径和java类之间的映射关系, 通过路径访问相应的Servlet类</li></ul><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019132857965.png" alt="image-20221019132857965" style="zoom: 300%;"><h3 id="3-配置Tomcat服务器"><a href="#3-配置Tomcat服务器" class="headerlink" title="3. 配置Tomcat服务器"></a>3. 配置Tomcat服务器</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019135736823.png" alt="image-20221019135736823" style="zoom: 150%;"><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019140006074.png" alt="image-20221019140006074" style="zoom: 150%;"><h3 id="4-添加一些html页面进行测试"><a href="#4-添加一些html页面进行测试" class="headerlink" title="4. 添加一些html页面进行测试"></a>4. 添加一些html页面进行测试</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019141228218.png" alt="image-20221019141228218" style="zoom: 150%;"><h3 id="5-访问测试"><a href="#5-访问测试" class="headerlink" title="5. 访问测试"></a>5. 访问测试</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221019141913551.png" alt="image-20221019141913551"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/23/redis-03-zhu-cong-fu-zhi/"/>
      <url>/2023/02/23/redis-03-zhu-cong-fu-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="旧版复制功能"><a href="#旧版复制功能" class="headerlink" title="旧版复制功能"></a>旧版复制功能</h1><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><blockquote><p>  同步是指让从服务器更新至主服务器的数据库状态</p></blockquote><h2 id="命令传播"><a href="#命令传播" class="headerlink" title="命令传播"></a>命令传播</h2><blockquote><p>  命令传播是指让主从服务器的数据库状态变为一致</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/22/springboot-06-chang-jing-zheng-he/"/>
      <url>/2023/02/22/springboot-06-chang-jing-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-整合-Redis"><a href="#SpringBoot-整合-Redis" class="headerlink" title="SpringBoot 整合 Redis"></a>SpringBoot 整合 Redis</h1><h2 id="Java操作Redis（单机）"><a href="#Java操作Redis（单机）" class="headerlink" title="Java操作Redis（单机）"></a>Java操作Redis（单机）</h2><h3 id="Jedis方式"><a href="#Jedis方式" class="headerlink" title="Jedis方式"></a>Jedis方式</h3><ol><li><p>pom依赖</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>jedis使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisApplicationMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// jedis.auth("root"); // 默认用户没有密码</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Lettuce方式"><a href="#Lettuce方式" class="headerlink" title="Lettuce方式"></a>Lettuce方式</h3><ol><li><p>pom依赖</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>lettuce使用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LettuceMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisURI uri <span class="token operator">=</span> RedisURI<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withHost</span><span class="token punctuation">(</span><span class="token string">"hadoop001"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withPort</span><span class="token punctuation">(</span><span class="token number">6379</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisClient redisClient <span class="token operator">=</span> RedisClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        StatefulRedisConnection<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> connect <span class="token operator">=</span> redisClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisCommands<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> commands <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 操作逻辑</span>        commands<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> commands<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>###RedisTemplate方式（单机模式）</p><h4 id="序列化问题"><a href="#序列化问题" class="headerlink" title="序列化问题"></a>序列化问题</h4><p>通过程序期望添加的key和Redis数据库实际保存的key不一致</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RedisApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ORDER_KEY <span class="token operator">=</span> <span class="token string">"ord:"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String JD_ORDER <span class="token operator">=</span> <span class="token string">"京东订单"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> KEY_ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String serialNo <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> ORDER_KEY <span class="token operator">+</span> KEY_ID<span class="token punctuation">;</span>        String value <span class="token operator">=</span> JD_ORDER <span class="token operator">+</span> serialNo<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 期望保存的key是"ord:1"</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getOrderById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在程序中通过"ord:1"也可以将结果查找出来</span>        String s <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ORDER_KEY <span class="token operator">+</span> KEY_ID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redis中实际保存的key</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230222102151356.png" alt="image-20230222102151356"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230222100636611.png" alt="image-20230222100636611"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="方式一：使用StrngRedisTemplate来替换RedisTemplate"><a href="#方式一：使用StrngRedisTemplate来替换RedisTemplate" class="headerlink" title="方式一：使用StrngRedisTemplate来替换RedisTemplate"></a>方式一：使用StrngRedisTemplate来替换RedisTemplate</h5><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230222103238600.png" alt="image-20230222103238600"></p><h5 id="方式二：自定义RedisTemplate对象的创建过程"><a href="#方式二：自定义RedisTemplate对象的创建过程" class="headerlink" title="方式二：自定义RedisTemplate对象的创建过程"></a>方式二：自定义RedisTemplate对象的创建过程</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTemplateConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>LettuceConnectionFactory lettuceConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原来的RedisTemplate对象的创建过程：空参构造器 -> 属性赋值（无） -> 初始化</span>        <span class="token comment" spellcheck="true">// 现在手动实现一个RedisTemplate对象的创建过程，用来替换原来的过程</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>lettuceConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>genericJackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在完成自定义属性配置之后, 需要调用原来的初始化方法</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java操作Redis（集群）"><a href="#Java操作Redis（集群）" class="headerlink" title="Java操作Redis（集群）"></a>Java操作Redis（集群）</h2><h3 id="JedisCluster方式"><a href="#JedisCluster方式" class="headerlink" title="JedisCluster方式"></a>JedisCluster方式</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisClusterMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//host选择集群中的任意一台redis服务器的ip地址即可, 因为任意一台服务器都可以作为集群的入口</span>        String host <span class="token operator">=</span> <span class="token string">"hadoop001"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">6379</span><span class="token punctuation">;</span>        HostAndPort hostAndPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        JedisCluster jedisCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>hostAndPort<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置值</span>        jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RedisTemplate方式"><a href="#RedisTemplate方式" class="headerlink" title="RedisTemplate方式"></a>RedisTemplate方式</h3><p>Spring客户端没有动态感知到Redis集群的最新集群信息</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/21/01-nacos/"/>
      <url>/2023/02/21/01-nacos/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Nacos下载与启动</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230309183545962.png" alt="image-20230309183545962"></p></li><li><p>服务注册</p><ol><li><p>添加依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><pre><code> 2.   </code></pre><ol start="3"><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/09/java-01-ji-he/"/>
      <url>/2023/02/09/java-01-ji-he/</url>
      
        <content type="html"><![CDATA[<h1 id="列表转数组"><a href="#列表转数组" class="headerlink" title="列表转数组"></a>列表转数组</h1><p><code>List&lt;Integer&gt; -&gt; Integer[]</code></p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="集合类源码"><a href="#集合类源码" class="headerlink" title="集合类源码"></a>集合类源码</h1><h2 id="HashMap-源码"><a href="#HashMap-源码" class="headerlink" title="HashMap 源码"></a>HashMap 源码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// key的hashCode值, 用来确定在桶的位置idx = hash%capacity</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>    <span class="token keyword">final</span> K key<span class="token punctuation">;</span>    V value<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> K <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异或操作可以更好地减少哈希冲突?</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> Objects<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> V <span class="token function">setValue</span><span class="token punctuation">(</span>V newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        V oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> e <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">,</span> Cloneable<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// static final 修饰的都是作为默认值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// table在put()时才进行初始化</span>    <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token keyword">transient</span> Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">>></span> entrySet<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前哈希表中总的节点个数, 当size > threshold时会触发扩容操作</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每进行一次putVal()都会执行一次++modCount, 这个字段有什么用呢?</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阈值: 初始值为0</span>    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 负载因子</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回一个值n, 满足:</span>    <span class="token comment" spellcheck="true">// 1. n >= cap</span>    <span class="token comment" spellcheck="true">// 2. n = 2^k</span>    <span class="token comment" spellcheck="true">// 3. 满足上面两个条件中的最小的数</span>    <span class="token comment" spellcheck="true">// 对于任意一个二进制数, 例如000000100001</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果直接使用cap进行下面的移位和或运算, 那么当cap=16时, 得到的结果是31, 返回结果是32 </span>        <span class="token comment" spellcheck="true">// 那么就不满足上面的第3个条件了</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 000000100000</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">4</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">;</span>        n <span class="token operator">|=</span> n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对数据越界的一些检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">{</span>            initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> Float<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据容量计算初始值, 需要满足2^k</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// tableSizeFor()的返回值必定大于0, 即this.threshold > 0</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认容量:16</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认负载因子: 0.75</span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此时 this.threshold = 0, 当发生put()操作时, 调用resize()为其赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用其它Map来进行初始化</span>    <span class="token comment" spellcheck="true">// 1. 使用默认的负载因子</span>    <span class="token comment" spellcheck="true">// 2. </span>    <span class="token keyword">public</span> <span class="token function">HashMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>        <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">putMapEntries</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> m<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// pre-size</span>                <span class="token comment" spellcheck="true">// 问: 为什么这里要+1.0F?</span>                <span class="token comment" spellcheck="true">// 答: 防止刚创建就达到扩容的阈值. 例如原来的s = 12, 那么创建的HashMap的threshold=16, 此时达到扩容的阈值</span>                <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>s <span class="token operator">/</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0F</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>                         <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">></span> threshold<span class="token punctuation">)</span>                    threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 问: 这里的threshold是在什么时候确定的?</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> threshold<span class="token punctuation">)</span>                <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> e <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                K key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                V value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> evict<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. 通过hash(key)确定桶的位置</span>    <span class="token comment" spellcheck="true">// 2. 通过equals(key)确定在链表的哪个节点Node上</span>    <span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>         <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 由于n是哈希表的容量, 满足2^k; 因此 hash &amp; (n-1) 本质上是 hash % n, 确定hash对应的桶下标</span>        <span class="token comment" spellcheck="true">// first是链表中的第一个节点</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">;</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>        K k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果hash值对应的桶不存在节点, 直接返回null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> first<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断表头是TreeNode还是Node</span>                <span class="token comment" spellcheck="true">// 1. 如果是TreeNode, 调用RBTree中的getTreeNode()方法</span>                <span class="token comment" spellcheck="true">// 2. 如果是Node, 进行链表遍历</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>         Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>         <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一次put()会进入到这里, 并在resize()方法中对table进行初始化</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// p = tab[i = (n - 1) &amp; hash] 获取hash对应的桶中的第一个Node节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span> K k<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// existing mapping for key</span>                V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> null<span class="token punctuation">)</span>                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 添加节点个数超过阈值, 触发扩容</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 重点方法: 扩容方法</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存旧的HashMap</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果容量已达上界, 无法扩容, 只能通过提高threshold来减少触发resize()扩容操作</span>                threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                     oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// oldCap在完成初始化之后必定是2^k</span>                <span class="token comment" spellcheck="true">// 只要 0 &lt; oldCap &lt; MAXIMUM_CAPACITY, newCap = 2 * oldCap, newThr = newCap * loadFactory</span>                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>                             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// oldCap=0</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// oldCap = 0, oldThr > 0</span>            <span class="token comment" spellcheck="true">// newThr = 0 没有被修改</span>            <span class="token comment" spellcheck="true">// newCap = oldThr</span>            <span class="token comment" spellcheck="true">// 这种情况时new HashMap(15)这种制定了初始化容量的resize()方式, 到目前为止, 只设置了阈值, 这里直接将阈值设置为容量</span>            newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//</span>            <span class="token comment" spellcheck="true">// HashMap map = new HashMap(); </span>            <span class="token comment" spellcheck="true">// 此时满足:</span>            <span class="token comment" spellcheck="true">// 1. threshold=0 => oldThr=0, </span>            <span class="token comment" spellcheck="true">// 2. table=null  => oldCap=0</span>            newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// new HashMap(3)这种指定初始化容量的方式才会进入到这个条件中</span>            <span class="token comment" spellcheck="true">// 计算阈值</span>            <span class="token comment" spellcheck="true">// newThr = newCap * loadFactory</span>            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置阈值</span>        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化table</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 进入到这个条件内, 说明是达到阈值的扩容, 并不是进行初始化</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果一个slot只有一个Node, 则不用考虑是Node类型还是TreeNode类型</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 重新哈希</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用TreeNode的split()</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 问: 为什么这里需要使用两条链表?</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                        <span class="token keyword">do</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// next是e节点(当前结点)的下一个结点</span>                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 这里改成 e.hash % newCap == j 更容易理解</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法中：</p><ul><li>接收容量值capacity，但实际赋值给阈值threshold</li></ul><p>put()方法中：</p><ul><li>真正的初始化：为table分配空间（table的长度即capacity），并设置阈值threshold</li></ul><blockquote><p>  在没有真正的初始化之前，去谈capacity和threshold是耍流氓，capacity()的返回值和threshold都是没有意义的数字。</p></blockquote><h3 id="建立红黑树"><a href="#建立红黑树" class="headerlink" title="建立红黑树"></a>建立红黑树</h3><ol><li>当单条链表插入第 9 个节点时，会触发链表转红黑树的操作</li><li>当哈希表中总节点个数小于64个时，还是不会建立红黑树，会通过resize()来代替建树。即只有总节点个数大于等于64个时，才会成功转化成红黑树</li></ol><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 必须总结点大于等于 MIN_TREEIFY_CAPACITY 才能开启建立红黑树的流程</span>            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// e是某个桶的链表头</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// hd是表头, tl是表尾, 在红黑树中仍然维护了一个原来的链表, 方便由树退化成链表</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hd <span class="token operator">=</span> null<span class="token punctuation">,</span> tl <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> null<span class="token punctuation">)</span>                    hd <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">;</span>                    tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                tl <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 上面的操作还是在维护一张链表, 只是之前是Node类型的链表, 现在是TreeNode类型的链表, 真正的建树操作在treeify()中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                hd<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="红黑树的数据结构"><a href="#红黑树的数据结构" class="headerlink" title="红黑树的数据结构"></a>红黑树的数据结构</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> parent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// red-black tree links</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> left<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> right<span class="token punctuation">;</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> prev<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// needed to unlink next upon deletion</span>        <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>        <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V val<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Returns root of tree containing this node.         */</span>        <span class="token keyword">final</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> r<span class="token punctuation">;</span>                r <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Ensures that the given root is the first node of its bin.         */</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tab <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> root<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> rn<span class="token punctuation">;</span>                    tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>                    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> rp <span class="token operator">=</span> root<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rn <span class="token operator">=</span> root<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>rn<span class="token punctuation">)</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> rp<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rp <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        rp<span class="token punctuation">.</span>next <span class="token operator">=</span> rn<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        first<span class="token punctuation">.</span>prev <span class="token operator">=</span> root<span class="token punctuation">;</span>                    root<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>                    root<span class="token punctuation">.</span>prev <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">assert</span> <span class="token function">checkInvariants</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Finds the node starting at root p with the given hash and key.         * The kc argument caches comparableClassFor(key) upon first use         * comparing keys.         */</span>        <span class="token keyword">final</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> Object k<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kc<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> ph<span class="token punctuation">,</span> dir<span class="token punctuation">;</span> K pk<span class="token punctuation">;</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pl <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pr <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span>                    p <span class="token operator">=</span> pl<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                    p <span class="token operator">=</span> pr<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pl <span class="token operator">==</span> null<span class="token punctuation">)</span>                    p <span class="token operator">=</span> pr<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pr <span class="token operator">==</span> null<span class="token punctuation">)</span>                    p <span class="token operator">=</span> pl<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">!=</span> null <span class="token operator">||</span>                          <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                         <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> pl <span class="token operator">:</span> pr<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> pr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> q<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    p <span class="token operator">=</span> pl<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Calls find for root node.         */</span>        <span class="token keyword">final</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">getTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> Object k<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Tie-breaking utility for ordering insertions when equal         * hashCodes and non-comparable. We don't require a total         * order, just a consistent insertion rule to maintain         * equivalence across rebalancings. Tie-breaking further than         * necessary simplifies testing a bit.         */</span>        <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>Object a<span class="token punctuation">,</span> Object b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> d<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null <span class="token operator">||</span> b <span class="token operator">==</span> null <span class="token operator">||</span>                <span class="token punctuation">(</span>d <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                 <span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                d <span class="token operator">=</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">?</span>                     <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 链表红黑树</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeify</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> next<span class="token punctuation">;</span> x <span class="token operator">!=</span> null<span class="token punctuation">;</span> x <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                next <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                x<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    x<span class="token punctuation">.</span>parent <span class="token operator">=</span> null<span class="token punctuation">;</span>                    x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    root <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    K k <span class="token operator">=</span> x<span class="token punctuation">.</span>key<span class="token punctuation">;</span>                    <span class="token keyword">int</span> h <span class="token operator">=</span> x<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kc <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span>                        K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span>                            dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                            dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                                  <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                                 <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                            dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            x<span class="token punctuation">.</span>parent <span class="token operator">=</span> xp<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                                xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>                            root <span class="token operator">=</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 红黑树转链表</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">untreeify</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hd <span class="token operator">=</span> null<span class="token punctuation">,</span> tl <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> q <span class="token operator">!=</span> null<span class="token punctuation">;</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">replacementNode</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> null<span class="token punctuation">)</span>                    hd <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                tl <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> hd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Tree version of putVal.         */</span>        <span class="token keyword">final</span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">putTreeVal</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span>                                       <span class="token keyword">int</span> h<span class="token punctuation">,</span> K k<span class="token punctuation">,</span> V v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> kc <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">boolean</span> searched <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root <span class="token operator">=</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> dir<span class="token punctuation">,</span> ph<span class="token punctuation">;</span> K pk<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">></span> h<span class="token punctuation">)</span>                    dir <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ph <span class="token operator">&lt;</span> h<span class="token punctuation">)</span>                    dir <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> p<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>kc <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>                          <span class="token punctuation">(</span>kc <span class="token operator">=</span> <span class="token function">comparableClassFor</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                         <span class="token punctuation">(</span>dir <span class="token operator">=</span> <span class="token function">compareComparables</span><span class="token punctuation">(</span>kc<span class="token punctuation">,</span> k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>searched<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> q<span class="token punctuation">,</span> ch<span class="token punctuation">;</span>                        searched <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                             <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                             <span class="token punctuation">(</span>q <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> kc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> q<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    dir <span class="token operator">=</span> <span class="token function">tieBreakOrder</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>left <span class="token operator">:</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xpn <span class="token operator">=</span> xp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">newTreeNode</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> xpn<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                        xp<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        xp<span class="token punctuation">.</span>right <span class="token operator">=</span> x<span class="token punctuation">;</span>                    xp<span class="token punctuation">.</span>next <span class="token operator">=</span> x<span class="token punctuation">;</span>                    x<span class="token punctuation">.</span>parent <span class="token operator">=</span> x<span class="token punctuation">.</span>prev <span class="token operator">=</span> xp<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpn <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>xpn<span class="token punctuation">)</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Removes the given node, that must be present before this call.         * This is messier than typical red-black deletion code because we         * cannot swap the contents of an interior node with a leaf         * successor that is pinned by "next" pointers that are accessible         * independently during traversal. So instead we swap the tree         * linkages. If the current tree appears to have too few nodes,         * the bin is converted back to a plain bin. (The test triggers         * somewhere between 2 and 6 nodes, depending on tree structure).         */</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">removeTreeNode</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span>                                  <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> root <span class="token operator">=</span> first<span class="token punctuation">,</span> rl<span class="token punctuation">;</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> succ <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>next<span class="token punctuation">,</span> pred <span class="token operator">=</span> prev<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span>                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> first <span class="token operator">=</span> succ<span class="token punctuation">;</span>            <span class="token keyword">else</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> succ<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>succ <span class="token operator">!=</span> null<span class="token punctuation">)</span>                succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null                <span class="token operator">||</span> <span class="token punctuation">(</span>movable                    <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null                        <span class="token operator">||</span> <span class="token punctuation">(</span>rl <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> null                        <span class="token operator">||</span> rl<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// too small</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> pl <span class="token operator">=</span> left<span class="token punctuation">,</span> pr <span class="token operator">=</span> right<span class="token punctuation">,</span> replacement<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> s <span class="token operator">=</span> pr<span class="token punctuation">,</span> sl<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sl <span class="token operator">=</span> s<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// find successor</span>                    s <span class="token operator">=</span> sl<span class="token punctuation">;</span>                <span class="token keyword">boolean</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span>red<span class="token punctuation">;</span> s<span class="token punctuation">.</span>red <span class="token operator">=</span> p<span class="token punctuation">.</span>red<span class="token punctuation">;</span> p<span class="token punctuation">.</span>red <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// swap colors</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> sr <span class="token operator">=</span> s<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pp <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> pr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// p was s's direct parent</span>                    p<span class="token punctuation">.</span>parent <span class="token operator">=</span> s<span class="token punctuation">;</span>                    s<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> sp <span class="token operator">=</span> s<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>parent <span class="token operator">=</span> sp<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> sp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                            sp<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>                        <span class="token keyword">else</span>                            sp<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right <span class="token operator">=</span> pr<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        pr<span class="token punctuation">.</span>parent <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                p<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">=</span> sr<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    sr<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left <span class="token operator">=</span> pl<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    pl<span class="token punctuation">.</span>parent <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>parent <span class="token operator">=</span> pp<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    root <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> pp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                    pp<span class="token punctuation">.</span>left <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    pp<span class="token punctuation">.</span>right <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sr <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    replacement <span class="token operator">=</span> sr<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    replacement <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pl <span class="token operator">!=</span> null<span class="token punctuation">)</span>                replacement <span class="token operator">=</span> pl<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pr <span class="token operator">!=</span> null<span class="token punctuation">)</span>                replacement <span class="token operator">=</span> pr<span class="token punctuation">;</span>            <span class="token keyword">else</span>                replacement <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>replacement <span class="token operator">!=</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pp <span class="token operator">=</span> replacement<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">==</span> null<span class="token punctuation">)</span>                    root <span class="token operator">=</span> replacement<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> pp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                    pp<span class="token punctuation">.</span>left <span class="token operator">=</span> replacement<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    pp<span class="token punctuation">.</span>right <span class="token operator">=</span> replacement<span class="token punctuation">;</span>                p<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">.</span>parent <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> r <span class="token operator">=</span> p<span class="token punctuation">.</span>red <span class="token operator">?</span> root <span class="token operator">:</span> <span class="token function">balanceDeletion</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>replacement <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// detach</span>                TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pp <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                p<span class="token punctuation">.</span>parent <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> pp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                        pp<span class="token punctuation">.</span>left <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> pp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                        pp<span class="token punctuation">.</span>right <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>movable<span class="token punctuation">)</span>                <span class="token function">moveRootToFront</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Splits nodes in a tree bin into lower and upper tree bins,         * or untreeifies if now too small. Called only from resize;         * see above discussion about split bits and indices.         *         * @param map the map         * @param tab the table for recording bin heads         * @param index the index of the table being split         * @param bit the bit of hash to split on         */</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span>HashMap<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> map<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> bit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> b <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Relink into lo and hi lists, preserving order</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> b<span class="token punctuation">,</span> next<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                next <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                e<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> bit<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                        loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                    loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token operator">++</span>lc<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                        hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                    hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                    <span class="token operator">++</span>hc<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span>                    tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (else is already treeified)</span>                        loHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiHead <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span>                    tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    tab<span class="token punctuation">[</span>index <span class="token operator">+</span> bit<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loHead <span class="token operator">!=</span> null<span class="token punctuation">)</span>                        hiHead<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* ------------------------------------------------------------ */</span>        <span class="token comment" spellcheck="true">// Red-black tree methods, all adapted from CLR</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">,</span>                                              TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> r<span class="token punctuation">,</span> pp<span class="token punctuation">,</span> rl<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rl <span class="token operator">=</span> p<span class="token punctuation">.</span>right <span class="token operator">=</span> r<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    rl<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pp <span class="token operator">=</span> r<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>root <span class="token operator">=</span> r<span class="token punctuation">)</span><span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pp<span class="token punctuation">.</span>left <span class="token operator">==</span> p<span class="token punctuation">)</span>                    pp<span class="token punctuation">.</span>left <span class="token operator">=</span> r<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    pp<span class="token punctuation">.</span>right <span class="token operator">=</span> r<span class="token punctuation">;</span>                r<span class="token punctuation">.</span>left <span class="token operator">=</span> p<span class="token punctuation">;</span>                p<span class="token punctuation">.</span>parent <span class="token operator">=</span> r<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">,</span>                                               TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> l<span class="token punctuation">,</span> pp<span class="token punctuation">,</span> lr<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lr <span class="token operator">=</span> p<span class="token punctuation">.</span>left <span class="token operator">=</span> l<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    lr<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pp <span class="token operator">=</span> l<span class="token punctuation">.</span>parent <span class="token operator">=</span> p<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">(</span>root <span class="token operator">=</span> l<span class="token punctuation">)</span><span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pp<span class="token punctuation">.</span>right <span class="token operator">==</span> p<span class="token punctuation">)</span>                    pp<span class="token punctuation">.</span>right <span class="token operator">=</span> l<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    pp<span class="token punctuation">.</span>left <span class="token operator">=</span> l<span class="token punctuation">;</span>                l<span class="token punctuation">.</span>right <span class="token operator">=</span> p<span class="token punctuation">;</span>                p<span class="token punctuation">.</span>parent <span class="token operator">=</span> l<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">,</span>                                                    TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp<span class="token punctuation">,</span> xpp<span class="token punctuation">,</span> xppl<span class="token punctuation">,</span> xppr<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>xp<span class="token punctuation">.</span>red <span class="token operator">||</span> <span class="token punctuation">(</span>xpp <span class="token operator">=</span> xp<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">==</span> <span class="token punctuation">(</span>xppl <span class="token operator">=</span> xpp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xppr <span class="token operator">=</span> xpp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xppr<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        xppr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        x <span class="token operator">=</span> xpp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> xp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x <span class="token operator">=</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                            xpp <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> xp<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>xpp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xpp<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xppl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xppl<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        xppl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        x <span class="token operator">=</span> xpp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> xp<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x <span class="token operator">=</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                            xpp <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> xp<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>xpp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                xpp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xpp<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">balanceDeletion</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> root<span class="token punctuation">,</span>                                                   TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> xp<span class="token punctuation">,</span> xpl<span class="token punctuation">,</span> xpr<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null <span class="token operator">||</span> x <span class="token operator">==</span> root<span class="token punctuation">)</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xpl <span class="token operator">=</span> xp<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xpr <span class="token operator">=</span> xp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xpr<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        xpr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        xpr <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> xp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpr <span class="token operator">==</span> null<span class="token punctuation">)</span>                        x <span class="token operator">=</span> xp<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> sl <span class="token operator">=</span> xpr<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sr <span class="token operator">=</span> xpr<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>sr<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span>sl <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>sl<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            xpr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> xp<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>sr<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>sl <span class="token operator">!=</span> null<span class="token punctuation">)</span>                                    sl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                xpr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xpr<span class="token punctuation">)</span><span class="token punctuation">;</span>                                xpr <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                                    null <span class="token operator">:</span> xp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>xpr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                xpr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> xp<span class="token punctuation">.</span>red<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sr <span class="token operator">=</span> xpr<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                                    sr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            x <span class="token operator">=</span> root<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// symmetric</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> xpl<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        xpl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        xpl <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> xp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>xpl <span class="token operator">==</span> null<span class="token punctuation">)</span>                        x <span class="token operator">=</span> xp<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> sl <span class="token operator">=</span> xpl<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sr <span class="token operator">=</span> xpl<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sl <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>sl<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            <span class="token punctuation">(</span>sr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>sr<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            xpl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            x <span class="token operator">=</span> xp<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>sl <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>sl<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>sr <span class="token operator">!=</span> null<span class="token punctuation">)</span>                                    sr<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                xpl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                root <span class="token operator">=</span> <span class="token function">rotateLeft</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xpl<span class="token punctuation">)</span><span class="token punctuation">;</span>                                xpl <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">=</span> x<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                                    null <span class="token operator">:</span> xp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>xpl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                xpl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token punctuation">(</span>xp <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> xp<span class="token punctuation">.</span>red<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sl <span class="token operator">=</span> xpl<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                                    sl<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>xp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                xp<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                root <span class="token operator">=</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> xp<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            x <span class="token operator">=</span> root<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**         * Recursive invariant check         */</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">checkInvariants</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> tp <span class="token operator">=</span> t<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> tl <span class="token operator">=</span> t<span class="token punctuation">.</span>left<span class="token punctuation">,</span> tr <span class="token operator">=</span> t<span class="token punctuation">.</span>right<span class="token punctuation">,</span>                tb <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> tn <span class="token operator">=</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tb <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tb<span class="token punctuation">.</span>next <span class="token operator">!=</span> t<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tn <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tn<span class="token punctuation">.</span>prev <span class="token operator">!=</span> t<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tp <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> tp<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> tp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tl<span class="token punctuation">.</span>parent <span class="token operator">!=</span> t <span class="token operator">||</span> tl<span class="token punctuation">.</span>hash <span class="token operator">></span> t<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tr<span class="token punctuation">.</span>parent <span class="token operator">!=</span> t <span class="token operator">||</span> tr<span class="token punctuation">.</span>hash <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>red <span class="token operator">&amp;&amp;</span> tl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tl<span class="token punctuation">.</span>red <span class="token operator">&amp;&amp;</span> tr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">.</span>red<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">checkInvariants</span><span class="token punctuation">(</span>tl<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">checkInvariants</span><span class="token punctuation">(</span>tr<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/springcloud/"/>
      <url>/2023/02/04/springcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="第1章-服务发现-Eureka"><a href="#第1章-服务发现-Eureka" class="headerlink" title="第1章    服务发现(Eureka)"></a>第1章    服务发现(Eureka)</h1><h2 id="1-1-Eureka基础架构"><a href="#1-1-Eureka基础架构" class="headerlink" title="1.1    Eureka基础架构"></a>1.1    Eureka基础架构</h2><h3 id="服务注册中心-Eureka服务端"><a href="#服务注册中心-Eureka服务端" class="headerlink" title="服务注册中心(Eureka服务端)"></a>服务注册中心(Eureka服务端)</h3><h3 id="服务提供者-Eureka客户端"><a href="#服务提供者-Eureka客户端" class="headerlink" title="服务提供者(Eureka客户端)"></a>服务提供者(Eureka客户端)</h3><h3 id="服务消费者-Eureka客户端"><a href="#服务消费者-Eureka客户端" class="headerlink" title="服务消费者(Eureka客户端)"></a>服务消费者(Eureka客户端)</h3><p>服务注册中心可以看作是一种特殊的服务提供者, 高可用配置时相互注册.</p><p>某一服务的提供者可以是另一服务的消费者, 因此服务提供者和服务消费者没有本质区别.</p><h2 id="1-2-服务治理机制-通信行为"><a href="#1-2-服务治理机制-通信行为" class="headerlink" title="1.2    服务治理机制(通信行为)"></a>1.2    服务治理机制(通信行为)</h2><h3 id="从服务提供者角度"><a href="#从服务提供者角度" class="headerlink" title="从服务提供者角度"></a>从服务提供者角度</h3><ul><li><p><strong>服务注册</strong>(携带元数据信息的REST请求)</p></li><li><p><strong>服务同步</strong>(服务清单同步, 注册到任一服务注册中心均可)</p></li><li><p><strong>服务续约</strong>(心跳机制)</p><p>心跳间隔时间</p><p>服务失效时间</p></li></ul><h3 id="从服务消费者角度"><a href="#从服务消费者角度" class="headerlink" title="从服务消费者角度"></a>从服务消费者角度</h3><ul><li><p><strong>获取服务</strong>(服务注册的那个REST请求的响应结果是服务清单列表吗?)</p></li><li><p><strong>服务调用</strong></p><p>在获取服务清单后, 通过服务名可以获得具体的服务实例和实例的元数据信息. 通过这些信息, 服务消费者可以决定调用哪个实例.</p></li><li><p><strong>服务下线</strong></p><p>Eureka客户端发送服务下线的REST请求, Eureka服务端在接收到服务下线的请求后, 将该服务的状态设置为下线, 然后广播给所有的Eureka客户端. </p></li></ul><h3 id="从服务注册中心角度"><a href="#从服务注册中心角度" class="headerlink" title="从服务注册中心角度"></a>从服务注册中心角度</h3><ul><li><p><strong>失效剔除</strong></p><p>由于内存溢出, 网络故障等原因, Eureka客户端非正常下线, 此时需要服务注册中心主动的把下线服务剔除. 默认60s将服务清单中超时(默认90s)没有续约的服务剔除.</p></li><li><p><strong>自我保护</strong></p><p>在网络不稳定的情况下, 失效剔除机制会不合理地将Eureka客户端剔除, 造成误删除. 为了避免因网络而不是Eureka客户端下线而造成地超时, Eureka设计了自我保护机制. </p><p>但自我保护机制也会造成误保护, 容易使得客户端拿到一些已经下线的服务提供者实例, 因此造成调用失败的情况, 因此需要客户端有容错机制, 例如, 请求重试, 断路器等.</p><blockquote><p><strong>Eureka判断网络不稳定的方法: 在运行期间统计15 min内心跳失败的比例是否小于85%, 如果是则认为网络不稳定.</strong></p></blockquote></li></ul><p>将REST请求看作是一次心跳, 无论是第几次, 都认为是第一次服务注册, 这样服务续约也可以认为是服务注册的一种, 但是会不会服务续约经过更复杂的特殊处理来加快速度. 默认情况下可以认为每一次心跳都会返回一个服务清单列表.</p><h2 id="1-3-Eureka源码分析"><a href="#1-3-Eureka源码分析" class="headerlink" title="1.3    Eureka源码分析"></a>1.3    Eureka源码分析</h2><h2 id="1-4-配置详解"><a href="#1-4-配置详解" class="headerlink" title="1.4    配置详解"></a>1.4    配置详解</h2><h1 id="第2章-客户端负载均衡-Ribbon"><a href="#第2章-客户端负载均衡-Ribbon" class="headerlink" title="第2章    客户端负载均衡(Ribbon)"></a>第2章    客户端负载均衡(Ribbon)</h1><h1 id="第3章-服务容错与服务降级-Hystrix"><a href="#第3章-服务容错与服务降级-Hystrix" class="headerlink" title="第3章    服务容错与服务降级(Hystrix)"></a>第3章    服务容错与服务降级(Hystrix)</h1><p><img src="E:%5Cmd%5C%E6%8A%80%E6%9C%AF%5Cassets%5Cimage-20230111183035872-1673433038402-1.png" alt="image-20230111183035872"></p><h1 id="第4章-API网关服务-Gateway"><a href="#第4章-API网关服务-Gateway" class="headerlink" title="第4章    API网关服务(Gateway)"></a>第4章    API网关服务(Gateway)</h1><h1 id="第5章-分布式配置中心-Config"><a href="#第5章-分布式配置中心-Config" class="headerlink" title="第5章    分布式配置中心(Config)"></a>第5章    分布式配置中心(Config)</h1><p>分布式配置中心用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持.</p><p><strong>服务端</strong>: 也称为分布式配置中心</p><ul><li>连接配置仓库</li><li>为客户端提供配置信息</li><li>为客户端提供加密/解密信息</li></ul><p><strong>客户端</strong>: 各个微服务应用或基础设施</p><ul><li>通过指定的配置中心来管理应用资源与业务相关的配置内容</li><li>启动的时候从配置中心获取和加载配置信息</li></ul><p>Spring Cloud Config实现了对服务端和客户端中环境变量和属性配置的抽象映射, 不仅适用于Spring构建的应用程序, 也适用于在任何其它语言运行的应用程序中使用.</p><p>配置中心默认采用Git来存储配置信息, 也支持SVN仓库和本地文件系统的存储方式.</p><h2 id="5-1-快速入门知识点"><a href="#5-1-快速入门知识点" class="headerlink" title="5.1    快速入门知识点"></a>5.1    快速入门知识点</h2><ul><li>构建基于Git存储的分布式配置中心(服务端)</li><li>学习配置的详细规则</li><li>客户端指定所属的配置中心, 从中获取配置信息并绑定到代码中</li></ul><h3 id="构建分布式配置中心的四个步骤"><a href="#构建分布式配置中心的四个步骤" class="headerlink" title="构建分布式配置中心的四个步骤"></a>构建分布式配置中心的四个步骤</h3><ol><li><p>引入pom依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>主启动类中添加<code>@EnableConfigServer</code>注解, 开启Spring Cloud Config的服务端功能</p></li><li><p>在Spring配置文件<code>application.properties</code>中添加配置服务的基本信息以及Git仓库的相关信息</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#git仓库位置</span><span class="token attr-name">spring.cloud.config.server.git.uri</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">#仓库路径下的相对搜索位置, 可以配置多个</span><span class="token attr-name">spring.cloud.config.server.git.searchPaths</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># git仓库的用户名</span><span class="token attr-name">spring.cloud.config.server.git.username</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># git仓库的密码</span><span class="token attr-name">spring.cloud.config.server.git.password</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置中心服务需要注册到服务注册中心(Eureka)中</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 指定eureka的服务注册中心位置</span><span class="token attr-name">eureka.client.serviceUrl.defaultZone</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h3><h3 id="客户端获取配置信息"><a href="#客户端获取配置信息" class="headerlink" title="客户端获取配置信息"></a>客户端获取配置信息</h3><ol><li><p>引入pom依赖</p></li><li><p>创建<code>bootstrap.properties</code>配置文件, 在其中指定配置中心的地址</p><p>bootstrap.properties是系统级的配置文件, 而application.properties是用户级的配置文件, bootstrap.properties的优先级更高, 优先加载</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 对应配置规则中的{profile}</span><span class="token attr-name">spring.cloud.config.profile</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># 对应配置规则中的{label}</span><span class="token attr-name">spring.cloud.config.label</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># 对应配置规则中的{application}</span><span class="token attr-name">spring.cloud.config.name</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">#配置中心服务端的地址</span><span class="token attr-name">spring.cloud.config.uri</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>必须配置在bootstrap.properties文件中, 配置信息才能够被正确加载</p></blockquote></li><li><p>配置客户端到服务注册中心</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">eureka.client.serviceUrl.defaultZone</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># 开启通过服务(在注册中心的服务)来访问配置中心的功能</span><span class="token attr-name">spring.cloud.config.discovery.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 指定配置中心服务在注册中心中登记的服务名</span><span class="token attr-name">spring.cloud.config.serviceId</span><span class="token punctuation">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>SpringBoot应用对于配置文件的加载顺序: <strong>本应用jar包之外的配置文件加载优先于应用jar包内的配置内容</strong>, 通过bootstrap.properties的配置内容会使得客户端应用从配置中心获取的外部配置信息的优先级要高于本地的配置信息, 从而实现<strong>外部化配置</strong>.</p><p><strong>执行流程</strong></p><ol><li>微服务应用启动时, 根据bootstrap.properties中配置的<strong>应用名application</strong>, <strong>环境名profile</strong>, <strong>分支名label</strong>, 向配置中心获取配置信息</li><li>配置中心根据自己维护的Git仓库信息和客户端传递过来的配置定位信息查找配置信息, 通过<code>git clone</code>命令将配置信息下载到配置中心的文件系统中</li><li>服务端应用从Git本地仓库中加载配置文件, 然后将配置内容读取出来返回给客户端应用</li><li>客户端获得外部配置信息进行加载, 覆盖本地本地配置信息, 实现外部化配置</li></ol><p>配置中心通过<code>git clone</code>将配置信息保存到本地, 起到缓存的作用, 当Git远程仓库无法访问的时候, 依然可以从配置中心中取出缓存内容进行使用</p><h2 id="5-2-注册到服务注册中心"><a href="#5-2-注册到服务注册中心" class="headerlink" title="5.2    注册到服务注册中心"></a>5.2    注册到服务注册中心</h2><h2 id="5-3-失败快速响应和重试机制"><a href="#5-3-失败快速响应和重试机制" class="headerlink" title="5.3    失败快速响应和重试机制"></a>5.3    失败快速响应和重试机制</h2><h2 id="5-4-动态刷新配置"><a href="#5-4-动态刷新配置" class="headerlink" title="5.4    动态刷新配置"></a>5.4    动态刷新配置</h2><p>目的: 客户端在获取配置信息之后, 若远程仓库中的配置信息发生改变, 客户端能够自动实时更新</p><p><strong>测试过程</strong></p><ol><li><p>引入pom依赖</p><p>监控模块, 其中包含了<code>/refresh</code>端点的实现, 该端点将用于实现配置信息的重新获取和刷新</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动客户端应用, 获取远程配置信息(第一次)</p></li><li><p>修改远程的配置信息后, 再次获取远程配置信息(第二次: <code>/refresh</code>前), 发现并<strong>没有获得修改后的配置信息, 仍然和第一次获得的配置信息相同</strong></p></li><li><p>通过post请求发送到<code>http://&lt;host&gt;:&lt;port&gt;/refresh</code>, 得到返回结果, 其中包含哪些远程配置信息被更新</p></li><li><p>再次获取远程配置信息(第三次: <code>/refresh</code>后), 获得修改后的配置信息, 实现动态刷新配置功能</p></li></ol><h1 id="第6章-消息总线-Bus"><a href="#第6章-消息总线-Bus" class="headerlink" title="第6章    消息总线(Bus)"></a>第6章    消息总线(Bus)</h1><p><strong>消息总线</strong>是架构模式; <strong>消息代理</strong>是中间件产品, 也称为<strong>消息中间件</strong></p><p><strong>消息路由</strong>的两种类型:</p><ul><li>点对点模式</li><li>发布-订阅模式</li></ul><h2 id="Spring的事件驱动模型"><a href="#Spring的事件驱动模型" class="headerlink" title="Spring的事件驱动模型"></a>Spring的事件驱动模型</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/linux-09-vim/"/>
      <url>/2023/02/04/linux-09-vim/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>需求</th><th>操作</th></tr></thead><tbody><tr><td>显示行号</td><td>1.输入vim ~/.vimrc<br>2.set nu保存并退出</td></tr><tr><td>退出命令</td><td>:w            - 保存文件，不退出 vim<br>:w file  -将修改另外保存到 file 中，不退出 vim<br>:w!          -强制保存，不退出 vim<br>:wq          -保存文件，退出 vim<br>:wq!        -强制保存文件，退出 vim<br>:q            -不保存文件，退出 vim<br>:q!          -不保存文件，强制退出 vim<br>:e!          -放弃所有修改，从上次保存文件开始再编辑</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/redis-01-ji-chu-pian/"/>
      <url>/2023/02/04/redis-01-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<pre><code>行式数据库和列式数据库1. OLAP分析型数据库 (列式数据库, 数据分析)   &gt; 计算均值, 比较大小, 求最大最小...等分析数据的时候速度快, 是将一个属性的数据存储到一起.   &gt; 只有取出所有的属性值之后才得到某一个对象的整体信息2. OLTP事务型数据库(行式数据库, 增删改查)   &gt; 将一个个对象作为存储的单位, 在取出一个对象的所有信息的时候速度快. 只有当去除所有的对象的属性值之后才能对数据进行求均值, 比大小等等    </code></pre><h2 id="centos7下配置redis"><a href="#centos7下配置redis" class="headerlink" title="centos7下配置redis"></a>centos7下配置redis</h2><ol><li><p>更改redis.conf配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>允许任何主机ip访问</p><blockquote><p>bind 0.0.0.0</p></blockquote></li><li><p>关闭保护模式</p><blockquote><p>protected-mode no</p></blockquote></li></ol></li><li><p>开放端口</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/sysconfig/iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>在文件中开放6379端口</p><blockquote><p>-A INPUT -m state –state NEW -m tcp -p tcp –dport 6379 -j ACCEPT</p></blockquote></li></ol></li></ol><h2 id="Redis-key基本命令"><a href="#Redis-key基本命令" class="headerlink" title="Redis-key基本命令"></a>Redis-key基本命令</h2><p>注 : 有时候命令没有提示, 可能是因为少输入了一个s</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/bin                <span class="token comment" spellcheck="true">#进入到redis软件的安装目录</span>redis-cli -p 6379                <span class="token comment" spellcheck="true">#开启,进入到127.0.0.1.6379></span><span class="token keyword">set</span> key_1 xiong<span class="token keyword">set</span> key_2 22get key_1expire key_1 10                    <span class="token comment" spellcheck="true">#设置过期时间,自动过期,cookie,session登录,缓存</span>ttl key_1                        <span class="token comment" spellcheck="true">#查看剩余时间</span>move key_1 xiong                <span class="token comment" spellcheck="true">#移除当前的key,一般不这么用</span>keys *                            <span class="token comment" spellcheck="true">#查看所有的key</span>exists key_1                    <span class="token comment" spellcheck="true">#查看当前的key是否存在</span><span class="token function">type</span> key_1                        <span class="token comment" spellcheck="true">#查看类型</span>flushdb                            <span class="token comment" spellcheck="true">#清空数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><pre class="line-numbers language-bash"><code class="language-bash">append key_1 helloworld            <span class="token comment" spellcheck="true">#向key_1后面追加"helloworld"</span>                                <span class="token comment" spellcheck="true">#如果当前key不存在,就相当于set key_1</span>strlen                            <span class="token comment" spellcheck="true">#获取字符串的长度</span>incr key_2                        <span class="token comment" spellcheck="true">#加1</span>decr key_2                        <span class="token comment" spellcheck="true">#减1</span>incrby key_2 10                    <span class="token comment" spellcheck="true">#设置每次增加的步长为10</span>getrange key_1 0 3                <span class="token comment" spellcheck="true">#获取0-3的字符</span>getrange key_1 0 -1                <span class="token comment" spellcheck="true">#获取全部的字符串</span>setrange key_1 1 xxx            <span class="token comment" spellcheck="true">#用xxx替换字符串中的字符,从1号位置开始,替换数目和xxx相等</span><span class="token comment" spellcheck="true">#msetnx操作是原子性的,要么一起成功,要么一起失败,但是 redis中的事务不是原子性的,可以有些成功有些失败</span>mset k1 v1 k2 v2 k3 v3             <span class="token comment" spellcheck="true">#批量设置,K1 V1</span>mget                            <span class="token comment" spellcheck="true">#获取多个值</span>msetnx K1 V1 K4 V4                <span class="token comment" spellcheck="true">#此时由于K1已经存在,会导致操作失败,返回0</span><span class="token comment" spellcheck="true">#设置对象</span><span class="token keyword">set</span> user:1<span class="token punctuation">{</span>name:zhangsan,age:22<span class="token punctuation">}</span>mset user:1:name zhangsan user:1:age 12    <span class="token comment" spellcheck="true">#这里的key_1为user:1:name,表示第一个user的name属性</span><span class="token comment" spellcheck="true">#获取对象</span>mget user:1:name user:1:age<span class="token comment" spellcheck="true">#组合命令</span>getset db redis                <span class="token comment" spellcheck="true">#第一次由于db不存在,所以输出nil,同时这个方法在输出后还会对db进行设置</span>getset db MongDB            <span class="token comment" spellcheck="true">#由于上一次已经设置db为redis,所以会输出redis,同时设置为MongDB</span>127.0.0.1:6379<span class="token operator">></span> setnx mykey redis        <span class="token comment" spellcheck="true">#如果mykey的值不存在,则设置为redis</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> setnx mykey MongDB        <span class="token comment" spellcheck="true">#如果mykey的值不存在,则设置为MongDB,如果存在则设置失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> SETEX key2 5 hello        <span class="token comment" spellcheck="true">#设置key2的值为hello,5秒后过期</span>OK127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#可以把List当成栈,队列,阻塞队列,实际上是一个链表</span><span class="token comment" spellcheck="true">#所有的list命令都是以l开头的</span>lpush key_1 one                    <span class="token comment" spellcheck="true">#向key为key_1的队列左边加上一个值one</span>lpop  key_1                        <span class="token comment" spellcheck="true">#从左边pop出栈</span>rpop  key_1                        <span class="token comment" spellcheck="true">#从右边pop出栈</span>lindex key_1 2                    <span class="token comment" spellcheck="true">#通过下标获取值,相当于list[2],下标从0开始,和编程语言保持一致</span>llen key_1                        <span class="token comment" spellcheck="true">#获取列表的长度</span>lrem key_1 2 xiong                 <span class="token comment" spellcheck="true">#在key_1中移除掉2个xiong,精确匹配</span>lrange mylist 0 -1                <span class="token comment" spellcheck="true">#相当于遍历mylist</span>ltrim mylist 0 3                 <span class="token comment" spellcheck="true">#相当于截断mylist,会造成mylist的改变</span>rpoplpush mylist myotherlist    <span class="token comment" spellcheck="true">#=rpop+lpush,从右边pop出列表中的第一个元素,并将它放入到新的列表中</span>                                <span class="token comment" spellcheck="true">#如果myotherlist不存在,会直接新建myotherlist</span>linsert                            <span class="token comment" spellcheck="true">#向列表中插入一个值</span>ex1:127.0.0.1:6379<span class="token operator">></span> lpush key_1 one 1 <span class="token string">"xiong"</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange key_1 0 -11<span class="token punctuation">)</span> <span class="token string">"xiong"</span>2<span class="token punctuation">)</span> <span class="token string">"1"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lpop key_1<span class="token string">"xiong"</span>127.0.0.1:6379<span class="token operator">></span> rpop key_1<span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrange key_1 0 -11<span class="token punctuation">)</span> <span class="token string">"1"</span>ex2:127.0.0.1:6379<span class="token operator">></span> lpush key_1 5 7 8 4 5 one right king xiong kuang sun xu<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 13127.0.0.1:6379<span class="token operator">></span> lrange key_1 0 -1 1<span class="token punctuation">)</span> <span class="token string">"xu"</span> 2<span class="token punctuation">)</span> <span class="token string">"sun"</span> 3<span class="token punctuation">)</span> <span class="token string">"kuang"</span> 4<span class="token punctuation">)</span> <span class="token string">"xiong"</span> 5<span class="token punctuation">)</span> <span class="token string">"king"</span> 6<span class="token punctuation">)</span> <span class="token string">"right"</span> 7<span class="token punctuation">)</span> <span class="token string">"one"</span> 8<span class="token punctuation">)</span> <span class="token string">"5"</span> 9<span class="token punctuation">)</span> <span class="token string">"4"</span>10<span class="token punctuation">)</span> <span class="token string">"8"</span>11<span class="token punctuation">)</span> <span class="token string">"7"</span>12<span class="token punctuation">)</span> <span class="token string">"5"</span>13<span class="token punctuation">)</span> <span class="token string">"1"</span>127.0.0.1:6379<span class="token operator">></span> lindex key_1 2<span class="token string">"kuang"</span>127.0.0.1:6379<span class="token operator">></span> lindex key xiong<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>ex3:127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>3<span class="token punctuation">)</span> <span class="token string">"hello1"</span>4<span class="token punctuation">)</span> <span class="token string">"hello2"</span>5<span class="token punctuation">)</span> <span class="token string">"hello3"</span>6<span class="token punctuation">)</span> <span class="token string">"hello3"</span>127.0.0.1:6379<span class="token operator">></span> ltrim mylist 00 3            <span class="token comment" spellcheck="true">#这里写00会造成错误</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range127.0.0.1:6379<span class="token operator">></span> ltrim mylist 0 3 OK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>3<span class="token punctuation">)</span> <span class="token string">"hello1"</span>4<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#命令以s开头</span><span class="token comment" spellcheck="true">#set里面没有重复的数据,属于无序不重复集合</span><span class="token comment" spellcheck="true">#用途 : 共同关注,共同爱好,推荐好友...</span><span class="token comment" spellcheck="true">#比如查看共同关注 : 将A关注的人放到一个集合中,B关注的一个人放到一个集合中,二者求交集</span>sadd myset hello                    <span class="token comment" spellcheck="true">#向myset中添加元素hello</span>smembers    myset                    <span class="token comment" spellcheck="true">#查看myset中的元素</span>scard myset                            <span class="token comment" spellcheck="true">#获取myset集合中的元素个数</span>srem myset hello                    <span class="token comment" spellcheck="true">#移除myset中的hello</span>sismember myset hello                <span class="token comment" spellcheck="true">#判断某一个值是否在myset中</span>srandmember myset 2                    <span class="token comment" spellcheck="true">#随机获取myset中的2个元素</span>spop myset                            <span class="token comment" spellcheck="true">#随机删除掉一个元素</span>smove myset myset2 hello            <span class="token comment" spellcheck="true">#将myset中的hello移到myset2中</span><span class="token function">sdiff</span> myset myset2                    <span class="token comment" spellcheck="true">#差集myset-myset2</span>sinter myset myset2                    <span class="token comment" spellcheck="true">#交集</span>sunion myset myset2                    <span class="token comment" spellcheck="true">#并集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Zest有序集合"><a href="#Zest有序集合" class="headerlink" title="Zest有序集合"></a>Zest有序集合</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#排行榜,分数成绩单排名</span><span class="token comment" spellcheck="true">#带权重的,例如重要消息等级设置为2,普通消息等级设置为1</span>zadd myset 1 one 0 two 4 three                        <span class="token comment" spellcheck="true">#添加多个值,并按照给定的序号进行排序</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3zrange myset 0 -1                                    <span class="token comment" spellcheck="true">#从这里可以看出,序号是从1开始,连续递增的</span>1<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>3<span class="token punctuation">)</span> <span class="token string">"three"</span>zrem    <span class="token comment" spellcheck="true">#移除</span>zadd salary 2500 zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1zadd salary 5000 lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1zadd salary 100 xiong<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1keys *1<span class="token punctuation">)</span> <span class="token string">"salary"</span>2<span class="token punctuation">)</span> <span class="token string">"myset"</span>zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"xiong"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"lisi"</span>zrangebyscore salary -inf inf                        <span class="token comment" spellcheck="true">#实现排序,-inf到inf表示全排序</span>1<span class="token punctuation">)</span> <span class="token string">"xiong"</span>                                            <span class="token comment" spellcheck="true">#可以指定范围 例如 -1000 200</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"lisi"</span>zrangebyscore salary -1000 1001<span class="token punctuation">)</span> <span class="token string">"xiong"</span>zrangebyscore salary 0 100 withscores                <span class="token comment" spellcheck="true">#同时会将具体的值打印出来</span>1<span class="token punctuation">)</span> <span class="token string">"xiong"</span>2<span class="token punctuation">)</span> <span class="token string">"100"</span>zrevrange salary 0 -1                                <span class="token comment" spellcheck="true">#从大到小排序</span>zcount myset 1 4                                    <span class="token comment" spellcheck="true">#获取myset中[1,4]的变量的个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#hash更适合对象的存储;</span><span class="token comment" spellcheck="true">#hash用来存储容易发生变更的数据,尤其是用户信息,一条field对应一个属性,例如username password age...</span>hset myhash field1 xiong                    <span class="token comment" spellcheck="true">#设置属性和值,相当于key和value</span>hget myhash field1                            <span class="token comment" spellcheck="true">#获取属性对应的值</span>hmset myhash field1 kuang field2 xiong        <span class="token comment" spellcheck="true">#设置多个属性值,并且会将同名属性的值给覆盖掉</span>hmget myhash field1 field2hdel muhash field1                            <span class="token comment" spellcheck="true">#删除myhash中的field1属性和对应的值</span>hlen myhash                                    <span class="token comment" spellcheck="true">#获取myhash中的长度</span>hexists myhash field3                        <span class="token comment" spellcheck="true">#判断myhash中field3是否存在</span>hgetall myhash                                <span class="token comment" spellcheck="true">#获取所有属性和它们对应的值</span>hkeys myhash                                <span class="token comment" spellcheck="true">#获取所有的key</span>hvals myhash                                <span class="token comment" spellcheck="true">#获取所有的value</span>myhash field3 5                                hincrby myhash field3 2                        <span class="token comment" spellcheck="true">#给field3对应的值加2,此时field3对应的值为7</span>hdecrby myhash field3 1                        <span class="token comment" spellcheck="true">#相当于+(-1)=-1</span>hsetnx myset field4 hello                    <span class="token comment" spellcheck="true">#当field4不存在才进行设置,否则失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#朋友的定位,附近的人,打车距离计算</span><span class="token comment" spellcheck="true">#这个功能可以推算出地理位置的信息,两地之间的距离,方圆几里的人</span><span class="token comment" spellcheck="true">#两级无法直接添加,一般会下载城市数据,直接通过java程序一次性导入</span>geoadd china:city 116.40 39.90 beijing        <span class="token comment" spellcheck="true">#添加地理位置,要注意经度和维度</span>geopos china:city beijing                    <span class="token comment" spellcheck="true">#获取指定地理位置的经度和维度</span>geodist china:city beijing shanghai km      <span class="token comment" spellcheck="true">#北京到上海的直线距离(以km为单位,默认是以m为单位)</span>georadius china:city 110 30 1000 km            <span class="token comment" spellcheck="true">#以110 30为中心,半径为1000km,在集合china:city中查找符合要求的城市</span>georadius china:city 110 30 500 km withdist                <span class="token comment" spellcheck="true">#带上这些城市到这个中心点的实际距离</span>georadius china:city 110 30 500 km withcoord            <span class="token comment" spellcheck="true">#带上这些城市的经度和纬度</span>georadius china:city 110 30 500 km withdist count 5     <span class="token comment" spellcheck="true">#指定查找数量为5,则最多只显示5个</span>georadiusbymember chian:city beijing 500 km withdist    <span class="token comment" spellcheck="true">#用beijing来替代经度和纬度坐标</span><span class="token comment" spellcheck="true">#底层是Zset,所以可以用Zset中的命令来对Geospatial进行操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hyperloglog基数"><a href="#Hyperloglog基数" class="headerlink" title="Hyperloglog基数"></a>Hyperloglog基数</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#基数:不重复的元素,可以接收误差</span><span class="token comment" spellcheck="true">#比如用来统计网页的浏览量,同一个id访问多次只能算作一次</span><span class="token comment" spellcheck="true">#传统方法:用set保存用户id,由于set不能有重复的数据,所有只会算作是一次</span><span class="token comment" spellcheck="true">#缺点: 这样保存了大量的用户id,比较占用资源</span>hypeloglog: 只需要12kB的内存,但有0.83%的错误率,需要允许一定的容错,专业解决计数问题127.0.0.1:6379<span class="token operator">></span> pfadd mykey a b x k ds  kf f kfk<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfadd mykey a d d d fj f j ks d e d <span class="token function">v</span> x c <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 15127.0.0.1:6379<span class="token operator">></span> pfadd mykey2 saj fsa f ds kdk sd sde g  gds x f<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> PFMERGE mykey3 mykey mykey2OK127.0.0.1:6379<span class="token operator">></span> PFCOUNT mykey3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Bitmaps位存储"><a href="#Bitmaps位存储" class="headerlink" title="Bitmaps位存储"></a>Bitmaps位存储</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#用来解决只有两个状态的数据的存储,是否,有无....</span><span class="token comment" spellcheck="true">#设置</span>127.0.0.1:6379<span class="token operator">></span> setbit sign 0 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 1 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 2 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 3 0 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 4 1 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 5 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 6 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#查看</span>127.0.0.1:6379<span class="token operator">></span> getbit sign 3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> getbit sign 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true">#查看打开的天数</span>127.0.0.1:6379<span class="token operator">></span> bitcount sign<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#Redis单条命令是保证原子性,但是事务是不保证原子性的</span><span class="token comment" spellcheck="true">#Redis事务没有隔离级别的概念</span><span class="token comment" spellcheck="true">#redis的事务:</span>    开启事务 <span class="token keyword">:</span> multi    命令入队    执行事务 <span class="token keyword">:</span> <span class="token function">exec</span><span class="token comment" spellcheck="true">#正常流程</span>127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> get k1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token comment" spellcheck="true">#执行完事务后,这组事务就不存在了,后面使用的时候需要重新开启</span><span class="token comment" spellcheck="true">#放弃事务</span>127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 kQUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 5QUEUED127.0.0.1:6379<span class="token operator">></span> discardOK<span class="token comment" spellcheck="true">#此时再去获取k1,k2,k3,k4,就已经不存在了</span>127.0.0.1:6379<span class="token operator">></span> get k4<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p><code>watch</code>相当于mysql中的version, 如果在执行前另外一个线程修改了乐观锁中的值, 则会执行失败</p><p><code>unwatch</code>发现事务执行失败后, 需要解锁后再执行</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/mysql-01-an-zhuang/"/>
      <url>/2023/02/04/mysql-01-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>mysql内核</p><p>sql优化</p><p>mysql服务器优化</p><p>各个参数常量设定</p><p>查询语句优化</p><p>主从复制</p><p>软硬件升级</p><p>容灾备份</p><p>sql编程</p><h1 id="MySQL在Linux下的安装"><a href="#MySQL在Linux下的安装" class="headerlink" title="MySQL在Linux下的安装"></a>MySQL在Linux下的安装</h1><h2 id="rpm安装方式"><a href="#rpm安装方式" class="headerlink" title="rpm安装方式"></a>rpm安装方式</h2><ul><li>进入mysql的下载地址<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></li><li>选择版本</li><li>下载32位的服务端server和客户端client</li></ul><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><ul><li><p>启动mysql服务 </p><pre class="line-numbers language-shell"><code class="language-shell">service mysql start或systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看mysql的初始密码</p><pre class="line-numbers language-shell"><code class="language-shell">grep "password" /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录数据库</p><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改mysql的默认密码</p><blockquote><p><strong>说明</strong> 新密码设置的时候如果设置的过于简单会报错，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行如下命令，创建wordpress库</p><pre class="line-numbers language-shell"><code class="language-shell">create database wordpress; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看是否创建成功</p><pre class="line-numbers language-shell"><code class="language-shell">show database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入<code>exit</code>退出数据库</p></li></ul><p>修改MySQL配置文件(拷贝一份,不修改原配置文件)</p><pre class="line-numbers language-shell"><code class="language-shell">cp my-huge.cnf /etc/my.cnf #5.5版本cp my-default.cnf /etc/my.cnf #5.6版本配置文件名称不一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果先建表, 再配置文件改为utf-8, 还是会导致乱码</p><h1 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h1><ul><li><p>二进制日志文件log-bin(主从复制)</p></li><li><p>错误日志log-error<br>默认是关闭, 记录严重的警告和错误信息, 每次启动和关闭的详细信息 </p></li><li><p>查询日志log</p><p>默认关闭, 记录查询的sql语句,如果开启会降低mysql的整体性能,</p></li><li><p>数据文件<br>myi文件(存放表索引)<br>myd文件(存放表数据)</p><p>myfrm(存放表结构)</p></li><li><p>配置文件路径(linux下是在/etc/my.cnf, 而windows下是my.ini)</p></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>提高了查询速度,但同时提高了增删改的成本,因为需要维护B+树这种数据结构</p><p>不需要建立索引的情况</p><blockquote><ol><li>表记录太少的时候</li><li>经常增删改的表</li><li>某个数据列包含许多重复的内容,那这个表字段就没有必要建立索引</li></ol></blockquote><h1 id="explain作用"><a href="#explain作用" class="headerlink" title="explain作用"></a>explain作用</h1><p>能干嘛?</p><blockquote><ol><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ol></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200608131536810.png" alt="image-20200608131536810"></p><p>字段解释:</p><ol><li><p>id</p><blockquote><p>id越大的越先执行,id相同的从上到下执行</p></blockquote></li><li><p>table</p><blockquote><p>derived2表示的就是id为2的表的衍生表,相当于临时变量</p></blockquote></li><li><p>select_type</p></li><li><p>type(重点)</p><blockquote><p>最好到最差: system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</p><p>一般来说,得保证查询至少达到range级别,最好能达到ref,再往上比较理想,实际情况不太可能实现</p><p>ref:</p><p>range:</p><p>index:全索引扫描</p><p>all:全表扫描</p></blockquote></li><li><p>possible_keys和key</p><blockquote><p>possible_keys: 理论上可能用到的索引</p><p>key: mysql实际使用的索引,如果为null则表示索引失效,没有使用索引; 如果查询中使用了覆盖索引,则该索引仅仅出现在key列表中</p></blockquote></li><li><p>key_len</p><blockquote><p>key_len显示的值为索引字段的最大可能长度,==并非实际使用长度==</p><p>在不损失精确度的情况下,长度越短越好</p></blockquote></li><li><p>ref</p><blockquote><p>显示索引的哪一列被使用,可以的话最好是常量const</p></blockquote></li><li><p>rows</p><blockquote><p>大致估算出找到所需的记录所需要读取的行数</p></blockquote></li><li><p>Extra(重点)</p><blockquote><ol><li>Using filesort:尽可能优化sql, 这是一个糟糕的信息</li><li>Using temporary: 比上面的更糟糕,使用了临时表保存中间结果</li><li>Using index: 效率不错<ol><li>如果同时出现Using where表明索引被用来执行索引键值的查找</li><li>如果没有同时出现Using where表明索引用来读取数据而非执行查找动作</li></ol></li><li>Using where: 表明使用了where过滤</li><li>using joing buffer: 使用了连接缓存,当sql语句中的join过多时,可以调大配置文件中的joining buffer</li><li>impossible where: where子句的值是false, 相当于逻辑错误</li><li>distinct: 找到第一匹配的元组后即立即停止找同样值得动作</li></ol></blockquote></li></ol><h1 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h1><ol><li><p>单表索引优化案例</p><blockquote><p>range类型的索引后面的索引失效 where ==id&gt;1==</p><p>id = 1 and ==name_length&gt;2 order by name==这部分失效 </p></blockquote></li><li><p>双表索引优化案例</p></li><li><p>三表索引优化案例</p></li></ol><h1 id="解决like-数据-失效的问题"><a href="#解决like-数据-失效的问题" class="headerlink" title="解决like   %数据%   失效的问题"></a>解决like   %数据%   失效的问题</h1><p>使用覆盖索引</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/bigdata-01-hadoop-01-an-zhuang-hadoop/"/>
      <url>/2023/02/04/bigdata-01-hadoop-01-an-zhuang-hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop相关的Linux基础操作"><a href="#Hadoop相关的Linux基础操作" class="headerlink" title="Hadoop相关的Linux基础操作"></a>Hadoop相关的Linux基础操作</h1><h2 id="解压并配置环境变量"><a href="#解压并配置环境变量" class="headerlink" title="解压并配置环境变量"></a>解压并配置环境变量</h2><h5 id="创建新文件夹"><a href="#创建新文件夹" class="headerlink" title="创建新文件夹"></a>创建新文件夹</h5><pre class="line-numbers language-shell"><code class="language-shell">mkdir opt/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h5><pre class="line-numbers language-shell"><code class="language-shell">rm -rf filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压文件到指定文件夹"><a href="#解压文件到指定文件夹" class="headerlink" title="解压文件到指定文件夹"></a>解压文件到指定文件夹</h5><pre class="line-numbers language-shell"><code class="language-shell">tar -zxvf hadoop.tar.gz -C opt/modules/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="获取文件的路径"><a href="#获取文件的路径" class="headerlink" title="获取文件的路径"></a>获取文件的路径</h5><pre class="line-numbers language-shell"><code class="language-shell">pwd hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h5><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profileHADOOP_HOME=/opt/modules/hadoop-3.2.1export PATH=$PATH:$HADOOP_HOME/binexport PATH=$PATH:$HADOOP_HOME/sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="刷新环境变量设置"><a href="#刷新环境变量设置" class="headerlink" title="刷新环境变量设置"></a>刷新环境变量设置</h5><pre class="line-numbers language-shell"><code class="language-shell">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Hadoop目录介绍"><a href="#Hadoop目录介绍" class="headerlink" title="Hadoop目录介绍"></a>Hadoop目录介绍</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# lsbin  etc  include  lib  libexec  LICENSE.txt  NOTICE.txt  README.txt  sbin  share<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="sbin-存放hadoop启动和停止的命令-重点"><a href="#sbin-存放hadoop启动和停止的命令-重点" class="headerlink" title="sbin : 存放hadoop启动和停止的命令(重点)"></a>sbin : 存放hadoop启动和停止的命令(重点)</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cd sbin[root@izbp11cvux96riz6fo5klaz sbin]# lsdistribute-exclude.sh    start-all.sh         stop-balancer.shFederationStateStore     start-balancer.sh    stop-dfs.cmdhadoop-daemon.sh         start-dfs.cmd        stop-dfs.shhadoop-daemons.sh        start-dfs.sh         stop-secure-dns.shhttpfs.sh                start-secure-dns.sh  stop-yarn.cmdkms.sh                   start-yarn.cmd       stop-yarn.shmr-jobhistory-daemon.sh  start-yarn.sh        workers.shrefresh-namenodes.sh     stop-all.cmd         yarn-daemon.shstart-all.cmd            stop-all.sh          yarn-daemons.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cd bin[root@izbp11cvux96riz6fo5klaz bin]# lscontainer-executor  hadoop  hadoop.cmd  hdfs  hdfs.cmd  mapred  mapred.cmd  oom-listener  test-container-executor  yarn  yarn.cmd#介绍dhfs :hadoop : 管理hadoop集群yarn : 管理资源调度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="etc-配置文件"><a href="#etc-配置文件" class="headerlink" title="etc : 配置文件"></a>etc : 配置文件</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cd etc[root@izbp11cvux96riz6fo5klaz etc]# lshadoop[root@izbp11cvux96riz6fo5klaz etc]# cd hadoop[root@izbp11cvux96riz6fo5klaz hadoop]# lscapacity-scheduler.xml            kms-log4j.propertiesconfiguration.xsl                 kms-site.xmlcontainer-executor.cfg            log4j.propertiescore-site.xml                     mapred-env.cmdhadoop-env.cmd                    mapred-env.shhadoop-env.sh                     mapred-queues.xml.templatehadoop-metrics2.properties        mapred-site.xmlhadoop-policy.xml                 shellprofile.dhadoop-user-functions.sh.example  ssl-client.xml.examplehdfs-site.xml                     ssl-server.xml.examplehttpfs-env.sh                     user_ec_policies.xml.templatehttpfs-log4j.properties           workershttpfs-signature.secret           yarn-env.cmdhttpfs-site.xml                   yarn-env.shkms-acls.xml                      yarnservice-log4j.propertieskms-env.sh                        yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="lib-本地库"><a href="#lib-本地库" class="headerlink" title="lib : 本地库"></a>lib : 本地库</h5><pre class="line-numbers language-shell"><code class="language-shell">[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cd lib[root@izbp11cvux96riz6fo5klaz lib]# lsnative[root@izbp11cvux96riz6fo5klaz lib]# cd native[root@izbp11cvux96riz6fo5klaz native]# lsexamples          libhadoop.so        libhdfs.a         libnativetask.alibhadoop.a       libhadoop.so.1.0.0  libhdfs.so        libnativetask.solibhadooppipes.a  libhadooputils.a    libhdfs.so.0.0.0  libnativetask.so.1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="share-官方提供的案例和说明文档"><a href="#share-官方提供的案例和说明文档" class="headerlink" title="share : 官方提供的案例和说明文档"></a>share : 官方提供的案例和说明文档</h5><h2 id="Hadoop正式开始使用"><a href="#Hadoop正式开始使用" class="headerlink" title="Hadoop正式开始使用"></a>Hadoop正式开始使用</h2><pre class="line-numbers language-shell"><code class="language-shell">#首先进入hadoop安装目录 cd opt/modules/hadoop-3.2.1#在该目录下创建一个input文件夹#将etc/hadoop/*.xml的文件移动到input文件夹中(正则表达式)[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# mkdir input[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cp etc/hadoop/*.xml input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置ssh免密登录"><a href="#配置ssh免密登录" class="headerlink" title="配置ssh免密登录"></a>配置ssh免密登录</h5><pre class="line-numbers language-shell"><code class="language-shell">ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsacat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keyschmod 0600 ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="经典案例"><a href="#经典案例" class="headerlink" title="经典案例"></a>经典案例</h5><pre class="line-numbers language-shell"><code class="language-shell">hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep input/ output 'dfs[a-z.]+'#输出符合指定正则表达式的结果,保存到output文件夹中,并且outpue文件事先不能存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# mkdir wcinput[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cd wcinput[root@izbp11cvux96riz6fo5klaz wcinput]# touch wc.input[root@izbp11cvux96riz6fo5klaz wcinput]# vim wc.input[root@izbp11cvux96riz6fo5klaz wcinput]# cd ..[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount wcinput wcoutput[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# cat wcoutput/part-r-00000 #输出结果(取决于自己在vim编辑的时候输入的内容)hadoop    2mapreduce    1yarn    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="伪分布配置步骤"><a href="#伪分布配置步骤" class="headerlink" title="伪分布配置步骤"></a>伪分布配置步骤</h5><pre class="line-numbers language-shell"><code class="language-shell">#java环境变量配置vim /etc/profileJAVA_HOME=/usr/java/jdk1.8.0_121JRE_HOME=${JAVA_HOME}/jreCLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH#另一个需要配置java的文件vim ~/.bashrc#在这个文件的最上面添上export JAVA_HOME=/usr/java/jdk1.8.0_121export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH#相当于刷新,让刚才的配置生效source /etc/profilesource ~/.bashrc#初始化命令[root@izbp11cvux96riz6fo5klaz bin]# hdfs namenode -format#dfs.sh文件在文件顶部添加上这个HDFS_DATANODE_USER=rootHADOOP_SECURE_DN_USER=hdfsHDFS_NAMENODE_USER=rootHDFS_SECONDARYNAMENODE_USER=root#yarn.shYARN_RESOURCEMANAGER_USER=rootHADOOP_SECURE_DN_USER=yarnYARN_NODEMANAGER_USER=root#执行如下命令[root@izbp11cvux96riz6fo5klaz sbin]# start-dfs.sh#检测是否成功启动[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# jps10896 SecondaryNameNode11041 Jps10549 NameNode17493 10678 DataNode#在远程服务器上创建一个目录/opt/modules/hadoop-3.2.1/[root@izbp11cvux96riz6fo5klaz hadoop-3.2.1]# ./bin/hdfs dfs -mkdir -p /opt/modules/hadoop-3.2.1/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/spring/"/>
      <url>/2023/02/04/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li>控制反转IOC</li><li>面向切面编程AOP</li><li>轻量级, 非入侵</li></ul><h1 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h1><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>UserServiceImpl业务实现类</li></ol><p>原来的业务中,用户的需求可能会影响原来的代码, 我们需要根据用户的需求去修改代码. 如果程序代码量十分大,修改一次的成本非常大</p><h1 id="早期开发"><a href="#早期开发" class="headerlink" title="早期开发"></a>早期开发</h1><ul><li>接口</li><li>实现类</li><li>业务层service调用dao层(在service中放入到的对象, 组合的思想)</li><li>增加实现类, 则需要修改service层的代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//需要直接在service实现类中new dao层的对象</span><span class="token keyword">private</span> UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoMysqlImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h1><ul><li>使用set方法, 使用哪类dao层对象, 则传入那个对象</li><li>直接在MyTest中修改代码, 而不需要修改资源代码</li><li>在service中修改代码和在MyTest中修改代码的区别</li></ul><h1 id="beans-xml配置文件"><a href="#beans-xml配置文件" class="headerlink" title="beans.xml配置文件"></a>beans.xml配置文件</h1><pre class="line-numbers language-xml"><code class="language-xml">id:对象名class:类全路径名ref:引用spring容器中创建好的对象value:具体的值,基本数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="IOC创建对象"><a href="#IOC创建对象" class="headerlink" title="IOC创建对象"></a>IOC创建对象</h1><ul><li>默认使用无参构造创建对象</li><li>或者通过参数名来创建对象(需要有参构造, 但有参构造最终还是会调用无参构造)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/springboot-01-kuai-su-ru-men/"/>
      <url>/2023/02/04/springboot-01-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><ol><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- --></span>sprint-boot-starter-parent<span class="token comment" spellcheck="true">&lt;!-- 场景启动器;帮助导入web等模块正常运行所依赖的组件--></span>spring-boot-starterspring-boot-starter-web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- @SpringBootApplication标注这个类是SpringBoot的主配置类,SpringBoot运行这个类的main方法来启动SpringBoot应用--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li></li></ol><p>Spring Boot配置文件</p><pre class="line-numbers language-xml"><code class="language-xml">application.properties和application.yml都是全局配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>yaml语法</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#1.字符串</span>    1.1 双引号""    1.2 单引号''<span class="token punctuation">,</span>表示忽略里面的转义字符<span class="token punctuation">,</span>是什么则输出什么<span class="token comment" spellcheck="true">#2.对象</span>    <span class="token key atrule">friends</span><span class="token punctuation">:</span>        <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#3.数组(List,Set)</span>    <span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span>cat    <span class="token punctuation">-</span>dog    <span class="token punctuation">-</span>pig    <span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>优先级 : resources&gt;static(默认)&gt;public</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p>springboot启动时会加载大量的自动配置类</p></li><li><p>我们需要的功能有没有springboot默认写好的自动配置类</p></li><li><p>我们看看这个自动配置类使用类哪些组件</p></li><li><p>给容器中自动配置类添加组件, 会从properties类中获取某些属性,我们就可以在配置文件中指定这些属性的值</p></li><li><p>xxxAutoConfiguration : 自动配置类</p><p>给容器添加组件</p><p>xxxProperties : 封装配置文件中的相关属性</p></li></ul><h1 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h1><blockquote><p>注意：IDEA 中的插件（yaml和properties自动转换）存在一点小bug，涉及到复杂对象的List和Map生成会当做简单对象处理，因此生成的配置文件可能出现不能正常运行的情况。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 基本数据类型</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 引用类型</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 时间类型</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义类型</span>    <span class="token keyword">private</span> Cat cat<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 集合类型</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Person<span class="token operator">></span> friends <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Cat<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Properties-表示复杂对象"><a href="#Properties-表示复杂对象" class="headerlink" title="Properties 表示复杂对象"></a>Properties 表示复杂对象</h2><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">person.id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">person.name</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">person.birthday</span><span class="token punctuation">=</span><span class="token attr-value">2023/6/5 12:12:12</span><span class="token attr-name">person.cat.name</span><span class="token punctuation">=</span><span class="token attr-value">kitty</span><span class="token attr-name">person.cat.age</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token comment" spellcheck="true"># List列表中的每个元素都是一个复杂对象</span><span class="token attr-name">person.friends[0].id</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token attr-name">person.friends[0].name</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">person.friends[0].birthday</span><span class="token punctuation">=</span><span class="token attr-value">2021/6/5 12:12:12</span><span class="token attr-name">person.friends[1].id</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">person.friends[1].name</span><span class="token punctuation">=</span><span class="token attr-value">joker</span><span class="token attr-name">person.friends[1].birthday</span><span class="token punctuation">=</span><span class="token attr-value">2020/6/5 12:12:12</span><span class="token comment" spellcheck="true"># Map字典结构, 其中cat01和cat02作为字典的key</span><span class="token attr-name">person.attributes.cat01.name</span><span class="token punctuation">=</span><span class="token attr-value">c1</span><span class="token attr-name">person.attributes.cat01.age</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token attr-name">person.attributes.cat02.name</span><span class="token punctuation">=</span><span class="token attr-value">c2</span><span class="token attr-name">person.attributes.cat02.age</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="YAML-表示复杂对象"><a href="#YAML-表示复杂对象" class="headerlink" title="YAML 表示复杂对象"></a>YAML 表示复杂对象</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> root  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 2023/6/5 12<span class="token punctuation">:</span><span class="token datetime number">12:12</span>  <span class="token key atrule">cat</span><span class="token punctuation">:</span>    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> kitty  <span class="token comment" spellcheck="true"># 列表中是一个复杂对象</span>  <span class="token key atrule">friends</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> admin      <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 2021/6/5 12<span class="token punctuation">:</span><span class="token datetime number">12:12</span>    <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> joker      <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 2020/6/5 12<span class="token punctuation">:</span><span class="token datetime number">12:12</span>  <span class="token comment" spellcheck="true"># 字典的key作为一个自定义的字段, value作为一个复杂对象, List可以认为使用"-"来作为匿名key</span>  <span class="token key atrule">attributes</span><span class="token punctuation">:</span>    <span class="token key atrule">cat01</span><span class="token punctuation">:</span>      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> c1    <span class="token key atrule">cat02</span><span class="token punctuation">:</span>      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h1><p>项目中不使用 <code>System.out.printIn()</code> 进行输出，而是使用日志进行输出。</p><p>SpringBoot 中默认使用的日志框架是 Logback，但<strong>日志并不是使用XXXAutoConfiguration自动配置的机制实现，而是使用的监听器机制</strong>。自动配置原理是在系统启动完成之后，再向 Spring 容器中放入组件，但是日志同时需要记录系统启动过程。</p><table><thead><tr><th>日志门面（接口）</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL</td><td></td></tr><tr><td>Slf4j</td><td>Log4j2、Logback</td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="debug模式"><a href="#debug模式" class="headerlink" title="debug模式"></a>debug模式</h1><p>在配置文件中debug=true</p><h2 id="日志选择"><a href="#日志选择" class="headerlink" title="日志选择"></a>日志选择</h2><p>日志门面(抽象层) : SLF4J</p><p>日志实现 : Logback</p><h2 id="SpringBoot对静态资源的映射规则"><a href="#SpringBoot对静态资源的映射规则" class="headerlink" title="SpringBoot对静态资源的映射规则"></a>SpringBoot对静态资源的映射规则</h2><p>WebAutoConfiguration</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">isAddMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Default resource handling disabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Duration cachePeriod <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CacheControl cacheControl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCachecontrol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHttpCacheControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span><span class="token string">"/webjars/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/webjars/**"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"classpath:/META-INF/resources/webjars/"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String staticPathPattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mvcProperties<span class="token punctuation">.</span><span class="token function">getStaticPathPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">hasMappingForPattern</span><span class="token punctuation">(</span>staticPathPattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">customizeResourceHandlerRegistration</span><span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>staticPathPattern<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span>WebMvcAutoConfiguration<span class="token punctuation">.</span><span class="token function">getResourceLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceProperties<span class="token punctuation">.</span><span class="token function">getStaticLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span>cachePeriod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span>cacheControl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的/webjars/**, 都去classpath://META_INF/resources/webjars/找资源</p><p><a href="http://localhost:8080/webjars/jquery/3.5.0/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.5.0/jquery.js</a></p><p>在访问的时候只需要写webjars下面资源的名称即可</p><h2 id="静态资源文件夹"><a href="#静态资源文件夹" class="headerlink" title="静态资源文件夹"></a>静态资源文件夹</h2><pre class="line-numbers language-java"><code class="language-java">ResourceProperties<span class="token punctuation">.</span>java<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> CLASSPATH_RESOURCE_LOCATIONS <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"classpath:/META-INF/resources/"</span><span class="token punctuation">,</span><span class="token string">"classpath:/resources/"</span><span class="token punctuation">,</span>                                             <span class="token string">"classpath:/static/"</span><span class="token punctuation">,</span><span class="token string">"classpath:/public/"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token string">"/"</span><span class="token operator">:</span>当前项目的根路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>欢迎页: 静态资源文件夹下所有的index.html</p><p>在public文件夹下创建一个index.html文件, 则访问<a href="http://localhost:8080的时候默认访问index.html" target="_blank" rel="noopener">http://localhost:8080的时候默认访问index.html</a></p><h2 id="引入模板引擎thymeleaf"><a href="#引入模板引擎thymeleaf" class="headerlink" title="引入模板引擎thymeleaf"></a>引入模板引擎thymeleaf</h2><p>只要我们把HTML页面放在classpath:/templates/ ,thymeleaf就能自动渲染</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><h1 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h1><h2 id="entities"><a href="#entities" class="headerlink" title="entities"></a>entities</h2><p>主实体类</p><p>Json封装体CommonResult</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/servletcontext-dui-xiang/"/>
      <url>/2023/02/04/servletcontext-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p>ServletContext对象</p><ol><li>对象在工程部署时创建, 在web工程停止时销毁</li><li>一个web工程只有一个ServletContext对象实例</li><li>ServletContext对象和不同的Servlet类的关系类似全局变量和函数的感觉</li></ol><p>GET请求</p><ol><li>请求行<ol><li>请求的方式                                 GET</li><li>请求的资源路径(+ ? + 请求的参数)</li><li>请求的协议的版本号                 HTTP/1.1</li></ol></li><li>请求头<ol><li>键值对</li></ol></li></ol><p>HttpServletRequest类的常用方法</p><p>请求转发</p><blockquote><p>服务器收到请求后, 从一个资源跳转到另一个资源</p></blockquote><ol><li>浏览器地址栏没有变化</li><li>一次请求</li><li>共享Request域中的数据</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/mian-shi-chang-jian-wen-ti/"/>
      <url>/2023/02/04/mian-shi-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Java字节码"><a href="#Java字节码" class="headerlink" title="Java字节码"></a>Java字节码</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token operator">++</span>i <span class="token operator">*</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"k="</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-visual"><code class="language-visual">0 iconst_0             #常量01 istore_1            #0存入到变量i中,这两行对应int i = 0;2 iload_1            #把i的值压入操作数栈3 iinc 1 by 1        #i自增6 istore_1            #i7 iload_1            #i压栈8 iinc 1 by 1        #i自增11 istore_2            #12 iload_1            #i压栈13 iinc 1 by 1        #i自增16 iload_1            #i压栈17 iload_1            #i压栈18 iinc 1 by 1        #i自增21 imul                22 iadd23 istore_324 getstatic #2 <java/lang/System.out>27 new #3 <java/lang/StringBuilder>30 dup31 invokespecial #4 <java/lang/StringBuilder.<init>>34 ldc #5 <i=>36 invokevirtual #6 <java/lang/StringBuilder.append>39 iload_140 invokevirtual #7 <java/lang/StringBuilder.append>43 invokevirtual #8 <java/lang/StringBuilder.toString>46 invokevirtual #9 <java/io/PrintStream.println>49 getstatic #2 <java/lang/System.out>52 new #3 <java/lang/StringBuilder>55 dup56 invokespecial #4 <java/lang/StringBuilder.<init>>59 ldc #10 <j=>61 invokevirtual #6 <java/lang/StringBuilder.append>64 iload_265 invokevirtual #7 <java/lang/StringBuilder.append>68 invokevirtual #8 <java/lang/StringBuilder.toString>71 invokevirtual #9 <java/io/PrintStream.println>74 getstatic #2 <java/lang/System.out>77 new #3 <java/lang/StringBuilder>80 dup81 invokespecial #4 <java/lang/StringBuilder.<init>>84 ldc #11 <k=>86 invokevirtual #6 <java/lang/StringBuilder.append>89 iload_390 invokevirtual #7 <java/lang/StringBuilder.append>93 invokevirtual #8 <java/lang/StringBuilder.toString>96 invokevirtual #9 <java/io/PrintStream.println>99 return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结: </p><ol><li>赋值<code>=</code>, 最后计算</li><li><code>=</code>右边的从左到右加载值一次压入操作数栈</li><li>实际先算哪个,看运算符优先级</li><li>自增,自减操作都是直接修改变量的值,不经过操作数栈</li><li>最后的赋值之前,临时结果都是储存在操作数栈中</li></ol></blockquote><h1 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h1><blockquote><p>某个类在整个系统中只能有一个实例对象可以被获取和使用, <code>唯一</code></p></blockquote><ul><li><p>只能有一个实例</p><blockquote><p>操作者不能随意创建, 所以<code>构造器必须私有化</code></p></blockquote></li><li><p>必须是自行创建</p><blockquote><p>含有一个该类的<code>静态变量</code>来保存这个唯一的实例</p></blockquote></li><li><p>必须自行向整个系统提供这个实例</p><blockquote><p>对外提供获取该实例对象的方式</p><ol><li>直接暴露</li><li>用静态变量的get方法</li></ol></blockquote></li></ul><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><blockquote><p>直接创建对象,不存在线程安全的问题</p></blockquote><ul><li>直接实例化饿汉式(简洁直观)</li><li>枚举式(最简洁)</li><li>静态代码块饿汉式(适合复杂实例化)</li></ul><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><blockquote><p>只有需要使用的时候才创建, 多线程需要考虑线程安全的影响</p></blockquote><ul><li>线程不安全(适合单线程)</li><li>线程安全(适合多线程)</li><li>静态内部类形式(适用多线程)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/z-za-xiang-wei-xin-xiao-cheng-xu/"/>
      <url>/2023/02/04/z-za-xiang-wei-xin-xiao-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><h2 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h2><p>框架–全局配置</p><ul><li><p>pages中第一个代表默认打开的页面</p></li><li><p>window: </p></li><li><p>tabBar</p></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><table><thead><tr><th>目录名</th><th>作用</th></tr></thead><tbody><tr><td>styles</td><td>存放公共样式</td></tr><tr><td>components</td><td>存放组件</td></tr><tr><td>lib</td><td>存放第三方库</td></tr><tr><td>utils</td><td>存放自己的帮助库</td></tr><tr><td>request</td><td>自己的接口帮助库</td></tr></tbody></table><h2 id="阿里巴巴字体图标库"><a href="#阿里巴巴字体图标库" class="headerlink" title="阿里巴巴字体图标库"></a>阿里巴巴字体图标库</h2><p>添加到购物车—&gt;添加到项目—&gt;选择font class—&gt;复制代码到网页进行搜索—-&gt;得到源代码,复制粘贴到项目的styles的iconfont.wxss中—-&gt;app.wxss中导入这个文件—&gt;在具体的页面中应用这个样式</p><h2 id="小程序存在的问题"><a href="#小程序存在的问题" class="headerlink" title="小程序存在的问题"></a>小程序存在的问题</h2><ul><li>index.js中有个轮播图数组,需要通过url请求获取,目前为空</li><li>目前搜索框不能自动跳转</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/shang-chou-wang-xiang-mu/"/>
      <url>/2023/02/04/shang-chou-wang-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="尚筹网项目"><a href="#尚筹网项目" class="headerlink" title="尚筹网项目"></a>尚筹网项目</h1><ol><li><p>创建数据库</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>project_crowd<span class="token punctuation">`</span> <span class="token keyword">CHARACTER SET</span> utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建管理员数据库表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">USE</span> project_crowd<span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> t_admin<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_admin<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    login_acct <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    user_pswd CHAR<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    create_time CHAR<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mybatis逆向工程</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- mybatis-generator:generate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>atguiguTables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 是否去除自动生成的注释 true:是;false:否 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span>                <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>                <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/project_crowd<span class="token punctuation">"</span></span>                <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL            和 NUMERIC 类型解析为java.math.BigDecimal --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- targetProject:生成Entity类的路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span>                            <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.crowd.entity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 从数据库返回的值被清理前后的空格 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- targetProject:XxxMapper.xml映射文件生成的路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.crowd.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- targetPackage：Mapper接口生成的位置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.crowd.mapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 数据库表名字和我们的entity类对应的映射指定 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t_admin<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Admin<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行逆向生成操作的Maven命令 <code>mybatis-generator:generate</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/shu-cheng-xiang-mu/"/>
      <url>/2023/02/04/shu-cheng-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>书城项目</p><ol><li><p>创建数据库表</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE book;USE book;CREATE TABLE t_user(    `id` INT PRIMARY KEY AUTO_INCREMENT,    `username` VARCHAR(20) NOT NULL UNIQUE,    `password` VARCHAR(32) NOT NULL,    `email` VARCHAR(200));INSERT INTO t_user(`username`,`password`,`email`) VALUES('admin','admin','admin@atguifu.com');SELECT * FROM t_user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>编写数据库表对应的JavaBean对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>pojo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", email='"</span> <span class="token operator">+</span> email <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">,</span> String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Dao持久层</p><ol><li><p>编写工具类JdbcUtils</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSourceFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidPooledConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> DruidDataSource dataSource<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取配置文件</span>            InputStream inputStream <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span> <span class="token operator">+</span>                    <span class="token string">".properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从流中加载数据</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建数据库连接池</span>            dataSource <span class="token operator">=</span> <span class="token punctuation">(</span>DruidDataSource<span class="token punctuation">)</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><pre><code>          } catch (Exception e) {              e.printStackTrace();          }      }      /**       * 获取数据库连接池中的连接       *       * @return 如果返回null, 说明链接失败       */      public static Connection getConnection() throws SQLException {          Connection conn = null;          conn = dataSource.getConnection();          return conn;      }      /**       * 关闭连接,放回数据库连接池       *       * @param conn       */      public static void close(Connection conn){          if (conn != null) {              try {                  conn.close();              } catch (SQLException e) {                  e.printStackTrace();              }          }      }  }  ```</code></pre><ol start="2"><li><p>编写BaseDao (abstract, 用来继承)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>JdbcUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>QueryRunner<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>ResultSetHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>BeanListHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>ScalarHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>  public abstract class BaseDao {      //使用dbUtils操作数据库      private QueryRunner queryRunner = new QueryRunner();      /**       * update()用来执行增删改操作       *       * @return 如果返回-1说明执行失败       */      public int update(String sql, Object... args) {          Connection connection = null;          try {              connection = JdbcUtils.getConnection();              return queryRunner.update(connection, sql, args);          } catch (SQLException e) {              e.printStackTrace();          } finally {              JdbcUtils.close(connection);          }          return -1;      }      /**       * 查询返回一个javaBean的sql语句       *       * @param type 返回的对象类型       * @param sql  执行的sql语句       * @param args sql对应的参数值,占位符对应的那些       * @param &lt;T&gt;  返回的类型的泛型       * @return       */      public &lt;T&gt; T queryForOne(Class&lt;T&gt; type, String sql, Object... args) {          Connection connection = null;          try {              connection = JdbcUtils.getConnection();              return queryRunner.query(connection, sql, new BeanHandler&lt;T&gt;(type), args);          } catch (SQLException e) {              e.printStackTrace();          } finally {              JdbcUtils.close(connection);          }          return null;      }      public &lt;T&gt; List&lt;T&gt; queryForList(Class&lt;T&gt; type, String sql, Object... args) {          Connection connection = null;          try {              connection = JdbcUtils.getConnection();              return queryRunner.query(connection, sql, new BeanListHandler&lt;T&gt;(type), args);          } catch (SQLException e) {              e.printStackTrace();          } finally {              JdbcUtils.close(connection);          }          return null;      }      /**       * 执行返回一行一列的sql语句       *       * @param sql       * @param args       * @return       */      public Object queryForSingleValue(String sql, Object... args) {          Connection connection = null;          try {              connection = JdbcUtils.getConnection();              return queryRunner.query(connection, sql, new ScalarHandler(), args);          } catch (SQLException e) {              e.printStackTrace();          } finally {              JdbcUtils.close(connection);          }          return null;      }  }  ```</code></pre><ol start="3"><li><p>编写userDao接口, 然后用userDaoImpl继承BaseDao并实现userDao接口</p><ol><li><p>userDao接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取决于我们要实现的功能,也就是用户要执行的操作</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据用户名查询用户信息     *     * @param username     * @return  如果返回null则说明用户名不存在     */</span>    <span class="token keyword">public</span> User <span class="token function">queryUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据用户名和密码查询用户信息     *     * @param username     * @param password     * @return   如果返回null则说明用户名不存在     */</span>       <span class="token keyword">public</span> User <span class="token function">queryUserByUsernameAndPassword</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存用户信息     *     * @param user     * @return 如果返回-1,则表示用户名已存在,注册失败,否则注册成功     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><pre><code>     }     ```  2. userDaoImpl实现类     ```java     package com.atguigu.dao.impl;     import com.atguigu.dao.UserDao;     import com.atguigu.pojo.User;     public class UserDaoImpl extends BaseDao implements UserDao {         @Override         public User queryUserByUsername(String username) {             String sql = &quot;select `id`,`username`,`password`,`email` from t_user where username = ?&quot;;             return queryForOne(User.class, sql, username);         }         @Override         public User queryUserByUsernameAndPassword(String username, String password) {             String sql = &quot;select `id`,`username`,`password`,`email` from t_user where username = ? and password = ?&quot;;             return queryForOne(User.class, sql, username, password);         }         @Override         public int saveUser(User user) {             String sql = &quot;insert into t_user(`username`,`password`,`email`)values(?,?,?)&quot;;             return update(sql, user.getUsername(), user.getPassword(), user.getEmail());         }     }     ```</code></pre><ol start="4"><li><p>编写UserService</p></li><li><p>编写web层</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/mybatis-01-ji-chu-shi-yong/"/>
      <url>/2023/02/04/mybatis-01-ji-chu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis基础配置"><a href="#Mybatis基础配置" class="headerlink" title="Mybatis基础配置"></a>Mybatis基础配置</h1><p>[TOC]</p><h3 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h3><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder :"></a>SqlSessionFactoryBuilder :</h4><p>​        一旦创建了SqlSessionFactory, 就不再需要了,设置成局部变量</p><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory :"></a>SqlSessionFactory :</h4><p>​        想象成数据库连接池, 一旦创建就应该一直存在, 没有理由重新建造一个, 设置为全局作用域.</p><p>​        使用单例模式或者静态单例模式, 既可以保证只有一份, 又是全局作用域</p><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession :"></a>SqlSession :</h4><ul><li>连接到连接池的一个请求</li><li>SqlSession的实例不是线程安全的, 因此是不能被共享的, 所以它的最佳作用域是请求或方法作用域</li><li>用完之后需要赶紧关闭, 否则资源被占用, 这个操作十分重要!!!</li></ul><h3 id="编写mybatis核心配置文件"><a href="#编写mybatis核心配置文件" class="headerlink" title="编写mybatis核心配置文件"></a>编写mybatis核心配置文件</h3><ol><li><p>pom.xml</p><pre class="line-numbers language-xml"><code class="language-xml">   <span class="token comment" spellcheck="true">&lt;!--防止报错用的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>mybatis-config.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--每一个xml的作用是等地位的,但是由于这个xml通过标签引入了别的xml,    就相当于这是个主xml的意味了,同时需要注意的是xml文件中各个标签的位置非常重要,否则会报错--></span>    <span class="token comment" spellcheck="true">&lt;!--引入外部配置文件,由于在一个包下,所以不用去写路径,    相当于把测试一中的value专门写到一个地方去,并且外部配置的优先级更高--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>config.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--取别名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--当类名比较少的时候,分别给每一个类取上别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiong.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--当类名比较多的时候,通过引入包,使得自动扫描对应包下类,        这种默认不可以自定义别名,除非再额外使用@Alias的注解--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiong.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 对数据库连接的配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--测试一--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span>                          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8&amp;amp;useJDBCCompliantTimezoneShift<span class="token punctuation">=</span>true&amp;amp;useLegacyDatetimeCode<span class="token punctuation">=</span>false&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>       &lt;!--测试二--&gt;       &lt;environment id=&quot;development2&quot;&gt;           &lt;transactionManager type=&quot;JDBC&quot;/&gt;           &lt;dataSource type=&quot;POOLED&quot;&gt;               &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;               &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;               &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;               &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;           &lt;/dataSource&gt;       &lt;/environment&gt;   &lt;/environments&gt;   &lt;!-- mapper.xml文件的路径配置 --&gt;   &lt;mappers&gt;       &lt;mapper resource=&quot;com/xiong/dao/UserMapper.xml&quot;/&gt;   &lt;/mappers&gt;</code></pre>      ```<ol start="3"><li><p>mapper.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--用配置文件的方式来取代接口的实现类--></span><span class="token comment" spellcheck="true">&lt;!--使用别名来减少完全限定名的冗余,别名在mybatis-config.xml中设置--></span><span class="token comment" spellcheck="true">&lt;!--绑定对应的接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.xiong.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这里已经使用了别名进行优化--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-- 在这里对象的属性可以直接用,直接写User类中的id,name和pwd,这里需要与属性名相对应        insert into mybatis.user(id, name, pwd) value (#{id},#{name},#{pwd})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--使用map自定义程度高,可以不用User类对象中的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUserSimple<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into user (id, name, pwd) values (#{userId},#{username},#{password});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update mybatis.user set name = #{name},pwd=#{pwd} where id=#{id} ;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from mybatis.user where id=#{id};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--id就是对应的方法名,相当于用下面的sql语句重写了该方法        resultType是sql语句的返回值        parameterType是对应的参数类型--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>-- 模糊查询的sql,拼接的时候需要防止sql注入        select * from mybatis.user where name like #{value}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="编写mybatis工具类"><a href="#编写mybatis工具类" class="headerlink" title="编写mybatis工具类"></a>编写mybatis工具类</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//提升作用域</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用Mybatis第一步,获取sqlSessionFactory</span>        <span class="token comment" spellcheck="true">//固定代码</span>        InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>            inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span><span class="token comment" spellcheck="true">// org.apache.ibatis.session.SqlSession 提供了在数据库执行 org.apache.ibatis.jdbc.SQL 命令所需的所有方法。</span><span class="token comment" spellcheck="true">// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。例如：</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/zai-xue-ji-chu-ying-gai-zhu-yi-de-xu-qiu/"/>
      <url>/2023/02/04/zai-xue-ji-chu-ying-gai-zhu-yi-de-xu-qiu/</url>
      
        <content type="html"><![CDATA[<p>java学习记录 : </p><ol><li><p>如何将多个数据一次性加入arrayList中</p></li><li><p>构造器初始化获得对象的类型, 向对象中添加数据封装到其他方法中</p></li><li><p>使用多重循环时, 将内层循环和最外层循环封装成两个重载方法, 一个方法需要传入特定的i, 另一个方法用一个for循环, 通过传入不同的i来调用内层循环对应的重载方法</p></li><li><p>定义一个类, 在初始化的时候接收传入的参数值, 并将其赋给类对象的属性, 之后调用类的方法时, 使用类的属性值而不是使用传入的参数值</p></li><li><p>静态方法, 通过类名调用, 传入类对象作为形参;<br>非静态方法, 只能通过类对象进行调用</p></li><li><p>增强for循环和普通for循环的区别:<br>在数组这种有下标的使用普通for循环的效率会更高些, 像链表这种插入比较简单但是查找比较麻烦的使用增强for循环</p></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//保存原数组的数据</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> items<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//让items数组指向一个新new的数组,此时可以实现扩容</span>    items <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapacity <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把原数组的数据重新添加到items数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为什么这里会出现ArrayStoreException错误???</span>        items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>  temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么这段代码出现错误?</p><p>因为Object写成了Objects</p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/tomcat-wen-ti-jie-jue-hui-zong-centos7/"/>
      <url>/2023/02/04/tomcat-wen-ti-jie-jue-hui-zong-centos7/</url>
      
        <content type="html"><![CDATA[<h1 id="tomcat问题解决汇总-centos7"><a href="#tomcat问题解决汇总-centos7" class="headerlink" title="tomcat问题解决汇总(centos7)"></a>tomcat问题解决汇总(centos7)</h1><table><thead><tr><th>出现的问题</th><th>解决方案</th><th>链接</th></tr></thead><tbody><tr><td>使用yum安装tomcat</td><td>1.官网找到安装包的超链接, 右键选择复制链接地址<br>2.在centos中使用wget命令, 例如wget 链接地址<br>3.在/usr/share中可以找到应用程序, 解压安装</td><td></td></tr><tr><td>如何启动tomcat</td><td>1.进入到tomcat程序的bin目录<br>2.使用./startup.sh启动tomcat服务</td><td></td></tr><tr><td>./startup.sh出现权限不够</td><td>在bin目录下执行chmod u+x *.sh命令</td><td>1. chmod是权限管理命令change the permissions mode of a file的缩写<br>2. u代表所有者，x代表执行权限。 + 表示增加权限。<br>3. chmod u+x file.sh 就表示对当前目录下的file.sh文件的所有者增加可执行权限</td></tr><tr><td>配置两台tomcat服务器, 并修改端口为8080和8081</td><td>1.进入到tomcat的配置文件server.xml<br>2.将port=8080的改为8081, 并将另外两处port的端口号进行修改(这里可以不是8081)<br>3.配置防火墙开放端口,或者关闭防火墙systemctl stop firewalld</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/04/z-za-xiang-jrebel/"/>
      <url>/2023/02/04/z-za-xiang-jrebel/</url>
      
        <content type="html"><![CDATA[<h1 id="intellij热部署插件jrebel"><a name="t0"></a><a name="t0"></a>Intellij热部署插件JRebel</h1><h1 id="安装jrebel"><a name="t1"></a><a name="t1"></a>安装JRebel</h1><p>1、在IDEA中一次点击 File-&gt;Settings-&gt;Plugins-&gt;Brows <wdautohl-customtag style="font-weight:bold;color:red;font-size:inherit;display:inline;" id="wdautohl_id_1" class="wdautohl_cmVwb3NpdG9yeQ__">Repositories</wdautohl-customtag> <br>2、在搜索框中输入JRebel进行搜索 <br>3、找到JRebel for intellij <br>4、install <br>5、安装好之后需要restart IDEA <br><img src="https://img-blog.csdn.net/2018083022254649?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title></p><h1 id="激活jrebel"><a name="t2"></a><a name="t2"></a>激活JRebel</h1><p>JRebel并非免费的插件，需要激活之后才能使用。 <br>1、首先到github上去下载一个反向代理软件，我下载的是windows x64版本。 <br><a href="https://github.com/ilanyu/ReverseProxy/releases/tag/v1.4">下载地址</a> <br><img src="https://img-blog.csdn.net/20180830223705168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title> <br>2、双击运行我们下载的程序 <br><img src="https://img-blog.csdn.net/20180830224724398?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title> <br>3、在IDEA中一次点击 File-&gt;Settings-&gt;JRebel 并找到激活界面(因为我的已经激活了，点击change liense进入的激活界面，记不清一开始怎么进入的了) <br><img src="https://img-blog.csdn.net/20180830225509215?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title> <br>4、选择JRebel activated中的 connect to online licensing service <br>第一行输入 <a href="http://127.0.0.1:8888/d3545f42-7b88-4a77-a2da-5242c46d4bc2" rel="noopener" target="_blank">http://127.0.0.1:8888/d3545f42-7b88-4a77-a2da-5242c46d4bc2</a> <br>第二行输入正确的邮箱格式，例如： test@123.com <br>再点击以下change liense 按钮验证激活 <br>提示：d3545f42-7b88-4a77-a2da-5242c46d4bc2为UUID,可以自己生成，并且必须是UUID才能通过验证 <br><img src="https://img-blog.csdn.net/20180830230107660?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title> <br>5、最后别忘了把JRebel设置为offline模式 点一下<strong>work offline</strong> <br><img src="https://img-blog.csdn.net/20180830233517263?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title></p><h1 id="相关设置"><a name="t3"></a><a name="t3"></a>相关设置</h1><p> <br>1、设置项目自动编译 <br><img src="https://img-blog.csdn.net/20180830230707449?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title> <br>2、设置 compiler.automake.allow.when.app.running <br>    ctrl+shift+A 或者 help-&gt;find action…打开 <br>    搜索registry <br>    找到 compiler.automake.allow.when.app.running  并✔ <br><img src="https://img-blog.csdn.net/20180831214426196?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjgzMTQ3Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title></p>                                    ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/26/spring-01-springdata-jian-jie/"/>
      <url>/2022/11/26/spring-01-springdata-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringData架构"><a href="#SpringData架构" class="headerlink" title="SpringData架构"></a>SpringData架构</h1><p>对各种数据库操作的中间件, 提供一套统一的数据访问API, 支持关系型数据库和非关系型数据库</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/springdata.svg" style="zoom: 33%;"><h1 id="SpringData的主要模块"><a href="#SpringData的主要模块" class="headerlink" title="SpringData的主要模块"></a>SpringData的主要模块</h1><ul><li><code>Spring Data Common</code>: Spring Data的核心模块, 定义了Spring Data的核心功能</li><li><code>Spring Data JDBC</code>: 对关系型数据库(MySQL, Oracle等)的支持</li><li><code>Spring Data JPA</code>:</li><li><code>Spring Data MongoDB</code>:</li><li><code>Spring Data Redis</code>:</li><li><code>Spring Data Elasticsearch</code>:</li><li><code>Spring Data Neo4j</code>:</li></ul><h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><ol><li><p>准备数据库环境, 表结构由JPA自动生成, 而不需要写sql语句</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 下面的代码在SpringData JPA中可以省略</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>spring_data<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>aId<span class="token punctuation">`</span>        <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">auto_increment</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>author<span class="token punctuation">`</span>     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'作者'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>createTime<span class="token punctuation">`</span> <span class="token keyword">datetime</span>     <span class="token keyword">default</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>    title        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>aId<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>创建Maven工程, 引入坐标</p><pre class="line-numbers language-xml"><code class="language-xml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li><p>实体类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token comment" spellcheck="true">//表示这是一个实体类</span><span class="token annotation punctuation">@Entity</span><span class="token comment" spellcheck="true">//建立实体类和数据库表之间的映射关系</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//主键</span>    <span class="token annotation punctuation">@Id</span>    <span class="token comment" spellcheck="true">//主键生成策略</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer aId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若属性名和字段名一致, 则可以省略</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"author"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/18/hadoop-02-inputformat/"/>
      <url>/2022/11/18/hadoop-02-inputformat/</url>
      
        <content type="html"><![CDATA[<h1 id="从文件到Mapper"><a href="#从文件到Mapper" class="headerlink" title="从文件到Mapper"></a>从文件到Mapper</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E4%BB%8E%E6%96%87%E4%BB%B6%E5%88%B0map.svg" alt></p><h2 id="输入分片InputSplit"><a href="#输入分片InputSplit" class="headerlink" title="输入分片InputSplit"></a>输入分片InputSplit</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@InterfaceAudience</span><span class="token punctuation">.</span>Public<span class="token annotation punctuation">@InterfaceStability</span><span class="token punctuation">.</span>Stable<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputSplit</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//以字节(B)为单位的切片长度</span>    <span class="token comment" spellcheck="true">//使用切片长度进行排序, 优先处理最大的分片, 从而最小化作业运行事件</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//切片的存储位置(一组主机的hostname)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Evolving</span>    <span class="token keyword">public</span> SplitLocationInfo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLocationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FileSplit"><a href="#FileSplit" class="headerlink" title="FileSplit"></a>FileSplit</h3><ul><li><code>getPath()</code>: 获取包含split的文件路径</li><li><code>getStart()</code>: 获取待处理文件的第一个字节所在的位置</li><li><code>getLength()</code>: 获取待处理文件字节总数(文件长度)</li></ul><h3 id="CombineFileSplilt"><a href="#CombineFileSplilt" class="headerlink" title="CombineFileSplilt"></a>CombineFileSplilt</h3><h2 id="InputFormat"><a href="#InputFormat" class="headerlink" title="InputFormat"></a>InputFormat</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@InterfaceAudience</span><span class="token punctuation">.</span>Public<span class="token annotation punctuation">@InterfaceStability</span><span class="token punctuation">.</span>Stable<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputFormat</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取job任务所有输入文件集合的逻辑分片(split)</span>    <span class="token comment" spellcheck="true">//逻辑分片(split) != 物理块(chunk)</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>InputSplit<span class="token operator">></span> <span class="token function">getSplits</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">)</span>         <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对于每一个给定的split创建一个record reader</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> RecordReader<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">createRecordReader</span><span class="token punctuation">(</span>InputSplit split<span class="token punctuation">,</span>TaskAttemptContext context<span class="token punctuation">)</span>         <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>jobClient.getSplits()</code>: 计算split的数量(分片数)</p></li><li><p>mapTask任务把输入的split<a href="一个mapTask对应一个split">^1</a>传给<code>InputFormat.createRecordReader()</code>方法, 从而获取这个分片的RecordReader. </p><p>RecordReader就是记录records的迭代器[^2]</p></li><li><p>map任务用一个RecordReader来生成记录的键值对, 然后传递给<code>Mapper.map()</code>函数</p></li></ul><h3 id="FileInputFormat"><a href="#FileInputFormat" class="headerlink" title="FileInputFormat"></a>FileInputFormat</h3><ul><li>定义了哪些文件包含在一个作业的输入中</li><li>为输入文件生成分片, 把split分割成record的任务交给其子类完成</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@InterfaceAudience</span><span class="token punctuation">.</span>Public<span class="token annotation punctuation">@InterfaceStability</span><span class="token punctuation">.</span>Stable<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FileInputFormat</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">InputFormat</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INPUT_DIR <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.inputdir"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SPLIT_MAXSIZE <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.split.maxsize"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SPLIT_MINSIZE <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.split.minsize"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PATHFILTER_CLASS <span class="token operator">=</span> <span class="token string">"mapreduce.input.pathFilter.class"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NUM_INPUT_FILES <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.numinputfiles"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INPUT_DIR_RECURSIVE <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.input.dir.recursive"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INPUT_DIR_NONRECURSIVE_IGNORE_SUBDIRS <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.input.dir.nonrecursive.ignore.subdirs"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIST_STATUS_NUM_THREADS <span class="token operator">=</span> <span class="token string">"mapreduce.input.fileinputformat.list-status.num-threads"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_LIST_STATUS_NUM_THREADS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOG <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FileInputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> SPLIT_SLOP <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 10% slop</span>    <span class="token annotation punctuation">@Deprecated</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> Counter <span class="token punctuation">{</span>        BYTES_READ    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> PathFilter hiddenFileFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>Path p<span class="token punctuation">)</span><span class="token punctuation">{</span>            String name <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MultiPathFilter</span> <span class="token keyword">implements</span> <span class="token class-name">PathFilter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>PathFilter<span class="token operator">></span> filters<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MultiPathFilter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>PathFilter<span class="token operator">></span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>filters <span class="token operator">=</span> filters<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span>Path path<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>PathFilter filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>filter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置递归地处理文件夹</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInputDirRecursive</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inputDirRecursive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBoolean</span><span class="token punctuation">(</span>INPUT_DIR_RECURSIVE<span class="token punctuation">,</span> inputDirRecursive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">getInputDirRecursive</span><span class="token punctuation">(</span>JobContext job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>INPUT_DIR_RECURSIVE<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">getFormatMinSplitSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//文件是否切分, 即是否一个文件必须作为一个整体处理</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSplitable</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">,</span> Path filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置文件过滤器, 用以排除特定的文件</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInputPathFilter</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PathFilter</span><span class="token operator">></span> filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>PATHFILTER_CLASS<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> PathFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMinInputSplitSize</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span>SPLIT_MINSIZE<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getMinSplitSize</span><span class="token punctuation">(</span>JobContext job<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>SPLIT_MINSIZE<span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span>SPLIT_MAXSIZE<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getMaxSplitSize</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span>SPLIT_MAXSIZE<span class="token punctuation">,</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> PathFilter <span class="token function">getInputPathFilter</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Configuration conf <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> filterClass <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span>PATHFILTER_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">,</span> PathFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>filterClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>PathFilter<span class="token punctuation">)</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>filterClass<span class="token punctuation">,</span> conf<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> <span class="token function">listStatus</span><span class="token punctuation">(</span>JobContext job<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Path<span class="token punctuation">[</span><span class="token punctuation">]</span> dirs <span class="token operator">=</span> <span class="token function">getInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"No input paths specified in job"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TokenCache<span class="token punctuation">.</span><span class="token function">obtainTokensForNamenodes</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> recursive <span class="token operator">=</span> <span class="token function">getInputDirRecursive</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>PathFilter<span class="token operator">></span> filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>PathFilter<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>hiddenFileFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        PathFilter jobFilter <span class="token operator">=</span> <span class="token function">getInputPathFilter</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jobFilter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            filters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jobFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PathFilter inputFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiPathFilter</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> numThreads <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>LIST_STATUS_NUM_THREADS<span class="token punctuation">,</span> DEFAULT_LIST_STATUS_NUM_THREADS<span class="token punctuation">)</span><span class="token punctuation">;</span>        StopWatch sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numThreads <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">singleThreadedListStatus</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> inputFilter<span class="token punctuation">,</span> recursive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Iterable<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> locatedFiles <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                LocatedFileStatusFetcher locatedFileStatusFetcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocatedFileStatusFetcher</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> recursive<span class="token punctuation">,</span> inputFilter<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                locatedFiles <span class="token operator">=</span> locatedFileStatusFetcher<span class="token punctuation">.</span><span class="token function">getFileStatuses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>IOException<span class="token punctuation">)</span>                    <span class="token keyword">new</span> <span class="token class-name">InterruptedIOException</span><span class="token punctuation">(</span>                    <span class="token string">"Interrupted while getting file statuses"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>locatedFiles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sw<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Time taken to get FileStatuses: "</span> <span class="token operator">+</span> sw<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Total input files to process : "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> <span class="token function">singleThreadedListStatus</span><span class="token punctuation">(</span>JobContext job<span class="token punctuation">,</span> Path<span class="token punctuation">[</span><span class="token punctuation">]</span> dirs<span class="token punctuation">,</span> PathFilter inputFilter<span class="token punctuation">,</span> <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>FileStatus<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>IOException<span class="token operator">></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>IOException<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dirs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Path p <span class="token operator">=</span> dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            FileSystem fs <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             FileStatus<span class="token punctuation">[</span><span class="token punctuation">]</span> matches <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">globStatus</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> inputFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matches <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Input path does not exist: "</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                errors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Input Pattern "</span> <span class="token operator">+</span> p <span class="token operator">+</span> <span class="token string">" matches 0 files"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>FileStatus globStat<span class="token operator">:</span> matches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>globStat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        RemoteIterator<span class="token operator">&lt;</span>LocatedFileStatus<span class="token operator">></span> iter <span class="token operator">=</span>                            fs<span class="token punctuation">.</span><span class="token function">listLocatedStatus</span><span class="token punctuation">(</span>globStat<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            LocatedFileStatus stat <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFilter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>recursive <span class="token operator">&amp;&amp;</span> stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token function">addInputPathRecursively</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> fs<span class="token punctuation">,</span> stat<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                            inputFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>globStat<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidInputException</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addInputPathRecursively</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> result<span class="token punctuation">,</span> FileSystem fs<span class="token punctuation">,</span> Path path<span class="token punctuation">,</span> PathFilter inputFilter<span class="token punctuation">)</span>         <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        RemoteIterator<span class="token operator">&lt;</span>LocatedFileStatus<span class="token operator">></span> iter <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">listLocatedStatus</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LocatedFileStatus stat <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFilter<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stat<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addInputPathRecursively</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> fs<span class="token punctuation">,</span> stat<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inputFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//产生FileSplit切片</span>    <span class="token keyword">protected</span> FileSplit <span class="token function">makeSplit</span><span class="token punctuation">(</span>Path file<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> hosts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileSplit</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">,</span> hosts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> FileSplit <span class="token function">makeSplit</span><span class="token punctuation">(</span>Path file<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> hosts<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> inMemoryHosts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileSplit</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">,</span> hosts<span class="token punctuation">,</span> inMemoryHosts<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//files->split的方法</span>    <span class="token comment" spellcheck="true">//FileInputFormat的getSplits()方法决定: 1个file &lt;-> 1个split</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>InputSplit<span class="token operator">></span> <span class="token function">getSplits</span><span class="token punctuation">(</span>JobContext job<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        StopWatch sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> minSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getFormatMinSplitSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getMinSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> maxSize <span class="token operator">=</span> <span class="token function">getMaxSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// generate splits</span>        List<span class="token operator">&lt;</span>InputSplit<span class="token operator">></span> splits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>InputSplit<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>FileStatus<span class="token operator">></span> files <span class="token operator">=</span> <span class="token function">listStatus</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ignoreDirs <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">getInputDirRecursive</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>INPUT_DIR_NONRECURSIVE_IGNORE_SUBDIRS<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileStatus file<span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ignoreDirs <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Path path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> length <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                BlockLocation<span class="token punctuation">[</span><span class="token punctuation">]</span> blkLocations<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token keyword">instanceof</span> <span class="token class-name">LocatedFileStatus</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    blkLocations <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LocatedFileStatus<span class="token punctuation">)</span> file<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBlockLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    FileSystem fs <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    blkLocations <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">getFileBlockLocations</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSplitable</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">long</span> blockSize <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getBlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> splitSize <span class="token operator">=</span> <span class="token function">computeSplitSize</span><span class="token punctuation">(</span>blockSize<span class="token punctuation">,</span> minSize<span class="token punctuation">,</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> bytesRemaining <span class="token operator">=</span> length<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> bytesRemaining<span class="token punctuation">)</span><span class="token operator">/</span>splitSize <span class="token operator">></span> SPLIT_SLOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> blkIndex <span class="token operator">=</span> <span class="token function">getBlockIndex</span><span class="token punctuation">(</span>blkLocations<span class="token punctuation">,</span> length<span class="token operator">-</span>bytesRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>                        splits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">makeSplit</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> length<span class="token operator">-</span>bytesRemaining<span class="token punctuation">,</span> splitSize<span class="token punctuation">,</span>                                             blkLocations<span class="token punctuation">[</span>blkIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             blkLocations<span class="token punctuation">[</span>blkIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getCachedHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        bytesRemaining <span class="token operator">-=</span> splitSize<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesRemaining <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> blkIndex <span class="token operator">=</span> <span class="token function">getBlockIndex</span><span class="token punctuation">(</span>blkLocations<span class="token punctuation">,</span> length<span class="token operator">-</span>bytesRemaining<span class="token punctuation">)</span><span class="token punctuation">;</span>                        splits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">makeSplit</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> length<span class="token operator">-</span>bytesRemaining<span class="token punctuation">,</span> bytesRemaining<span class="token punctuation">,</span>                                             blkLocations<span class="token punctuation">[</span>blkIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             blkLocations<span class="token punctuation">[</span>blkIndex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getCachedHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// not splitable</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Log only if the file is big enough to be splitted</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">></span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getBlockSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"File is not splittable so no parallelization is possible: "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    splits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">makeSplit</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> blkLocations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> blkLocations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getCachedHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//Create empty hosts array for zero length files</span>                splits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">makeSplit</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Save the number of input files for metrics/loadgen</span>        job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span>NUM_INPUT_FILES<span class="token punctuation">,</span> files<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sw<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Total # of splits generated by getSplits: "</span> <span class="token operator">+</span> splits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token operator">+</span> <span class="token string">", TimeTaken: "</span> <span class="token operator">+</span> sw<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> splits<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">computeSplitSize</span><span class="token punctuation">(</span><span class="token keyword">long</span> blockSize<span class="token punctuation">,</span> <span class="token keyword">long</span> minSize<span class="token punctuation">,</span>                                    <span class="token keyword">long</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minSize<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getBlockIndex</span><span class="token punctuation">(</span>BlockLocation<span class="token punctuation">[</span><span class="token punctuation">]</span> blkLocations<span class="token punctuation">,</span>                                 <span class="token keyword">long</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> blkLocations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// is the offset inside this block?</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>blkLocations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> offset<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>offset <span class="token operator">&lt;</span> blkLocations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> blkLocations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        BlockLocation last <span class="token operator">=</span> blkLocations<span class="token punctuation">[</span>blkLocations<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> fileLength <span class="token operator">=</span> last<span class="token punctuation">.</span><span class="token function">getOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> last<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Offset "</span> <span class="token operator">+</span> offset <span class="token operator">+</span>                                            <span class="token string">" is outside of file (0.."</span> <span class="token operator">+</span>                                           fileLength <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInputPaths</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span>                                      String commaSeparatedPaths                                    <span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> StringUtils<span class="token punctuation">.</span><span class="token function">stringToPath</span><span class="token punctuation">(</span>            <span class="token function">getPathStrings</span><span class="token punctuation">(</span>commaSeparatedPaths<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addInputPaths</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span>                                      String commaSeparatedPaths                                    <span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> <span class="token function">getPathStrings</span><span class="token punctuation">(</span>commaSeparatedPaths<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setInputPaths</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span>                                      Path<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> inputPaths<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Configuration conf <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Path path <span class="token operator">=</span> inputPaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeQualified</span><span class="token punctuation">(</span>inputPaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuffer str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">escapeString</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputPaths<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span>COMMA_STR<span class="token punctuation">)</span><span class="token punctuation">;</span>            path <span class="token operator">=</span> inputPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeQualified</span><span class="token punctuation">(</span>inputPaths<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">escapeString</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>INPUT_DIR<span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addInputPath</span><span class="token punctuation">(</span>Job job<span class="token punctuation">,</span>                                     Path path<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Configuration conf <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">makeQualified</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        String dirStr <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">escapeString</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String dirs <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>INPUT_DIR<span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>INPUT_DIR<span class="token punctuation">,</span> dirs <span class="token operator">==</span> null <span class="token operator">?</span> dirStr <span class="token operator">:</span> dirs <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> dirStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// This method escapes commas in the glob pattern of the given paths.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPathStrings</span><span class="token punctuation">(</span>String commaSeparatedPaths<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> commaSeparatedPaths<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> curlyOpen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pathStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> globPattern <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> pathStrings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> commaSeparatedPaths<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'{'</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                    curlyOpen<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>globPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        globPattern <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> <span class="token string">'}'</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                    curlyOpen<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>curlyOpen <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> globPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        globPattern <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">case</span> <span class="token string">','</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>globPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        pathStrings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>commaSeparatedPaths<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pathStart<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        pathStart <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// nothing special to do for this character</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pathStrings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>commaSeparatedPaths<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pathStart<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pathStrings<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Path<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getInputPaths</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String dirs <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>INPUT_DIR<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token punctuation">;</span>        Path<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">unEscapeString</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p><strong>模板方法设计模式</strong></p><ul><li><p>流程控制方法</p><p><code>run()</code>是唯一在外部被调用的方法</p></li><li><p>具体操作方法</p><ul><li><code>setup()</code></li><li><code>map()</code>: 从输入的R</li><li><code>clearnup()</code></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@InterfaceAudience</span><span class="token punctuation">.</span>Public<span class="token annotation punctuation">@InterfaceStability</span><span class="token punctuation">.</span>Stable<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>KEYIN<span class="token punctuation">,</span> VALUEIN<span class="token punctuation">,</span> KEYOUT<span class="token punctuation">,</span> VALUEOUT<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token keyword">implements</span> <span class="token class-name">MapContext</span><span class="token operator">&lt;</span>KEYIN<span class="token punctuation">,</span>VALUEIN<span class="token punctuation">,</span>KEYOUT<span class="token punctuation">,</span>VALUEOUT<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对于某一个具体的MapReduce程序, 应该重载map()方法</span>    <span class="token comment" spellcheck="true">//默认实现相当于将RecordReader中的key,value不做任何处理</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>KEYIN key<span class="token punctuation">,</span> VALUEIN value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span>         <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>KEYOUT<span class="token punctuation">)</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span>VALUEOUT<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//每个mapTask执行一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//每个split执行一次</span>        <span class="token function">setup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每条record执行一次Mapper.map()方法</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">nextKeyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//context.getCurrentKey(): RecordReader中设置的key</span>                <span class="token comment" spellcheck="true">//context.getCurrentValue(): RecordReader中设置的value</span>                <span class="token function">map</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurrentKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">cleanup</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[^2]:1个split = 多个record</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/18/spring-zhu-jie-05-import-dao-ru-zu-jian/"/>
      <url>/2022/11/18/spring-zhu-jie-05-import-dao-ru-zu-jian/</url>
      
        <content type="html"><![CDATA[<p>导入组件的方式：</p><ul><li><p><code>@Component</code>  + <code>@ComponentScan</code> 搭配使用</p></li><li><p><code>@Bean</code></p></li><li><p><code>@Import</code></p><ul><li>ImportSelector</li><li>ImportBeanDefinitionRegistry</li></ul></li><li><p>FactoryBean 接口</p><p>对于该类型的 Bean 对象，Spring 框架的 <code>getBean()</code> 方法有特殊处理。默认情况下获取该 FactoryBean 的 <code>getObject()</code> 方法注入的 Bean 对象，使用 <code>&amp;</code> 前缀才能获取该 FactoryBean 对象本身。</p></li></ul><h1 id="Import导入组件"><a href="#Import导入组件" class="headerlink" title="@Import导入组件"></a>@Import导入组件</h1><blockquote><p>@Import注解和@Bean注解导入组件的功能没有本质区别</p><ul><li>@Bean注解可以自定义一些属性, bean对象的默认id为方法名</li><li>@Import注解导入一个<strong>无参构造器生成的对象</strong>, bean对象的默认id为<strong>全类名</strong></li></ul></blockquote><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Import<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过@Import注解导入User类对象</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>UserConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">importTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>UserConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> userNames <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String userName <span class="token operator">:</span> userNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实体类-模拟第三方包"><a href="#实体类-模拟第三方包" class="headerlink" title="实体类: 模拟第三方包"></a>实体类: 模拟第三方包</h2><h3 id="不添加空参构造器使其报错"><a href="#不添加空参构造器使其报错" class="headerlink" title="不添加空参构造器使其报错"></a>不添加空参构造器使其报错</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不存在空参构造器</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118113042418.png" alt="image-20221118113042418"></p><h3 id="添加空参构造器"><a href="#添加空参构造器" class="headerlink" title="添加空参构造器"></a>添加空参构造器</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118113505906.png" alt="image-20221118113505906"></p><h1 id="ImportSelector自定义导入器"><a href="#ImportSelector自定义导入器" class="headerlink" title="ImportSelector自定义导入器"></a>ImportSelector自定义导入器</h1><blockquote><p>可以根据规则批量导入, 避免@Import单个导入.</p><p>导入的组件的id默认为全类名, 不可以自定义修改</p></blockquote><h2 id="自定义导入器类"><a href="#自定义导入器类" class="headerlink" title="自定义导入器类"></a>自定义导入器类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>selector<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ImportSelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotationMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> importingClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义导入器中添加Person类</span>        importingClass<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// List&lt;String> => String[] 的写法</span>        <span class="token keyword">return</span> importingClass<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>XImportSelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Import<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用自定义导入器</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> XImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>UserConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">importSelectorTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>UserConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里通过importSelector导入person对象</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> personNames <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String personName <span class="token operator">:</span> personNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Person person <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>personName<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personName <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ImportBeanDefinitionRegistrar自定义导入"><a href="#ImportBeanDefinitionRegistrar自定义导入" class="headerlink" title="ImportBeanDefinitionRegistrar自定义导入"></a>ImportBeanDefinitionRegistrar自定义导入</h1><blockquote><p>ImportSelector不能够定义导入的bean对象的id, 而使用ImportBeanDefinitionRegistrar可以自定义</p></blockquote><h2 id="自定义组件注册类"><a href="#自定义组件注册类" class="headerlink" title="自定义组件注册类"></a>自定义组件注册类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>registrar<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Customer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>RootBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ImportBeanDefinitionRegistrar<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotationMetadata<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XImportBeanDefinitionRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置该bean对象的id为customer</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"customer"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置类-2"><a href="#配置类-2" class="headerlink" title="配置类"></a>配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>registrar<span class="token punctuation">.</span>XImportBeanDefinitionRegistrar<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>XImportSelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Import<span class="token punctuation">;</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> XImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> XImportBeanDefinitionRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试类-2"><a href="#测试类-2" class="headerlink" title="测试类"></a>测试类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>UserConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">importBeanDefinitionRegistrarTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>UserConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Customer customer <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"customer"</span><span class="token punctuation">,</span> Customer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118123639246.png" alt="image-20221118123639246"></p><h1 id="通过-FactoryBean导入组件"><a href="#通过-FactoryBean导入组件" class="headerlink" title="通过 FactoryBean导入组件"></a>通过 FactoryBean导入组件</h1><p>容器中注入的 Bean 的类型如果是 FactoryBean，那么在获取 FactoryBean 对象时，默认会调用 FactoryBean 对象的 <code>getObject()</code> 方法。</p><h2 id="FactoryBean接口实现类"><a href="#FactoryBean接口实现类" class="headerlink" title="FactoryBean接口实现类"></a>FactoryBean接口实现类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>FactoryBean<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XFctoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>Consumer<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Consumer <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token string">"consumer"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Consumer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回该对象是否是单实例     *     * @return true表示是单实例, 容器中只保存一份;     * false表示是多实例, 每次调用都会创建一个bean对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置类-3"><a href="#配置类-3" class="headerlink" title="配置类"></a>配置类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>XFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryBeanConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将FactoryBean实现类作为bean对象注入, 默认会通过委托模式获取该FactoryBean内部的getObject()</span>    <span class="token annotation punctuation">@Bean</span>    XFactoryBean <span class="token function">xFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试类-3"><a href="#测试类-3" class="headerlink" title="测试类"></a>测试类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PersonConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>config<span class="token punctuation">.</span>UserConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>service<span class="token punctuation">.</span>PersonService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">factoryBeanTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>FactoryBeanConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//FactoryBean默认会获取getObject()返回的对象</span>        Object bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"xFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果想要获得FactoryBean对象本身, 使用&amp;前缀</span>        Object xFactoryBean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"&amp;xFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xFactoryBean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer consumer <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"xFactoryBean"</span><span class="token punctuation">,</span> Consumer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于在XFactoryBean中设置isSingleton为true, 所以返回单实例bean对象, 因此bean和consumer是同一个对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean <span class="token operator">==</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221118131056449.png" alt="image-20221118131056449"></p><h1 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h1><h2 id="AnnotationMetadata类"><a href="#AnnotationMetadata类" class="headerlink" title="AnnotationMetadata类"></a>AnnotationMetadata类</h2><blockquote><p>获取当前类的注解信息</p></blockquote><p>todo</p><h2 id="BeanDefinitionRegistry类"><a href="#BeanDefinitionRegistry类" class="headerlink" title="BeanDefinitionRegistry类"></a>BeanDefinitionRegistry类</h2><blockquote><p>通过registerBeanDefinition()可以手动的向容器中注册bean对象, 这种方式可以自定义bean对象的名字</p></blockquote><p>todo</p><h2 id="RootBeanDefinition-类"><a href="#RootBeanDefinition-类" class="headerlink" title="RootBeanDefinition 类"></a>RootBeanDefinition 类</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/17/bigdata-07-flume-jin-jie/"/>
      <url>/2022/11/17/bigdata-07-flume-jin-jie/</url>
      
        <content type="html"><![CDATA[<p>Source -&gt; [PUT事务] -&gt; Channel &lt;- [TAKE事务] Sink</p><ul><li><p>Source端 <strong>推送</strong> 到Channel中</p></li><li><p>Sink端 <strong>主动拉取</strong> Channel中的数据</p></li></ul><p>Flume进阶学习中断﻿</p><p><a href="https://www.bilibili.com/video/BV1wf4y1G7EQ/?p=16&amp;spm_id_from=pageDriver&amp;vd_source=cbc3f3986662b9c18926999e8e7ae174" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1wf4y1G7EQ/?p=16&amp;spm_id_from=pageDriver&amp;vd_source=cbc3f3986662b9c18926999e8e7ae174</a>﻿﻿</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/17/bigdata-05-flume-kuai-su-ru-men/"/>
      <url>/2022/11/17/bigdata-05-flume-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Flume"><a href="#Flume" class="headerlink" title="Flume"></a>Flume</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>将本地文件实时地, 动态上传到 HDFS 中</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>官网下载</li><li>删除lib目录下面的guava-xxx.jar</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="监控端口数据"><a href="#监控端口数据" class="headerlink" title="监控端口数据"></a>监控端口数据</h3><h4 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h4><ol><li>通过 netcat 工具向本机的 44444 端口发送数据</li><li>Flume 监控本机的 44444 端口, 通过 Flume 的 source 端读取数据</li><li>Flume 将获取的数据通过 Sink 端写出到控制台</li></ol><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li><p>netcat 作为一个网络通信工具</p><ol><li><p>nc开启服务端</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117142416543.png" alt="image-20221117142416543"></p></li><li><p>nc开启监听</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117142552821.png" alt="image-20221117142552821" style="zoom: 67%;"></li></ol></li><li><p>创建任务的配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建存放所有配置文件的 job 目录</span><span class="token function">mkdir</span> /opt/module/flume-1.9.0/job<span class="token comment" spellcheck="true"># 创建见名知义的文件名</span><span class="token function">touch</span> /opt/module/flume-1.9.0/job/net-flume-logger.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>基本配置文件内容</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 为 flume 的各个组件进行命名</span><span class="token comment" spellcheck="true"># agent相当于flume job的id, 因此同一台主机上多个flume job的agent不能相同</span><span class="token attr-name">agent01.sources</span> <span class="token punctuation">=</span> <span class="token attr-value">source01</span><span class="token attr-name">agent01.sinks</span> <span class="token punctuation">=</span> <span class="token attr-value">sink01</span><span class="token attr-name">agent01.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">channel01</span><span class="token comment" spellcheck="true"># 可以配置多个channels, 但如果这里指定, 但下面没有配置的话会启动报错</span><span class="token comment" spellcheck="true"># agent01.channels = channel02</span><span class="token comment" spellcheck="true"># source的配置信息</span><span class="token attr-name">agent01.sources.source01.type</span> <span class="token punctuation">=</span> <span class="token attr-value">netcat</span><span class="token attr-name">agent01.sources.source01.bind</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost</span><span class="token attr-name">agent01.sources.source01.port</span> <span class="token punctuation">=</span> <span class="token attr-value">44444</span><span class="token comment" spellcheck="true"># sink的配置信息</span><span class="token attr-name">agent01.sinks.sink01.type</span> <span class="token punctuation">=</span> <span class="token attr-value">logger</span><span class="token comment" spellcheck="true"># channel的配置信息</span><span class="token attr-name">agent01.channels.channel01.type</span> <span class="token punctuation">=</span> <span class="token attr-value">memory</span><span class="token attr-name">agent01.channels.channel01.capacity</span> <span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token attr-name">agent01.channels.channel01.transactionCapacity</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># 一个source可以绑定多个channel</span><span class="token comment" spellcheck="true"># 一个sink只可以绑定一个channel</span><span class="token attr-name">agent01.sources.source01.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">channel01</span><span class="token attr-name">agent01.sinks.sink01.channel</span> <span class="token punctuation">=</span> <span class="token attr-value">channel01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>启动agent </p><p>注意关闭netcat服务器, 保留netcat客户端发送数据</p><pre class="line-numbers language-bash"><code class="language-bash">/opt/module/flume-1.9.0/bin/flume-ng agent \<span class="token comment" spellcheck="true"># agent名称</span>-n agent01 \<span class="token comment" spellcheck="true"># flume的配置文件</span>-c /opt/module/flume-1.9.0/conf/ \<span class="token comment" spellcheck="true"># job任务的配置文件</span>-f /opt/module/flume-1.9.0/job/net-flume-logger.conf \<span class="token comment" spellcheck="true"># 指定日志级别和输出位置</span>-Dflume.root.logger<span class="token operator">=</span>INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">/opt/module/flume-1.9.0/bin/flume-ng agent \-n agent01 \-c /opt/module/flume-1.9.0/conf/ \-f /opt/module/flume-1.9.0/job/net-flume-logger.conf \-Dflume.root.logger<span class="token operator">=</span>INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117153348783.png" alt="image-20221117153348783"></p></li><li><p>效果展示</p><ol><li><p>netcat发送数据, 发送成功会显示<code>OK</code></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117153759180.png" alt="image-20221117153759180"></p></li><li><p>flume接受到数据并展示到控制台上</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117153928972.png" alt="image-20221117153928972"></p></li></ol></li></ol><h3 id="实时监控文件并上传到HDFS"><a href="#实时监控文件并上传到HDFS" class="headerlink" title="实时监控文件并上传到HDFS"></a>实时监控文件并上传到HDFS</h3><blockquote><p>监控一个文件的内容变化, 上传到HDFS中, 按时间创建新的文件夹和文件</p></blockquote><h4 id="总体流程-1"><a href="#总体流程-1" class="headerlink" title="总体流程"></a>总体流程</h4><ol><li><p>使用exec source监控文件变化, 使用官方文档查看exec source相关的配置项</p><blockquote><p>exec表示使用Unix命令, 其中<code>tail -F &lt;文件名&gt;</code> 可以监控文件内容的变化</p></blockquote></li><li><p>监听文件的内容变化</p></li><li><p>查看hdfs中的变化</p></li></ol><h4 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li><p>从官网中查看对应source源的配置信息, 例如本案例中为<code>exec source</code> <strong>(如何确定source源类型???)</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117155056539.png" alt="image-20221117155056539"></p></li><li><p>编写job的配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 为 flume 的各个组件进行命名</span><span class="token comment" spellcheck="true"># agent相当于flume job的id, 因此同一台主机上多个flume job的agent不能相同</span><span class="token attr-name">agent02.sources</span> <span class="token punctuation">=</span> <span class="token attr-value">source01</span><span class="token attr-name">agent02.sinks</span> <span class="token punctuation">=</span> <span class="token attr-value">sink01</span><span class="token attr-name">agent02.channels</span> <span class="token punctuation">=</span> <span class="token attr-value">channel01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="channel的配置信息"><a href="#channel的配置信息" class="headerlink" title="channel的配置信息"></a>channel的配置信息</h1><p>   agent02.channels.channel01.type = memory<br>   agent02.channels.channel01.capacity = 1000<br>   agent02.channels.channel01.transactionCapacity = 100</p><h1 id="source的配置信息"><a href="#source的配置信息" class="headerlink" title="source的配置信息"></a>source的配置信息</h1><h1 id="一个source可以绑定多个channel"><a href="#一个source可以绑定多个channel" class="headerlink" title="一个source可以绑定多个channel"></a>一个source可以绑定多个channel</h1><p>   agent02.sources.source01.channels = channel01<br>   agent02.sources.source01.type = exec</p><h1 id="监控指定的配置文件"><a href="#监控指定的配置文件" class="headerlink" title="监控指定的配置文件"></a>监控指定的配置文件</h1><p>   agent02.sources.source01.command = tail -F /opt/module/test/flume.txt</p><h1 id="sink配置信息"><a href="#sink配置信息" class="headerlink" title="sink配置信息"></a>sink配置信息</h1><h1 id="一个sink只可以绑定一个channel"><a href="#一个sink只可以绑定一个channel" class="headerlink" title="一个sink只可以绑定一个channel"></a>一个sink只可以绑定一个channel</h1><p>   agent02.sinks.sink01.channel = channel01<br>   agent02.sinks.sink01.type = hdfs</p><h1 id="注意这里不要添加端口号"><a href="#注意这里不要添加端口号" class="headerlink" title="注意这里不要添加端口号"></a>注意这里不要添加端口号</h1><p>   agent02.sinks.sink01.hdfs.path = hdfs://hadoop001/flume/%Y%m%d/%H</p><h1 id="上传文件前缀"><a href="#上传文件前缀" class="headerlink" title="上传文件前缀"></a>上传文件前缀</h1><p>   agent02.sinks.sink01.hdfs.filePrefix = logs-</p><h1 id="是否按照时间滚动文件夹"><a href="#是否按照时间滚动文件夹" class="headerlink" title="是否按照时间滚动文件夹"></a>是否按照时间滚动文件夹</h1><p>   agent02.sinks.sink01.hdfs.round = true</p><p>   #多少时间单位创建一个新的文件夹<br>   agent02.sinks.sink01.hdfs.roundValue = 1</p><p>   #重新定义时间单位<br>   agent02.sinks.sink01.hdfs.roundUnit = hour</p><p>   #是否使用本地时间戳<br>   agent02.sinks.sink01.hdfs.useLocalTimeStamp = true</p><p>   #积攒多少个Event才flush到HDFS一次<br>   agent02.sinks.sink01.hdfs.batchSize = 100</p><p>   #设置文件类型，可支持压缩<br>   agent02.sinks.sink01.hdfs.fileType = DataStream</p><p>   #多少秒生成一个新的文件<br>   agent02.sinks.sink01.hdfs.rollInterval = 30</p><p>   #设置每个文件的滚动大小<br>   agent02.sinks.sink01.hdfs.rollSize = 134217700</p><p>   #文件的滚动与Event数量无关<br>   agent02.sinks.sink01.hdfs.rollCount = 0</p><pre><code>3. 为 /opt/module/test/flume.txt 添加测试数据, 并在hadoop的web页面查看   ![image-20221117170217185](https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117170217185.png)### 实时监控文件夹的变化#### 总体流程1. 使用spooldir source监控目录变化2. #### 操作流程1. 配置文件内容2. **在hdfs中提前创建上传文件夹**3. 成功内容展示   &gt; 注意事项:    &gt;   &gt; 不能在已有flume.txt.COMPLETED文件的情况下再添加flume.txt, 这样会导致无法更改文件名, 进而造成flume job任务崩溃, 看似还能正常运行, 但实际上后面再添加符合要求的文件也不能产生效果, 需要重启flume job   ![image-20221117174454009](https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117174454009.png)   ![image-20221117174602386](https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117174602386.png)### 实时监控目录下的多个追加文件+ Exec Source 适用于监控一个实时追加的文件, 不能实现断点续传+ SpoolDir Source 适合用于同步新文件, 但不适合对实时追加的日志文件进行监听并同步上传+ TailDir Source适合用于监听多个实时追加的文件, 并且能够实现断点续传在文件夹中添加新文件在hdfs中会产生新的文件. 对监控目录下的文件追加内容, 也会在hdfs中产生新的文件, 而不是在hdfs的原文件中追加内容**TailDir Source和Log4j搭配使用存在缺陷**: Log4j会有更名操作, 而TailDir Source对于更名后的文件会重新上传一次, 因此会导致日志数据存储两份. **解决方案:**+ 不使用更名的日志框架, 例如使用logback+ 修改源码flume-taildir-source包, **只使用inode的值来判断是否是同一个文件, 这样文件更名就不会被flume框架认为是新的文件**</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/16/hadoop-01-xiao-wen-jian-ji-zi-ding-yi-inputformat-de-zheng-he/"/>
      <url>/2022/11/16/hadoop-01-xiao-wen-jian-ji-zi-ding-yi-inputformat-de-zheng-he/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义-InputFormat"><a href="#自定义-InputFormat" class="headerlink" title="自定义 InputFormat"></a>自定义 InputFormat</h1><p><strong>PriorFileInputFormat.java 文件</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>InputSplit<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>JobContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>RecordReader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>TaskAttemptContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileSplit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorFileInputFormat</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputFormat</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSplitable</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">,</span> Path file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RecordReader<span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token function">createRecordReader</span><span class="token punctuation">(</span>InputSplit split<span class="token punctuation">,</span> TaskAttemptContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里需要返回一个自定义的RecordReader</span>        PriorRecordReader recordReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorRecordReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        recordReader<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>split<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> recordReader<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PriorRecordReader</span> <span class="token keyword">extends</span> <span class="token class-name">RecordReader</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> FileSplit fileSplit<span class="token punctuation">;</span>        <span class="token keyword">private</span> Configuration configuration<span class="token punctuation">;</span>        <span class="token keyword">private</span> Text key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> IntWritable value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> String flag<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>InputSplit split<span class="token punctuation">,</span> TaskAttemptContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fileSplit <span class="token operator">=</span> <span class="token punctuation">(</span>FileSplit<span class="token punctuation">)</span> split<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileSplit<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">nextKeyValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRead<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isRead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Text <span class="token function">getCurrentKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> IntWritable <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">return</span> isRead <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>PriorDriver.java 文件</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorDriver</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PriorMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        Text keyOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IntWritable valueOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> IntWritable value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里完全可以不进行任何操作, 但是为了清楚一般的处理逻辑, 画蛇添足增加上</span>            keyOut<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            valueOut<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyOut<span class="token punctuation">,</span> valueOut<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PriorReduce</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token punctuation">{</span>        Text keyOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IntWritable valueOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>IntWritable value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里的for循环和java中的迭代器略有不同, 每次获取到的value是同一个对象, 但是其中保存了不同的地址, 因此如果想要使用集合保存全部的value, 需要在循环中new一个对象</span>                sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//保存输出</span>            keyOut<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            valueOut<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>keyOut<span class="token punctuation">,</span> valueOut<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        Configuration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>PriorDriver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为了图省事, 使用了硬编码, 习惯不好</span>        String inputFilePath <span class="token operator">=</span> <span class="token string">"G:/HW/hadoop/bayes/src/main/resources/train"</span><span class="token punctuation">;</span>        String outputFilePath <span class="token operator">=</span> <span class="token string">"G:/HW/hadoop/bayes/src/main/resources/output"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义输入格式InputFormat</span>        job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span>PriorFileInputFormat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置路径被递归处理, ok</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputDirRecursive</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//指定整个job的输入路径</span>        FileInputFormat<span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>PriorMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>PriorReduce<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>outputFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221116232211121.png" alt="image-20221116232211121"></p><h1 id="CombineFileInputFormat-处理小文件输入-整合成-SequenceFile-输出-为之后的处理做准备"><a href="#CombineFileInputFormat-处理小文件输入-整合成-SequenceFile-输出-为之后的处理做准备" class="headerlink" title="CombineFileInputFormat 处理小文件输入, 整合成 SequenceFile 输出, 为之后的处理做准备"></a>CombineFileInputFormat 处理小文件输入, 整合成 SequenceFile 输出, 为之后的处理做准备</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/z-za-xiang-git-he-github/"/>
      <url>/2022/11/11/z-za-xiang-git-he-github/</url>
      
        <content type="html"><![CDATA[<h1 id="Git仓库介绍"><a href="#Git仓库介绍" class="headerlink" title="Git仓库介绍"></a>Git仓库介绍</h1><p>由Git管理的项目, 分为本地仓库和远程仓库, 二者本质上类似, <u>都可以有多个分支</u>.</p><p>仓库的URL为: <code>https://github.com/&lt;owner&gt;/&lt;repositoryName&gt;</code></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/GitHub%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="image-20220209042638957"></p><h1 id="Git操作流程"><a href="#Git操作流程" class="headerlink" title="Git操作流程"></a>Git操作流程</h1><ol><li><p>使用<code>git init</code>初始化本地项目</p><p>此时会生成<code>.git</code>文件夹, 用来管理当前目录</p></li><li><p>默认分支名为<code>master</code>, 但此时使用<code>git branch</code>无法显示, 通过<code>git log</code>的输出信息可以大致猜测</p><pre class="line-numbers language-bash"><code class="language-bash">fatal: your current branch <span class="token string">'master'</span> does not have any commits yet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用<code>git add *</code>将当前工作区(当前目录)中的内容全部添加到暂存区中</p></li><li><p>使用<code>git commit -m &quot;提示信息&quot;</code>将暂存区的内容保存到本地仓库中, 此时再次输入<code>git branch</code>即可查看到分支名</p><pre class="line-numbers language-bash"><code class="language-bash">C:\Users\24563\Downloads\Documents\book<span class="token operator">></span>git branch* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建远程仓库</p><ol><li><p>可以登录到GitHub上手动创建远程仓库, <u>保持本地项目名和远程仓库名一致</u></p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/github%E5%88%9B%E5%BB%BA%E6%96%B0%E4%BB%93%E5%BA%93.png" alt="image-20220610131041077" style="zoom:70%;"></li><li><p>通过命令行创建一个远程仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"# book"</span> <span class="token operator">>></span> README.md                                         <span class="token comment" spellcheck="true"># 创建README.md文件</span><span class="token function">git</span> init                                                         <span class="token comment" spellcheck="true"># 初始化项目</span><span class="token function">git</span> add README.md                                                <span class="token comment" spellcheck="true"># 添加README.md文件到暂存区</span><span class="token function">git</span> commit -m <span class="token string">"first commit"</span>                                    <span class="token comment" spellcheck="true"># 提交到本地仓库</span><span class="token function">git</span> branch -M main                                                <span class="token comment" spellcheck="true"># 分支为main</span><span class="token function">git</span> remote add book https://github.com/yimeisuren/book.git        <span class="token comment" spellcheck="true"># 为远程仓库URL命名为book</span><span class="token function">git</span> push -u book main                                            <span class="token comment" spellcheck="true"># 将本地仓库推送到book</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/Git%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B.svg" style="zoom:20%;"><h1 id="Git设置"><a href="#Git设置" class="headerlink" title="Git设置"></a>Git设置</h1><ol><li><p>设置姓名和邮箱地址</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"yimeisuren"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"2456387473@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>   <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/git%E8%AE%BE%E7%BD%AE%E5%A7%93%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1.png" alt="image-20220209043550212"></p><p>   这条命令会在<code>C:\Users\Administrator\.gitconfig</code>中以如下形式输出设置文件  </p><pre class="line-numbers language-.gitconfig"><code class="language-.gitconfig">   [user]       name = yimeisuren       email = 2456387473@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>提高命令输出的可读性</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global color.ui auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令也会对配置文件进行如下修改</p><pre class="line-numbers language-.gitconfig"><code class="language-.gitconfig">[color]    ui = auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="GitHub设置"><a href="#GitHub设置" class="headerlink" title="GitHub设置"></a>GitHub设置</h1><ol><li><p>设置 SSH Key (连接仓库需要)</p><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"2456387473@qq.com"</span> <span class="token comment" spellcheck="true">#设置ssh key命令</span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key<span class="token punctuation">(</span>/Users/your_user_directory/.ssh/id_rsa<span class="token punctuation">)</span>: <span class="token comment" spellcheck="true">#按回车键</span>Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: <span class="token comment" spellcheck="true">#输入密码</span>Enter same passphrase again: <span class="token comment" spellcheck="true">#再次输入密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入密码之后出现</p><pre class="line-numbers language-bash"><code class="language-bash">Your identification has been saved <span class="token keyword">in</span> C:\Users\Administrator\.ssh\id_rsa.Your public key has been saved <span class="token keyword">in</span> C:\Users\Administrator\.ssh\id_rsa.pub.The key fingerprint is:<span class="token operator">&lt;</span>fingerprint值 2456387473@qq.comThe key's randomart image is:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>id_rsa</code>是私钥, <code>id_rsa.pub</code>是公钥</p></li><li><p>在GitHub中添加公钥</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/GitHub%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5.png" alt="image-20220209050202842">`id_rsa`和`id_rsa.pub`都可以使用记事本直接打开查看</li><li><p>使用私钥和GitHub进行认证和通信</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -T git@github.comThe authenticity of host <span class="token string">'github.com (207.97.227.239)'</span> can<span class="token string">'t be established.RSA key fingerprint is fingerprint值 .Are you sure you want to continue connecting (yes/no)? #输入yesEnter passphrase for key '</span>/c/Users/Administrator/.ssh/id_rsa':<span class="token comment" spellcheck="true">#输入github账户密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现如下语句代表操作成功</p><pre class="line-numbers language-bash"><code class="language-bash">$ Hi yimeisuren<span class="token operator">!</span> You've successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><h2 id="git-init—初始化仓库"><a href="#git-init—初始化仓库" class="headerlink" title="git init—初始化仓库"></a>git init—初始化仓库</h2><p>要使用 Git 进行版本管理, 必须先初始化仓库  </p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> git-tutorial     <span class="token comment" spellcheck="true">#创建git-tutorial文件夹</span>$ <span class="token function">cd</span> git-tutorial        <span class="token comment" spellcheck="true">#进入文件夹</span>$ <span class="token function">git</span> init                <span class="token comment" spellcheck="true">#初始化仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93.png" alt="image-20220209060616158" style="zoom: 80%;"><p>生成的<code>.git</code>目录称为<u>附属于该仓库的工作树</u></p><h2 id="git-status—查看仓库的状态"><a href="#git-status—查看仓库的状态" class="headerlink" title="git status—查看仓库的状态"></a>git status—查看仓库的状态</h2><ol><li><p>使用<code>touch</code>命令创建文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> README.md<span class="token function">touch</span> sometest.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>查看仓库状态</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/git%E6%9F%A5%E7%9C%8B%E4%BB%93%E5%BA%93%E7%8A%B6%E6%80%81.png" alt="image-20220209061117746" style="zoom:80%;"><ul><li>on branch master: 处于master分支</li><li>commits: 待提交的文件</li><li>untracked files: git-tutorial目录下<em>存在<em>但是</em>没有被git仓库管理的对象</em></li></ul></li></ol><h2 id="git-add—向缓冲区中添加"><a href="#git-add—向缓冲区中添加" class="headerlink" title="git add—向缓冲区中添加"></a>git add—向缓冲区中添加</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add * <span class="token comment" spellcheck="true">#表示添加所有文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/git%E5%90%91%E6%9A%82%E5%AD%98%E5%8C%BA%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6.png" alt="image-20220209061731693" style="zoom:80%;"><h2 id="git-commit—保存仓库历史记录"><a href="#git-commit—保存仓库历史记录" class="headerlink" title="git commit—保存仓库历史记录"></a>git commit—保存仓库历史记录</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"任意一条描述信息"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将当前暂存区中的文件实际保存到仓库的历史记录中。通过这些记录, 我们就可以在工作树中复原文件  </p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/git%E6%8F%90%E4%BA%A4%E5%B9%B6%E4%BF%9D%E5%AD%98%E4%BB%93%E5%BA%93%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95.png" alt="image-20220209062325331" style="zoom:80%;"><h2 id="git-log—查看提交日志"><a href="#git-log—查看提交日志" class="headerlink" title="git log—查看提交日志"></a>git log—查看提交日志</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/git%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E6%97%A5%E5%BF%97.png" alt="image-20220209062416281" style="zoom:80%;"><h2 id="git-remote-add—关联远程仓库"><a href="#git-remote-add—关联远程仓库" class="headerlink" title="git remote add—关联远程仓库"></a>git remote add—关联远程仓库</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>project_url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>在GitHub上建立与本地仓库名相同的远程仓库<u>(注意不要勾选自动生成README.md文件)</u></p></li><li><p>将本地仓库和远程仓库关联起来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin https://github.com/yimeisuren/origin <span class="token comment" spellcheck="true">#origin为远程仓库名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="git-push—推送至远程仓库"><a href="#git-push—推送至远程仓库" class="headerlink" title="git push—推送至远程仓库"></a>git push—推送至远程仓库</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true">#将本地仓库中的当前分支推送到orgin中的master分支中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>git push</code>操作只允许操作最新版本的远程库, 否则会push失败. </p><blockquote><p>以一个实际场景为例进行说明</p><ol><li>在配置好本地仓库和远程仓库之后, 将本地文件push到远程仓库中</li><li>发现不小心将一些隐私文件进行了上传, 登录到github上进行手动删除</li><li>在之后某天, 对本地仓库的一些文件进行增删改之后, 重新push, 此时发现push失败</li></ol><p>上面失败的原因在于, 当在github上手动删除文件时, 此时本地仓库的版本和远程仓库中的版本不一致, 因此无法直接push, 需要先pull, 然后再进行push操作. </p></blockquote><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ol><li>使用<code>git log</code>或者<code>git reflog</code>命令查看<code>commitID</code>属性</li><li>使用<code>git reset --hard &lt;commitID&gt;</code>来进行版本回退</li></ol><h2 id="文件忽略"><a href="#文件忽略" class="headerlink" title="文件忽略"></a>文件忽略</h2><p>在当前git目录下创建<code>.gitignore</code>文件, 在其中配置想要忽略的文件</p><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p><u>语法</u>: <code>git branch &lt;branchName&gt;</code></p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><p><u>语法</u>: <code>git branch</code></p><p>从下面的示例可以看出, 创建了一个名为<code>X</code>的分支, 并显示了出来</p><pre class="line-numbers language-bash"><code class="language-bash">C:\Users\24563\Downloads\Documents\XNote<span class="token operator">></span>git branch XC:\Users\24563\Downloads\Documents\XNote<span class="token operator">></span>git branch  X* master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换分支和当前分支Head"><a href="#切换分支和当前分支Head" class="headerlink" title="切换分支和当前分支Head"></a>切换分支和当前分支Head</h2><p>当前分支是指在本地工作区中操作的那个分支. Head指向哪个分支, 则那个分支即为<u>当前分支</u>. 可以使用<code>git log</code>查看当前分支, 如下所示当前分支为master分支. </p><pre class="line-numbers language-bash"><code class="language-bash">C:\Users\24563\Downloads\Documents\XNote<span class="token operator">></span>git logcommit 93a491c96359852a42ffff8c7300ac3640416cd7 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master, XNote/master, X<span class="token punctuation">)</span>Author: yimeisuren <span class="token operator">&lt;</span>2456387473@qq.com<span class="token operator">></span>Date:   Fri Jun 10 10:16:07 2022 +0800    重新提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>git checkout -b &lt;branchName&gt;</code>进行切换分支, 添加<code>-b</code>选项表示如果分支不存在, 则先进行创建分支, 再进行切换, 如下所示</p><pre class="line-numbers language-bash"><code class="language-bash">C:\Users\24563\Downloads\Documents\XNote<span class="token operator">></span>git checkout XSwitched to branch <span class="token string">'X'</span>M       vue-admin-templateM       <span class="token string">"\350\275\257\344\273\266\351\241\271\347\233\256\347\256\241\347\220\206/Git\345\222\214GitHub.md"</span>C:\Users\24563\Downloads\Documents\XNote<span class="token operator">></span>git logcommit 93a491c96359852a42ffff8c7300ac3640416cd7 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> X, XNote/master, master<span class="token punctuation">)</span>Author: yimeisuren <span class="token operator">&lt;</span>2456387473@qq.com<span class="token operator">></span>Date:   Fri Jun 10 10:16:07 2022 +0800    重新提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p><u>语法</u>: <code>git merge &lt;branchName&gt;</code></p><p>将<code>&lt;branchName&gt;</code>分支中的提交内容合并到当前分支中</p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="Git-代码冲突怎么处理"><a href="#Git-代码冲突怎么处理" class="headerlink" title="Git 代码冲突怎么处理"></a>Git 代码冲突怎么处理</h2><p><strong>代码冲突的原因：</strong>出现冲突的原因是本地文件的版本和目标分支中文件的版本不一致。当出现同一行的内容不同时，在进行合并的时候就会产生冲突。</p><p><strong>代码冲突发生情况：</strong></p><ul><li>多个分支向主分支合并时</li><li>同一个分支下 push 或 pull 操作时</li></ul><p><strong>处理办法</strong>：发生代码冲突需要手动合并代码，选择最终的版本。可以通过图形界面，例如</p><h2 id="在哪个分支进行项目开发"><a href="#在哪个分支进行项目开发" class="headerlink" title="在哪个分支进行项目开发"></a>在哪个分支进行项目开发</h2><p>不直接在主分支进行开发，而是有技术经理创建独立的开发分支，在独立的开发分支进行开发，最后由技术经理将开发分支合并到主分支。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/z-za-xiang-windows-ruan-jian-shi-yong-qing-dan/"/>
      <url>/2022/11/11/z-za-xiang-windows-ruan-jian-shi-yong-qing-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows系统下的软件"><a href="#Windows系统下的软件" class="headerlink" title="Windows系统下的软件"></a>Windows系统下的软件</h1><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><p>Windows文件资源管理器, 通过Microsoft Store下载</p><h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p>Windows控制终端</p><h2 id="Quicker"><a href="#Quicker" class="headerlink" title="Quicker"></a>Quicker</h2><ul><li>快捷方式</li><li>OCR识图</li><li>翻译</li></ul><h2 id="DefenderControl"><a href="#DefenderControl" class="headerlink" title="DefenderControl"></a>DefenderControl</h2><p>用于彻底关闭该死的Windows Defender</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/pycharm-zi-ding-yi-hou-zhui-mo-ban/"/>
      <url>/2022/11/11/pycharm-zi-ding-yi-hou-zhui-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="PyCharm中自定义后缀模板"><a href="#PyCharm中自定义后缀模板" class="headerlink" title="PyCharm中自定义后缀模板"></a>PyCharm中自定义后缀模板</h1><ol><li><p>下载插件<code>Custome Postfix Templates</code></p></li><li><p>在文件路径<br><code>C:\Users\24563\AppData\Roaming\JetBrains\PyCharm2021.1\plugins\intellij-postfix-templates_templates\ templates\python</code>中新建文件<code>python.postfixTemplates</code></p></li><li><p>模仿<code>Custom Postfix Templates</code>中给出的示例编写模板</p><pre class="line-numbers language-postfixTemplates"><code class="language-postfixTemplates"># .type表示输入.type后缀# :Type of value表示对.type功能的解释.type : Type of value    ANY   →   type($expr$)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/bigdata-02-zookeeper-01-an-zhuang-zookeeper/"/>
      <url>/2022/11/11/bigdata-02-zookeeper-01-an-zhuang-zookeeper/</url>
      
        <content type="html"><![CDATA[<h1 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>安装java环境<code>yum install -y java</code></li><li>下载zookeeper压缩包并解压到<code>/opt/module</code>目录下<ul><li>解压缩命令<code>tar zxvf</code></li><li>移动文件命令<code>mv</code></li></ul></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>将<u>zookeeper目录下</u>的配置文件目录<code>/opt/module/zookeeper-3.5.7/conf</code>中的配置文件<code>zoo_sample.cfg</code>重命名为<code>zoo.cfg</code></li><li>修改配置文件<code>zoo.cfg</code>中的数据保存路径, 添加<code>dataDir=/opt/module/zookeeper-3.5.7/zookeeperData</code>, 并创建相应目录</li></ol><h2 id="配置文件参数解释"><a href="#配置文件参数解释" class="headerlink" title="配置文件参数解释"></a>配置文件参数解释</h2><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 心跳时间2000ms, 即2s</span><span class="token attr-name">tickTime</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment" spellcheck="true"># 集群开始启动时的通信时间, 10个心跳时间, 即10*2=20s</span><span class="token attr-name">initLimit</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token comment" spellcheck="true"># 集群正常启动之后的通信时间, 5个心跳时间, 即5*2=10s</span><span class="token attr-name">syncLimit</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment" spellcheck="true"># 存储数据的地方</span><span class="token attr-name">dataDir</span><span class="token punctuation">=</span><span class="token attr-value">/opt/module/zookeeper-3.5.7/zkData</span><span class="token comment" spellcheck="true"># zookeeper服务器提供给zookeeper客户端连接的端口</span><span class="token attr-name">clientPort</span><span class="token punctuation">=</span><span class="token attr-value">2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><ol><li><p><u>启动文件</u><code>/opt/module/zookeeper-3.5.7/bin/zkServer.sh</code>, 启动需要在文件后面添加<code>start</code> </p></li><li><p>使用jps来查看进程是否启动</p><p>如果显示<code>jps command not found</code>, 则需要使用<code>yum install -y java-1.8.0-openjdk-devel</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost zookeeper-3.5.7<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># jps</span>1835 QuorumPeerMain2141 Jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p><u>查看</u>Zookeeper状态, 在<code>zkServer.sh</code>文件后面添加<code>status</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost zookeeper-3.5.7<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bin/zkServer.sh status</span>/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /opt/module/zookeeper-3.5.7/bin/<span class="token punctuation">..</span>/conf/zoo.cfgClient port found: 2181. Client address: localhost.Mode: standalone<span class="token comment" spellcheck="true">#standalone表示单机模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p><u>启动客户端</u>, 执行<code>zkCli.sh</code>文件即可</p><p>直接使用<code>zkCli.sh</code>连接的是本地的zookeeper服务器, 效果如下</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221029183426160.png" alt="image-20221029183426160"></p><p>如果想要连接zookeeper集群, 应该使用<code>zkCli.sh -server &lt;host&gt;:&lt;ip&gt;</code>方式来进行连接</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221029183504868.png" alt="image-20221029183504868"></p></li><li><p><u>退出客户端</u><code>quit</code></p></li><li><p><u>停止</u>Zookeeper, 在<code>zkServer.sh</code>文件后面添加<code>stop</code></p></li></ol><h1 id="Zookeeper分布式实战-开发重点"><a href="#Zookeeper分布式实战-开发重点" class="headerlink" title="Zookeeper分布式实战(开发重点)"></a>Zookeeper分布式实战(开发重点)</h1><h2 id="分布式安装部署"><a href="#分布式安装部署" class="headerlink" title="分布式安装部署"></a>分布式安装部署</h2><ol><li><p>集群规划</p><p>确定在哪些服务器上安装部署Zookeeper</p></li><li><p>解压安装, 并同步到其它服务器上</p><ul><li>同步操作<code>xsync zookeeper-3.5.7</code></li></ul></li><li><p>配置服务器编号</p><ol><li>创建<code>zookeeperData</code>目录</li><li>在该目录下创建<code>myid</code>文件</li><li>在文件中添加与服务器相对应的编号, 例如server-1添加1, server-2添加2</li><li>同步(内容完全复制)到其它服务器上, 并修改文件中对应的内容</li></ol></li><li><p>配置<code>zoo.cfg</code>文件</p><ol><li><p>修改数据存储文件地址</p></li><li><p>添加如下涉及集群的配置<code>server.A=B:C:D</code></p><ul><li>A: 表示第几号服务器</li><li>B: 服务器的ip地址</li><li>C: 服务器与集群中的Leader服务器<strong>交换信息的端口号</strong></li><li>D: 如果Leader服务器挂了, 需要使用一个端口号来重新进行选举新的Leader, 该端口号用于<strong>重新选举Leader服务器</strong></li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#2,3,4分别对应上面的myid文件中设置的值</span><span class="token comment" spellcheck="true">#zookeeper2, zookeeper3, zookeeper4分别对应3台服务器的名字</span><span class="token attr-name">server.1</span><span class="token punctuation">=</span><span class="token attr-value">hadoop001:2888:3888</span><span class="token attr-name">server.2</span><span class="token punctuation">=</span><span class="token attr-value">hadoop002:2888:3888</span><span class="token attr-name">server.3</span><span class="token punctuation">=</span><span class="token attr-value">hadoop003:2888:3888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h2 id="客户端执行命令"><a href="#客户端执行命令" class="headerlink" title="客户端执行命令"></a>客户端执行命令</h2><ol><li><p>查看有哪些可执行命令<code>help</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 0<span class="token punctuation">]</span> <span class="token function">help</span> <span class="token comment" spellcheck="true">#输入help命令, 显示可用命令</span>ZooKeeper -server host:port cmd args    addauth scheme auth    close     config <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span>    connect host:port    <span class="token comment" spellcheck="true"># 创建节点, 默认情况下创建持久化节点, </span>    <span class="token comment" spellcheck="true"># 使用-e表示创建临时节点. 临时节点在客户端退出(断开连接)后清除</span>    <span class="token comment" spellcheck="true"># 使用-s表示创建带有序号的节点</span>    create <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token punctuation">]</span> <span class="token punctuation">[</span>-c<span class="token punctuation">]</span> <span class="token punctuation">[</span>-t ttl<span class="token punctuation">]</span> path <span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token punctuation">[</span>acl<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 删除</span>    delete <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> path    deleteall path    delquota <span class="token punctuation">[</span>-n <span class="token operator">|</span> -b<span class="token punctuation">]</span> path    <span class="token comment" spellcheck="true"># 默认情况获取节点的值</span>    <span class="token comment" spellcheck="true"># 使用-w表示监听该节点的值, 当节点的值发生变化时会接收到通知, 但是是一次性的, 接收到通知后需要重新设置监听</span>    get <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> path    getAcl <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> path    <span class="token function">history</span>     listquota path    <span class="token comment" spellcheck="true"># 查看路径</span>    <span class="token function">ls</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> path    ls2 path <span class="token punctuation">[</span>watch<span class="token punctuation">]</span>    printwatches on <span class="token operator">|</span> off    <span class="token comment" spellcheck="true"># 退出客户端</span>    quit     reconfig <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>-file path<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>-members serverID<span class="token operator">=</span>host:port1:port2<span class="token punctuation">;</span>port3<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>*<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>-add serverId<span class="token operator">=</span>host:port1:port2<span class="token punctuation">;</span>port3<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token punctuation">]</span>* <span class="token punctuation">[</span>-remove serverId<span class="token punctuation">[</span>,<span class="token punctuation">..</span>.<span class="token punctuation">]</span>*<span class="token punctuation">]</span>    redo cmdno    removewatches path <span class="token punctuation">[</span> -c <span class="token operator">|</span> -d <span class="token operator">|</span> -a <span class="token punctuation">]</span> <span class="token punctuation">[</span> -l <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 递归删除节点</span>    rmr path    <span class="token comment" spellcheck="true"># 修改节点的值</span>    <span class="token keyword">set</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> path data    setAcl <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-v version<span class="token punctuation">]</span> <span class="token punctuation">[</span>-R<span class="token punctuation">]</span> path acl    setquota -n <span class="token operator">|</span> -b val path    <span class="token function">stat</span> <span class="token punctuation">[</span>-w<span class="token punctuation">]</span> path    <span class="token function">sync</span> pathCommand not found: Command not found <span class="token function">help</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="API应用"><a href="#API应用" class="headerlink" title="API应用"></a>API应用</h2><h1 id="Zookeeper内部原理"><a href="#Zookeeper内部原理" class="headerlink" title="Zookeeper内部原理"></a>Zookeeper内部原理</h1><h2 id="选举机制-面试重点"><a href="#选举机制-面试重点" class="headerlink" title="选举机制(面试重点)"></a>选举机制(面试重点)</h2><p>Zookeeper虽然在配置文件中并没有指定Master和Slave, 但是在Zookeeper工作时, <u>有一个节点为Leader, 其它节点为Follower</u>, Leader是通过内部的选举机制临时产生的.</p><h3 id="半数机制"><a href="#半数机制" class="headerlink" title="半数机制"></a><u>半数机制</u></h3><p>集群中半数以上机器存活, 集群可用. 所以Zookeeper适合安装奇数台服务器.</p><h3 id="选举过程"><a href="#选举过程" class="headerlink" title="选举过程"></a>选举过程</h3><p>每台服务器一开始先选择自己, 当发现自己所得票数过半时, 成为Leader. 如果自己票数不超过一半, 则下次投给id最大的服务器. 因此成为Leader的服务器是<u>第(n/2 + 1)台服务器</u>.</p><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><h3 id="持久化节点-Persistent"><a href="#持久化节点-Persistent" class="headerlink" title="持久化节点(Persistent)"></a>持久化节点(Persistent)</h3><blockquote><p>客户端和服务器断开连接后, 创建的节点不会被删除, 用来保存客户端信息.</p></blockquote><p><u>持久化目录节点</u></p><p><u>持久化顺序编号目录节点</u></p><p>Zookeeper为节点名称进行顺序编号, 即添加顺序标识, 由父节点维护. 在分布式系统中, 顺序号可以被用于为所有的事件进行全局排序, 这样客户端可以通过顺序号推断事件的顺序.</p><h3 id="短暂节点-Ephemeral"><a href="#短暂节点-Ephemeral" class="headerlink" title="短暂节点(Ephemeral)"></a>短暂节点(Ephemeral)</h3><blockquote><p>客户端和服务器断开连接后, 创建的节点会被删除</p></blockquote><p><u>临时目录节点</u></p><p><u>临时顺序编号目录节点</u></p><h2 id="Stat结构体"><a href="#Stat结构体" class="headerlink" title="Stat结构体"></a>Stat结构体</h2><p>在zookeeper客户端中输入<code>stat &lt;path&gt;</code>即可查看<code>path</code>路径对应节点的Stat结构体信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>zk: localhost:2181<span class="token punctuation">(</span>CONNECTED<span class="token punctuation">)</span> 1<span class="token punctuation">]</span> <span class="token function">stat</span> / <span class="token comment" spellcheck="true"># 查看/根节点的Stat结构体</span>cZxid <span class="token operator">=</span> 0x0 <span class="token comment" spellcheck="true">#创建节点的事务zxid</span>ctime <span class="token operator">=</span> Thu Jan 01 08:00:00 CST 1970 <span class="token comment" spellcheck="true">#被创建的毫秒数(从1970年开始)</span>mZxid <span class="token operator">=</span> 0x0 <span class="token comment" spellcheck="true">#最后更新的事务zxid</span>mtime <span class="token operator">=</span> Thu Jan 01 08:00:00 CST 1970 <span class="token comment" spellcheck="true">#最后修改的毫秒数(从1970年开始)</span>pZxid <span class="token operator">=</span> 0x0 <span class="token comment" spellcheck="true">#最后更新的子节点</span>cversion <span class="token operator">=</span> -1 <span class="token comment" spellcheck="true">#子节点变化号</span>dataVersion <span class="token operator">=</span> 0 <span class="token comment" spellcheck="true">#数据变化号</span>aclVersion <span class="token operator">=</span> 0 <span class="token comment" spellcheck="true">#访问控制列表的变化号</span>ephemeralOwner <span class="token operator">=</span> 0x0 <span class="token comment" spellcheck="true">#如果是临时节点,这个是znode拥有session id。如果不是临时节点则是0</span>dataLength <span class="token operator">=</span> 0 <span class="token comment" spellcheck="true">#数据长度</span>numChildren <span class="token operator">=</span> 1 <span class="token comment" spellcheck="true">#子节点数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="监听器原理-面试重点"><a href="#监听器原理-面试重点" class="headerlink" title="监听器原理(面试重点)"></a>监听器原理(面试重点)</h2><ol><li>首先要有一个main线程</li><li>在main线程中创建<strong>Zookeeper客户端</strong>, 这时会创建两个线程, <strong>一个负责网络的连接通信(connect), 一个负责监听(listener)</strong></li><li>通过connect线程将注册的监听事件发送给Zookeeper服务器</li><li>在Zookeeper服务器的注册监听器列表中添加监听事件</li><li>Zookeeper服务器监听到路径或数据发生变化, 会将消息发送到Zookeeper客户端的listener线程</li><li>listener线程调用相应的process()方法, process方法由程序员自定义业务处理逻辑</li></ol><h2 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h2><ol><li>客户端向某一个服务器A发送写数据请求</li><li>该服务器向Leader服务器转发该请求</li><li>Leader服务器向所有Zookeeper服务器广播该请求</li><li>Follower服务器接收到Leader服务器的写请求后, 执行写操作, 成功后返回状态</li><li>当Leader服务器接收到超过半数以上的服务器写成功后, 向服务器A响应写成功</li><li>服务器A向客户端响应写成功</li></ol><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B.svg" style="zoom:25%;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/redis-01-ji-chu-ming-ling/"/>
      <url>/2022/11/11/redis-01-ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<pre><code>行式数据库和列式数据库1. OLAP分析型数据库 (列式数据库, 数据分析)   &gt; 计算均值, 比较大小, 求最大最小...等分析数据的时候速度快, 是将一个属性的数据存储到一起.   &gt; 只有取出所有的属性值之后才得到某一个对象的整体信息2. OLTP事务型数据库(行式数据库, 增删改查)   &gt; 将一个个对象作为存储的单位, 在取出一个对象的所有信息的时候速度快. 只有当去除所有的对象的属性值之后才能对数据进行求均值, 比大小等等    </code></pre><h1 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h1><h2 id="Redis-key基本命令"><a href="#Redis-key基本命令" class="headerlink" title="Redis-key基本命令"></a>Redis-key基本命令</h2><h3 id="redis-通用命令"><a href="#redis-通用命令" class="headerlink" title="redis 通用命令"></a>redis 通用命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看符合模板的所有key, 不建议在生产环境设备下使用, 因为模糊查询效率低 + redis单线程</span>KEYS <span class="token operator">&lt;</span>pattern<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除一个指定的key</span>DEL <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token comment" spellcheck="true"># 判断一个key是否存在</span>EXISTS <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token comment" spellcheck="true"># 为key设置一个有效期, 到期自动删除</span>EXPIRE <span class="token operator">&lt;</span>key<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看key的剩余有效时间, 默认为-1, 表示永久有效</span>TTL <span class="token operator">&lt;</span>key<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># set &lt;key> &lt;value></span><span class="token comment" spellcheck="true"># 存储的都是字符串, 底层通过字节数组存储, 但是</span><span class="token keyword">set</span> name root<span class="token keyword">set</span> age 22<span class="token keyword">set</span> score 90.5append key_1 helloworld            <span class="token comment" spellcheck="true">#向key_1后面追加"helloworld"</span>                                <span class="token comment" spellcheck="true">#如果当前key不存在,就相当于set key_1</span>strlen                            <span class="token comment" spellcheck="true">#获取字符串的长度</span>incr key_2                        <span class="token comment" spellcheck="true">#加1</span>decr key_2                        <span class="token comment" spellcheck="true">#减1</span>incrby key_2 10                    <span class="token comment" spellcheck="true">#设置每次增加的步长为10</span>getrange key_1 0 3                <span class="token comment" spellcheck="true">#获取0-3的字符</span>getrange key_1 0 -1                <span class="token comment" spellcheck="true">#获取全部的字符串</span>setrange key_1 1 xxx            <span class="token comment" spellcheck="true">#用xxx替换字符串中的字符,从1号位置开始,替换数目和xxx相等</span><span class="token comment" spellcheck="true">#msetnx操作是原子性的,要么一起成功,要么一起失败,但是 redis中的事务不是原子性的,可以有些成功有些失败</span>mset k1 v1 k2 v2 k3 v3             <span class="token comment" spellcheck="true">#批量设置,K1 V1</span>mget                            <span class="token comment" spellcheck="true">#获取多个值</span>msetnx K1 V1 K4 V4                <span class="token comment" spellcheck="true">#此时由于K1已经存在,会导致操作失败,返回0</span><span class="token comment" spellcheck="true">#设置对象</span><span class="token keyword">set</span> user:1<span class="token punctuation">{</span>name:zhangsan,age:22<span class="token punctuation">}</span>mset user:1:name zhangsan user:1:age 12    <span class="token comment" spellcheck="true">#这里的key_1为user:1:name,表示第一个user的name属性</span><span class="token comment" spellcheck="true">#获取对象</span>mget user:1:name user:1:age<span class="token comment" spellcheck="true">#组合命令</span>getset db redis                <span class="token comment" spellcheck="true">#第一次由于db不存在,所以输出nil,同时这个方法在输出后还会对db进行设置</span>getset db MongDB            <span class="token comment" spellcheck="true">#由于上一次已经设置db为redis,所以会输出redis,同时设置为MongDB</span>127.0.0.1:6379<span class="token operator">></span> setnx mykey redis        <span class="token comment" spellcheck="true">#如果mykey的值不存在,则设置为redis</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> setnx mykey MongDB        <span class="token comment" spellcheck="true">#如果mykey的值不存在,则设置为MongDB,如果存在则设置失败</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> SETEX key2 5 hello        <span class="token comment" spellcheck="true">#设置key2的值为hello,5秒后过期</span>OK127.0.0.1:6379<span class="token operator">></span> ttl key2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#可以把List当成栈,队列,阻塞队列,实际上是一个链表</span><span class="token comment" spellcheck="true">#所有的list命令都是以l开头的</span>lpush key_1 one                    <span class="token comment" spellcheck="true">#向key为key_1的队列左边加上一个值one</span>lpop  key_1                        <span class="token comment" spellcheck="true">#从左边pop出栈</span>rpop  key_1                        <span class="token comment" spellcheck="true">#从右边pop出栈</span>lindex key_1 2                    <span class="token comment" spellcheck="true">#通过下标获取值,相当于list[2],下标从0开始,和编程语言保持一致</span>llen key_1                        <span class="token comment" spellcheck="true">#获取列表的长度</span>lrem key_1 2 xiong                 <span class="token comment" spellcheck="true">#在key_1中移除掉2个xiong,精确匹配</span>lrange mylist 0 -1                <span class="token comment" spellcheck="true">#相当于遍历mylist</span>ltrim mylist 0 3                 <span class="token comment" spellcheck="true">#相当于截断mylist,会造成mylist的改变</span>rpoplpush mylist myotherlist    <span class="token comment" spellcheck="true">#=rpop+lpush,从右边pop出列表中的第一个元素,并将它放入到新的列表中</span>                                <span class="token comment" spellcheck="true">#如果myotherlist不存在,会直接新建myotherlist</span>linsert                            <span class="token comment" spellcheck="true">#向列表中插入一个值</span>ex1:127.0.0.1:6379<span class="token operator">></span> lpush key_1 one 1 <span class="token string">"xiong"</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3127.0.0.1:6379<span class="token operator">></span> lrange key_1 0 -11<span class="token punctuation">)</span> <span class="token string">"xiong"</span>2<span class="token punctuation">)</span> <span class="token string">"1"</span>3<span class="token punctuation">)</span> <span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lpop key_1<span class="token string">"xiong"</span>127.0.0.1:6379<span class="token operator">></span> rpop key_1<span class="token string">"one"</span>127.0.0.1:6379<span class="token operator">></span> lrange key_1 0 -11<span class="token punctuation">)</span> <span class="token string">"1"</span>ex2:127.0.0.1:6379<span class="token operator">></span> lpush key_1 5 7 8 4 5 one right king xiong kuang sun xu<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 13127.0.0.1:6379<span class="token operator">></span> lrange key_1 0 -1 1<span class="token punctuation">)</span> <span class="token string">"xu"</span> 2<span class="token punctuation">)</span> <span class="token string">"sun"</span> 3<span class="token punctuation">)</span> <span class="token string">"kuang"</span> 4<span class="token punctuation">)</span> <span class="token string">"xiong"</span> 5<span class="token punctuation">)</span> <span class="token string">"king"</span> 6<span class="token punctuation">)</span> <span class="token string">"right"</span> 7<span class="token punctuation">)</span> <span class="token string">"one"</span> 8<span class="token punctuation">)</span> <span class="token string">"5"</span> 9<span class="token punctuation">)</span> <span class="token string">"4"</span>10<span class="token punctuation">)</span> <span class="token string">"8"</span>11<span class="token punctuation">)</span> <span class="token string">"7"</span>12<span class="token punctuation">)</span> <span class="token string">"5"</span>13<span class="token punctuation">)</span> <span class="token string">"1"</span>127.0.0.1:6379<span class="token operator">></span> lindex key_1 2<span class="token string">"kuang"</span>127.0.0.1:6379<span class="token operator">></span> lindex key xiong<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>ex3:127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>3<span class="token punctuation">)</span> <span class="token string">"hello1"</span>4<span class="token punctuation">)</span> <span class="token string">"hello2"</span>5<span class="token punctuation">)</span> <span class="token string">"hello3"</span>6<span class="token punctuation">)</span> <span class="token string">"hello3"</span>127.0.0.1:6379<span class="token operator">></span> ltrim mylist 00 3            <span class="token comment" spellcheck="true">#这里写00会造成错误</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range127.0.0.1:6379<span class="token operator">></span> ltrim mylist 0 3 OK127.0.0.1:6379<span class="token operator">></span> lrange mylist 0 -11<span class="token punctuation">)</span> <span class="token string">"hello"</span>2<span class="token punctuation">)</span> <span class="token string">"hello1"</span>3<span class="token punctuation">)</span> <span class="token string">"hello1"</span>4<span class="token punctuation">)</span> <span class="token string">"hello2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#命令以s开头</span><span class="token comment" spellcheck="true">#set里面没有重复的数据,属于无序不重复集合</span><span class="token comment" spellcheck="true">#用途 : 共同关注,共同爱好,推荐好友...</span><span class="token comment" spellcheck="true">#比如查看共同关注 : 将A关注的人放到一个集合中,B关注的一个人放到一个集合中,二者求交集</span>sadd myset hello                    <span class="token comment" spellcheck="true">#向myset中添加元素hello</span>smembers    myset                    <span class="token comment" spellcheck="true">#查看myset中的元素</span>scard myset                            <span class="token comment" spellcheck="true">#获取myset集合中的元素个数</span>srem myset hello                    <span class="token comment" spellcheck="true">#移除myset中的hello</span>sismember myset hello                <span class="token comment" spellcheck="true">#判断某一个值是否在myset中</span>srandmember myset 2                    <span class="token comment" spellcheck="true">#随机获取myset中的2个元素</span>spop myset                            <span class="token comment" spellcheck="true">#随机删除掉一个元素</span>smove myset myset2 hello            <span class="token comment" spellcheck="true">#将myset中的hello移到myset2中</span><span class="token function">sdiff</span> myset myset2                    <span class="token comment" spellcheck="true">#差集myset-myset2</span>sinter myset myset2                    <span class="token comment" spellcheck="true">#交集</span>sunion myset myset2                    <span class="token comment" spellcheck="true">#并集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Zest有序集合"><a href="#Zest有序集合" class="headerlink" title="Zest有序集合"></a>Zest有序集合</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#排行榜,分数成绩单排名</span><span class="token comment" spellcheck="true">#带权重的,例如重要消息等级设置为2,普通消息等级设置为1</span>zadd myset 1 one 0 two 4 three                        <span class="token comment" spellcheck="true">#添加多个值,并按照给定的序号进行排序</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3zrange myset 0 -1                                    <span class="token comment" spellcheck="true">#从这里可以看出,序号是从1开始,连续递增的</span>1<span class="token punctuation">)</span> <span class="token string">"two"</span>2<span class="token punctuation">)</span> <span class="token string">"one"</span>3<span class="token punctuation">)</span> <span class="token string">"three"</span>zrem    <span class="token comment" spellcheck="true">#移除</span>zadd salary 2500 zhangsan<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1zadd salary 5000 lisi<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1zadd salary 100 xiong<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1keys *1<span class="token punctuation">)</span> <span class="token string">"salary"</span>2<span class="token punctuation">)</span> <span class="token string">"myset"</span>zrange salary 0 -11<span class="token punctuation">)</span> <span class="token string">"xiong"</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"lisi"</span>zrangebyscore salary -inf inf                        <span class="token comment" spellcheck="true">#实现排序,-inf到inf表示全排序</span>1<span class="token punctuation">)</span> <span class="token string">"xiong"</span>                                            <span class="token comment" spellcheck="true">#可以指定范围 例如 -1000 200</span>2<span class="token punctuation">)</span> <span class="token string">"zhangsan"</span>3<span class="token punctuation">)</span> <span class="token string">"lisi"</span>zrangebyscore salary -1000 1001<span class="token punctuation">)</span> <span class="token string">"xiong"</span>zrangebyscore salary 0 100 withscores                <span class="token comment" spellcheck="true">#同时会将具体的值打印出来</span>1<span class="token punctuation">)</span> <span class="token string">"xiong"</span>2<span class="token punctuation">)</span> <span class="token string">"100"</span>zrevrange salary 0 -1                                <span class="token comment" spellcheck="true">#从大到小排序</span>zcount myset 1 4                                    <span class="token comment" spellcheck="true">#获取myset中[1,4]的变量的个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#hash更适合对象的存储;</span><span class="token comment" spellcheck="true">#hash用来存储容易发生变更的数据,尤其是用户信息,一条field对应一个属性,例如username password age...</span>hset myhash field1 xiong                    <span class="token comment" spellcheck="true">#设置属性和值,相当于key和value</span>hget myhash field1                            <span class="token comment" spellcheck="true">#获取属性对应的值</span>hmset myhash field1 kuang field2 xiong        <span class="token comment" spellcheck="true">#设置多个属性值,并且会将同名属性的值给覆盖掉</span>hmget myhash field1 field2hdel muhash field1                            <span class="token comment" spellcheck="true">#删除myhash中的field1属性和对应的值</span>hlen myhash                                    <span class="token comment" spellcheck="true">#获取myhash中的长度</span>hexists myhash field3                        <span class="token comment" spellcheck="true">#判断myhash中field3是否存在</span>hgetall myhash                                <span class="token comment" spellcheck="true">#获取所有属性和它们对应的值</span>hkeys myhash                                <span class="token comment" spellcheck="true">#获取所有的key</span>hvals myhash                                <span class="token comment" spellcheck="true">#获取所有的value</span>myhash field3 5                                hincrby myhash field3 2                        <span class="token comment" spellcheck="true">#给field3对应的值加2,此时field3对应的值为7</span>hdecrby myhash field3 1                        <span class="token comment" spellcheck="true">#相当于+(-1)=-1</span>hsetnx myset field4 hello                    <span class="token comment" spellcheck="true">#当field4不存在才进行设置,否则失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="geospatial地理位置"><a href="#geospatial地理位置" class="headerlink" title="geospatial地理位置"></a>geospatial地理位置</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#朋友的定位,附近的人,打车距离计算</span><span class="token comment" spellcheck="true">#这个功能可以推算出地理位置的信息,两地之间的距离,方圆几里的人</span><span class="token comment" spellcheck="true">#两级无法直接添加,一般会下载城市数据,直接通过java程序一次性导入</span>geoadd china:city 116.40 39.90 beijing        <span class="token comment" spellcheck="true">#添加地理位置,要注意经度和维度</span>geopos china:city beijing                    <span class="token comment" spellcheck="true">#获取指定地理位置的经度和维度</span>geodist china:city beijing shanghai km      <span class="token comment" spellcheck="true">#北京到上海的直线距离(以km为单位,默认是以m为单位)</span>georadius china:city 110 30 1000 km            <span class="token comment" spellcheck="true">#以110 30为中心,半径为1000km,在集合china:city中查找符合要求的城市</span>georadius china:city 110 30 500 km withdist                <span class="token comment" spellcheck="true">#带上这些城市到这个中心点的实际距离</span>georadius china:city 110 30 500 km withcoord            <span class="token comment" spellcheck="true">#带上这些城市的经度和纬度</span>georadius china:city 110 30 500 km withdist count 5     <span class="token comment" spellcheck="true">#指定查找数量为5,则最多只显示5个</span>georadiusbymember chian:city beijing 500 km withdist    <span class="token comment" spellcheck="true">#用beijing来替代经度和纬度坐标</span><span class="token comment" spellcheck="true">#底层是Zset,所以可以用Zset中的命令来对Geospatial进行操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hyperloglog基数"><a href="#Hyperloglog基数" class="headerlink" title="Hyperloglog基数"></a>Hyperloglog基数</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#基数:不重复的元素,可以接收误差</span><span class="token comment" spellcheck="true">#比如用来统计网页的浏览量,同一个id访问多次只能算作一次</span><span class="token comment" spellcheck="true">#传统方法:用set保存用户id,由于set不能有重复的数据,所有只会算作是一次</span><span class="token comment" spellcheck="true">#缺点: 这样保存了大量的用户id,比较占用资源</span>hypeloglog: 只需要12kB的内存,但有0.83%的错误率,需要允许一定的容错,专业解决计数问题127.0.0.1:6379<span class="token operator">></span> pfadd mykey a b x k ds  kf f kfk<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfadd mykey a d d d fj f j ks d e d <span class="token function">v</span> x c <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 15127.0.0.1:6379<span class="token operator">></span> pfadd mykey2 saj fsa f ds kdk sd sde g  gds x f<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> pfcount mykey2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 10127.0.0.1:6379<span class="token operator">></span> PFMERGE mykey3 mykey mykey2OK127.0.0.1:6379<span class="token operator">></span> PFCOUNT mykey3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Bitmaps位存储"><a href="#Bitmaps位存储" class="headerlink" title="Bitmaps位存储"></a>Bitmaps位存储</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#用来解决只有两个状态的数据的存储,是否,有无....</span><span class="token comment" spellcheck="true">#设置</span>127.0.0.1:6379<span class="token operator">></span> setbit sign 0 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 1 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 2 1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 3 0 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 4 1 <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 5 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> setbit sign 6 0<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0<span class="token comment" spellcheck="true">#查看</span>127.0.0.1:6379<span class="token operator">></span> getbit sign 3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 0127.0.0.1:6379<span class="token operator">></span> getbit sign 2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1<span class="token comment" spellcheck="true">#查看打开的天数</span>127.0.0.1:6379<span class="token operator">></span> bitcount sign<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#Redis单条命令是保证原子性,但是事务是不保证原子性的</span><span class="token comment" spellcheck="true">#Redis事务没有隔离级别的概念</span><span class="token comment" spellcheck="true">#redis的事务:</span>    开启事务 <span class="token keyword">:</span> multi    命令入队    执行事务 <span class="token keyword">:</span> <span class="token function">exec</span><span class="token comment" spellcheck="true">#正常流程</span>127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 v1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 v2QUEUED127.0.0.1:6379<span class="token operator">></span> get k1QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token function">exec</span>1<span class="token punctuation">)</span> OK2<span class="token punctuation">)</span> OK3<span class="token punctuation">)</span> <span class="token string">"v1"</span><span class="token comment" spellcheck="true">#执行完事务后,这组事务就不存在了,后面使用的时候需要重新开启</span><span class="token comment" spellcheck="true">#放弃事务</span>127.0.0.1:6379<span class="token operator">></span> multiOK127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k1 2QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k2 3QUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k3 kQUEUED127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> k4 5QUEUED127.0.0.1:6379<span class="token operator">></span> discardOK<span class="token comment" spellcheck="true">#此时再去获取k1,k2,k3,k4,就已经不存在了</span>127.0.0.1:6379<span class="token operator">></span> get k4<span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p><code>watch</code>相当于mysql中的version, 如果在执行前另外一个线程修改了乐观锁中的值, 则会执行失败</p><p><code>unwatch</code>发现事务执行失败后, 需要解锁后再执行</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/redis-04-ji-qun-xia-ming-ling-zhi-xing-liu-cheng/"/>
      <url>/2022/11/11/redis-04-ji-qun-xia-ming-ling-zhi-xing-liu-cheng/</url>
      
        <content type="html"><![CDATA[<ol><li><p>创建文件 <strong>/etc/yum.repos.d/redis.repo</strong></p><pre class="line-numbers language-bash"><code class="language-bash">vim  /etc/yum.repos.d/redis.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="2"><li><p>文件内容</p><pre class="line-numbers language-txt"><code class="language-txt">[Redis]name=Redisbaseurl=http://packages.redis.io/rpm/rhel7enabled=1gpgcheck=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>执行命令</p><pre class="line-numbers language-bash"><code class="language-bash">curl -fsSL https://packages.redis.io/gpg <span class="token operator">></span> /tmp/redis.key<span class="token function">sudo</span> rpm --import /tmp/redis.key<span class="token function">sudo</span> yum <span class="token function">install</span> -y epel-release<span class="token function">sudo</span> yum <span class="token function">install</span> -y redis-stack-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>启动redis-stack-server</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># yum安装软件的的默认安装位置</span><span class="token function">cd</span> /usr/bin<span class="token comment" spellcheck="true"># 启动</span>redis-stack-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>Redis集群是Redis提供的分布式数据库方案，集群通过分片来进行数据共享，并提供复制和故障转移功能</p><h1 id="命令执行流程"><a href="#命令执行流程" class="headerlink" title="命令执行流程"></a>命令执行流程</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230223112242708.png" alt="image-20230223112242708"></p><h1 id="重新分片过程"><a href="#重新分片过程" class="headerlink" title="重新分片过程"></a>重新分片过程</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230223112341482.png" alt="image-20230223112341482"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/redis-04-ji-qun-de-an-zhuang/"/>
      <url>/2022/11/11/redis-04-ji-qun-de-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h1><h2 id="Redis-集群的安装配置"><a href="#Redis-集群的安装配置" class="headerlink" title="Redis 集群的安装配置"></a>Redis 集群的安装配置</h2><ol><li><p>解压缩<code>tar -zxvf /opt/module/redis-6.2.7.tar.gz -C /opt/module</code></p></li><li><p>编译<code>make -C /opt/module/redis-6.2.7</code></p></li><li><p>安装<code>make install -C /opt/module/redis-6.2.7</code></p></li><li><p>将配置文件 <strong>redis.conf</strong> 复制到 <strong>/etc/opt/redis</strong> 目录下:  <code>cp /opt/module/redis-6.2.7/redis.conf /etc/opt//redis/redis.conf</code></p></li><li><p>修改配置文件, 抽取公共的配置, 内容如下</p><pre class="line-numbers language-conf"><code class="language-conf"># 任意主机可连接bind 0.0.0.0# 允许远程访问连接protected-mode no# 开启集群模式cluster-enabled yes# 设置密码为root# requirepass roottcp-backlog 511timeouttcp-keepalive 300# 后台启动daemonize yes# 日志级别loglevel notice# 某一段slot的全部节点都宕机, 整个集群其他节点是否也变得不可用. yes表示不可用, no表示可用cluster-require-full-coverage nodatabases 16always-show-logo noset-proc-title yesproc-title-template "{title} {listen-addr} {server-mode}"stop-writes-on-bgsave-error yesrdbcompression yesrdbchecksum yesrdb-del-sync-files noreplica-serve-stale-data yesreplica-read-only yesrepl-diskless-sync norepl-diskless-sync-delay 5repl-diskless-load disabledrepl-disable-tcp-nodelay noreplica-priority 100acllog-max-len 128lazyfree-lazy-eviction nolazyfree-lazy-expire nolazyfree-lazy-server-del noreplica-lazy-flush nolazyfree-lazy-user-del nolazyfree-lazy-user-flush nooom-score-adj nooom-score-adj-values 0 200 800disable-thp yesappendonly noappendfilename "appendonly.aof"appendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbaof-load-truncated yesaof-use-rdb-preamble yeslua-time-limit 5000slowlog-log-slower-than 10000slowlog-max-len 128latency-monitor-threshold 0notify-keyspace-events ""hash-max-ziplist-entries 512hash-max-ziplist-value 64list-max-ziplist-size -2list-compress-depth 0set-max-intset-entries 512zset-max-ziplist-entries 128zset-max-ziplist-value 64hll-sparse-max-bytes 3000stream-node-max-bytes 4096stream-node-max-entries 100activerehashing yesclient-output-buffer-limit normal 0 0 0client-output-buffer-limit replica 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60hz 10dynamic-hz yesaof-rewrite-incremental-fsync yesrdb-save-incremental-fsync yesjemalloc-bg-thread yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>另外新建两份配置文件, 一份命名为 <strong>redis6379.conf</strong>, 另一份命名为 <strong>redis6380.conf</strong>. (同时将配置文件的内容中的6379替换为6380). 其中 <strong>redis6379.conf</strong> 配置文件的内容如下</p><pre class="line-numbers language-conf"><code class="language-conf"># 引入公共配置文件include /etc/opt/redis/redis.conf# 端口号port 6379# 当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定pidfile /opt/module/redis-6.2.7/xredis/pid/redis_6379.pid# 日志文件保存位置logfile "/opt/module/redis-6.2.7/xredis/log/redis_6379.log"# 指定rdb转储文件名dbfilename dump_6379.rdb# 指定本地数据库(即rdb转储文件)存放目录, 两台redis服务器的数据存放目录必须区分, 否则会报错无法启动redis从服务器dir /opt/module/redis-6.2.7/xredis/data/redis6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230222124240035.png" alt="image-20230222124240035"></p></li><li><p>创建配置文件中自定义设置的文件夹</p><ul><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/pid</code></li><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/log</code></li><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/data</code></li></ul></li><li><p>根据两个配置文件, 启动redis主从服务器 <code>ls /etc/opt/redis | xarg -n1 redis-server</code></p></li><li><p>将多个redis服务器合并成为一个redis集群</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装包下的src目录中的redis-cli命令</span>/opt/module/redis-6.2.7/src/redis-cli \<span class="token comment" spellcheck="true"># 将启动的多个redis服务器构建称为一个集群</span>--cluster create \<span class="token comment" spellcheck="true"># 一主多从, 其中n由下面的参数决定</span>--cluster-replicas 1 \<span class="token comment" spellcheck="true"># 这里使用host名称映射失败过, 但是在没有配置从服务器的时候使用host名称映射也成功过</span><span class="token comment" spellcheck="true"># 前面的为主服务器</span>192.168.248.101:6379 192.168.248.102:6379 192.168.248.103:6379 \<span class="token comment" spellcheck="true"># 后面的为从服务器</span><span class="token comment" spellcheck="true"># todo: 存在疑惑, 哪一台从服务器和哪一台主服务器相对应呢? 也有可能集群中设计成多个主服务器, 多个从服务器, 任意一个主服务器宕机都可以由从服务器顶替, 但这种设计的可能性不大, 相当于从服务器要拷贝所有主服务器中的数据保存</span>192.168.102:6380 192.168.248.103:6380 192.168.248.101:6380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面三个为主节点, 后面三个为从节点</p><p>```bash<br>/opt/module/redis-6.2.7/src/redis-cli <br>–cluster create <br>–cluster-replicas 1 <br>192.168.248.101:6379 192.168.248.102:6379 192.168.248.103:6379 \</p></li><li><p>168.102:6380 192.168.248.103:6380 192.168.248.101:6380</p><pre><code></code></pre></li><li><p>连接redis集群<code>redis-cli -c -p 6379</code>, 执行一条命令, 查看效果</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101021811676.png" alt="image-20221101021811676" style="zoom: 67%;"></li></ol><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><ol><li><p>根据之前的配置, 执行<code>cluster nodes</code>命令可以查看集群的主服务器节点和从服务器节点</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101155640192.png" alt="image-20221101155640192"></p></li><li><p>进入到<code>192.168.248.101:6379</code>的redis服务器中执行<code>shutdown</code>命令关闭一台redis的主服务器后, 再次查看集群信息</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101160830327.png" alt="image-20221101160830327"></p></li><li><p>再次启动<code>192.168.248.101:6379</code>的redis服务器, 查看集群信息, <strong>故障恢复后的原主服务器不会抢占当前的主服务器</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101162420668.png" alt="image-20221101162420668"></p></li><li><p>关闭整个redis集群后, 再重启redis集群, 仍然按照最初创建集群时的主服务器和从服务器的配置</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/bigdata-02-hadoop/"/>
      <url>/2022/11/11/bigdata-02-hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop介绍"><a href="#Hadoop介绍" class="headerlink" title="Hadoop介绍"></a>Hadoop介绍</h1><h2 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h2><ul><li>Hadoop是由Apache基金会所开发的<u>分布式系统基础架构</u></li><li>主要解决<u>海量数据的存储和分析计算</u>问题</li><li>Hadoop通常是指<u>Hadoop生态圈</u></li></ul><h2 id="Hadoop优势"><a href="#Hadoop优势" class="headerlink" title="Hadoop优势"></a>Hadoop优势</h2><ul><li><p>高可靠性</p><p>通过数据冗余存储实现可靠性</p></li><li><p>高扩展性</p><p>在双十一等高并发的场景下动态添加服务器, 之后可以删除服务器</p></li><li><p>高效性</p><p>在MapReduce的思想下, Hadoop是<strong>并行工作</strong>的, 以加快任务处理速度</p></li><li><p>高容错性</p><p>当任务计算失败时, 会自动重新分配任务</p></li></ul><h2 id="Hadoop组成-面试重点"><a href="#Hadoop组成-面试重点" class="headerlink" title="Hadoop组成(面试重点)"></a><u>Hadoop组成(面试重点)</u></h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/Hadoop%E7%BB%84%E6%88%90.svg" style="zoom:25%;"><h3 id="HDFS架构概述"><a href="#HDFS架构概述" class="headerlink" title="HDFS架构概述"></a>HDFS架构概述</h3><p>HDFS是Hadoop Distributed File System, 即<u>Hadoop分布式文件系统</u></p><p><u>NameNode(nn):</u> 用来记录数据存储在哪些服务器上, 即保存数据存储位置的服务器</p><p><u>SecondeNameNone(2nn):</u> 辅助NameNode完成工作, 对NameNode服务器每隔一段时间进行<u>备份</u></p><p><u>DataNode(dn):</u> 用来实际存储数据, 即用来存储数据的服务器</p><h3 id="Yarn架构概述"><a href="#Yarn架构概述" class="headerlink" title="Yarn架构概述"></a>Yarn架构概述</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/Yarn%E6%9E%B6%E6%9E%84.svg" style="zoom:20%;"><ul><li>客户端可以有多个</li><li>ResourceManager用于管理整个集群的资源(CPU和内存)</li><li>NodeManager用于管理每台服务器上的资源</li><li><u>每台服务器上可以虚拟化出来多个Container, 用户实际获得的是Container容器</u>, 在Container中由ApplicationMaster进行管理</li></ul><h3 id="MapReduce架构概述"><a href="#MapReduce架构概述" class="headerlink" title="MapReduce架构概述"></a>MapReduce架构概述</h3><p>MapReduce将计算过程分为两个阶段: Map和Reduce</p><ol><li>Map阶段并行处理输入数据</li><li>Reduce阶段对Map结果进行汇总</li></ol><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/MapReduce%E6%9E%B6%E6%9E%84.svg" style="zoom:20%;"><h3 id="HDFS-Yarn和MapReduce三者之间的关系"><a href="#HDFS-Yarn和MapReduce三者之间的关系" class="headerlink" title="HDFS,Yarn和MapReduce三者之间的关系"></a>HDFS,Yarn和MapReduce三者之间的关系</h3><p>//todo</p><h2 id="大数据生态体系"><a href="#大数据生态体系" class="headerlink" title="大数据生态体系"></a>大数据生态体系</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB.svg" alt></p><h1 id="Hadoop命令"><a href="#Hadoop命令" class="headerlink" title="Hadoop命令"></a>Hadoop命令</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/hadoop-yi-xie-wen-ti-de-jie-jue/"/>
      <url>/2022/11/11/hadoop-yi-xie-wen-ti-de-jie-jue/</url>
      
        <content type="html"><![CDATA[<h1 id="溢写文件在哪（MapTask-工作流程）"><a href="#溢写文件在哪（MapTask-工作流程）" class="headerlink" title="溢写文件在哪（MapTask 工作流程）"></a>溢写文件在哪（MapTask 工作流程）</h1><ol><li>Mapper 的 run() 方法</li><li>Mapper 的 cleanup() 方法</li><li>output.close(mapperContext) 中</li><li>collector.flush() 将环形缓冲区中的数据溢写到文件中</li><li>sortAndSpill() 排序和溢写文件, 该方法中的 filename 就是溢写文件所在的位置, 一般文件名为 spill0.out</li><li>mergePart() 溢写文件归并为一个文件, 通过 file.out.index 来记录每个分区的索引位置, 用以在一个文件中区分多个分区</li></ol><h1 id="ReduceTask-工作流程"><a href="#ReduceTask-工作流程" class="headerlink" title="ReduceTask 工作流程"></a>ReduceTask 工作流程</h1><ol><li>Reducer 的 run() 方法</li><li>initialize() 设置默认的 OutputFormat 为 TextOutputFormat</li><li>shuffleConsumerPlugin.init()  </li><li>new ShuffleSchedulerImpl(): 获取reduceTask的个数</li><li>createMergeManager(context): 初始化内存和磁盘</li><li>run()<ol><li>eventFetcher.start(): ReduceTask主动去拉取</li><li>copyPhase.complete(): copy阶段结束</li></ol></li><li>sortPhase.complete(): sort阶段结束</li><li>reducer.run(): 每个ReduceTask只拉取至多一个分区的数据, 进入该方法一次, 最终进入到 XXXReducer 类中的 reducer() 方法</li></ol><h1 id="分文件输出"><a href="#分文件输出" class="headerlink" title="分文件输出"></a>分文件输出</h1><ul><li><p>分区</p><blockquote><p>优点: 简单</p><p>缺点: 不能够控制输出文件名</p></blockquote></li><li><p>自定义 OutputFormat</p><blockquote><p>优点: 可以指定输出文件名</p></blockquote></li></ul><h1 id="解决数据倾斜问题"><a href="#解决数据倾斜问题" class="headerlink" title="解决数据倾斜问题"></a>解决数据倾斜问题</h1><p>reduceJion -&gt; mapJion (缓存小表)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/mapreduce-cheng-xu/"/>
      <url>/2022/11/11/mapreduce-cheng-xu/</url>
      
        <content type="html"><![CDATA[<h1 id="InputFormat输入接口"><a href="#InputFormat输入接口" class="headerlink" title="InputFormat输入接口"></a>InputFormat输入接口</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/InputFormat.svg" alt></p><h2 id="FileInputFormat-lt-K-V-gt"><a href="#FileInputFormat-lt-K-V-gt" class="headerlink" title="FileInputFormat&lt;K,V&gt;"></a>FileInputFormat&lt;K,V&gt;</h2><h3 id="TextInputFormat-默认实现方式"><a href="#TextInputFormat-默认实现方式" class="headerlink" title="TextInputFormat 默认实现方式"></a>TextInputFormat 默认实现方式</h3><blockquote><p><strong>默认实现方式</strong>, 一次读取一个文件</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//TextInputFormat的输入类型默认为LongWritable和Text, 即KEYIN:LongWritable, VALUEIN: Text</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextInputFormat</span> <span class="token keyword">extends</span> <span class="token class-name">FileInputFormat</span><span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RecordReader<span class="token operator">&lt;</span>LongWritable<span class="token punctuation">,</span> Text<span class="token operator">></span> <span class="token function">createRecordReader</span><span class="token punctuation">(</span>InputSplit split<span class="token punctuation">,</span> TaskAttemptContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取分隔符, 并转换成字节数组Byte[]形式</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> recordDelimiterBytes <span class="token operator">=</span> null<span class="token punctuation">;</span>        String delimiter <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"textinputformat.record.delimiter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> delimiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            recordDelimiterBytes <span class="token operator">=</span> delimiter<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>Charsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建一个行扫描器, 指定分隔符</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LineRecordReader</span><span class="token punctuation">(</span>recordDelimiterBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//默认情况下, 都认为文件是可切分的, 只有一些压缩类型的文件不支持切片</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSplitable</span><span class="token punctuation">(</span>JobContext context<span class="token punctuation">,</span> Path file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> CompressionCodec codec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompressionCodecFactory</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCodec</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> codec<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> codec <span class="token keyword">instanceof</span> <span class="token class-name">SplittableCompressionCodec</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CombineFileInputFormat-lt-K-V-gt"><a href="#CombineFileInputFormat-lt-K-V-gt" class="headerlink" title="CombineFileInputFormat&lt;K,V&gt;"></a>CombineFileInputFormat&lt;K,V&gt;</h2><blockquote><p>一次读取多个文件, 主要用于处理多个小文件的场景</p></blockquote><blockquote><p>*<em>虚拟存储过程:  *</em></p><ol><li>如果文件大小满足<code>FileSize &gt; 2 * maxInputSplitSize</code>, 那么不停的分出一片大小为<code>maxInputSplitSize</code>的虚拟文件, 直至<code>FileSize &lt;= 2 * maxInputSplitSize</code></li><li>如果文件大小满足<code>maxInputSplit &lt; FileSize &lt;= 2 * maxInputSplitSize</code>, 则分成两片大小相等的虚拟文件, 即<code>FileSize/2</code></li><li>否则, 文件单独为一个虚拟文件</li></ol><p><strong>切片过程:</strong></p><ol><li>如果虚拟文件大小 <code>fileSize &lt; maxInputSplitSize</code>, 那么和下一个虚拟文件合并称为一个切片<code>split</code></li></ol></blockquote><ul><li><p>设置<code>maxInputSplitSize</code>后的执行效果</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221030192951650.png" alt="image-20221030192951650"></p></li><li><p>不设置<code>maxInputSplitSize</code>的效果</p><p>使用默认值, 其默认值非常大, 因此, 在大多数情况下, 只有一个切片, 相当于将所有文件打包生成一个文件, 并且不进行切片</p></li><li><p>KeyValueTextInputFormat</p></li><li><p>SequenceFileInputFormat&lt;K,V&gt;</p></li><li><p>NlineInputFormat</p></li><li><p>自定义</p></li></ul><h1 id="Shuffle过程"><a href="#Shuffle过程" class="headerlink" title="Shuffle过程"></a>Shuffle过程</h1><h2 id="Map阶段的Shuffle"><a href="#Map阶段的Shuffle" class="headerlink" title="Map阶段的Shuffle"></a>Map阶段的Shuffle</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/Shuffle_Map%E9%98%B6%E6%AE%B5.svg" style="zoom:30%;"><h2 id="Reduce阶段的Shuffle"><a href="#Reduce阶段的Shuffle" class="headerlink" title="Reduce阶段的Shuffle"></a>Reduce阶段的Shuffle</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/Shuffle_Reduce%E9%98%B6%E6%AE%B5.svg" style="zoom:25%;"><h1 id="OutputFormat输出接口"><a href="#OutputFormat输出接口" class="headerlink" title="OutputFormat输出接口"></a>OutputFormat输出接口</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/OutputFormat.svg" alt></p><h2 id="FileOutputFormat"><a href="#FileOutputFormat" class="headerlink" title="FileOutputFormat"></a>FileOutputFormat</h2><h3 id="TextOutputFormat-默认方式"><a href="#TextOutputFormat-默认方式" class="headerlink" title="TextOutputFormat(默认方式)"></a>TextOutputFormat(默认方式)</h3><h3 id="自定义方式"><a href="#自定义方式" class="headerlink" title="自定义方式"></a>自定义方式</h3><ol><li>继承FileOutputFormat抽象类</li><li>实现RecordWriter中的<strong>write()</strong>方法</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/bigdata-02-hive/"/>
      <url>/2022/11/11/bigdata-02-hive/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive基本概念"><a href="#Hive基本概念" class="headerlink" title="Hive基本概念"></a>Hive基本概念</h1><p>Hive: 由Facebook开源, 用于解决海量结构化日志的数据统计工具</p><p>Hive是基于Hadoop的一个数据仓库工具, 可以将结构化的数据文件映射为一张表, 并提供类SQL查询功能</p><p>Hive的本质: 将HQL(Hive SQL)转化为MapReduce程序</p><h1 id="DDL数据定义"><a href="#DDL数据定义" class="headerlink" title="DDL数据定义"></a>DDL数据定义</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">`</span>database_name<span class="token punctuation">`</span><span class="token punctuation">[</span>LOCATION <span class="token string">'/database_name.db'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数据库在HDFS上的默认存储路径是<code>/usr/hive/warehouse/*.db</code></p><p>使用<code>LOCATION</code>关键字指定数据库在HDFS上存放的位置</p><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span> <span class="token punctuation">[</span><span class="token operator">LIKE</span> <span class="token string">'database_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">DATABASES</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token punctuation">`</span>database_name<span class="token punctuation">`</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>CASCADE</code>关键字可以强制删除==空的数据库==(不含有表)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/bigdata-09-elasticsearch/"/>
      <url>/2022/11/11/bigdata-09-elasticsearch/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>docker pull elasticsearch:7.12.1</code></p></li><li><p><code>docker pull kibana:7.12.1</code></p></li><li><p>启动elasticsearch</p><pre class="line-numbers language-sh"><code class="language-sh">docker run -d \    --name es \    -e "ES_JAVA_OPTS=-Xms512m -Xmx512m" \    -v "discovery.type=single-node" \    --privileged \    --network es-net \    -p 9200:9200 \    -p 9300:9300 \    elasticsearch:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动kibana</p><pre class="line-numbers language-sh"><code class="language-sh">docker run -d \    --name kibana \    -e ELASTICSEARCH_HOSTS=http://es:9200 \    --network=es-net \    -p 5601:5601 \    kibana:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装ik分词器</p><ol><li><p>进入到容器内部<code>docker exec -it elasticsearch /bin/bash</code></p></li><li><p>在线下载并安装</p><pre class="line-numbers language-bash"><code class="language-bash">./bin/elasticsearch-plugin <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出<code>exit</code></p></li><li><p>重启容器<code>docker restart elasticsearch</code></p></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/bigdata-flink/"/>
      <url>/2022/11/11/bigdata-flink/</url>
      
        <content type="html"><![CDATA[<h1 id="Flink部署"><a href="#Flink部署" class="headerlink" title="Flink部署"></a>Flink部署</h1><h2 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>下载==flink-1.10.1-bin-scala_2.12.tgz==并解压缩</li><li>修改==flink-conf.yaml==文件: 配置集群的master的IP地址</li><li>修改==slaves==文件: 配置集群的slaves的IP地址</li><li><u>复制型同步</u>到集群的其他主机</li><li></li></ol><h3 id="自动化部署脚本"><a href="#自动化部署脚本" class="headerlink" title="自动化部署脚本"></a>自动化部署脚本</h3><pre class="line-numbers language-shell"><code class="language-shell"># 解压缩tar -zxvf flink-1.10.1-bin-scala_2.12.tgz# 修改flink-conf配置文件(待完成)vim flink-1.10.1/conf/flink-conf.yaml# 修改slaves配置文件vim flink-1.10.1/conf/slaves# 同步到集群的其他主机(待完成)xsync flink-1.10.1# 启动集群 ./flink-1.10.1/bin/start-cluster.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux-02-nginx/"/>
      <url>/2022/11/11/linux-02-nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><ol><li><p>下载nginx安装包, 上传到linux系统中并解压</p></li><li><p>安装必要的编译工具等</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装编译工具及库文件</span>yum -y <span class="token function">install</span> <span class="token function">make</span> zlib zlib-devel gcc-c++ libtool  openssl openssl-devel pcre-devel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编译安装</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token operator">&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装完成后, 进入到<code>/usr/local</code>目录下查看, 可以看到<code>nginx</code>目录. 即安装目录为<code>/usr/local/nginx</code></p></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>创建nginx运行使用的用户</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/sbin/groupadd bing/usr/sbin/useradd -g bing bing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置nginx.conf ，将/usr/local/nginx/conf/nginx.conf替换为以下内容</p><pre class="line-numbers language-shell"><code class="language-shell">cat /usr/local/nginx/conf/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><p>进入到nginx安装目录下的<code>sbin</code>中通过<code>./nginx</code>启动nginx服务器</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/nginx/sbin/nginx#或者cd /usr/local/nginx/sbin./nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/nginx/sbin/nginx -s reload            # 重新载入配置文件/usr/local/nginx/sbin/nginx -s reopen            # 重启 Nginx/usr/local/nginx/sbin/nginx -s stop              # 停止 Nginxps -ef | grep nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="连接失败的原因"><a href="#连接失败的原因" class="headerlink" title="连接失败的原因"></a>连接失败的原因</h2><pre class="line-numbers language-shell"><code class="language-shell">#可能是防火墙80端口没有开放<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h2><p>影响nginx服务器整体运行</p><pre class="line-numbers language-shell"><code class="language-shell">user xiong xiong;worker_processes 2; #设置值和CPU核心数一致error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; #日志位置和日志级别pid /usr/local/webserver/nginx/nginx.pid;#Specifies the value for maximum file descriptors that can be opened by this process.worker_rlimit_nofile 65535;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h2><p>影响nginx服务器与用户的网络连接</p><pre class="line-numbers language-shell"><code class="language-shell">events{  use epoll;  worker_connections 65535;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h2><p>这里面又分全局块, server块. 原理同上</p><pre class="line-numbers language-shell"><code class="language-shell">http{  include mime.types;  default_type application/octet-stream;  log_format main  '$remote_addr - $remote_user [$time_local] "$request" '               '$status $body_bytes_sent "$http_referer" '               '"$http_user_agent" $http_x_forwarded_for';#charset gb2312;  server_names_hash_bucket_size 128;  client_header_buffer_size 32k;  large_client_header_buffers 4 32k;  client_max_body_size 8m;  sendfile on;  tcp_nopush on;  keepalive_timeout 60;  tcp_nodelay on;  fastcgi_connect_timeout 300;  fastcgi_send_timeout 300;  fastcgi_read_timeout 300;  fastcgi_buffer_size 64k;  fastcgi_buffers 4 64k;  fastcgi_busy_buffers_size 128k;  fastcgi_temp_file_write_size 128k;  gzip on;   gzip_min_length 1k;  gzip_buffers 4 16k;  gzip_http_version 1.0;  gzip_comp_level 2;  gzip_types text/plain application/x-javascript text/css application/xml;  gzip_vary on;  #limit_zone crawler $binary_remote_addr 10m; #下面是server虚拟主机的配置 server  {    listen 80;#监听端口    server_name localhost;#域名    index index.html index.htm index.php;    root /usr/local/webserver/nginx/html;#站点目录      location ~ .*\.(php|php5)?$    {      #fastcgi_pass unix:/tmp/php-cgi.sock;      fastcgi_pass 127.0.0.1:9000;      fastcgi_index index.php;      include fastcgi.conf;    }    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$    {      expires 30d;  # access_log off;    }    location ~ .*\.(js|css)?$    {      expires 15d;   # access_log off;    }    access_log off;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h1><h2 id="实例1-反向代理"><a href="#实例1-反向代理" class="headerlink" title="实例1: 反向代理"></a>实例1: 反向代理</h2><p>实现效果 : 打开浏览器, 在浏览器地址栏中输入地址<a href="http://www.xiong.com" target="_blank" rel="noopener">www.xiong.com</a>, 跳转linux系统tomcat主页面中</p><ol><li><p>在linux中安装tomcat</p><p>链接<a href="https://blog.csdn.net/qq_36273886/article/details/103328813" target="_blank" rel="noopener">https://blog.csdn.net/qq_36273886/article/details/103328813</a></p></li><li><p>在window主机中配置域名的端口映射(修改host)</p><pre class="line-numbers language-shell"><code class="language-shell"># 将域名和nginx的端口进行映射192.168.1.105 www.xiong.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改linux系统中的nginx的配置文件</p><pre class="line-numbers language-shell"><code class="language-shell"> server  {    listen 80;    server_name 192.168.1.105;#修改此处    #访问192.168.1.105:80(外部访问虚拟机的ip地址)会转发到127.0.0.1:8080(虚拟机自己访问自己时候的localhost)端口    location / {        root html;        proxy_pass http://127.0.0.1:8080;        index index.html index.html;    }    #访问的时候带有/edu,则访问8080    location ~ /edu/ {        proxy_pass http://127.0.0.1:8080; }    #访问的时候带有/vod,则访问8081    location ~ /vod/ {        proxy_pass http://127.0.0.1:8081;    }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终在自己电脑上访问<a href="http://www.xiong.com/edu/test.html就可以成功访问" target="_blank" rel="noopener">www.xiong.com/edu/test.html就可以成功访问</a></p><p>在其它电脑上由于没有配置本地的域名解析, 所以不可以使用<a href="http://www.xiong.com而需要输入它所对应ip地址192.168.1.105" target="_blank" rel="noopener">www.xiong.com而需要输入它所对应ip地址192.168.1.105</a>, 输入192.168.1.105/edu/test.html</p></li></ol><h2 id="实例2-负载均衡"><a href="#实例2-负载均衡" class="headerlink" title="实例2: 负载均衡"></a>实例2: 负载均衡</h2><p>实现效果 : 在浏览器输入地址<a href="http://192.168.1.105/edu/a.html" target="_blank" rel="noopener">http://192.168.1.105/edu/a.html</a>, 负载均衡效果, 平均8082和8083端口中</p><ol><li><p>在linux上准备两台tomcat服务器, 端口号分别为8082和8083,并分别为其在webapps目录下创建edu文件夹, 并准备test.html页面</p></li><li><p>在nginx的配置文件nginx.conf中进行负载均衡的配置</p><pre class="line-numbers language-shell"><code class="language-shell">http{    upstream myserver{ #添加这一段        ip_hash;        server 192.168.1.105:8082 weight=1;        server 192.168.1.105:8083 weight=1;    }    server{        listen 80;        server_name 192.168.1.105;#这里修改成linux系统的端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>       location / {           proxy_pass http://myserver; #添加上面自定义的myserver           root html;           index index.htmll index.html;       }   }</code></pre><p>   }</p><pre><code>分配策略:1. 轮询 (默认): 每个请求按时间顺序逐一分配到不同的后端服务器,如果后端服务器down掉,能自动剔除2. weight(权重): 权重越高, 任务越重3. ip_hash: 每个请求按访问的IP的hash结果分配, 这样每个 访客固定访问一个后端服务器, 可以解决session问题4. fair(第三方): 按照后端服务器的响应时间来分配, 响应时间短的先分配, 只需要将ip_hash替换成fair## 实例3: 动静分离为了加快网页解析页面, 将动态资源和静态资源分开进行部署, 静态资源服务器和动态资源服务器. 静态文件独立成单独的域名,放在独立的服务器上(主流推崇)+ 先在服务器(linux虚拟机)创建static目录, 用来存放静态资源+ 动态资源放到tomcat的目录下+ linux是一台服务器, 其中的tomcat又是一台服务器expires来设置缓存过期时间, 在过期时间内, 如果服务器资源没有发生变化, 则直接从浏览器缓存获取,并返回状态码3041. 在linux系统中准备一些静态资源static---&gt;css和js2. 在nginx的配置文件中进行配置   ```shell   server {       location /css{           root /static/;#这两行表示出根目录为static,/css为根目录下的css文件           index index.html index.html;       }       local /js{           root /static/;#和static目录的创建位置有关           index index.html index.html;           autoindex on;#就和很多镜像仓库的那些目录一样       }   }</code></pre><ol start="3"><li>在浏览器中输入地址<a href="http://192.168.1.105/css/01.jpg" target="_blank" rel="noopener">http://192.168.1.105/css/01.jpg</a> (01.jpg是css文件夹中的一张图片)</li></ol><h2 id="实例4-高可用"><a href="#实例4-高可用" class="headerlink" title="实例4: 高可用"></a>实例4: 高可用</h2><p>实现效果 : 即使nginx宕机了,请求仍然可以实现效果</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200515114723662.png" alt="image-20200515114723662"></p><ol><li>需要两台nginx服务器</li><li>需要keepalived</li><li>需要虚拟ip</li></ol><p>配置高可用环境</p><ol><li>两台虚拟机linux</li><li>在linux上安装nginx和keepalived (yum install xxx)</li><li>修改keepalived的配置文件(/etc/keepalived)</li><li>在/usr/local/src下放置检测nginx是否宕机的脚本文件</li><li>把两台虚拟机服务上的nginx和keepalived都启动 (systemctl start keepalived.service)</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/springcloud-dubbo/"/>
      <url>/2022/11/11/springcloud-dubbo/</url>
      
        <content type="html"><![CDATA[<h1 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h1><h2 id="垂直应用架构MVC"><a href="#垂直应用架构MVC" class="headerlink" title="垂直应用架构MVC"></a>垂直应用架构MVC</h2><h2 id="分布式服务架构RPC"><a href="#分布式服务架构RPC" class="headerlink" title="分布式服务架构RPC"></a>分布式服务架构RPC</h2><ul><li>页面与业务的分离(页面经常发生改变, 设计模式的体现)</li><li>页面所在的服务器和业务所在的服务器可能不在同一台服务器上, 此时需要在服务与服务之间的调用. 不同服务器之间的调用成为远程过程调用RPC.</li></ul><p>客户端A-&gt;客户端A的邮局-&gt;客户端B的邮局-&gt;客户端B</p><p>影响RPC框架的效率</p><ul><li>建立连接的速度</li><li>序列化和反序列化的速度</li></ul><p>RPC: 由A服务器中调用B服务器中的一段功能</p><p>灰度发布: 新服务逐步替代旧服务的过程</p><h2 id="流动计算架构"><a href="#流动计算架构" class="headerlink" title="流动计算架构"></a>流动计算架构</h2><h1 id="Dubbo原理"><a href="#Dubbo原理" class="headerlink" title="Dubbo原理"></a>Dubbo原理</h1><h2 id="标签解析"><a href="#标签解析" class="headerlink" title="标签解析"></a>标签解析</h2><p>每一个标签对应一个实体类，例如 service 标签对应 ServiceBean，consumer 标签对应 ConsumerConfig</p><p>Dubbo<strong>NamespaceHandler</strong> 命名空间中创建每一个预定义好的 DubboBeanDefinitionParser</p><p>通过标签解析器来解析对应的标签，即 BeanDefinitionParser</p><h2 id="服务暴露流程"><a href="#服务暴露流程" class="headerlink" title="服务暴露流程"></a>服务暴露流程</h2><p>ServiceBean中的<code>doExportUrl()</code></p><p>@DubboService 注解对应 service 标签，标签解析器和注解解析器本质上是一回事</p><p>通过一张表来进行管理，</p><h2 id="服务引用流程"><a href="#服务引用流程" class="headerlink" title="服务引用流程"></a>服务引用流程</h2><p>@DubboReference 注解对应 reference 标签，而 reference 标签中含有各种属性或子标签，因此 reference 也对应这一个实体类，即 ReferenceBean</p><p><code>refer()</code> 方法</p><h2 id="服务调用流程"><a href="#服务调用流程" class="headerlink" title="服务调用流程"></a>服务调用流程</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux-01-centos7-pei-zhi/"/>
      <url>/2022/11/11/linux-01-centos7-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-设置"><a href="#VMware-设置" class="headerlink" title="VMware 设置"></a>VMware 设置</h1><ul><li>NAT 模式</li><li>最小化安装（这会很多软件需要手动安装）</li><li>静态 IP 地址配置</li><li>主机名 hostname 配置</li></ul><blockquote><p>静态 IP 地址和主机名 hostname 可以在安装过程中直接通过图形化界面进行配置。</p><p>假如 IPv4 地址为 <strong>192.168.248.101</strong>，那么网关为 <strong>192.168.248.2</strong>，子网掩码为 <strong>255.255.255.0</strong>，DNS 服务器为 <strong>223.5.5.5</strong> 和 <strong>223.6.6.6</strong></p></blockquote><h1 id="CentOS-设置"><a href="#CentOS-设置" class="headerlink" title="CentOS 设置"></a>CentOS 设置</h1><h2 id="修改成静态-ip"><a href="#修改成静态-ip" class="headerlink" title="修改成静态 ip"></a>修改成静态 ip</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-sh"><code class="language-sh"># 修改文件内容vim /etc/sysconfig/network-scripts/ifcfg-ens32# 刷新网络设置systemctl restart network# 查看网络设置ip address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">TYPE</span><span class="token punctuation">=</span><span class="token attr-value">"Ethernet"</span><span class="token attr-name">PROXY_METHOD</span><span class="token punctuation">=</span><span class="token attr-value">"none"</span><span class="token attr-name">BROWSER_ONLY</span><span class="token punctuation">=</span><span class="token attr-value">"no"</span><span class="token attr-name">BOOTPROTO</span><span class="token punctuation">=</span><span class="token attr-value">"none"</span><span class="token attr-name">DEFROUTE</span><span class="token punctuation">=</span><span class="token attr-value">"yes"</span><span class="token attr-name">IPV4_FAILURE_FATAL</span><span class="token punctuation">=</span><span class="token attr-value">"no"</span><span class="token attr-name">IPV6INIT</span><span class="token punctuation">=</span><span class="token attr-value">"yes"</span><span class="token attr-name">IPV6_AUTOCONF</span><span class="token punctuation">=</span><span class="token attr-value">"yes"</span><span class="token attr-name">IPV6_DEFROUTE</span><span class="token punctuation">=</span><span class="token attr-value">"yes"</span><span class="token attr-name">IPV6_FAILURE_FATAL</span><span class="token punctuation">=</span><span class="token attr-value">"no"</span><span class="token attr-name">IPV6_ADDR_GEN_MODE</span><span class="token punctuation">=</span><span class="token attr-value">"stable-privacy"</span><span class="token attr-name">NAME</span><span class="token punctuation">=</span><span class="token attr-value">"ens32"</span><span class="token attr-name">UUID</span><span class="token punctuation">=</span><span class="token attr-value">"5bce0633-e13e-4d3a-a835-93e049c4aa55"</span><span class="token attr-name">DEVICE</span><span class="token punctuation">=</span><span class="token attr-value">"ens32"</span><span class="token attr-name">ONBOOT</span><span class="token punctuation">=</span><span class="token attr-value">"yes"</span><span class="token attr-name">PREFIX</span><span class="token punctuation">=</span><span class="token attr-value">"24"</span><span class="token attr-name">IPV6_PRIVACY</span><span class="token punctuation">=</span><span class="token attr-value">"no"</span><span class="token attr-name">DNS1</span><span class="token punctuation">=</span><span class="token attr-value">"223.5.5.5"</span><span class="token attr-name">DNS2</span><span class="token punctuation">=</span><span class="token attr-value">"223.6.6.6"</span><span class="token comment" spellcheck="true"># 唯二可能需要修改的地方</span><span class="token attr-name">IPADDR</span><span class="token punctuation">=</span><span class="token attr-value">"192.168.248.101"</span><span class="token attr-name">GATEWAY</span><span class="token punctuation">=</span><span class="token attr-value">"192.168.248.2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更换成-alibaba-的-yum-源"><a href="#更换成-alibaba-的-yum-源" class="headerlink" title="更换成 alibaba 的 yum 源"></a>更换成 alibaba 的 yum 源</h2><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-sh"><code class="language-sh"># 最小化安装没有vim, 只能使用vi命令vi /etc/yum.repos.d/CentOS-Base.repo# 安装额外的软件仓库epel-release, 大多数rpm包在官方的仓库中找不到yum install -y epel-release# 安装网络工具包yum install -y net-tools# 修改完成后安装vimyum install -y vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件内容-1"><a href="#文件内容-1" class="headerlink" title="文件内容"></a>文件内容</h3><h4 id="CentOS-Base-repo-文件"><a href="#CentOS-Base-repo-文件" class="headerlink" title="CentOS-Base.repo 文件"></a>CentOS-Base.repo 文件</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># CentOS-Base.repo</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The mirror system uses the connecting IP address of the client and the</span><span class="token comment" spellcheck="true"># update status of each mirror to pick mirrors that are updated to and</span><span class="token comment" spellcheck="true"># geographically close to the client.  You should use this for CentOS updates</span><span class="token comment" spellcheck="true"># unless you are manually picking other mirrors.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If the mirrorlist= does not work for you, as a fall back you can try the </span><span class="token comment" spellcheck="true"># remarked out baseurl= line instead.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span>[base]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Base - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/os/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#released updates </span>[updates]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Updates - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/updates/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#additional packages that may be useful</span>[extras]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Extras - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/extras/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#additional packages that extend functionality of existing packages</span>[centosplus]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Plus - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/centosplus/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span class="token comment" spellcheck="true">#contrib - packages by Centos Users</span>[contrib]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">CentOS-$releasever - Contrib - mirrors.aliyun.com</span><span class="token attr-name">failovermethod</span><span class="token punctuation">=</span><span class="token attr-value">priority</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/</span><span class="token attr-name">        http</span><span class="token punctuation">:</span><span class="token attr-value">//mirrors.cloud.aliyuncs.com/centos/$releasever/contrib/$basearch/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">gpgkey</span><span class="token punctuation">=</span><span class="token attr-value">http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h2><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-sh"><code class="language-sh"># 修改主机名vim /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文件内容-2"><a href="#文件内容-2" class="headerlink" title="文件内容"></a>文件内容</h3><h4 id="hostname-文件"><a href="#hostname-文件" class="headerlink" title="hostname 文件"></a>hostname 文件</h4><pre class="line-numbers language-properties"><code class="language-properties">hadoop001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改主机名映射（自定义域名）"><a href="#修改主机名映射（自定义域名）" class="headerlink" title="修改主机名映射（自定义域名）"></a>修改主机名映射（自定义域名）</h2><h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-sh"><code class="language-sh">vim /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件内容-3"><a href="#文件内容-3" class="headerlink" title="文件内容"></a>文件内容</h3><h4 id="hosts-文件"><a href="#hosts-文件" class="headerlink" title="hosts 文件"></a>hosts 文件</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">192.168.248.101</span> <span class="token attr-value">hadoop001</span><span class="token attr-name">192.168.248.102</span> <span class="token attr-value">hadoop002</span><span class="token attr-name">192.168.248.103</span> <span class="token attr-value">hadoop003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><h3 id="命令-4"><a href="#命令-4" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-sh"><code class="language-sh"># 关闭防火墙systemctl stop firewalld# 关闭防火墙开机自启动systemctl disable firewalld.service# 查看防火墙状态, 确保关闭systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/sql-biao/"/>
      <url>/2022/11/11/sql-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud项目中使用到的SQL表"><a href="#SpringCloud项目中使用到的SQL表" class="headerlink" title="SpringCloud项目中使用到的SQL表"></a>SpringCloud项目中使用到的SQL表</h1><h2 id="payment表"><a href="#payment表" class="headerlink" title="payment表"></a>payment表</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>payment<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>     <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'ID'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">serial</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>  <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> <span class="token punctuation">`</span>utf8<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>CP: 侧重数据的一致性, 严格保证, 一旦发生故障立即从注册中心中删除该微服务</p><p>AP: 侧重集群的高可用, 因为网络延迟或故障等不会立即从服务注册中心中删除</p><h1 id="Ribbon本地负载均衡和Nginx服务端负载均衡的区别"><a href="#Ribbon本地负载均衡和Nginx服务端负载均衡的区别" class="headerlink" title="Ribbon本地负载均衡和Nginx服务端负载均衡的区别"></a>Ribbon本地负载均衡和Nginx服务端负载均衡的区别</h1><p>Nginx是服务器负载均衡, 客户端所有请求都会交给Nginx, 然后由Nginx实现转发请求</p><p>Ribbon本地负载均衡, 在调用微服务接口, 会在注册中心上获取注册信息服务列表之后缓存到JVM本地, 从而实现在本地RPC远程服务调用技术. </p><h1 id="Hystrix服务熔断"><a href="#Hystrix服务熔断" class="headerlink" title="Hystrix服务熔断"></a>Hystrix服务熔断</h1><p>出现异常请求时, 先通过服务降级返回一个提示页面, 当一定时间内异常请求次数达到一定的百分比和次数时, 触发服务熔断, 此时所有的请求都会被服务器拒绝. 熔断之后经过一段时间后(timeout), 尝试着去接收请求, 如果请求正常, 则慢慢恢复; 如果请求还是异常, 则保持服务熔断状态.</p><h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><h2 id="路由Route"><a href="#路由Route" class="headerlink" title="路由Route"></a>路由Route</h2><p>由ID, 目标URI, 一系列断言和过滤组成</p><h2 id="断言Predicate"><a href="#断言Predicate" class="headerlink" title="断言Predicate"></a>断言Predicate</h2><p>满足URI匹配条件</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>根据指定要求进行过滤</p><p>可以根据特殊需求添加多个过滤器</p><h1 id="Config配置中心"><a href="#Config配置中心" class="headerlink" title="Config配置中心"></a>Config配置中心</h1><p>==客户端的动态刷新问题==</p><p>当修改配置文件后, 客户端微服务需要重启才能获得最新的配置文件</p><p>手动刷新: 将麻烦丢给运维去做, 运维人员修改配置文件后, 再手动发送一个命令去通知客户端微服务来拉取最新的配置文件. 此时客户端不需要重启</p><h1 id="消息总线Bus"><a href="#消息总线Bus" class="headerlink" title="消息总线Bus"></a>消息总线Bus</h1><p>实现分布式的自动刷新配置功能</p><p>RabbitMQ或者Kafka</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/springcloud-xiang-guan-ji-zhu/"/>
      <url>/2022/11/11/springcloud-xiang-guan-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统配置"><a href="#Linux系统配置" class="headerlink" title="Linux系统配置"></a>Linux系统配置</h1><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><blockquote><p>可以访问外网, 和其它主机通信</p><p>Windows系统和虚拟的Linux系统都会<u>各自占用一个ip地址</u>, 对于机器数量多的网段可能造成ip冲突</p></blockquote><h4 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h4><blockquote><p>网络地址转换方式, Windows系统中会存在两个ip,假设为<strong>ipA和ipB1</strong>. ipA用于访问外网, ipB1用于和Linux系统构成子网.</p><p><strong>Linux系统也有一个ipB2, 通过Windows的ipA代理进行访问网络</strong>.</p></blockquote><h4 id="主机模式"><a href="#主机模式" class="headerlink" title="主机模式"></a>主机模式</h4><blockquote><p>Linux系统是一台独立的主机, 不能访问外网</p></blockquote><h3 id="使用版"><a href="#使用版" class="headerlink" title="使用版"></a>使用版</h3><pre class="line-numbers language-bash"><code class="language-bash">ip addressvim /etc/sysconfig/network-scripts/ifcfg-ens32<span class="token comment" spellcheck="true">#######################ifcfg-ens32配置文件内容##########################</span>TYPE<span class="token operator">=</span><span class="token string">"Ethernet"</span>PROXY_METHOD<span class="token operator">=</span><span class="token string">"none"</span>BROWSER_ONLY<span class="token operator">=</span><span class="token string">"no"</span>BOOTPROTO<span class="token operator">=</span><span class="token string">"static"</span>DEFROUTE<span class="token operator">=</span><span class="token string">"yes"</span>IPV4_FAILURE_FATAL<span class="token operator">=</span><span class="token string">"no"</span>IPV6INIT<span class="token operator">=</span><span class="token string">"yes"</span>IPV6_AUTOCONF<span class="token operator">=</span><span class="token string">"yes"</span>IPV6_DEFROUTE<span class="token operator">=</span><span class="token string">"yes"</span>IPV6_FAILURE_FATAL<span class="token operator">=</span><span class="token string">"no"</span>IPV6_ADDR_GEN_MODE<span class="token operator">=</span><span class="token string">"stable-privacy"</span>NAME<span class="token operator">=</span><span class="token string">"ens32"</span>UUID<span class="token operator">=</span><span class="token string">"6a561314-2217-4210-9e51-025cb04b8478"</span>DEVICE<span class="token operator">=</span><span class="token string">"ens32"</span>ONBOOT<span class="token operator">=</span><span class="token string">"yes"</span>IPADDR<span class="token operator">=</span><span class="token string">"192.168.68.128"</span>NETMASK<span class="token operator">=</span><span class="token string">"255.255.255.0"</span>GATEWAY<span class="token operator">=</span><span class="token string">"192.168.68.2"</span>DNS1<span class="token operator">=</span><span class="token string">"8.8.8.8"</span><span class="token comment" spellcheck="true">######################################################################</span>systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><ol><li><p><code>ip address</code>: 查看网卡配置信息</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220816163843450.png" alt="image-20220816163843450"></p></li><li><p><code>vim /etc/sysconfig/network-scripts/ifcfg-ens32</code>: 修改网卡配置文件</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220816164313218.png" alt="image-20220816164313218" style="zoom:50%;"></li><li><p>配置VM虚拟机的网络设置</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220816164628054.png" alt="image-20220816164628054"></p></li><li><p><code>systemctl restart network</code>: 重启虚拟机的网络服务</p></li></ol><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><p>学习过程中需要不断地开放各种端口, 十分麻烦, 因此直接关闭防火墙</p><h3 id="使用版-1"><a href="#使用版-1" class="headerlink" title="使用版"></a>使用版</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注解版-1"><a href="#注解版-1" class="headerlink" title="注解版"></a>注解版</h3><ol><li><code>systemctl stop firewalld</code>: 关闭防火墙</li><li><code>systemctl disable firewalld.service</code>: 关闭防火墙开机自启动</li></ol><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h2><h3 id="使用版-2"><a href="#使用版-2" class="headerlink" title="使用版"></a>使用版</h3><pre class="line-numbers language-bash"><code class="language-bash">docker pull elasticsearch:7.12.1docker pull kibana:7.12.1docker run -d \    --name es \    -e <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> \    -v <span class="token string">"discovery.type=single-node"</span> \    --privileged \    --network es-net \    -p 9200:9200 \    -p 9300:9300 \elasticsearch:7.12.1docker run -d \    --name kibana \    -e ELASTICSEARCH_HOSTS<span class="token operator">=</span>http://es:9200 \    --network<span class="token operator">=</span>es-net \    -p 5601:5601 \kibana:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解版-2"><a href="#注解版-2" class="headerlink" title="注解版"></a>注解版</h3><ol><li><p><code>docker pull elasticsearch:7.12.1</code></p></li><li><p><code>docker pull kibana:7.12.1</code></p></li><li><p>启动elasticsearch</p><pre class="line-numbers language-sh"><code class="language-sh">docker run -d \    --name es \    -e "ES_JAVA_OPTS=-Xms512m -Xmx512m" \    -v "discovery.type=single-node" \    --privileged \    --network es-net \    -p 9200:9200 \    -p 9300:9300 \elasticsearch:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动kibana</p><pre class="line-numbers language-sh"><code class="language-sh">docker run -d \    --name kibana \    -e ELASTICSEARCH_HOSTS=http://es:9200 \    --network=es-net \    -p 5601:5601 \kibana:7.12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装ik分词器</p><ol><li><p>进入到容器内部<code>docker exec -it elasticsearch /bin/bash</code></p></li><li><p>在线下载并安装</p><pre class="line-numbers language-bash"><code class="language-bash">./bin/elasticsearch-plugin <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出<code>exit</code></p></li><li><p>重启容器<code>docker restart elasticsearch</code></p></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/z-za-xiang-maven/"/>
      <url>/2022/11/11/z-za-xiang-maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h1><h2 id="maven是什么"><a href="#maven是什么" class="headerlink" title="maven是什么"></a>maven是什么</h2><p>Maven本质是一个项目管理工具, 将项目开发和管理过程抽象成一个项目对象模型(Project Object Model, 即POM).</p><p>Maven工具本身的概念并不包括pom.xml和maven仓库.</p><h2 id="maven的作用"><a href="#maven的作用" class="headerlink" title="maven的作用"></a>maven的作用</h2><ul><li>项目构建: 提供标准的, 跨平台的自动化项目构建方式</li><li>依赖管理: 避免资源间的版本冲突问题</li><li>统一开发结构: 提供标准的, 统一的项目结构</li></ul><h2 id="Maven配置文件"><a href="#Maven配置文件" class="headerlink" title="Maven配置文件"></a>Maven配置文件</h2><p>配置文件==setting.xml==</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.2.0          https://maven.apache.org/xsd/settings-1.2.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置本地仓库--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:\MavenRepository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginGroups</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>proxies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置central仓库的镜像--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Maven插件与命令-手工方式"><a href="#Maven插件与命令-手工方式" class="headerlink" title="Maven插件与命令(手工方式)"></a>Maven插件与命令(手工方式)</h2><ul><li><code>maven compile</code>: 将项目编译, 放入到生成的==target文件夹==中</li><li><code>maven clean</code>: 清除之前生成的==target文件夹==</li><li><code>maven package</code>: 生成jar包或war包</li><li><code>maven install</code>: 将生成的jar包放入到本地仓库中, 根据定义的maven坐标决定存放的位置</li></ul><h1 id="IDEA生成Maven项目"><a href="#IDEA生成Maven项目" class="headerlink" title="IDEA生成Maven项目"></a>IDEA生成Maven项目</h1><h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>如果在同一个工程下, 模块之间相互引用, 只需要将</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>xSpringBoot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当作另一个项目的maven坐标使用即可</p><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><ul><li>路径优先: 引入的依赖越靠近当前项目优先级越高</li><li>声明优先</li></ul><h2 id="可选依赖-不透明"><a href="#可选依赖-不透明" class="headerlink" title="可选依赖(不透明)"></a>可选依赖(不透明)</h2><p>对外隐藏项目中使用了哪些依赖, 使用<code>&lt;options&gt;true&lt;/options&gt;</code>标识</p><h2 id="排除依赖-不需要"><a href="#排除依赖-不需要" class="headerlink" title="排除依赖(不需要)"></a>排除依赖(不需要)</h2><p>去除掉传递过来的依赖, 使用<code>&lt;exlusions&gt;&lt;/exclusion&gt;</code>标识</p><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>作用范围<code>&lt;scope&gt;</code></p><ul><li>主程序范围(main文件夹)</li><li>测试范围(test文件夹)</li><li>是否参与打包(maven packge指令范围)</li></ul><table><thead><tr><th>scope</th><th>主代码(main)</th><th>测试代码(test)</th><th>打包(maven package)</th></tr></thead><tbody><tr><td>compile(默认值)</td><td>y</td><td>y</td><td>y</td></tr><tr><td>test</td><td></td><td>y</td><td></td></tr><tr><td>provided</td><td>y</td><td>y</td><td></td></tr><tr><td>runtime</td><td></td><td></td><td>y</td></tr></tbody></table><p><u>用途</u></p><ul><li>test范围: 测试代码, 例如junit, 不会出现在主程序中, 也不需要打包</li><li>provided范围: 对于服务器本身已经存在的依赖, 这些依赖不能够打包, 否则和服务器提供的依赖之间产生依赖冲突并覆盖服务器提供的那个依赖.</li><li>runtime范围: 用于在配置文件中使用到, 但主代码和测试代码中均不会使用到的类. 例如数据库驱动等.</li></ul><h1 id="生命周期与插件"><a href="#生命周期与插件" class="headerlink" title="生命周期与插件"></a>生命周期与插件</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/z-za-xiang-bo-ke-next-zhu-ti-cai-keng-you-hua/"/>
      <url>/2022/11/11/z-za-xiang-bo-ke-next-zhu-ti-cai-keng-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Next主题踩坑优化"><a href="#Next主题踩坑优化" class="headerlink" title="Next主题踩坑优化"></a>Next主题踩坑优化</h1><p>对于Typora上编辑的markdown文档, 直接使用Next主题会有导致一些问题: </p><ul><li>Latex公式不能够正常显示</li><li>mermaid绘制的图形不能够正常显示</li><li>高亮效果不能够正常显示</li></ul><p><strong>术语</strong></p><ul><li>站点配置文件<em>config.yml</em></li><li>主题配置文件<em>themes/next/config.yml</em></li></ul><h2 id="Latex公式显示异常"><a href="#Latex公式显示异常" class="headerlink" title="Latex公式显示异常"></a>Latex公式显示异常</h2><ol><li><p>更换hexo默认的markdown渲染引擎</p><pre class="line-numbers language-shell"><code class="language-shell">npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hexo-renderer-kramed引擎解决了一些问题, 但是并没有完全解决</p></li><li><p>取消一些转义<br>对文件<code>node_modules\kramed\lib\rules\inline.js</code>进行修改</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//escape: /^\\([\\`*{}\[\]()#$+\-.!_>])/,</span>escape<span class="token punctuation">:</span> <span class="token regex">/^\\([`*\[\]()#$+\-.!_>])/</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//取消了对\,{,}的转义</span><span class="token comment" spellcheck="true">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span>em<span class="token punctuation">:</span> <span class="token regex">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><span class="token punctuation">,</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 Next 主题中开启 MathJax 开关<br>对主题配置文件<code>themes/next/config.yml</code>进行修改</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Math Equations Render Support</span><span class="token key atrule">math</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#由false改为true</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在文章的Front-matter里打开mathjax开关<br>使用hexo new命令生成的markdown文件的开头部分</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: index.htmldate: 2018-07-05 12:01:30tags:<span class="token title important">mathjax: true<span class="token punctuation">--</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="mermaid图形显示异常"><a href="#mermaid图形显示异常" class="headerlink" title="mermaid图形显示异常"></a>mermaid图形显示异常</h2><ol><li><p>添加对于mermaid的支持</p><pre class="line-numbers language-shell"><code class="language-shell">npm install --save hexo-filter-mermaid-diagrams<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在主题配置文件<code>/themes/next/_config.yml</code>中启用mermaid模块</p><pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token comment" spellcheck="true">#Mermaid tag</span><span class="token key atrule">mermaid</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># Available themes: default | dark | forest | neutral</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> forest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="高亮效果显示异常"><a href="#高亮效果显示异常" class="headerlink" title="高亮效果显示异常"></a>高亮效果显示异常</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux-01-ge-chong-an-zhuang-wen-ti/"/>
      <url>/2022/11/11/linux-01-ge-chong-an-zhuang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="默认约定"><a href="#默认约定" class="headerlink" title="默认约定"></a>默认约定</h1><p>在/opt目录下创建文件夹module.software文件夹</p><p>software文件夹用来存放所有的jar包</p><p>module文件夹用来存放解压后的文件</p><h1 id="设置Python的阿里云镜像"><a href="#设置Python的阿里云镜像" class="headerlink" title="设置Python的阿里云镜像"></a>设置Python的阿里云镜像</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul><li><p>windows系统在C:\Users\Administrator\下新建文件夹.pip，并新建pip.ini</p></li><li><p>在上述文件中添加或修改</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[global]</span><span class="token constant">index-url</span> <span class="token attr-value"><span class="token punctuation">=</span> https://mirrors.aliyun.com/pypi/simple/</span><span class="token selector">[install]</span><span class="token constant">trusted-host</span><span class="token attr-value"><span class="token punctuation">=</span>mirrors.aliyun.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><p>找到下列文件</p><pre class="line-numbers language-shell"><code class="language-shell">~/.pip/pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在上述文件中添加或修改</p><pre class="line-numbers language-conf"><code class="language-conf">[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="安装PHP语言环境"><a href="#安装PHP语言环境" class="headerlink" title="安装PHP语言环境"></a>安装PHP语言环境</h1><ol><li>执行如下命令，安装PHP环境。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>执行如下命令创建PHP测试页面。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>执行如下命令，重启Apache服务。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>打开浏览器，访问<code>http://&lt;ECS公网地址&gt;/phpinfo.php</code>，显示如下页面表示PHP语言环境安装成功。</li></ol><p><img src="https://img.alicdn.com/tfs/TB1oCVpaepyVu4jSZFhXXbBpVXa-601-840.png" alt="img"></p><h1 id="Wordpress安装和配置"><a href="#Wordpress安装和配置" class="headerlink" title="Wordpress安装和配置"></a>Wordpress安装和配置</h1><p>\1.  执行如下命令，安装wordpress。</p><pre><code>yum -y install wordpress</code></pre><p>显示如下信息表示安装成功。</p><p><img src="https://img.alicdn.com/tfs/TB1b02VHEz1gK0jSZLeXXb9kVXa-1042-156.png" alt="img"></p><p>\2.  修改WordPress配置文件。</p><p>1）执行如下命令，修改wp-config.php指向路径为绝对路径。</p><pre><code># 进入/usr/share/wordpress目录。cd /usr/share/wordpress# 修改路径。ln -snf /etc/wordpress/wp-config.php wp-config.php# 查看修改后的目录结构。ll</code></pre><p>2）执行如下命令，移动wordpress到Apache根目录。</p><pre><code># 在Apache的根目录/var/www/html下，创建一个wp-blog文件夹。mkdir /var/www/html/wp-blogmv * /var/www/html/wp-blog/</code></pre><p>3）执行以下命令修改wp-config.php配置文件。</p><p>在执行命令前，请先替换以下三个参数值。</p><ul><li>database_name_here为之前步骤中创建的数据库名称，本示例为wordpress。</li><li>username_here为数据库的用户名，本示例为root。</li><li>password_here为数据库的登录密码，本示例为NewPassWord1.。</li></ul><pre><code>sed -i &#39;s/database_name_here/wordpress/&#39; /var/www/html/wp-blog/wp-config.phpsed -i &#39;s/username_here/root/&#39; /var/www/html/wp-blog/wp-config.phpsed -i &#39;s/password_here/NewPassWord1./&#39; /var/www/html/wp-blog/wp-config.php</code></pre><p>4）执行以下命令，查看配置文件信息是否修改成功。</p><pre><code>cat -n /var/www/html/wp-blog/wp-config.php</code></pre><p><img src="https://img.alicdn.com/tfs/TB1j02VHEz1gK0jSZLeXXb9kVXa-913-631.png" alt="img"></p><p>\3.  执行如下命令，重启Apache服务。</p><pre><code>systemctl restart httpd</code></pre><h1 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h1><p>\1. 执行以下命令，安装MongoDB。</p><pre><code>yum -y install mongodb mongodb-server.x86_64 mariadb-devel.i686</code></pre><p>\2. 执行以下命令，启动MongoDB服务。</p><pre><code>systemctl start mongod</code></pre><p>\3. 执行以下命令，查看MongoDB运行状态。</p><pre><code>systemctl status mongod</code></pre><h1 id="JDK环境"><a href="#JDK环境" class="headerlink" title="JDK环境"></a>JDK环境</h1><ul><li><p>进入官网下载jdk(tar.gz)</p></li><li><p>使用xshell工具将压缩包上传到服务器的software目录下</p><pre class="line-numbers language-shell"><code class="language-shell">#解压到指定路径(/opt/module)tar -zvxf <压缩包> -C /opt/moudule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置环境变量</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile#在末尾添加上#JAVA_HOMEexport JAVA_HOME=/opt/module/jdk1.8.0_251export PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>刷新环境变量设置</p><pre class="line-numbers language-shell"><code class="language-shell">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="配置HADOOP"><a href="#配置HADOOP" class="headerlink" title="配置HADOOP"></a>配置HADOOP</h1><ul><li><p>基本操作同 Java</p></li><li><p>配置环境变量</p><pre class="line-numbers language-shell"><code class="language-shell">#HADOOP_HOMEexport HADOOP_HOME=/opt/module/hadoop-3.2.1export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">cd /opt/module/hadoop-3.2.1vim etc/hadoop/hadoop-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编辑配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#添加</span>JAVA_HOME<span class="token operator">=</span>/opt/module/jdk1.8.0_251<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux-00-chang-yong-linux-ming-ling/"/>
      <url>/2022/11/11/linux-00-chang-yong-linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1. 帮助命令"></a>1. 帮助命令</h1><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td><code>man</code></td><td>求助</td><td>man [命令]</td></tr><tr><td><code>info</code></td><td>求助</td><td>info [命令]</td></tr><tr><td><code>help</code></td><td>求助</td><td>[命令] –help</td></tr></tbody></table><h2 id="1-1-man-命令"><a href="#1-1-man-命令" class="headerlink" title="1.1 man 命令"></a>1.1 man 命令</h2><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td><code>空格</code></td><td>向下翻页</td></tr><tr><td><code>pagedown</code>也就是<code>fn</code>+$\downarrow$</td><td>向下翻页</td></tr><tr><td><code>pageup</code></td><td>向上翻页</td></tr><tr><td><code>/string</code></td><td>向下查找string这个字符串</td></tr><tr><td><code>?string</code></td><td>向上查找string这个字符串</td></tr><tr><td><code>n</code>,<code>N</code></td><td>n表示继续, N表示反向</td></tr><tr><td><code>q</code></td><td>结束这次的man page</td></tr></tbody></table><h2 id="1-2-info-命令"><a href="#1-2-info-命令" class="headerlink" title="1.2 info 命令"></a>1.2 info 命令</h2><table><thead><tr><th>按键</th><th>功能</th><th>解释</th></tr></thead><tbody><tr><td><code>空格</code></td><td>向下翻页</td><td></td></tr><tr><td><code>pagedown</code></td><td>向下翻页</td><td></td></tr><tr><td><code>pageup</code></td><td>向上翻页</td><td></td></tr><tr><td><code>tab</code></td><td>在节点之间移动, 有节点的地方, 通常以<code>*</code>显示</td><td></td></tr><tr><td><code>enter</code></td><td>当光标在节点上时, 按下可以进入节点</td><td></td></tr><tr><td><code>b</code></td><td>移动到第一个节点处</td><td>begin</td></tr><tr><td><code>e</code></td><td>移动到最后一个节点处</td><td>end</td></tr><tr><td><code>n</code></td><td>前往下一个节点处</td><td>next</td></tr><tr><td><code>p</code></td><td>前往上一个节点处</td><td>previous</td></tr><tr><td><code>u</code></td><td>向上移动一层</td><td></td></tr><tr><td><code>s(/)</code></td><td>在info page当中进行查找</td><td>search</td></tr><tr><td><code>h</code>,<code>?</code></td><td>显示帮助选项</td><td>help</td></tr><tr><td><code>q</code></td><td>结束这次的info page</td><td>quit</td></tr></tbody></table><h1 id="2-文件目录类命令"><a href="#2-文件目录类命令" class="headerlink" title="2. 文件目录类命令"></a>2. 文件目录类命令</h1><h2 id="2-1-浏览目录命令"><a href="#2-1-浏览目录命令" class="headerlink" title="2.1 浏览目录命令"></a>2.1 浏览目录命令</h2><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>ls</code></td><td>显示目录或文件</td><td>`ls [-a</td><td>-l</td></tr><tr><td><code>pwd</code></td><td>显示当前工作目录</td><td></td><td>print working directory</td></tr></tbody></table><h3 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h3><table><thead><tr><th>选项</th><th>含义</th><th>对应单词</th></tr></thead><tbody><tr><td><code>-a</code></td><td>显示所有文件, 包括隐藏文件</td><td>all</td></tr><tr><td><code>-l</code></td><td>详细信息显示</td><td>long</td></tr><tr><td><code>-d</code></td><td>查看目录属性</td><td>directory</td></tr><tr><td><code>-h</code></td><td>以K、M、G等更友好的方式显示文件大小</td><td>human</td></tr><tr><td><code>-i</code></td><td>查看id</td><td>id</td></tr></tbody></table><table><thead><tr><th align="center">列数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">文件类型与文件权限</td></tr><tr><td align="center">2</td><td align="center">有多少文件名链接到此节点(inode)</td></tr><tr><td align="center">3</td><td align="center">文件拥有者账号</td></tr><tr><td align="center">4</td><td align="center">文件所属的用户组</td></tr><tr><td align="center">5</td><td align="center">文件的容量大小(Byte)</td></tr><tr><td align="center">6</td><td align="center">文件的创建日期或最近的修改日期</td></tr><tr><td align="center">7</td><td align="center">文件名</td></tr></tbody></table><h3 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h3><table><thead><tr><th>options</th><th>含义</th><th>对应单词</th></tr></thead><tbody><tr><td><code>P</code></td><td>显示真正的路径, 而非链接路径</td><td>Physical</td></tr><tr><td><code>L</code>默认</td><td>显示链接路径</td><td>Logical</td></tr></tbody></table><blockquote><p>已知:  /lib链接的目录就是/usr/lib</p></blockquote><ul><li><p>进入<code>/lib</code>目录</p></li><li><p>进入<code>/usr/lib</code>目录</p></li></ul><h2 id="2-2-目录操作命令"><a href="#2-2-目录操作命令" class="headerlink" title="2.2 目录操作命令"></a>2.2 目录操作命令</h2><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>cd</code></td><td>进入到某个目录</td><td>cd [目录名]</td><td>change directory</td></tr><tr><td><code>mkdir</code></td><td>创建目录</td><td>mkdir -p [目录名]</td><td>make directory</td></tr><tr><td><code>rmdir</code></td><td>删除一个空目录</td><td>rmdir [目录名]</td><td>remove directory</td></tr></tbody></table><h2 id="2-3-浏览文件命令"><a href="#2-3-浏览文件命令" class="headerlink" title="2.3 浏览文件命令"></a>2.3 浏览文件命令</h2><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>cat</code></td><td>连接文件并打印到标准输出设备上</td><td><em>可以同时显示多个文件</em></td><td>concatenate and display files</td></tr><tr><td><code>more</code></td><td>分页显示文件内容</td><td></td><td></td></tr><tr><td><code>less</code></td><td>查看长文件的信息<br>在more的基础上可以向上翻页</td><td></td><td></td></tr><tr><td><code>head</code></td><td>显示文件的前面几行</td><td>head -n 20 [文件名]</td><td></td></tr><tr><td><code>tail</code></td><td>显示文件的末尾几行</td><td></td><td></td></tr></tbody></table><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-E</code></td><td>在每一行的末尾显示<code>$</code>字符</td></tr><tr><td><code>-n</code></td><td>显示行号</td></tr></tbody></table><h3 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h3><table><thead><tr><th>操作</th><th>含义</th></tr></thead><tbody><tr><td><code>空格</code>或<code>f</code></td><td>显示下一页</td></tr><tr><td><code>回车</code></td><td>显示下一行</td></tr><tr><td><code>q</code></td><td>退出</td></tr><tr><td><code>上下键</code></td><td>向上或向下移动文件</td></tr></tbody></table><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-n</code></td><td>显示后n行, 默认为10行</td></tr><tr><td><code>+n</code></td><td>从第n行显示到文件尾</td></tr><tr><td><code>-F</code></td><td>通常用于显示日志文件, 用于跟踪显示不断增长的文件结尾内容</td></tr></tbody></table><h2 id="2-4-文件操作命令"><a href="#2-4-文件操作命令" class="headerlink" title="2.4 文件操作命令"></a>2.4 文件操作命令</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th><th align="center">语法</th><th>对应单词</th></tr></thead><tbody><tr><td align="center"><code>cp</code></td><td align="center">复制文件或目录</td><td align="center">cp -rp [源文件] [目标文件]</td><td>copy</td></tr><tr><td align="center"><code>rm</code></td><td align="center">删除文件或目录</td><td align="center">rm -rf [文件名]</td><td>remove</td></tr><tr><td align="center"><code>mv</code></td><td align="center">剪切文件 和 重命名</td><td align="center"></td><td></td></tr><tr><td align="center"><code>touch</code></td><td align="center">新建文件</td><td align="center"></td><td></td></tr><tr><td align="center"><code>ln</code></td><td align="center">生成链接文件<br>软链接即为快捷方式, <br>硬链接修改一处会自动更新另外一份文件</td><td align="center">ln -s [源文件] [目标文件]</td><td></td></tr><tr><td align="center"><code>find</code></td><td align="center">用来寻找文件或目录</td><td align="center"></td><td></td></tr><tr><td align="center"><code>grep</code></td><td align="center">在文件中搜索匹配的字符并进行输出</td><td align="center">grep [待查找字串] [源文件]</td><td>globally search a regular expression and print</td></tr><tr><td align="center"><code>tar</code></td><td align="center">压缩或解压缩文件</td><td align="center"></td><td>tape archive</td></tr></tbody></table><h3 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-p</code></td><td><em>连同文件的属性一起复制</em>, 而非使用默认方式, 常用于备份</td></tr><tr><td><code>-i</code></td><td>若目标文件已经存在时, 在覆盖时会先询问操作的进行</td></tr><tr><td><code>-r</code></td><td>递归持续复制, <em>用于目录的复制行为</em></td></tr><tr><td><code>-u</code></td><td>目标文件与源文件<em>有差异时才会复制</em></td></tr></tbody></table><h3 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-f</code></td><td>忽略不存在的文件, 不会出现警告消息</td></tr><tr><td><code>-i</code></td><td>互动模式, 在删除前会询问用户是否操作</td></tr><tr><td><code>-r</code></td><td>递归删除, 用于目录删除</td></tr></tbody></table><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-name</code></td><td>按文件名查找文件</td></tr><tr><td><code>-size [+-]</code></td><td>按文件大小查找文件</td></tr><tr><td><code>-type [fbcdlsp]</code></td><td>按文件类型查找文件</td></tr><tr><td><code>-perm</code></td><td>按文件权限查找文件</td></tr></tbody></table><h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>将二进制文件按文本文件的方式查找数据</td></tr><tr><td><code>-c</code></td><td>字符串的出现次数</td></tr><tr><td><code>-i</code></td><td>忽略大小写</td></tr><tr><td><code>-v</code></td><td>反向选择, 即选择<em>不包含该字符串</em>的内容</td></tr></tbody></table><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-c</code></td><td>新建打包文件</td></tr><tr><td><code>-t</code></td><td>查看打包文件的内容含有哪些文件</td></tr><tr><td><code>-x</code></td><td>解压缩功能</td></tr><tr><td><code>-C</code></td><td>指定压缩或解压缩的目录</td></tr><tr><td><code>-j</code></td><td>通过bzip2的支持进行压缩或解压缩</td></tr><tr><td><code>-z</code></td><td>通过gzip的支持进行压缩或解压缩</td></tr><tr><td><code>-v</code></td><td>在压缩/解压缩的过程中, 将正在处理的文件名显示出来</td></tr><tr><td><code>-f</code></td><td>指明需要处理的文件名</td></tr></tbody></table><p><code>-cvf</code>压缩或<code>-xvf</code>解压缩</p><h1 id="3-进程控制类命令"><a href="#3-进程控制类命令" class="headerlink" title="3. 进程控制类命令"></a>3. 进程控制类命令</h1><h3 id="3-1-查看进程"><a href="#3-1-查看进程" class="headerlink" title="3.1 查看进程"></a>3.1 查看进程</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td><code>ps</code></td><td>显示在用户输入ps命令时系统的进程及其信息</td><td>ps [-lujfaxr]</td></tr><tr><td><code>top</code></td><td>动态监视系统任务的工具, 输出结果是连续的</td><td>top [options]</td></tr></tbody></table><h4 id="ps命令选项"><a href="#ps命令选项" class="headerlink" title="ps命令选项"></a>ps命令选项</h4><table><thead><tr><th>选项</th><th>含义</th><th>对应单词</th></tr></thead><tbody><tr><td><code>-l</code></td><td>长格式输出</td><td>long</td></tr><tr><td><code>-u</code></td><td>按用户名和启动时间的顺序来显示进程</td><td></td></tr><tr><td><code>-j</code></td><td>用任务格式来显示进程</td><td></td></tr><tr><td><code>-f</code></td><td>用树形格式来显示进程</td><td></td></tr><tr><td><code>-a</code></td><td>显示所有用户的所有进程</td><td>all</td></tr><tr><td><code>-x</code></td><td>显示无控制终端的进程</td><td></td></tr><tr><td><code>-r</code></td><td>显示运行中的进程</td><td>run</td></tr></tbody></table><p>查找指定用户<code>pp</code>的进程</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> pp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>字段名</th><th>含义</th><th>解释</th></tr></thead><tbody><tr><td><code>UID</code></td><td></td><td></td></tr><tr><td><code>PID</code></td><td></td><td></td></tr><tr><td><code>PPID</code></td><td></td><td></td></tr><tr><td><code>PGID</code></td><td></td><td></td></tr><tr><td><code>C</code></td><td></td><td></td></tr><tr><td><code>SID</code></td><td></td><td></td></tr><tr><td><code>PRI</code></td><td></td><td></td></tr><tr><td><code>TTY</code></td><td></td><td></td></tr><tr><td><code>STAT</code></td><td></td><td></td></tr><tr><td><code>TIME COMMAND</code></td><td></td><td></td></tr><tr><td><code>TIME CMD</code></td><td></td><td></td></tr></tbody></table><h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-b</code></td><td>以批量模式运行, 但不能接受命令行输入</td></tr><tr><td><code>-c</code></td><td>显示命令行, 而不仅仅是命令名</td></tr><tr><td><code>-d &lt;seconds&gt;</code></td><td>显示两次刷新时间的间隔，单位是秒s</td></tr><tr><td><code>-i</code></td><td>禁止显示空闲进程或僵尸进程</td></tr><tr><td><code>-n &lt;N&gt;</code></td><td>显示更新次数，然后退出。<br>比如 <code>top -n 5</code>， 表示top更新5次数据就退出</td></tr><tr><td><code>-p &lt;PID&gt;</code></td><td>只监视指定PID的进程</td></tr><tr><td><code>-q</code></td><td>不经过任何延时就刷新</td></tr><tr><td><code>-s</code></td><td>安全模式运行</td></tr><tr><td><code>-S</code></td><td>累积模式, 输出每个进程的总的CPU时间</td></tr></tbody></table><h3 id="3-2-杀死进程"><a href="#3-2-杀死进程" class="headerlink" title="3.2 杀死进程"></a>3.2 杀死进程</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td>kill</td><td>结束指定PID的进程</td><td></td></tr><tr><td>killall</td><td>结束指定进程名的进程, 相当于ps, grep和kill的结合使用</td><td></td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># awk '{print $2}' 用来获取打印出来的进程号</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> redis <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">kill</span> -9 <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-3-进程后台运行"><a href="#3-3-进程后台运行" class="headerlink" title="3.3 进程后台运行"></a>3.3 进程后台运行</h3><h3 id="3-4-进程的挂起和恢复"><a href="#3-4-进程的挂起和恢复" class="headerlink" title="3.4 进程的挂起和恢复"></a>3.4 进程的挂起和恢复</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td>kill</td><td>结束指定PID的进程</td><td></td></tr><tr><td>killall</td><td>结束指定进程名的进程, 相当于ps, grep和kill的结合使用</td><td></td></tr><tr><td>nice</td><td></td><td></td></tr><tr><td>renice</td><td></td><td></td></tr></tbody></table><h1 id="4-权限管理命令"><a href="#4-权限管理命令" class="headerlink" title="4. 权限管理命令"></a>4. 权限管理命令</h1><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>chmod</code></td><td>修改文件的权限</td><td></td><td></td></tr><tr><td><code>chown</code></td><td>修改文件拥有者和所属组</td><td>chown -R [owner]:[group] [文件名或目录名]</td><td>change owner</td></tr><tr><td><code>chgrp</code></td><td>修改文件所属用户组</td><td></td><td>change group</td></tr></tbody></table><p>执行<code>chown -R root:root root.txt</code>命令</p><blockquote><p>-R 递归修改    改变根目录的同时，将该目录下的所有子文件修改成同样的权限</p></blockquote><h1 id="5-防火墙相关命令"><a href="#5-防火墙相关命令" class="headerlink" title="5. 防火墙相关命令"></a>5. 防火墙相关命令</h1><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>systemctl start firewalld</td><td>启动</td></tr><tr><td>systemctl stop firewalld</td><td>关闭</td></tr><tr><td>systemctl status firewalld</td><td>查看状态</td></tr><tr><td>systemctl disable firewalld</td><td>开机禁用</td></tr><tr><td>systemctl enable firewalld</td><td>开机启用</td></tr><tr><td>firewall-cmd –list-ports</td><td>查看开放的端口</td></tr><tr><td>firewall-cmd –add-port=8080/tcp –permanent</td><td>添加端口8080<br>—permanent永久生效，没有此参数重启后失效</td></tr></tbody></table><h1 id="6-实用组合命令"><a href="#6-实用组合命令" class="headerlink" title="6. 实用组合命令"></a>6. 实用组合命令</h1><h2 id="6-1-管道和-xargs-命令"><a href="#6-1-管道和-xargs-命令" class="headerlink" title="6.1 管道和 xargs 命令"></a>6.1 管道和 xargs 命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># xargs -I {} 的作用是指定"{}"作为占位符</span><span class="token comment" spellcheck="true"># cp命令就可以使用"{}"来获取管道传过来的参数</span><span class="token function">ls</span> /opt/module/test01 <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">cp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> /opt/module/test02<span class="token comment" spellcheck="true"># 分别查看xargs -n 1和xargs -n 2的效果</span><span class="token comment" spellcheck="true"># 其中hello.txt文件的内容为hello world</span><span class="token function">cat</span> /opt/module/test01/hello.txt <span class="token operator">|</span> <span class="token function">xargs</span> -n 2 <span class="token keyword">echo</span><span class="token function">cat</span> /opt/module/test01/hello.txt <span class="token operator">|</span> <span class="token function">xargs</span> -n 2 <span class="token keyword">echo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-配置环境的常用命令"><a href="#7-配置环境的常用命令" class="headerlink" title="7. 配置环境的常用命令"></a>7. 配置环境的常用命令</h1><h2 id="7-1-解压缩命令"><a href="#7-1-解压缩命令" class="headerlink" title="7.1 解压缩命令"></a>7.1 解压缩命令</h2><pre class="line-numbers language-sh"><code class="language-sh">#解压到指定目录下(/opt/module)tar -zvxf <压缩包> -C <输出目录><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-2-批量解压缩命令"><a href="#7-2-批量解压缩命令" class="headerlink" title="7.2 批量解压缩命令"></a>7.2 批量解压缩命令</h2><pre class="line-numbers language-sh"><code class="language-sh">ls *.tar.gz | xargs -I {} tar -zxvf {} -C <输出目录><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-3-配置环境变量"><a href="#7-3-配置环境变量" class="headerlink" title="7.3 配置环境变量"></a>7.3 配置环境变量</h2><pre class="line-numbers language-sh"><code class="language-sh"># 配置环境变量vim /etc/profile# 刷新环境变量设置source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件内容"><a href="#文件内容" class="headerlink" title="文件内容"></a>文件内容</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 追加内容</span><span class="token comment" spellcheck="true"># [JAVA]</span><span class="token attr-name">export</span> <span class="token attr-value">JAVA_HOME=/opt/module/jdk1.8.0_341</span><span class="token attr-name">export</span> <span class="token attr-value">JRE_HOME=$JAVA_HOME/jre</span><span class="token attr-name">export</span> <span class="token attr-value">CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$JAVA_HOME/bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 追加内容</span><span class="token comment" spellcheck="true"># [HADOOP]</span><span class="token attr-name">HADOOP_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/opt/modules/hadoop-3.3.3</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HADOOP_HOME/bin</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HADOOP_HOME/sbin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-4-配置ssh-免密登录"><a href="#7-4-配置ssh-免密登录" class="headerlink" title="7.4 配置ssh 免密登录"></a>7.4 配置ssh 免密登录</h2><pre class="line-numbers language-sh"><code class="language-sh"># 生成密钥对ssh-keygen -t rsa# 复制公钥给允许免密登录的主机ssh-copy-id root@hadoop001ssh-copy-id root@hadoop002ssh-copy-id root@hadoop003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-5-在集群主机上执行相同的命令"><a href="#7-5-在集群主机上执行相同的命令" class="headerlink" title="7.5 在集群主机上执行相同的命令"></a>7.5 在集群主机上执行相同的命令</h2><p>创建一个 <code>xcall</code> 文件，放到 <code>/usr/bin</code> 下，并添加执行权限</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashfor host in hadoop003 hadoop002 hadoop001; do  echo "==================================$host=================================="  ssh $host "$*"done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux-02-mu-lu-quan-xian-he-wen-jian-quan-xian/"/>
      <url>/2022/11/11/linux-02-mu-lu-quan-xian-he-wen-jian-quan-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><table><thead><tr><th align="center">特征</th><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>d</code></td><td align="center">目录</td><td align="center"><code>directory</code></td></tr><tr><td align="center"><code>-</code></td><td align="center">二进制文件</td><td align="center"></td></tr><tr><td align="center"><code>l</code></td><td align="center">软链接文件</td><td align="center"><code>link</code></td></tr><tr><td align="center"><code>.</code></td><td align="center">隐藏文件</td><td align="center"></td></tr><tr><td align="center"><code>b</code></td><td align="center">设备文件里面的可供存储的周边设备(可按块随机读取的设备)</td><td align="center"></td></tr><tr><td align="center"><code>c</code></td><td align="center">设备文件里面的串行端口设备, 例如鼠标, 键盘(一次性读取设备)</td><td align="center"></td></tr></tbody></table><h2 id="文件权限和目录权限"><a href="#文件权限和目录权限" class="headerlink" title="文件权限和目录权限"></a>文件权限和目录权限</h2><table><thead><tr><th align="left">权限</th><th>文件</th><th align="left">目录</th></tr></thead><tbody><tr><td align="left"><code>r</code></td><td>读取文件内容<br><em>文件最基础的权限</em></td><td align="left">查看目录中文件名, 即可以使用<code>ls</code>命令<br>tab补全功能的支持</td></tr><tr><td align="left"><code>w</code></td><td>更改文件内容</td><td align="left">对目录中的文件进行增删改操作, 即<code>touch, mkdir, rm, mv</code>等命令</td></tr><tr><td align="left"><code>x</code></td><td>决定文件是否可以执行<br>但可执行与执行成功与否是两码事</td><td align="left">是否可以进入该目录, 使之成为当前工作目录的用途, 即可以使用<code>cd</code>命令<br>目录最基础的权限</td></tr></tbody></table><table><thead><tr><th>权限</th><th>文件</th><th>目录</th></tr></thead><tbody><tr><td><code>r--</code></td><td></td><td>可以查询该目录下的文件名列表, 但是不能够进入到该目录</td></tr><tr><td><code>-w-</code></td><td></td><td></td></tr><tr><td><code>--x</code></td><td></td><td></td></tr><tr><td><code>rw-</code></td><td></td><td></td></tr><tr><td><code>r-x</code></td><td></td><td></td></tr><tr><td><code>-wx</code></td><td></td><td></td></tr><tr><td><code>rwx</code></td><td></td><td></td></tr><tr><td><code>---</code></td><td></td><td></td></tr></tbody></table><p><strong>注意事项</strong></p><ul><li>rwx权限对于文件和目录的区别: 能否删除一个文件，关键在于对于这个文件所属的目录是否有写的权限</li><li>无论文件的权限是什么, root用户都可以进行读写和执行</li><li>ugo: u拥有者(user), g组员(group), o其它人(other)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/spring-cuo-wu-jie-jue-fang-an/"/>
      <url>/2022/11/11/spring-cuo-wu-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat问题解决汇总-centos7"><a href="#Tomcat问题解决汇总-centos7" class="headerlink" title="Tomcat问题解决汇总(centos7)"></a>Tomcat问题解决汇总(centos7)</h1><table><thead><tr><th>出现的问题</th><th>解决方案</th><th>链接</th></tr></thead><tbody><tr><td>使用yum安装tomcat</td><td>1.官网找到安装包的超链接, 右键选择复制链接地址<br>2.在centos中使用wget命令, 例如wget 链接地址<br>3.在/usr/share中可以找到应用程序, 解压安装</td><td></td></tr><tr><td>如何启动tomcat</td><td>1.进入到tomcat程序的bin目录<br>2.使用./startup.sh启动tomcat服务</td><td></td></tr><tr><td>./startup.sh出现权限不够</td><td>在bin目录下执行chmod u+x *.sh命令</td><td>1. chmod是权限管理命令change the permissions mode of a file的缩写<br>2. u代表所有者，x代表执行权限。 + 表示增加权限。<br>3. chmod u+x file.sh 就表示对当前目录下的file.sh文件的所有者增加可执行权限</td></tr><tr><td>配置两台tomcat服务器, 并修改端口为8080和8081</td><td>1.进入到tomcat的配置文件server.xml<br>2.将port=8080的改为8081, 并将另外两处port的端口号进行修改(这里可以不是8081)<br>3.配置防火墙开放端口,或者关闭防火墙systemctl stop firewalld</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="Spring-错误解决方案"><a href="#Spring-错误解决方案" class="headerlink" title="Spring 错误解决方案"></a>Spring 错误解决方案</h1><p>Failed to load ApplicationContext</p><ul><li>BeanDefinitionOverrideException: Invaild bean definition with name ‘xxx’ defined in class path resource [yyy]</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/01mybatis-ji-chu/"/>
      <url>/2022/11/11/01mybatis-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis基础"><a href="#Mybatis基础" class="headerlink" title="Mybatis基础"></a>Mybatis基础</h1><p><strong>SQL Maps</strong>：数据库对象和Java对象之间的映射</p><p>Mybatis封装JDBC的过程</p><p>ORM（Object Relation Mapping）：实体关系映射，Java对象和SQL对象之间的映射。</p><p>Mybatis中有两个配置文件：</p><ul><li><strong>核心配置文件</strong><code>mybatis-config.xml</code>主要用于连接数据库的环境和Mybatis的全局配置信息</li><li><strong>映射配置文件</strong>专门编写SQL语句, 同时使用id标识java中的方法, 用resultType表示sql返回对象对应java中的类型</li></ul><p>框架的本质：jar包+配置文件</p><p><strong>mapper接口</strong>：仅仅作为接口，而不需要提供实现类</p><p>按照mybatis中的方法去调用mapper接口，就会自动去执行对应的SQL语句，不需要实现类</p><ol><li>配置UserMapper.xml的namespace：实现UserMapper接口到UserMapper.xml文件的映射</li><li>UserMapper接口中的方法和UserMapper.xml中SQL语句的id标签相对应</li></ol><p>sqlSession：java程序和数据库之间的会话，相当于一个事务，在执行完sql语句之后需要提交事务sqlSession.commit</p><p>httpSession：java程序和http页面之间的会话</p><p>配置文件之后都会交给SpringBoot进行管理</p><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><p>使用日志文件来监测sql执行的情况</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--添加依赖--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Mybatis获取值"><a href="#Mybatis获取值" class="headerlink" title="Mybatis获取值"></a>Mybatis获取值</h2><p><code>${}</code>和<code>#{}</code>对应MyBatis的两种赋值方式，</p><ul><li>前者表示拼接，不会自动添加单引号</li><li>后者表示占位符, 会自动添加单引号</li></ul><p>一般来说，可以使用#{}的情况下就不要使用${}，因为${}有sql注入的风险，但有时候可能必须得使用${}方式进行字符串拼接</p><p>模糊查询中不能使用#{}, 因为使用?进行占位符的表示, 但是由于模糊查询需要使用单引号’’将?包围, 因此?会被解释成一个字符, 而不是占位符, 可以使用双引号”%”#{}”%”来处理模糊查询</p><p>批量删除的时候只能使用${}而不能使用#{}</p><h3 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h3><p>实际上{}里面的变量名根本不重要, 可以取任意名字, 不一定要和传入的参数保持一致, 但那样肯定是不规范的</p><p>${}本质上是字符串的拼接, 在sql语句中在拼接字符串需要使用单引号<code>&#39;&#39;</code>, 因此一般使用<code>&#39;${}&#39;</code></p><h3 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h3><p>多个参数会存储成一个map, 传入的参数作为map的值, 并且有一些固定名称的键名, arg0, arg1, arg2, …, 需要通过键去获取到map中的值</p><p>#{arg0}, #{arg1}</p><h3 id="传入map"><a href="#传入map" class="headerlink" title="传入map"></a>传入map</h3><p>键名可以自定义, 名称不再固定为arg0和arg1</p><h3 id="传入对象"><a href="#传入对象" class="headerlink" title="传入对象"></a>传入对象</h3><p>可以直接使用对象中的属性名作为变量, 但需要注意的是这里的属性只表示提供了get()和set()方法的那些属性</p><h3 id="使用-Param注解"><a href="#使用-Param注解" class="headerlink" title="使用@Param注解"></a>使用@Param注解</h3><p>在Mapper接口的方法中, 对传入的形参添加@Param(‘xxx’)注解. 可以使用@Param注解的值作为键, 也可以使用param1, param2, …等作为键</p><p>可以分为两类, 除实体类对象之外, 其他都可以使用@Param注解方式</p><p><strong>查询对象的返回值可能有多条, 因此对Mapper接口的定义最好统一定义成返回值为List</strong></p><p>可能查询结果只有某几个属性, 或者由多张表的属性构成, 此时不能找到一个Mapper接口和结果直接对应, 需要返回一个map, 其中键为属性名, 值为属性值. 如果有多条返回数据, 则对应一个map集合, 实际上map集合就是json对象, 二者在逻辑上都属于关系模型</p><p>如果使用<strong>@MapKey()</strong>注解, 相当于Map&lt;key , Map&lt;String, Object&gt;&gt;, 强行添加了一个key构成map</p><p>使用useGeneratedKey=”true”表示使用自动递增的主键, 使用keyProperty=”id”表示递增的为属性列id</p><p>mybatis-config.xml中可以通过setting标签设置全局懒加载策略, 如果对于某个具体的属性想要设置立即加载, 可以在mapper映射表中添加fetchType=”eager”进行调整</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/01-spring-jian-jie/"/>
      <url>/2022/11/11/01-spring-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><h2 id="Spring核心"><a href="#Spring核心" class="headerlink" title="Spring核心"></a>Spring核心</h2><p><u>IOC容器</u>: 控制反转, 把创建对象的过程交给Spring进行管理</p><p><u>AOP切面编程</u>: 面向切面, 不修改源代码进行功能增强</p><h2 id="Spring特点"><a href="#Spring特点" class="headerlink" title="Spring特点"></a>Spring特点</h2><ul><li>方便解耦, 简化开发</li><li>Aop编程支持</li><li>方便程序测试</li><li>方便和其他框架进行整合</li><li>方便进行事务操作</li><li>降低API开发难度</li></ul><h1 id="工厂模式解耦合过程"><a href="#工厂模式解耦合过程" class="headerlink" title="工厂模式解耦合过程"></a>工厂模式解耦合过程</h1><p>将代码中的耦合进行解耦, 放入到配置文件中. 当需要新增UserService的实现类时, 不需要对原有代码进行修改, 修改配置文件即可. 实现从改代码到改配置的解耦合.</p><p>Spring框架相当于提供了一个工厂ApplicationContext和一个配置文件applicationContext.xml</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 耦合: 从测试代码(应用程序代码) -> 工厂方法中的代码</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserService <span class="token function">getUserServiceV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 反射: 从工厂方法 -> 字符串硬编码</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserService <span class="token function">getUserServiceV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.example.spring.service.UserServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 字符串硬编码 -> 配置文件</span>    <span class="token comment" spellcheck="true">// 使用工具类从配置文件中获取信息</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserService <span class="token function">getUserServiceV3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"G:/spring/src/main/resources/application.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String serviceImplName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"serviceImplName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>serviceImplName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将properties设置为静态变量, 只需要加载配置文件一次</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 加载方式一</span>            <span class="token comment" spellcheck="true">// properties.load(new BufferedReader(new InputStreamReader(new FileInputStream("G:/spring/src/main/resources/application.properties"))));</span>            <span class="token comment" spellcheck="true">// 加载方式二</span>            <span class="token comment" spellcheck="true">// 1. 为什么XBeanFactory.class不能替换为Object.class?</span>            <span class="token comment" spellcheck="true">// 2. 为什么要使用/application.properties而不能使用application.properties</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>XBeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/application.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserService <span class="token function">getUserServiceV4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String serviceImplName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"serviceImplName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>serviceImplName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对配置参数进行解耦合</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserService <span class="token function">getUserServiceV5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String serviceImplName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>UserServiceConstant<span class="token punctuation">.</span>userServiceImplName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>serviceImplName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 每个getXXX的结构都是相同的, 所以为每一个对象都创建一个工厂是没有意义的, 会出现大量的冗余代码, 例如Properties.load(...)等</span>    <span class="token comment" spellcheck="true">// 因此需要通用工厂, 提供一个方法, 创建想要的不同类型的对象</span>    <span class="token comment" spellcheck="true">// 设计通用方法需要考虑方法声明的5个要素:</span>    <span class="token comment" spellcheck="true">// 1. 修饰符 public static</span>    <span class="token comment" spellcheck="true">// 2. 返回值类型 UserDao</span>    <span class="token comment" spellcheck="true">// 3. 方法名 getUserDao</span>    <span class="token comment" spellcheck="true">// 4. 参数列表 ()</span>    <span class="token comment" spellcheck="true">// 5. 可选项: 异常</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> UserDao <span class="token function">getUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String daoImplName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"daoImplName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>daoImplName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通用方法的设计</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String value <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 提供泛型, 减少每次调用都要手动进行强转</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token function">getBean</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里不使用new UserServiceImpl()的方式来获取UserService对象, 而是使用工厂模式来创建对象</span>        UserService userService <span class="token operator">=</span> XBeanFactory<span class="token punctuation">.</span><span class="token function">getUserServiceV4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>JavaEE分层开发中，Service层对应用户的需求，因此是最重要最核心的部分。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/02-ioc-rong-qi/"/>
      <url>/2022/11/11/02-ioc-rong-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><p>xml解析</p><p>反射</p><p>工厂模式</p><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><ol><li>配置xml文件, 配置需要创建的bean对象</li><li>IOC容器通过xml解析获取属性值, 通过反射创建对象</li></ol><h2 id="IOC容器的两种接口"><a href="#IOC容器的两种接口" class="headerlink" title="IOC容器的两种接口"></a>IOC容器的两种接口</h2><ul><li><p><u>BeanFactory</u>: 底层实现, 懒汉式创建对象</p></li><li><p><u>ApplicationContext</u>: BeanFactory的子接口, 饿汉式创建对象</p><p>两种主要的实现方式: FileSystemXmlApplicationContext和ClassPathXmlApplicationContext</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220805104603127.png" alt="image-20220805104603127"></p></li></ul><h2 id="Bean管理"><a href="#Bean管理" class="headerlink" title="Bean管理"></a>Bean管理</h2><ul><li>创建对象</li><li>注入属性</li></ul><p>推荐方式: 通过空参构造和set()赋值来创建对象</p><p>可以通过p名称空间来简化set注入方式</p><h3 id="Bean类型"><a href="#Bean类型" class="headerlink" title="Bean类型"></a>Bean类型</h3><ul><li><p>普通Bean: 定义的class即为返回值类型</p></li><li><p>工厂Bean: 创建工厂类, 并实现FactoryBean接口, 在其中定义返回的Bean类型</p></li></ul><h3 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h3><p>默认是单例模式</p><p>Spring</p><ul><li>单例模式: 加载配置文件时创建对象, 饿汉式</li><li>原型模式: getBean()的时候创建对象. 也没有办法用懒汉式, 一开始也不知道要创建多少个.</li></ul><h3 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h3><ol><li><p>无参构造</p></li><li><p>set方法赋值</p></li><li><p>后置处理器的postProcessBeforeInitialization方法</p><blockquote><p>后置处理器为实现了BeanPostProcessor接口的类. </p><p>注意事项: </p><ul><li>需要注入到IOC容器中才能生效</li><li>对所有的Bean对象都会生效</li></ul></blockquote></li><li><p>bean对象的初始化方法(xml中配置init-method参数)</p></li><li><p>后置处理器的postProcessAfterInitialization方法</p></li><li><p>获取并使用bean</p></li><li><p>当容器关闭时, 销毁bean对象(xml中配置destroy-method参数)</p></li></ol><h3 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h3><p>xml方式: 方便理解底层逻辑</p><p>注解方式: 快捷开发</p><ul><li><code>@Autowired</code>: byType方式</li><li><code>@Qualifier</code>: byName方式</li><li><code>@Resource</code>: 默认使用byType方式, <strong>指定name属性</strong>后变为使用byName方式</li><li><code>@Value</code>: 基本数据类型</li></ul><p>通过属性注入的相关注解和自动装配的相关注解, 可以完全替代xml文件中的bean标签. 而添加主启动类[^1]可以开启注解支持, 组件扫描, 引入其他文件和配置类等.</p><h2 id="xml中读取数据文件"><a href="#xml中读取数据文件" class="headerlink" title="xml中读取数据文件"></a>xml中读取数据文件</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入外部文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:dataSource.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>[^1]:主启动类本身就是一个配置类, 配置类=配置文件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/spring-yuan-ma-jie-xi-03-aop-mian-xiang-qie-mian-bian-cheng/"/>
      <url>/2022/11/11/spring-yuan-ma-jie-xi-03-aop-mian-xiang-qie-mian-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h1><h2 id="底层原理-动态代理"><a href="#底层原理-动态代理" class="headerlink" title="底层原理: 动态代理"></a>底层原理: 动态代理</h2><p>动态代理的核心思想: 借助父类或接口的多态性特点, 在形式上, 通过调用原来存在的父类或接口中的方法, 而实际执行的是子类或实现类的代理类中的增强方法</p><h3 id="JDK动态代理-针对接口"><a href="#JDK动态代理-针对接口" class="headerlink" title="JDK动态代理(针对接口)"></a>JDK动态代理(针对接口)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxyMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Proxy.newProxyInstance()即为动态字节码技术，直接写入到JVM中，而不需要类加载器来加载字节码文件</span>        <span class="token comment" spellcheck="true">// 之所以这里仍然需要传入一个类加载器，是因为需要类加载器用于创建Class对象，任意一个类加载器即可</span>        <span class="token comment" spellcheck="true">// 而.class字节码会由JVM自动分配类加载器，但是动态代理则需要手动提供一个类加载器</span>        UserService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// proxy: 代表Proxy.newProxyInstance()所创建的代理对象，基本上不使用</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JDKProxy做一些事情"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CGLIB动态代理-针对类"><a href="#CGLIB动态代理-针对类" class="headerlink" title="CGLIB动态代理(针对类)"></a>CGLIB动态代理(针对类)</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserServiceImpl userServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置类加载器</span>        enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置原始类（假设其没有实现接口）</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置方法增强（额外功能）</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cglib输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserServiceImpl userServiceImplProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserServiceImpl<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceImplProxy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"987654"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h1><h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h2><ul><li><code>execution(&lt;权限修饰符和返回类型&gt; &lt;全类名&gt;.&lt;方法名称&gt;(&lt;参数列表&gt;))</code></li><li><code>@annotation(&lt;注解的全类名&gt;)</code></li></ul><blockquote><p>  注意第一个 <code>*</code> 同时表示权限修饰符和返回值类型没有要求</p><p>  参数列表中使用 <code>..</code> 来表示对参数没要求，而不是继续使用通配符 <code>*</code>。<br>  如果对参数有要求，只需要设置参数类型即可，例如 <code>(String, int)</code> 或 <code>(String, ..)</code>。自定义的类型需要使用全限定名</p><p>  <strong>全类名中使用 <code>..</code> 来表示一级子包或多级子包</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> dao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例1：方法切入点"><a href="#案例1：方法切入点" class="headerlink" title="案例1：方法切入点"></a>案例1：方法切入点</h3><blockquote><p>对<code>com.atguigu.dao.UserDao</code>类里面的<code>add()</code>进行增强</p><p><strong>切入点表达式:</strong> <code>execution(* com.atguigu.dao.UserDao.add(..))</code></p><p><code>*</code>表示任意, 可以是任意修饰符, 任意返回类型, 任意类名, 任意方法…</p></blockquote><h3 id="案例2：类切入点"><a href="#案例2：类切入点" class="headerlink" title="案例2：类切入点"></a>案例2：类切入点</h3><blockquote><p>对<code>com.atguigu.dao.UserDao</code>类里面的所有方法进行增强</p><p><strong>切入点表达式:</strong> <code>execution(* com.atguigu.dao.UserDao.*(..))</code></p></blockquote><h3 id="案例3：包切入点"><a href="#案例3：包切入点" class="headerlink" title="案例3：包切入点"></a>案例3：包切入点</h3><blockquote><p>对<code>com.atguigu.dao</code>包里面的所有类, 类中的所有方法进行增强</p><p><strong>切入点表达式:</strong> <code>execution(* com.atguigu.dao.*.*(..))</code></p></blockquote><h2 id="重用切入点-优化"><a href="#重用切入点-优化" class="headerlink" title="重用切入点(优化)"></a>重用切入点(优化)</h2><ol><li>新建方法, 使用<code>@Pointcut</code>来抽取出公共的切入点</li><li>在通知中为<code>value</code>属性赋值上面的方法即可提取该方法中的切入点表达式</li></ol><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//用来保存切入点表达式的函数</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* dao.UserDaoImpl.add())"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过方法名提取切入点b     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before()前置增强执行中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="切入点案例演示"><a href="#切入点案例演示" class="headerlink" title="切入点案例演示"></a>切入点案例演示</h1><h2 id="案例一：方法表达式"><a href="#案例一：方法表达式" class="headerlink" title="案例一：方法表达式"></a>案例一：方法表达式</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>AspectJExpressionPointcut<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPointCutV1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建一种切入点</span>        AspectJExpressionPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 设置要匹配的切入点表达式</span>        pointcut<span class="token punctuation">.</span><span class="token function">setExpression</span><span class="token punctuation">(</span><span class="token string">"execution(* hello())"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 准备测试方法</span>        Method helloMethod <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method hiMethod <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 用切入点表达式去匹配方法</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> pointcut<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>helloMethod<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> pointcut<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>hiMethod<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 查看匹配结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例二：注解表达式"><a href="#案例二：注解表达式" class="headerlink" title="案例二：注解表达式"></a>案例二：注解表达式</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>AspectJExpressionPointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPointCutV2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Transactional</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 创建一种切入点</span>        AspectJExpressionPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 设置要匹配的切入点表达式</span>        pointcut<span class="token punctuation">.</span><span class="token function">setExpression</span><span class="token punctuation">(</span><span class="token string">"@annotation(org.springframework.transaction.annotation.Transactional)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 准备测试方法</span>        Method helloMethod <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method hiMethod <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 用切入点表达式去匹配方法</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> pointcut<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>helloMethod<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> pointcut<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>hiMethod<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 查看匹配结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例三：自定义匹配规则"><a href="#案例三：自定义匹配规则" class="headerlink" title="案例三：自定义匹配规则"></a>案例三：自定义匹配规则</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>StaticMethodMatcherPointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MergedAnnotations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPointCutV3</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Data</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 自定义匹配规则</span>        <span class="token comment" spellcheck="true">// 对于一个特定的注解就需要一个实现类</span>        StaticMethodMatcherPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticMethodMatcherPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取方法上的注解</span>                MergedAnnotations annotations <span class="token operator">=</span> MergedAnnotations<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1.1 判断方法上是否有@Transactional注解</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>Transactional<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//1.2 判断类上是否有@Transactional注解</span>                <span class="token comment" spellcheck="true">//MergedAnnotations.SearchStrategy.TYPE_HIERARCHY是搜索继承树上的类和接口是否含有@Transactional注解</span>                annotations <span class="token operator">=</span> MergedAnnotations<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> MergedAnnotations<span class="token punctuation">.</span>SearchStrategy<span class="token punctuation">.</span>TYPE_HIERARCHY<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>Transactional<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 准备测试方法</span>        Method helloMethod <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method hiMethod <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 用切入点表达式去匹配方法</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> pointcut<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>helloMethod<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> pointcut<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>hiMethod<span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 查看匹配结果</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="切面案例演示"><a href="#切面案例演示" class="headerlink" title="切面案例演示"></a>切面案例演示</h1><h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Around<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>AspectJExpressionPointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultPointcutAdvisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConfigurationClassPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>GenericApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 由@Aspect注解标注(高级切面) */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspectV1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * Advisor低级切面         *         * @param advice         * @return         */</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Advisor <span class="token function">advisor</span><span class="token punctuation">(</span>MethodInterceptor advice<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AspectJExpressionPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pointcut<span class="token punctuation">.</span><span class="token function">setExpression</span><span class="token punctuation">(</span><span class="token string">"execution(* hello(..))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过切入点和增强来创建切面</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> MethodInterceptor <span class="token function">advice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invocation <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"########before##########"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"########after##########"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* hello(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">helloPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个增强会对应一个低级切面Advisor(InstantiationModelAwarePointcutAdvisor)     *     * @param joinPoint     * @return     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原始方法之前执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around: 功能执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//原始方法之后执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around: 功能执行之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个增强对生成一个低级切面(InstantiationModelAwarePointcutAdvisor)     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原始方法之前执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before: 功能执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        GenericApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"aspect"</span><span class="token punctuation">,</span> MyAspectV1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> Config<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//识别@Configuration注解</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//识别@Aspect高级切面相关的注解, 两个连接点: 依赖注入之前或者初始化之后</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射去调用protect方法</span>        AnnotationAwareAspectJAutoProxyCreator creator <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> creator<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"findCandidateAdvisors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>creator<span class="token punctuation">)</span><span class="token punctuation">;</span>        advisors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Around<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Pointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>AspectJExpressionPointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>autoproxy<span class="token punctuation">.</span>AbstractAutoProxyCreator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultPointcutAdvisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ConfigurationClassPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>GenericApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 由@Aspect注解标注(高级切面) */</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspectV2</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * Advisor低级切面         *         * @param advice         * @return         */</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Advisor <span class="token function">advisor</span><span class="token punctuation">(</span>MethodInterceptor advice<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AspectJExpressionPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pointcut<span class="token punctuation">.</span><span class="token function">setExpression</span><span class="token punctuation">(</span><span class="token string">"execution(* hello(..))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过切入点和增强来创建切面</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">,</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> MethodInterceptor <span class="token function">advice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invocation <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"########before##########"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"########after##########"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hi, world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* hello(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">helloPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个增强会对应一个低级切面Advisor(InstantiationModelAwarePointcutAdvisor)     *     * @param joinPoint     * @return     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原始方法之前执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around: 功能执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//原始方法之后执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"around: 功能执行之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每个增强对生成一个低级切面(InstantiationModelAwarePointcutAdvisor)     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 原始方法之前执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before: 功能执行之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        GenericApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"aspect"</span><span class="token punctuation">,</span> MyAspectV2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">,</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> Config<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//识别@Configuration注解</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//识别@Aspect高级切面相关的注解, 两个连接点: 依赖注入之前或者初始化之后</span>        applicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射去调用protect方法</span>        AnnotationAwareAspectJAutoProxyCreator creator <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> AbstractAutoProxyCreator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"wrapIfNecessary"</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o1 <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>creator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyAspectV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"aspect-02"</span><span class="token punctuation">,</span> <span class="token string">"aspect-02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>creator<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"person-02"</span><span class="token punctuation">,</span> <span class="token string">"person-02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1.getClass() = "</span> <span class="token operator">+</span> o1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不匹配切入点, 因此不会生成代理类</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o2.getClass() = "</span> <span class="token operator">+</span> o2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//匹配切入点,生成代理类</span>        Person person <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o2<span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用增强方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例三：高级切面如何被解析成为低级切面"><a href="#案例三：高级切面如何被解析成为低级切面" class="headerlink" title="案例三：高级切面如何被解析成为低级切面"></a>案例三：高级切面如何被解析成为低级切面</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>Advisor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>AspectJExpressionPointcut<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>AspectJMethodBeforeAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>SingletonAspectInstanceFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultPointcutAdvisor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspectV3</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* hello())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"helloPointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Before: 方法执行前增强"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SingletonAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAspectV3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> beforeAdvisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> MyAspectV3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Before<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解析@Before注解</span>                Before annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Before<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String expression <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                AspectJExpressionPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pointcut<span class="token punctuation">.</span><span class="token function">setExpression</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 增强</span>                AspectJMethodBeforeAdvice advice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectJMethodBeforeAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> pointcut<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 切面类</span>                DefaultPointcutAdvisor advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span>advice<span class="token punctuation">)</span><span class="token punctuation">;</span>                beforeAdvisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>After<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解析@After注解</span>                <span class="token comment" spellcheck="true">// TODO</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Around<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解析@Around注解</span>                <span class="token comment" spellcheck="true">// TODO</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        beforeAdvisors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="案例四：通知都会被转换为环绕通知（适配器模式-调用链模式）"><a href="#案例四：通知都会被转换为环绕通知（适配器模式-调用链模式）" class="headerlink" title="案例四：通知都会被转换为环绕通知（适配器模式+调用链模式）"></a>案例四：通知都会被转换为环绕通知（适配器模式+调用链模式）</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/spring-pei-zhi-wen-jian/"/>
      <url>/2022/11/11/spring-pei-zhi-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h1><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--xmlns="http://www.springframework.org/schema/beans"根据该值修改--></span>&lt;beans xmlns="http://www.springframework.org/schema/beans"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:p="http://www.springframework.org/schema/p"       xsi:schemaLocation=               "http://www.springframework.org/schema/beans                http://www.springframework.org/schema/beans/spring-beans.xsd                http://www.springframework.org/schema/context                http://www.springframework.org/schema/beans/spring-context.xsd                http://www.springframework.org/schema/aop                http://www.springframework.org/schema/beans/spring-aop.xsd">    <span class="token comment" spellcheck="true">&lt;!--开启注解的支持--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--开启注解的扫描 todo:指定扫描的包名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--扫描@Aspect注解, 如果有该注解将该类设置为代理类, 生成的对象即为代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--下面是通过配置文件方式实现AOP操作--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoProxy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.UserDaoProxy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置aop配置增强--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--切入点表达式--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* dao.UserDaoImpl.add(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置切面: 指定哪个代理类对哪个方法进行增强--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userDaoProxy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--增强作用在哪个具体的方法上--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>before<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>after<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>around<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="log4j配置文件"><a href="#log4j配置文件" class="headerlink" title="log4j配置文件"></a>log4j配置文件</h2><p>resources目录下创建log4j.properties</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">info,stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apche.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d{yyyy-MM--dd HH:mm:ss,SSS}%5p --[%50t] %-80c(line:%5L) : %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/qian-duan-ji-chu/"/>
      <url>/2022/11/11/qian-duan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><code>input</code>输入框</p><ul><li>type属性: 文本框, 单选框, 复选框, 下拉列表, 提交按钮, 重置按钮</li></ul><p>get请求和post请求</p><p>get请求会将数据添加到url中, 明文数据不安全</p><p>post请求一般用于表单数据提交</p><p>当属性名和属性值相同时, 可以省略属性值</p><p><code>&lt;input name&gt;&lt;/input&gt;</code>和<code>&lt;input name = &quot;name&quot;&gt;&lt;/input&gt;</code>的含义相同</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>标签名<code>p</code></li><li>类样式<code>.</code>–&gt;class属性</li><li>id样式<code>#</code>–&gt;id属性</li></ul><p>style属性: 嵌入式样式表, 一般都是设置为外部样式表</p><p>引入外部样式表<code>&lt;link ref = &quot;stylesheet&quot; href=&quot;css/demo.css&quot;&gt;</code></p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="JavaScript的变量类型"><a href="#JavaScript的变量类型" class="headerlink" title="JavaScript的变量类型"></a>JavaScript的变量类型</h3><ol><li>数值类型: number</li><li>字符串类型: string</li><li>对象类型: object</li><li>布尔类型:  boolean</li><li>函数类型: function</li></ol><h3 id="JavaScript里面特殊的值"><a href="#JavaScript里面特殊的值" class="headerlink" title="JavaScript里面特殊的值"></a>JavaScript里面特殊的值</h3><ol><li>undefined: 所有js变量未赋予初始值的时候</li><li>null: 空值</li><li>NAN: 非数字, 非数值</li></ol><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ol><li>===全等于: 会判断数据类型</li><li>==等于</li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>&amp;&amp;: 返回第一个为假的值或最后一个为真的值</li></ol><p>JavaWeb</p><ol><li><p>标签</p><ol><li><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> : 超链接 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> target="_blank"表示在新窗口打开,target="_self"表示覆盖当前页面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span> : 图片 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://...<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片资源不可显示<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> alt="图片资源找不可显示" : 表示当图片资源找不到的时候用来代替的文本内容 相对路径和绝对路径 JavaSE中,         相对路径表示中工程名开始算,     绝对路径:盘符:/目录/文件名 web中,     相对路径:         .            表示当前文件所在的目录         ..            表示当前文件所在的上一级目录         文件名          表示当前文件所在目录的文件,相当于./文件名     绝对路径:                               http://ip:port/工程名/资源路径         错误格式:    盘符:/目录/文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!--标签 : 表格--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>1-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>2-3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-html"><code class="language-html"> div : 默认独占一行 span : 数据长度 p : 段落标签,前后各空一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>CSS选择器</p><ol><li><p>标签名选择器<br> 作用 : 可以决定哪些标签被动的使用样式,不同的标签使用不同的样式</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">格式: 标签名</span><span class="token punctuation">{</span>     属性<span class="token punctuation">:</span> 值<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector">div</span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid yellow<span class="token punctuation">;</span>     <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>id选择器</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token id">#id</span>属性值</span><span class="token punctuation">{</span>     属性<span class="token punctuation">:</span> 值<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token id">#007</span></span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>     <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px yellow<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>class选择器(类选择器)</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token class">.class</span>属性值</span><span class="token punctuation">{</span>     属性<span class="token punctuation">:</span> 值<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>组合选择器 (n选1)</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">格式:  选择器1,选择器2,<span class="token class">...</span>,选择器n</span><span class="token punctuation">{</span>     属性<span class="token punctuation">:</span> 值<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.class01</span>,<span class="token id">#id001</span></span><span class="token punctuation">{</span>     <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>     <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span> 选择class=<span class="token string">"class001"</span>或者id=<span class="token string">"id001"</span>的对象,进行设置样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>js中的事件</p><pre class="line-numbers language-js"><code class="language-js"> onload     加载完成事件            页面加载完成之后<span class="token punctuation">,</span>常用于做页面js代码初始化操作 onclick 单击事件             常用于按钮的点击响应操作 onblur     失去焦点事件            常用于输入框失去焦点后验证其输入内容是否合法 onchange    内容发生改变事件    常用于下拉列表和输入框内容发生改变后的操作 onsubmit    表单提交事件        常用于表单提交前验证所有表单项是否合法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 事件的注册(绑定)</p><ol><li><p>静态注册</p><pre class="line-numbers language-css"><code class="language-css"> 通过html标签的事件属性直接赋予事件响应后的代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>动态注册</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">是指先通过js代码得到标签的dom对象,然后再通过dom对象.事件名=function</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">这种形式赋予事件响应后的代码 动态注册的步骤: 1<span class="token class">.window.onload</span> = function()</span><span class="token punctuation">{</span>     <span class="token selector">2.获取标签对象 var Obj = document<span class="token class">.getElementById</span>("");     3.标签对象.事件名=function()</span><span class="token punctuation">{</span>         待执行代码         return flase<span class="token punctuation">;</span>//阻止事件进一步执行         return true<span class="token punctuation">;</span>//事件正常执行     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onload事件</p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector">静态注册function onloadFunc()</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"静态注册onload事件,将所有需要执行的操作写入函数,通过调用函数的方式来避免body标签很臃肿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">&lt;body onload="onloadFunc"> 动态注册window<span class="token class">.onload</span> = function()</span><span class="token punctuation">{</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册onload事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onclick事件</p><pre class="line-numbers language-js"><code class="language-js">动态注册<span class="token operator">&lt;</span>script<span class="token operator">></span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//document是js语言提供的一个对象(表示整个文档)</span> <span class="token keyword">var</span> btnObj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btnObj<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"动态注册的onclick事件"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>onblur事件</p><pre class="line-numbers language-javascript"><code class="language-javascript">静态注册<span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">function</span> <span class="token function">onblurFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"静态注册失去焦点事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span> 用户名<span class="token punctuation">:</span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span> 密码  <span class="token punctuation">:</span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"password"</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><pre><code>动态注册&lt;script&gt;    window.onload = function(){    var passwordObj = document.getElementById(&quot;password&quot;);    passwordObj.onblur = function(){        console.log(&quot;动态注册失去焦点事件&quot;);           }}    function onblurFunc(){    console.log(&quot;静态注册失去焦点事件&quot;)}&lt;/script&gt;&lt;body&gt;    用户名:&lt;input type=&quot;text&quot;&gt;&lt;br/&gt;    密码  :&lt;input id=&quot;password&quot; type=&quot;text&quot;&gt;&lt;br/&gt;&lt;/body&gt;```onchange事件```html静态注册&lt;script&gt;    function onchangeFunc(){    alert(&quot;女神已经改变了&quot;);    }&lt;/script&gt;&lt;select onchange=&quot;onchangeFunc();&quot;&gt;    &lt;option&gt;--女神--&lt;/option&gt;    &lt;option&gt;--芳芳--&lt;/option&gt;    &lt;option&gt;--佳佳--&lt;/option&gt;&lt;/select&gt;动态注册&lt;script&gt;    window.onload = function(){        var selObj = document.getElementById(&quot;sel001&quot;)        selObj.onchange = function(){            alert(&quot;女神已经发生改变&quot;);        }    }&lt;/script&gt;&lt;select id=&quot;sel001&quot;&gt;    &lt;option&gt;--女神--&lt;/option&gt;    &lt;option&gt;--芳芳--&lt;/option&gt;    &lt;option&gt;--佳佳--&lt;/option&gt;&lt;/select&gt;```onsubmit事件(表单提交事件)```html```</code></pre><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><ol><li><p>$的功能</p><pre class="line-numbers language-jquery"><code class="language-jquery"> 1. 当传入的参数为[函数]时,表示在文档加载完成后执行这个函数 $(function()){     alert("页面加载完成之后,自动调用"); } 2. 当传入的参数为[HTML字符串]时,根据这个字符串查找元素结点对象 $("<div>"+         "<span>div-span1</span>"+         "<span>div-span2</span>"+   "</div>").appendTo("body");   在body的下面创建div,再在div下面创建两个span 3.当传入的参数为[选择器字符串]时 $("#id属性值");        id选择器,根据id查询标签对象 $("标签名");            标签名选择器,根据指定的标签名查询标签对象 $(".class属性值");        类选择器,可以根据class属性查询标签对象 4. 当传入的参数为[DOM对象]时,将DOM对象包装为jQuery对象返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>选择器</p><ol><li><p>基本选择器</p><ol><li>$(“#id”)</li><li>$(“element”)</li><li>$(“.class”)</li><li>$(“*”)</li></ol></li><li><p>层级选择器</p><ol><li>$(“from input”)        :    找到from标签的子孙标签里面的input标签</li><li>$(“from &gt; input”)     :     找from标签的直接子标签input</li></ol></li><li><p>过滤选择器</p><ol><li><p>基本过滤选择器</p><ul><li>:first        $(“li:first”)   选择第一个li标签</li><li>:last</li><li>:not(selector)</li><li>:even                   $(“tr:even”) 选择偶数行的tr标签</li><li>:odd                    $(“tr:even”) 选择奇数行的tr标签</li><li>:eq(index)           $(“tr:eq(1)”) 选择第2行(索引值为1)的tr标签</li><li>:gt(index)            $(“tr:gt(0)”) 选择索引值大于0的tr标签</li><li>:It(index)             $(“tr:lt(0)”) 选择索引值小于0的tr标签</li><li>:header</li><li>:animated           选择正在执行动画效果的xx标签</li><li>:focus</li></ul></li><li><p>内容过滤选择器</p><ul><li><p>:contains()            $(“xxx:contains(‘yyy’)”) 查找所有包含yyy文本内容的xxx标签元素</p></li><li><p>:empty                   $(“td:empty”)查找所有不包含子元素或者文本的td元素</p></li><li><p>:parent                   非空</p></li><li><p>has(selector)        selector表示一个选择器</p><ol><li><p>匹配含有p元素的div元素</p><p> $(“div:has(p)”)</p></li><li><p>并为其添加一个test类<br> $(“div:has(p)”).addClass(“test”)</p></li></ol></li></ul></li><li><p>属性过滤选择器</p><ul><li>[attribute]</li><li>[attribute=value]       $(“input[name=’newsletter’]”)查找name属性值为newsletter的input标签                                                                                                                                            </li><li>[attribute != value]</li><li>[attribute ^= string]            $(“input[name^=’news’]”)查找name属性值以news开头的input标签</li><li>[attribute $= string]            $(“input[name$=’news’]”)查找name属性值以news结尾的input标签               </li><li>[][][selector1] [selector2]         需要同时满足多个条件</li></ul></li><li><p>表单过滤选择器</p><ul><li>:btn                                    $(“:btn”)匹配type为btn的所有元素, 和内容过滤选择器有点不同,”:”号前面不需要加标签类型</li><li>:file</li><li>​                                     </li></ul></li><li><p>过滤选择器</p></li></ol></li></ol></li></ol><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><p>请求行General</p><p>请求头Request Headers: 客户端告诉服务器</p><p>请求体Payload/Form Data, 因为Content-Type不同</p><p>get方式没有请求体, 但是有一个queryString, 添加在url后面</p><p>post方式是Form Data</p><p>json格式是Request Payload</p><h3 id="会话Session"><a href="#会话Session" class="headerlink" title="会话Session"></a>会话Session</h3><p>Http无状态: 服务器无法判断两次请求是否是同一个客户端发送过来的</p><p>通过会话跟踪技术来解决http无状态的问题</p><p>使用setAttribute来保存数据到session作用域中, 可能需要执行重定向或内部转发的操作, 此时再从中作用域中将数据提取出来. 在某个页面中加载java内存中的数据称为<strong>页面的渲染</strong>. thymeleaf就是用来实现页面渲染的技术</p><h3 id="服务器内部转发和客户端重定向"><a href="#服务器内部转发和客户端重定向" class="headerlink" title="服务器内部转发和客户端重定向"></a>服务器内部转发和客户端重定向</h3><p>服务器内部转发: 服务器去联系服务器内的另一个Servlet, 然后另一个Servlet把数据返回给客户端, 此时客户端的url并不会发生变化</p><pre class="line-numbers language-java"><code class="language-java">        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"xxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端重定向: 服务器直接返回客户端新的Servlet地址, 然后客户端再次请求新的Servlet</p><pre class="line-numbers language-java"><code class="language-java">        response<span class="token punctuation">.</span><span class="token function">sendRediret</span><span class="token punctuation">(</span><span class="token string">"xxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/03-shi-wu/"/>
      <url>/2022/11/11/03-shi-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>在使用java执行sql语句的时候, 每次在连接关闭的时候都会执行事务的提交, 因此对于同一个事务中的多个操作, 需要将其放到同一个连接当中</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">transactionTestv2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> JDBCUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        取消自动提交</span>        connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance - 100 where user = ?"</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql1 <span class="token operator">=</span> <span class="token string">"update user_table set balance = balance + 100 where user = ?"</span><span class="token punctuation">;</span>        PreparedStatement preparedStatement1 <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement1<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement1<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        preparedStatement1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>脏读:</strong> 读取未提交的数据, 不可接受</p><p><strong>不可重复读:</strong> 两次读取数据的值不同, 因为其它事务对其值进行了<strong>更新操作</strong>, 可接受状态, Oracle默认(读已提交数据)</p><p><strong>幻读:</strong> 两次读取的数据返回结果不一致, 因为其它事务进行了<strong>插入或删除操作</strong>, 可接受状态, MySQL默认(可重复读数据)</p><h2 id="实现事务的方法"><a href="#实现事务的方法" class="headerlink" title="实现事务的方法"></a>实现事务的方法</h2><ol><li>在一个连接里面执行事务</li><li>关闭自动提交</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/09-fan-xing/"/>
      <url>/2022/11/11/09-fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ul><li>泛型类</li><li>泛型接口</li><li>泛型方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Order是泛型类 */</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 此时SubOrder01不是泛型类, 因为指明了Integer */</span><span class="token keyword">class</span> <span class="token class-name">SubOrder01</span> <span class="token keyword">extends</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * SubOrder02是泛型类 */</span><span class="token keyword">class</span> <span class="token class-name">SubOrder02</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Order</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/07-chang-yong-lei/"/>
      <url>/2022/11/11/07-chang-yong-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h1><p>字符串常量池存放在方法区中. String类追根溯源最后都会变成对字符串常量池中字符串的引用.</p><p>String类是不可变的(final).</p><p>只有当两个数据均处于字符串常量池中时, 使用<code>+</code>连接操作得到的结果才位于字符串常量池, 否则会在堆空间中new新的对象.</p><p>Comparable表示自然排序, 例如第三方库中的类不方便修改其底层源代码, 但是那些类又没有实现Comparable接口, 而Comparator表示定制排序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用lambda表达式实现Comparator接口, 更容易理解</span>        Comparator<span class="token operator">&lt;</span>Person<span class="token operator">></span> comparator <span class="token operator">=</span>                <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age <span class="token operator">==</span> p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"xiong"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"260424xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"260424xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"260424xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayList: "</span> <span class="token operator">+</span> arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码和解码</p><p>格式化和解析</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/10-mei-ju-lei-yu-zhu-jie/"/>
      <url>/2022/11/11/10-mei-ju-lei-yu-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h2><p>类的对象只有<u>有限个, 确定的</u>. 例如:</p><ul><li><u>星期:</u> 一, 二, 三, 四, 五, 六, 日</li><li><u>性别:</u> 男, 女</li></ul><p><strong>当需要定义一组常量时, 强烈建议使用枚举类</strong></p><p>如果枚举类中只有一个常量, 则可以作为单例模式的一种实现方式</p><h2 id="定义枚举类"><a href="#定义枚举类" class="headerlink" title="定义枚举类"></a>定义枚举类</h2><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><p>在Java5.0之前, 需要自定义枚举类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    提供枚举类的私有属性</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    私有化构造器</span>    <span class="token keyword">private</span> <span class="token function">Season</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span> String seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    提供静态的枚举类对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">,</span> <span class="token string">"热"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">,</span> <span class="token string">"爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="enum定义枚举类"><a href="#enum定义枚举类" class="headerlink" title="enum定义枚举类"></a>enum定义枚举类</h3><p>在Java5.0之后, 提供了<code>enum</code>关键字. 使用enum关键字定义枚举类时, 默认继承Enum类.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> Period <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    枚举类中需要首先声明定义的常量(类中可选项)</span>    <span class="token comment" spellcheck="true">//    常量之间用逗号隔开, 最后一个使用分号</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">,</span> <span class="token string">"热"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">,</span> <span class="token string">"爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Period</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span> String seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举类实现接口"><a href="#枚举类实现接口" class="headerlink" title="枚举类实现接口"></a>枚举类实现接口</h2><p>可以在枚举类中实现接口方法, 达到统一一致的目的</p><p>也可以在枚举类对象中分别实现接口方法, 达到个性化定制的目的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">publicShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用enum关键字定义枚举类, 默认继承Enum类</span><span class="token keyword">enum</span> Period <span class="token keyword">implements</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    枚举类中需要首先声明定义的常量(类中可选项)</span>    <span class="token comment" spellcheck="true">//    常量之间用逗号隔开, 最后一个使用分号</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">,</span> <span class="token string">"热"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">,</span> <span class="token string">"爽"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Period</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span> String seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publicShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个万物复苏的季节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p> 注解, 即元数据(Metadata)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/12-fan-she/"/>
      <url>/2022/11/11/12-fan-she/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是动态语言的关键, 允许程序在<strong>执行期间</strong>获取<strong>任何类</strong>的内部信息, 并直接操作<strong>任意对象</strong>的内部属性和方法</p><p>加载完某个类后, 在<strong>堆内存的方法区</strong>中产生了一个<code>Class</code>类型的对象—每个类对应一个且只有唯一一个Class对象. 这个对象包含类的完整的结构信息</p><h2 id="Java反射机制提供的功能"><a href="#Java反射机制提供的功能" class="headerlink" title="Java反射机制提供的功能"></a>Java反射机制提供的功能</h2><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成<strong>动态代理</strong></li></ul><h2 id="反射相关主要API"><a href="#反射相关主要API" class="headerlink" title="反射相关主要API"></a>反射相关主要API</h2><ul><li><code>java.lang.Class</code>: 含义是<strong>类的抽象</strong>, 不妨称为<strong>通用类</strong>, 所有的类都是该类的对象, 有些存储<strong>元数据</strong>的感觉</li><li><code>java.lang.reflect.Method</code>: 类的方法</li><li><code>java.lang.reflect.Field</code>: 类的成员变量</li><li><code>java.lang.reflect.Constructor</code>: 类的构造器</li></ul><h2 id="java-lang-Class类的理解"><a href="#java-lang-Class类的理解" class="headerlink" title="java.lang.Class类的理解"></a><code>java.lang.Class</code>类的理解</h2><ol><li>程序经过<code>javac.exe</code>命令编译后, 会生成多个字节码文件<code>.class</code></li><li>当使用<code>java.exe</code>执行字节码文件时, 加载到内存中的类便称为运行时类, 此运行时类就是<code>Class</code>类的一个对象</li></ol><p><strong>注意:</strong> <code>Class</code>类的对象不是<code>new</code>出来的, 而是运行时类便对应<code>Class</code>类的一个对象</p><h2 id="获取运行时类的对象的方法"><a href="#获取运行时类的对象的方法" class="headerlink" title="获取运行时类的对象的方法"></a>获取运行时类的对象的方法</h2><p>加载到内存中的运行时类会缓存一定的时间, 在这段时间内获取到的都是同一个运行时类的对象</p><p>最常使用的是第三种方式, 因为将类作为参数传入, 没有写死代码, 更加灵活</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//      获取运行时类的方法一: 通过类名.class直接获取</span>        Class<span class="token operator">&lt;</span>Person<span class="token operator">></span> personClass1 <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClass1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        方法二: 通过运行时类的对象获取</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">></span> personClass2 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        方法三: 调用Class的静态方法forName(), 传入类的全类名, 从蓝色的java路径开始写</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> personClass3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java高级编程.反射.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClass3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射中的常用方法"><a href="#反射中的常用方法" class="headerlink" title="反射中的常用方法"></a>反射中的常用方法</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>getFields()</code></td><td>获取当前运行时类及其父类中所有的<code>public</code>的方法</td></tr><tr><td><code>getDeclaredFields()</code></td><td>获取当前运行时类中所有的方法, 包括<code>private</code></td></tr><tr><td><code>getModifiers()</code></td><td>获取权限修饰符</td></tr><tr><td><code>getType()</code></td><td>获取类型</td></tr><tr><td><code>getName()</code></td><td>获取变量名</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/juc-05-duo-xian-cheng/"/>
      <url>/2022/11/11/juc-05-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="基本概念-程序-进程和线程"><a href="#基本概念-程序-进程和线程" class="headerlink" title="基本概念: 程序, 进程和线程"></a>基本概念: 程序, 进程和线程</h2><p><strong>程序:</strong> 静态的代码</p><p><strong>进程:</strong> 程序的一次运行过程. 有产生, 存在和消亡的过程, 即<strong>生命周期</strong></p><p><strong>线程:</strong> 一个进程可以并行执行多个线程. 系统会为每个进行分配内存区域, 而进程中每个<strong>线程有自己独立的运行栈和程序计数器</strong>, 线程之间共享堆空间和方法区</p><h3 id="线程状态State"><a href="#线程状态State" class="headerlink" title="线程状态State"></a>线程状态State</h3><h3 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h3><p>wait只能在同步代码块中调用, 必须释放锁. </p><p>sleep不会释放锁, 因此可以在任何地方调用.</p><h2 id="线程的创建-重点"><a href="#线程的创建-重点" class="headerlink" title="线程的创建(重点)"></a>线程的创建(重点)</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><ol><li>创建一个继承于<code>Thread</code>的类</li><li>重写<code>run</code>方法</li><li>调用<code>start</code>方法: 启动线程并执行<code>run</code>方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread thread03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread03<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread03<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ol><li>创建一个实现了<code>Runnable</code>接口的类</li><li>实现类去实现接口中的<code>run</code>方法</li><li>创建实现类的对象, 并以该对象作为<code>Thread</code>类含参构造器的参数构造Thread类的对象</li><li>调用<code>start</code>方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用Runnable接口的方式只生成了一个对象, 因此多个线程共用一个对象中的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只生成一个MThread类的对象</span>        Runnable mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过一个相同的对象生成多个线程</span>        Thread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两种方式的比较"><a href="#两种方式的比较" class="headerlink" title="两种方式的比较"></a>两种方式的比较</h3><ul><li><p>实现Runnable接口更适合用来创建多线程, </p><ul><li>一是没有单继承的局限性, </li><li>二是能天然地体现出共享数据的概念, 在继承Thread类的方法中<strong>共享数据</strong>和<strong>锁</strong>都需要使用<code>static</code>进行修饰, 否则不唯一</li></ul></li><li><p>两种方式都需要重写<code>run</code>方法</p></li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><code>Thread.State</code>记录了线程的生命周期的状态</p><ul><li><strong>新建:</strong> <code>new</code>线程对象</li><li><strong>就绪:</strong> 执行<code>start</code>后, 等待cpu调用</li><li><strong>运行:</strong> 占用cpu, 执行<code>run</code>方法体中的内容<ul><li><code>yield</code>会从<strong>运行态</strong>返回到<strong>就绪态</strong></li><li><code>sleep, join, wait, suspend</code>等方法以及<code>等待同步锁</code>会使得当前进程<strong>阻塞</strong></li></ul></li><li><strong>堵塞:</strong> 比如一些打印输出功能</li><li><strong>死亡:</strong> 调用<code>stop</code>方法, 或者执行完<code>run</code>方法</li></ul><h2 id="线程的同步-并发安全问题-重点"><a href="#线程的同步-并发安全问题-重点" class="headerlink" title="线程的同步/并发安全问题(重点)"></a>线程的同步/并发安全问题(重点)</h2><blockquote><p>各种实现方法之间有着细微差异, 但<strong>核心是保证用同一把锁</strong>, 需要区分<code>this</code>所指代的是什么对象</p></blockquote><ul><li>同步代码块</li><li>同步方法</li><li>Lock同步锁</li></ul><h3 id="同步代码块synchronized"><a href="#同步代码块synchronized" class="headerlink" title="同步代码块synchronized"></a>同步代码块synchronized</h3><ul><li><strong>锁:</strong> 任何一个类的对象都可以作为锁. 要求多个线程共用同一把锁</li><li><strong>临界区:</strong> 需要被同步的代码, 操作共享数据</li></ul><p><strong>优缺点</strong></p><ul><li><strong>优点:</strong> 解决了线程安全问题</li><li><strong>局限性:</strong> 操作临界区部分的代码相当于单线程, 稍微降低了一些速度</li></ul><p>同步代码块显然不能包含太少代码, 同时也不能包含太多代码, 否则可能会导致逻辑发生变化, 比如下面案例中的<code>while</code>和<code>synchronized</code>互换</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用Runnable接口的方式只生成了一个对象, 因此多个线程共用一个对象中的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 需要保证不同的线程共用同一把锁, 使用Runnable接口实现类的方式其实可以不用该     */</span>    <span class="token keyword">final</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>MThread<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                某种具体的类也是一个对象, 是更高层次抽象的类的一个对象</span><span class="token comment" spellcheck="true">//            synchronized(this){</span><span class="token comment" spellcheck="true">//            synchronized(obj){  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只生成一个MThread类的对象</span>        MThread mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过一个相同的对象生成多个线程</span>        Thread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>使用<code>synchronized</code>关键字对方法名进行修饰. 对于<strong>非static方法</strong>, 锁默认为<code>this</code>, 而对于<strong>static方法</strong>, 锁默认为的<code>类名.class</code></p><h3 id="Lock同步锁"><a href="#Lock同步锁" class="headerlink" title="Lock同步锁"></a>Lock同步锁</h3><p>lock方式需要手动的申请和释放锁, 而synchronized方式自动释放锁</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 实例化lock     */</span>    ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            lock()和unlock()必须成对使用, lock在try前面, unlock在finally里面</span><span class="token comment" spellcheck="true">//            获取锁</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h3><p>隐蔽的死锁问题经常是同步方法中调用其它对象的同步方法, 每次执行同步方法都要获取当前对象, 先后需要两个对象及以上作为锁便满足死锁条件</p><p><strong>避免死锁的策略</strong></p><ul><li>避免嵌套锁</li><li>尽量少的使用同步资源</li></ul><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/02-mian-xiang-dui-xiang/"/>
      <url>/2022/11/11/02-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>类是<strong>抽象</strong>的概念, 对象是具体的<strong>实例</strong></p><h2 id="Java类及类成员"><a href="#Java类及类成员" class="headerlink" title="Java类及类成员"></a>Java类及类成员</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块, 只在类加载的时候执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块, 每次new对象都会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 无参构造器     */</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 含参构造器     *     * @param name 姓名     * @param age  年龄     */</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        为了展示效果, 添加一个后缀</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_copy"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 方法     *     * @return 获取name属性值     */</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现链式编程, 设置姓名     *     * @param name 输入的姓名字符串     * @return 当前对象     */</span>    <span class="token keyword">public</span> Person <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Person <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        给对象p1取别名</span>        Person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"June"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        使用该方法需要提供一个构造器</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td><code>private</code></td><td>√</td><td></td><td></td><td></td></tr><tr><td><code>default</code></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td><code>protected</code></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td><code>public</code></td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>无论对于属性和还是方法, 默认都省略了<code>this.方法名/属性</code>, 如果想要使用父类中的方法, 则使用<code>super.方法名/属性</code></p><p>如果子类和父类有同名属性或方法, <strong>二者都会被保留下来</strong>, 只是调用方式不同. </p><p>使用<code>this</code>调用子类中的属性或方法, 如果子类中的属性或方法是继承于父类的, 则等同于使用<code>super</code>调用父类中的该属性或方法. 只有在调用同名属性或方法时, <code>this</code>和<code>super</code>的调用结果才有区别</p><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><p>父类的引用指向子类的对象, 但在调用子类和父类的重名方法时, <strong>实际执行的是子类中的方法</strong>, 并且不能执行子类中特有的方法</p><p>比如排序, 不同的子类中具体实现排序的方法可能不同, 在写父类的时候只需要关注宏观把握, 具体实现由实际生成的子类去按照对应的特性优化实现</p><p>多态性方便实现虚拟方法的调用, 在父类中定义虚拟方法, 在子类中实现</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多态性的优点"><a href="#多态性的优点" class="headerlink" title="多态性的优点"></a>多态性的优点</h3><p>可以和函数调用进行类比, 使用函数相比于代码写死的优点是可以根据传入的形参得到不同的结果. 而多态性的优点是可以将父类作为一种变量类型, 传入不同的子类从而去执行不同的方法, 得到不同的运行结果</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃猫粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        使用父类对象实现虚拟方法的统一</span>        animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TestAnimal testAnimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        多态性的使用, 将子类当作参数传递</span>        testAnimal<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testAnimal<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强制类型转换-向下转型"><a href="#强制类型转换-向下转型" class="headerlink" title="强制类型转换(向下转型)"></a>强制类型转换(向下转型)</h3><p>由于多态性中使用父类引用指向子类的对象, 因此不能直接调用子类对象中的特有方法, 但是实际上这些方法是存在于子类对象中的. 向下转型则是为了实现该功能</p><p><code>instanceof</code>: 用于判断一个对象实例<strong>本质上</strong>是否属于某个类, 一般用于强制类型转换之前进行判断</p><h2 id="JDK中主要的包"><a href="#JDK中主要的包" class="headerlink" title="JDK中主要的包"></a>JDK中主要的包</h2><table><thead><tr><th>JDK包</th><th>功能</th></tr></thead><tbody><tr><td><code>java.lang</code></td><td>核心类, 包含String、Math、System、Thread等常用功能</td></tr><tr><td><code>java.net</code></td><td>执行与网络相关的操作</td></tr><tr><td><code>java.io</code></td><td>提供多种输入/输出功能</td></tr><tr><td><code>java.util</code></td><td>工具类, 例如日期时间, 系统特性, 接口的集合框架等</td></tr><tr><td><code>java.text</code></td><td>java格式化相关的类</td></tr><tr><td><code>java.sql</code></td><td>进行JDBC数据库编程相关的类</td></tr><tr><td><code>java.awt</code></td><td>用于构建图形化用户界面</td></tr></tbody></table><h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><p>将整个程序分为三个层次: 视图模型层、控制器层、数据模型层</p><h3 id="模型层model-主要处理数据"><a href="#模型层model-主要处理数据" class="headerlink" title="模型层model: 主要处理数据"></a>模型层model: 主要处理数据</h3><ul><li>数据对象封装: <code>model.bean/domain</code></li><li>数据库操作类: <code>model.dao</code></li><li>数据库: <code>model.db</code></li></ul><h3 id="视图层view-显示数据"><a href="#视图层view-显示数据" class="headerlink" title="视图层view: 显示数据"></a>视图层view: 显示数据</h3><ul><li>相关工具类: <code>view.utils</code></li><li>自定义类: <code>view.ui</code></li></ul><h3 id="控制器层controller-处理业务逻辑"><a href="#控制器层controller-处理业务逻辑" class="headerlink" title="控制器层controller: 处理业务逻辑"></a>控制器层controller: 处理业务逻辑</h3><ul><li>应用界面相关: <code>controller.activity</code></li><li>存放fragment: <code>controller.fragment</code></li><li>显示列表的适配器: <code>controller.adapter</code></li><li>服务相关: <code>controller.service</code></li><li>抽取的基类: <code>controller.base</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/03-she-ji-mo-shi/"/>
      <url>/2022/11/11/03-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><table><thead><tr><th>类型</th><th>设计模式</th><th>特点</th></tr></thead><tbody><tr><td>创建型模式</td><td>工厂方法模式</td><td></td></tr><tr><td></td><td>抽象工厂模式</td><td></td></tr><tr><td></td><td>单例模式</td><td>类只能存在一个对象实例</td></tr><tr><td></td><td>建造者模式</td><td></td></tr><tr><td></td><td>原型模式</td><td></td></tr><tr><td>解构型模式</td><td>适配器模式</td><td></td></tr><tr><td></td><td>装饰器模式</td><td></td></tr><tr><td></td><td>代理模式</td><td></td></tr><tr><td></td><td>外观模式</td><td></td></tr><tr><td></td><td>桥接模式</td><td></td></tr><tr><td></td><td>组合模式</td><td></td></tr><tr><td></td><td>享元模式</td><td></td></tr><tr><td>行为型模式</td><td>策略模式</td><td></td></tr><tr><td></td><td>模板方法模式(多态)</td><td>抽象类, 通用组件</td></tr><tr><td></td><td>观察者模式</td><td></td></tr><tr><td></td><td>迭代子模式</td><td></td></tr><tr><td></td><td>责任链模式</td><td></td></tr><tr><td></td><td>命令模式</td><td></td></tr><tr><td></td><td>备忘录模式</td><td></td></tr><tr><td></td><td>状态模式</td><td></td></tr><tr><td></td><td>访问者模式</td><td></td></tr><tr><td></td><td>中介者模式</td><td></td></tr><tr><td></td><td>解释器模式</td><td></td></tr></tbody></table><h2 id="单例模式Singleton"><a href="#单例模式Singleton" class="headerlink" title="单例模式Singleton"></a>单例模式Singleton</h2><p>保证某个类只能存在一个对象实例, 并且该类只提供一个取得其对象实例的方法</p><p><strong>要求</strong></p><ul><li>构造器私有化, 并在内部创建对象实例</li><li>提供静态方法来获取该唯一对象实例</li><li>静态方法只能调用静态属性, 所以该对象实例也是静态的</li></ul><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><blockquote><p>不管项目中是否需要使用到该实例对象, 一开始便创建实例对象</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Bank instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Bank <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bank <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bank <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Bank{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        验证方式一</span>        Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"花旗银行"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"欧洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        验证方式二</span>        Bank bank01 <span class="token operator">=</span> Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bank bank02 <span class="token operator">=</span> Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank01 <span class="token operator">==</span> bank02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><blockquote><p>一开始并不急着创建对象, 同时调用方法时需要判断实例对象是否为<code>null</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程不安全的懒汉式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer no<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer mount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 一开始并不急着创建对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Order instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Order <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        需要判断当前实例对象是否为null, 否则此时每次调用都会new一个Order对象, 那样就不是单例模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程安全的懒汉式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSafe</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer no<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer mount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> OrderSafe instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只是对获取实例对象的方法使用synchronized来修饰</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> OrderSafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式一的等价写法, 静态方法需要使用 类名.class</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrderSafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>OrderSafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式二, 提高返回的效率, 需要理解为什么有效率提升</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrderSafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>OrderSafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>网站的计数器</li><li>应用程序的日志应用</li><li>数据库连接池</li><li>读取配置文件的类</li><li>Application进程</li><li>Windows中的任务管理器Task Manager</li><li>Windows中的回收站Recycle Bin</li></ul><h2 id="模板方法模式Template-Method"><a href="#模板方法模式Template-Method" class="headerlink" title="模板方法模式Template Method"></a>模板方法模式Template Method</h2><p><strong>抽象类的应用</strong></p><p>功能内部的一部分是确定的, 另外一部分是不确定的, 将不确定的部分暴露出去, 让子类去实现这部分. 函数调用就是最简单的模板方法</p><p>能不能实现动态的模板方法呢? <strong>目前的模板方法和工厂方法存在相同的问题. 能不能动态的创建一个方法, 然后让模板函数去执行.</strong></p><h2 id="代理模式Proxy"><a href="#代理模式Proxy" class="headerlink" title="代理模式Proxy"></a>代理模式Proxy</h2><p><strong>接口的应用</strong></p><p><strong>应用场景</strong></p><ul><li><strong>安全代理</strong>: 屏蔽对真实角色的直接访问</li><li><strong>远程代理</strong>: 通过代理类处理远程方法调用</li><li><strong>延迟加载</strong>: 先加载轻量级的代理对象, 真正需要再加载真实的对象</li></ul><p>分为静态代理和动态代理</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>针对一个接口就需要写一个代理类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 租房     */</span>    <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 被代理类 */</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 租房     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"租客: 要求房租每月不超过1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 代理类, 并在其中通过多态的方式接收被代理类对象 */</span><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    Rent rentObject<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提供一个构造器, 接收请求的对象     *     * @param rentObject 请求租房的对象, 通过接口和多态的方式进行传递     */</span>    <span class="token keyword">public</span> <span class="token function">Company</span><span class="token punctuation">(</span>Rent rentObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rentObject <span class="token operator">=</span> rentObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 租房     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rentObject<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双方签订合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介公司进行一些准备工作, 约谈房东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul><li>代理类和被代理类实现同一套接口</li><li><strong>通用的一个代理类工厂</strong>可以对应多个被代理类, 根据被代理类运行时实现的接口去<strong>动态创建代理类</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>具体的需求案例</p><blockquote><ol><li>披萨的种类很多</li><li>披萨的制作流程比较固定</li><li>完成披萨的订购</li></ol></blockquote><h3 id="无工厂模式"><a href="#无工厂模式" class="headerlink" title="无工厂模式"></a>无工厂模式</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/02-jdbc-jie-duan/"/>
      <url>/2022/11/11/02-jdbc-jie-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC阶段错误处理"><a href="#JDBC阶段错误处理" class="headerlink" title="JDBC阶段错误处理"></a>JDBC阶段错误处理</h1><p><strong>MySQL 8.0+版本</strong></p><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在进行数据库连接时, 连接信息都已经”正确”配置, 结果报错</p><p><code>java.sql.SQLException: Access denied for user &#39;24563&#39;@&#39;localhost&#39; (using password: YES)</code></p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>之前设置的<code>url</code>如下</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/jdbc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而错误信息中的<code>24563</code>是我windows系统中的用户名, 并且我的数据库中只有<code>root</code>用户, 因此可能是因为没有在数据库前指定用户名而默认使用当前windows系统中的用户名. </p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>修改<code>url</code>如下, 指定数据库的用户</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://root@localhost:3306/jdbc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/03-javaweb-jie-duan/"/>
      <url>/2022/11/11/03-javaweb-jie-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb阶段错误处理"><a href="#JavaWeb阶段错误处理" class="headerlink" title="JavaWeb阶段错误处理"></a>JavaWeb阶段错误处理</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在配置<code>Servlet</code>的编码时出现错误, 如下所示</p><p><code>无法为上下文[/servlet]设置响应编码，因为该上下文已初始化</code></p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>IDEA配置的热部署没有生效或者浏览器存在缓存</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>手动重启tomcat服务器</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>tomcat在控制台中输出中文乱码</p><h3 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h3><p>windows 10中文系统的字符编码集默认为gbk</p><h3 id="错误处理-1"><a href="#错误处理-1" class="headerlink" title="错误处理"></a>错误处理</h3><ol><li><p>修改windows 10系统的控制台的字符编码集</p><p><code>区域与语言设置</code>–&gt;<code>管理语言设置</code>–&gt;<code>更改系统区域设置</code>–&gt;<code>勾选utf-8</code></p><p>==仅仅修改上面的配置后, tomcat在控制台输出中文还是乱码==</p></li><li><p>在tomcat服务器的配置选项, 即<code>Edit Configurations</code>中的<code>VM options</code>设置<code>-Dfile.encoding=UTF-8</code></p><p>==控制台中文输出乱码的问题被解决, 但是控制台的日志输出还是乱码==</p></li><li><p>配置IDEA启动JVM时的编码, 即在<code>Help</code>–&gt;<code>Edit Custom VM options</code>中设置<code>-Dfile.encoding=UTF-8</code></p><p>==控制台的中文乱码问题完全被解决, 但是发现网页显示出现乱码==</p></li><li><p>下载插件<code>Charset</code>修改浏览器的默认编码为<code>utf-8</code></p><p>==缺点: 某些网站的登录页面可能是gbk编码, 此时会乱码==</p></li></ol><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>在<code>webapp</code>目录下的<code>index.jsp</code>无法加入到<code>out</code>目录中, 导致网页无法定位到jsp文件</p><h3 id="原因分析-2"><a href="#原因分析-2" class="headerlink" title="原因分析"></a>原因分析</h3><p>因为将<code>webapp</code>目录移动到了main目录下, 但是项目projects structure中没有设置</p><h3 id="错误处理-2"><a href="#错误处理-2" class="headerlink" title="错误处理"></a>错误处理</h3><p>手动将所有的<code>.jsp</code>文件添加到生成的<code>out</code>目录中</p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><h3 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h3><p>所有配置正常, 但是由tomcat生成的out目录中没有包含编译Servlet类后的字节码文件夹classes, 导致Servlet Not Found错误</p><h3 id="原因分析-3"><a href="#原因分析-3" class="headerlink" title="原因分析"></a>原因分析</h3><p>暂时未知, 可能是IDEA的bug, 或者是由于使用了maven父子工程来创建web项目</p><h3 id="错误处理-3"><a href="#错误处理-3" class="headerlink" title="错误处理"></a>错误处理</h3><ol><li>找到项目对应的<code>.iml</code>文件, 该文件可能会由于一些之前的设置被隐藏</li><li>删除iml文件中的<code>&lt;component name=&quot;NewModuleRootManager&quot;&gt;&lt;/component&gt;</code>部分的代码块</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/java-ji-chu-2/"/>
      <url>/2022/11/11/java-ji-chu-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Java简单语法"><a href="#Java简单语法" class="headerlink" title="Java简单语法"></a>Java简单语法</h1><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><table><thead><tr><th>dos命令</th><th>解释</th></tr></thead><tbody><tr><td><code>dir</code></td><td>列出当前目录下的文件和文件夹</td></tr><tr><td><code>md</code></td><td>创建目录</td></tr><tr><td><code>rd</code></td><td>删除目录</td></tr><tr><td><code>cd</code></td><td>进入到指令目录</td></tr><tr><td><code>..</code></td><td>上一级目录</td></tr><tr><td><code>.</code></td><td>当前目录</td></tr><tr><td><code>\</code></td><td>根目录</td></tr><tr><td><code>del</code></td><td>删除文件</td></tr><tr><td><code>exit</code></td><td>退出dos命令行</td></tr></tbody></table><h2 id="编译和运行"><a href="#编译和运行" class="headerlink" title="编译和运行"></a>编译和运行</h2><p><code>javac</code>命令: 将<code>.java</code>文件编译为<code>.class</code>文件</p><p><code>java</code>命令: 运行<code>.class</code>文件</p><h2 id="从键盘中输入"><a href="#从键盘中输入" class="headerlink" title="从键盘中输入"></a>从键盘中输入</h2><ol><li><code>new</code>一个<code>Scanner</code>对象</li><li>调用对象中的<code>nextXXX()</code>方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestScanner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        System.in表示标准输入流, 即键盘</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取int类型数据</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取double类型数据</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取String类型数据</span>        String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组初始化有默认值, 等价于机器码中的0</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//      类型推断</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids01 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        默认初始化值为0</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可变个数的形参"><a href="#可变个数的形参" class="headerlink" title="可变个数的形参"></a>可变个数的形参</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 可变个数的形参, 认为是不限制长度的数组即可     *     * @param strs     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ul><li>修饰类: 不能被继承, 说明该类功能比较完善</li><li>修饰方法: 不能被子类重写</li><li>修饰变量: 此时的变量称为”常量”, 相当于C++中的<code>const</code>关键字. 修饰形参时表示该变量为只读属性</li></ul><h2 id="abstract抽象类和抽象方法"><a href="#abstract抽象类和抽象方法" class="headerlink" title="abstract抽象类和抽象方法"></a>abstract抽象类和抽象方法</h2><blockquote><p>例如学生类, 可以细分为小学生, 初中生, 高中生, 大学生, 研究生. 当所有的情况都被划分完后, 那么学生类就没有必要创建一个对象了, 因为所有的学生必然可以对应一个更为具体的子类, 此时可以将学生类作为抽象类, 用abstract进行修饰</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抽象类也一定有构造器, 包含抽象方法的类一定是抽象类</span>    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> <span class="token string">"dog or cat"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽象类的匿名子类"><a href="#抽象类的匿名子类" class="headerlink" title="抽象类的匿名子类"></a>抽象类的匿名子类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名子类随便叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//d</span>        animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>类是<strong>抽象</strong>的概念, 对象是具体的<strong>实例</strong></p><h2 id="Java类及类成员"><a href="#Java类及类成员" class="headerlink" title="Java类及类成员"></a>Java类及类成员</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块, 只在类加载的时候执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码块, 每次new对象都会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 无参构造器     */</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 含参构造器     *     * @param name 姓名     * @param age  年龄     */</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        为了展示效果, 添加一个后缀</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_copy"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 方法     *     * @return 获取name属性值     */</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现链式编程, 设置姓名     *     * @param name 输入的姓名字符串     * @return 当前对象     */</span>    <span class="token keyword">public</span> Person <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Person <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        给对象p1取别名</span>        Person p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"June"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        使用该方法需要提供一个构造器</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td><code>private</code></td><td>√</td><td></td><td></td><td></td></tr><tr><td><code>default</code></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td><code>protected</code></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td><code>public</code></td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>无论对于属性和还是方法, 默认都省略了<code>this.方法名/属性</code>, 如果想要使用父类中的方法, 则使用<code>super.方法名/属性</code></p><p>如果子类和父类有同名属性或方法, <strong>二者都会被保留下来</strong>, 只是调用方式不同. </p><p>使用<code>this</code>调用子类中的属性或方法, 如果子类中的属性或方法是继承于父类的, 则等同于使用<code>super</code>调用父类中的该属性或方法. 只有在调用同名属性或方法时, <code>this</code>和<code>super</code>的调用结果才有区别</p><h2 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h2><p>父类的引用指向子类的对象, 但在调用子类和父类的重名方法时, <strong>实际执行的是子类中的方法</strong>, 并且不能执行子类中特有的方法</p><p>比如排序, 不同的子类中具体实现排序的方法可能不同, 在写父类的时候只需要关注宏观把握, 具体实现由实际生成的子类去按照对应的特性优化实现</p><p>多态性方便实现虚拟方法的调用, 在父类中定义虚拟方法, 在子类中实现</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="多态性的优点"><a href="#多态性的优点" class="headerlink" title="多态性的优点"></a>多态性的优点</h3><p>可以和函数调用进行类比, 使用函数相比于代码写死的优点是可以根据传入的形参得到不同的结果. 而多态性的优点是可以将父类作为一种变量类型, 传入不同的子类从而去执行不同的方法, 得到不同的运行结果</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵喵喵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃猫粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestAnimal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Animal animal<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        使用父类对象实现虚拟方法的统一</span>        animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TestAnimal testAnimal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        多态性的使用, 将子类当作参数传递</span>        testAnimal<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testAnimal<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强制类型转换-向下转型"><a href="#强制类型转换-向下转型" class="headerlink" title="强制类型转换(向下转型)"></a>强制类型转换(向下转型)</h3><p>由于多态性中使用父类引用指向子类的对象, 因此不能直接调用子类对象中的特有方法, 但是实际上这些方法是存在于子类对象中的. 向下转型则是为了实现该功能</p><p><code>instanceof</code>: 用于判断一个对象实例<strong>本质上</strong>是否属于某个类, 一般用于强制类型转换之前进行判断</p><h2 id="JDK中主要的包"><a href="#JDK中主要的包" class="headerlink" title="JDK中主要的包"></a>JDK中主要的包</h2><table><thead><tr><th>JDK包</th><th>功能</th></tr></thead><tbody><tr><td><code>java.lang</code></td><td>核心类, 包含String、Math、System、Thread等常用功能</td></tr><tr><td><code>java.net</code></td><td>执行与网络相关的操作</td></tr><tr><td><code>java.io</code></td><td>提供多种输入/输出功能</td></tr><tr><td><code>java.util</code></td><td>工具类, 例如日期时间, 系统特性, 接口的集合框架等</td></tr><tr><td><code>java.text</code></td><td>java格式化相关的类</td></tr><tr><td><code>java.sql</code></td><td>进行JDBC数据库编程相关的类</td></tr><tr><td><code>java.awt</code></td><td>用于构建图形化用户界面</td></tr></tbody></table><h2 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h2><p>将整个程序分为三个层次: 视图模型层、控制器层、数据模型层</p><h3 id="模型层model-主要处理数据"><a href="#模型层model-主要处理数据" class="headerlink" title="模型层model: 主要处理数据"></a>模型层model: 主要处理数据</h3><ul><li>数据对象封装: <code>model.bean/domain</code></li><li>数据库操作类: <code>model.dao</code></li><li>数据库: <code>model.db</code></li></ul><h3 id="视图层view-显示数据"><a href="#视图层view-显示数据" class="headerlink" title="视图层view: 显示数据"></a>视图层view: 显示数据</h3><ul><li>相关工具类: <code>view.utils</code></li><li>自定义类: <code>view.ui</code></li></ul><h3 id="控制器层controller-处理业务逻辑"><a href="#控制器层controller-处理业务逻辑" class="headerlink" title="控制器层controller: 处理业务逻辑"></a>控制器层controller: 处理业务逻辑</h3><ul><li>应用界面相关: <code>controller.activity</code></li><li>存放fragment: <code>controller.fragment</code></li><li>显示列表的适配器: <code>controller.adapter</code></li><li>服务相关: <code>controller.service</code></li><li>抽取的基类: <code>controller.base</code></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><center>设计模式汇总表</center><table><thead><tr><th>类型</th><th>设计模式</th><th>特点</th></tr></thead><tbody><tr><td>创建型模式</td><td>工厂方法模式</td><td></td></tr><tr><td></td><td>抽象工厂模式</td><td></td></tr><tr><td></td><td>单例模式</td><td>类只能存在一个对象实例</td></tr><tr><td></td><td>建造者模式</td><td></td></tr><tr><td></td><td>原型模式</td><td></td></tr><tr><td>解构型模式</td><td>适配器模式</td><td></td></tr><tr><td></td><td>装饰器模式</td><td></td></tr><tr><td></td><td>代理模式</td><td></td></tr><tr><td></td><td>外观模式</td><td></td></tr><tr><td></td><td>桥接模式</td><td></td></tr><tr><td></td><td>组合模式</td><td></td></tr><tr><td></td><td>享元模式</td><td></td></tr><tr><td>行为型模式</td><td>策略模式</td><td></td></tr><tr><td></td><td>模板方法模式(多态)</td><td>抽象类, 通用组件</td></tr><tr><td></td><td>观察者模式</td><td></td></tr><tr><td></td><td>迭代子模式</td><td></td></tr><tr><td></td><td>责任链模式</td><td></td></tr><tr><td></td><td>命令模式</td><td></td></tr><tr><td></td><td>备忘录模式</td><td></td></tr><tr><td></td><td>状态模式</td><td></td></tr><tr><td></td><td>访问者模式</td><td></td></tr><tr><td></td><td>中介者模式</td><td></td></tr><tr><td></td><td>解释器模式</td><td></td></tr></tbody></table><h2 id="单例模式Singleton"><a href="#单例模式Singleton" class="headerlink" title="单例模式Singleton"></a>单例模式Singleton</h2><p>保证某个类只能存在一个对象实例, 并且该类只提供一个取得其对象实例的方法</p><p><strong>要求</strong></p><ul><li>构造器私有化, 并在内部创建对象实例</li><li>提供静态方法来获取该唯一对象实例</li><li>静态方法只能调用静态属性, 所以该对象实例也是静态的</li></ul><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><blockquote><p>不管项目中是否需要使用到该实例对象, 一开始便创建实例对象</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Bank instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Bank <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bank <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Bank <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Bank{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        验证方式一</span>        Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"花旗银行"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"欧洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        验证方式二</span>        Bank bank01 <span class="token operator">=</span> Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bank bank02 <span class="token operator">=</span> Bank<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank01 <span class="token operator">==</span> bank02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><blockquote><p>一开始并不急着创建对象, 同时调用方法时需要判断实例对象是否为<code>null</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程不安全的懒汉式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer no<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer mount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 一开始并不急着创建对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Order instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Order <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        需要判断当前实例对象是否为null, 否则此时每次调用都会new一个Order对象, 那样就不是单例模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程安全的懒汉式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSafe</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer no<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer mount<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> OrderSafe instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//只是对获取实例对象的方法使用synchronized来修饰</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> OrderSafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式一的等价写法, 静态方法需要使用 类名.class</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrderSafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>OrderSafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式二, 提高返回的效率, 需要理解为什么有效率提升</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrderSafe <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>OrderSafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>网站的计数器</li><li>应用程序的日志应用</li><li>数据库连接池</li><li>读取配置文件的类</li><li>Application进程</li><li>Windows中的任务管理器Task Manager</li><li>Windows中的回收站Recycle Bin</li></ul><h2 id="模板方法模式Template-Method"><a href="#模板方法模式Template-Method" class="headerlink" title="模板方法模式Template Method"></a>模板方法模式Template Method</h2><p><strong>抽象类的应用</strong></p><p>功能内部的一部分是确定的, 另外一部分是不确定的, 将不确定的部分暴露出去, 让子类去实现这部分. 函数调用就是最简单的模板方法</p><p>能不能实现动态的模板方法呢? <strong>目前的模板方法和工厂方法存在相同的问题. 能不能动态的创建一个方法, 然后让模板函数去执行.</strong></p><h2 id="代理模式Proxy"><a href="#代理模式Proxy" class="headerlink" title="代理模式Proxy"></a>代理模式Proxy</h2><p><strong>接口的应用</strong></p><p><strong>应用场景</strong></p><ul><li><strong>安全代理</strong>: 屏蔽对真实角色的直接访问</li><li><strong>远程代理</strong>: 通过代理类处理远程方法调用</li><li><strong>延迟加载</strong>: 先加载轻量级的代理对象, 真正需要再加载真实的对象</li></ul><p>分为静态代理和动态代理</p><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>针对一个接口就需要写一个代理类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 租房     */</span>    <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 被代理类 */</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 租房     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"租客: 要求房租每月不超过1000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 代理类, 并在其中通过多态的方式接收被代理类对象 */</span><span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    Rent rentObject<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提供一个构造器, 接收请求的对象     *     * @param rentObject 请求租房的对象, 通过接口和多态的方式进行传递     */</span>    <span class="token keyword">public</span> <span class="token function">Company</span><span class="token punctuation">(</span>Rent rentObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rentObject <span class="token operator">=</span> rentObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 租房     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rentObject<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双方签订合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介公司进行一些准备工作, 约谈房东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul><li>代理类和被代理类实现同一套接口</li><li><strong>通用的一个代理类工厂</strong>可以对应多个被代理类, 根据被代理类运行时实现的接口去<strong>动态创建代理类</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>具体的需求案例</p><blockquote><ol><li>披萨的种类很多</li><li>披萨的制作流程比较固定</li><li>完成披萨的订购</li></ol></blockquote><h3 id="无工厂模式"><a href="#无工厂模式" class="headerlink" title="无工厂模式"></a>无工厂模式</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="基本概念-程序-进程和线程"><a href="#基本概念-程序-进程和线程" class="headerlink" title="基本概念: 程序, 进程和线程"></a>基本概念: 程序, 进程和线程</h2><p><strong>程序:</strong> 静态的代码</p><p><strong>进程:</strong> 程序的一次运行过程. 有产生, 存在和消亡的过程, 即<strong>生命周期</strong></p><p><strong>线程:</strong> 一个进程可以并行执行多个线程. 系统会为每个进行分配内存区域, 而进程中每个<strong>线程有自己独立的运行栈和程序计数器</strong>, 线程之间共享堆空间和方法区</p><h3 id="线程状态State"><a href="#线程状态State" class="headerlink" title="线程状态State"></a>线程状态State</h3><h3 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h3><p>wait只能在同步代码块中调用, 必须释放锁. </p><p>sleep不会释放锁, 因此可以在任何地方调用.</p><h2 id="线程的创建-重点"><a href="#线程的创建-重点" class="headerlink" title="线程的创建(重点)"></a>线程的创建(重点)</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><ol><li>创建一个继承于<code>Thread</code>的类</li><li>重写<code>run</code>方法</li><li>调用<code>start</code>方法: 启动线程并执行<code>run</code>方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MyThread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyThread thread03 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread03<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread03<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><ol><li>创建一个实现了<code>Runnable</code>接口的类</li><li>实现类去实现接口中的<code>run</code>方法</li><li>创建实现类的对象, 并以该对象作为<code>Thread</code>类含参构造器的参数构造Thread类的对象</li><li>调用<code>start</code>方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用Runnable接口的方式只生成了一个对象, 因此多个线程共用一个对象中的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只生成一个MThread类的对象</span>        Runnable mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过一个相同的对象生成多个线程</span>        Thread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两种方式的比较"><a href="#两种方式的比较" class="headerlink" title="两种方式的比较"></a>两种方式的比较</h3><ul><li><p>实现Runnable接口更适合用来创建多线程, </p><ul><li>一是没有单继承的局限性, </li><li>二是能天然地体现出共享数据的概念, 在继承Thread类的方法中<strong>共享数据</strong>和<strong>锁</strong>都需要使用<code>static</code>进行修饰, 否则不唯一</li></ul></li><li><p>两种方式都需要重写<code>run</code>方法</p></li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p><code>Thread.State</code>记录了线程的生命周期的状态</p><ul><li><strong>新建:</strong> <code>new</code>线程对象</li><li><strong>就绪:</strong> 执行<code>start</code>后, 等待cpu调用</li><li><strong>运行:</strong> 占用cpu, 执行<code>run</code>方法体中的内容<ul><li><code>yield</code>会从<strong>运行态</strong>返回到<strong>就绪态</strong></li><li><code>sleep, join, wait, suspend</code>等方法以及<code>等待同步锁</code>会使得当前进程<strong>阻塞</strong></li></ul></li><li><strong>堵塞:</strong> 比如一些打印输出功能</li><li><strong>死亡:</strong> 调用<code>stop</code>方法, 或者执行完<code>run</code>方法</li></ul><h2 id="线程的同步-并发安全问题-重点"><a href="#线程的同步-并发安全问题-重点" class="headerlink" title="线程的同步/并发安全问题(重点)"></a>线程的同步/并发安全问题(重点)</h2><blockquote><p>各种实现方法之间有着细微差异, 但<strong>核心是保证用同一把锁</strong>, 需要区分<code>this</code>所指代的是什么对象</p></blockquote><ul><li>同步代码块</li><li>同步方法</li><li>Lock同步锁</li></ul><h3 id="同步代码块synchronized"><a href="#同步代码块synchronized" class="headerlink" title="同步代码块synchronized"></a>同步代码块synchronized</h3><ul><li><strong>锁:</strong> 任何一个类的对象都可以作为锁. 要求多个线程共用同一把锁</li><li><strong>临界区:</strong> 需要被同步的代码, 操作共享数据</li></ul><p><strong>优缺点</strong></p><ul><li><strong>优点:</strong> 解决了线程安全问题</li><li><strong>局限性:</strong> 操作临界区部分的代码相当于单线程, 稍微降低了一些速度</li></ul><p>同步代码块显然不能包含太少代码, 同时也不能包含太多代码, 否则可能会导致逻辑发生变化, 比如下面案例中的<code>while</code>和<code>synchronized</code>互换</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用Runnable接口的方式只生成了一个对象, 因此多个线程共用一个对象中的数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 需要保证不同的线程共用同一把锁, 使用Runnable接口实现类的方式其实可以不用该     */</span>    <span class="token keyword">final</span> Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>MThread<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                某种具体的类也是一个对象, 是更高层次抽象的类的一个对象</span><span class="token comment" spellcheck="true">//            synchronized(this){</span><span class="token comment" spellcheck="true">//            synchronized(obj){  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只生成一个MThread类的对象</span>        MThread mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过一个相同的对象生成多个线程</span>        Thread thread01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">,</span> <span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread01<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread02<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>使用<code>synchronized</code>关键字对方法名进行修饰. 对于<strong>非static方法</strong>, 锁默认为<code>this</code>, 而对于<strong>static方法</strong>, 锁默认为的<code>类名.class</code></p><h3 id="Lock同步锁"><a href="#Lock同步锁" class="headerlink" title="Lock同步锁"></a>Lock同步锁</h3><p>lock方式需要手动的申请和释放锁, 而synchronized方式自动释放锁</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 实例化lock     */</span>    ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            lock()和unlock()必须成对使用, lock在try前面, unlock在finally里面</span><span class="token comment" spellcheck="true">//            获取锁</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> count<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h3><p>隐蔽的死锁问题经常是同步方法中调用其它对象的同步方法, 每次执行同步方法都要获取当前对象, 先后需要两个对象及以上作为锁便满足死锁条件</p><p><strong>避免死锁的策略</strong></p><ul><li>避免嵌套锁</li><li>尽量少的使用同步资源</li></ul><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>字符串常量池存放在方法区中. String类追根溯源最后都会变成对字符串常量池中字符串的引用.</p><p>String类是不可变的(final).</p><p>只有当两个数据均处于字符串常量池中时, 使用<code>+</code>连接操作得到的结果才位于字符串常量池, 否则会在堆空间中new新的对象.</p><p>Comparable表示自然排序, 例如第三方库中的类不方便修改其底层源代码, 但是那些类又没有实现Comparable接口, 而Comparator表示定制排序</p><h3 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用lambda表达式实现Comparator接口, 更容易理解</span>        Comparator<span class="token operator">&lt;</span>Person<span class="token operator">></span> comparator <span class="token operator">=</span>                <span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age <span class="token operator">==</span> p2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>age<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"xiong"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"260424xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"260424xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"260424xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"arrayList: "</span> <span class="token operator">+</span> arrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码和解码</p><p>格式化和解析</p><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h2><p>类的对象只有<u>有限个, 确定的</u>. 例如:</p><ul><li><u>星期:</u> 一, 二, 三, 四, 五, 六, 日</li><li><u>性别:</u> 男, 女</li></ul><p><strong>当需要定义一组常量时, 强烈建议使用枚举类</strong></p><p>如果枚举类中只有一个常量, 则可以作为单例模式的一种实现方式</p><h2 id="定义枚举类"><a href="#定义枚举类" class="headerlink" title="定义枚举类"></a>定义枚举类</h2><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><p>在Java5.0之前, 需要自定义枚举类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    提供枚举类的私有属性</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    私有化构造器</span>    <span class="token keyword">private</span> <span class="token function">Season</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span> String seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//    提供静态的枚举类对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">,</span> <span class="token string">"热"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">,</span> <span class="token string">"爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Season WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="enum定义枚举类"><a href="#enum定义枚举类" class="headerlink" title="enum定义枚举类"></a>enum定义枚举类</h3><p>在Java 5.0之后, 提供了<code>enum</code>关键字. 使用enum关键字定义枚举类时, 默认继承Enum类.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> Period <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    枚举类中需要首先声明定义的常量(类中可选项)</span>    <span class="token comment" spellcheck="true">//    常量之间用逗号隔开, 最后一个使用分号</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">,</span> <span class="token string">"热"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">,</span> <span class="token string">"爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Period</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span> String seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="枚举类实现接口"><a href="#枚举类实现接口" class="headerlink" title="枚举类实现接口"></a>枚举类实现接口</h2><p>可以在枚举类中实现接口方法, 达到统一一致的目的</p><p>也可以在枚举类对象中分别实现接口方法, 达到个性化定制的目的</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">publicShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用enum关键字定义枚举类, 默认继承Enum类</span><span class="token keyword">enum</span> Period <span class="token keyword">implements</span> <span class="token class-name">Info</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    枚举类中需要首先声明定义的常量(类中可选项)</span>    <span class="token comment" spellcheck="true">//    常量之间用逗号隔开, 最后一个使用分号</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏"</span><span class="token punctuation">,</span> <span class="token string">"热"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋"</span><span class="token punctuation">,</span> <span class="token string">"爽"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬"</span><span class="token punctuation">,</span> <span class="token string">"冷"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">personShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String seasonDesc<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Period</span><span class="token punctuation">(</span>String seasonName<span class="token punctuation">,</span> String seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publicShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个万物复苏的季节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>注解, 即元数据(Metadata).</p><p>注解需要搭配反射获取值, 从而执行相应程序流程才有意义.</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    如果只有一个属性, 建议属性名为value</span>    <span class="token comment" spellcheck="true">//    使用default添加默认值</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    类型可以是数组, 用来添加多个值</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元数据: 用来对数据进行解释说明.</p><p>元注解: 用来对注解数据进行解释说明</p><ul><li><code>@Target</code>: 用来指明<code>@MyAnnotation</code>注解可以用来修饰哪些数据类型</li><li><code>@Inherited</code>: 被其修饰的注解具有继承性, </li><li><code>@Retention</code>: 指定所修饰注解的声明周期, 只有声明为<u>RUNTIME</u>的注解才能通过反射获取</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//    如果只有一个属性, 建议属性名为value</span>    <span class="token comment" spellcheck="true">//    使用default添加默认值</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    类型可以是数组, 用来添加多个值</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="可重复注解"><a href="#可重复注解" class="headerlink" title="可重复注解"></a>可重复注解</h2><p>重复注解是指可以重复书写多个的注解</p><h3 id="java-8之前的实现方式"><a href="#java-8之前的实现方式" class="headerlink" title="java 8之前的实现方式"></a>java 8之前的实现方式</h3><p>需要使用数组来接收值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"c++"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java8之后的实现方式"><a href="#java8之后的实现方式" class="headerlink" title="java8之后的实现方式"></a>java8之后的实现方式</h3><p>使用元注解<code>@Repeatable</code></p><h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><h3 id="Queue接口"><a href="#Queue接口" class="headerlink" title="Queue接口"></a>Queue接口</h3><h4 id="优先队列PriorityQueue"><a href="#优先队列PriorityQueue" class="headerlink" title="优先队列PriorityQueue"></a>优先队列PriorityQueue</h4><p>优先队列, 也就是大根堆. 通过传入定制的比较器, 可以实现某个值越小, 优先级越高. </p><p>堆的算法中总结来看只有两个算法, 一个是建堆算法, 一个是添加算法(删除算法是一种特殊的添加).</p><p>堆是一棵完全二叉树, 父子节点之间的关系为</p><ul><li><code>leftIndex = 2 * index + 1</code>, 当<code>index &lt; size / 2</code>时必定有左子节点, 当<code>index &gt;= size / 2</code>时没有子节点</li><li><code>rightIndex = 2 * index + 2</code>, 必定有左子节点时未必有右子节点</li><li><code>parentIndex = (index - 1) / 2</code></li></ul><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射是动态语言的关键, 允许程序在<strong>执行期间</strong>获取<strong>任何类</strong>的内部信息, 并直接操作<strong>任意对象</strong>的内部属性和方法</p><p>加载完某个类后, 在<strong>堆内存的方法区</strong>中产生了一个<code>Class</code>类型的对象—每个类对应一个且只有唯一一个Class对象. 这个对象包含类的完整的结构信息</p><h2 id="Java反射机制提供的功能"><a href="#Java反射机制提供的功能" class="headerlink" title="Java反射机制提供的功能"></a>Java反射机制提供的功能</h2><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成<strong>动态代理</strong></li></ul><h2 id="反射相关主要API"><a href="#反射相关主要API" class="headerlink" title="反射相关主要API"></a>反射相关主要API</h2><ul><li><code>java.lang.Class</code>: 含义是<strong>类的抽象</strong>, 不妨称为<strong>通用类</strong>, 所有的类都是该类的对象, 有些存储<strong>元数据</strong>的感觉</li><li><code>java.lang.reflect.Method</code>: 类的方法</li><li><code>java.lang.reflect.Field</code>: 类的成员变量</li><li><code>java.lang.reflect.Constructor</code>: 类的构造器</li></ul><h2 id="java-lang-Class类的理解"><a href="#java-lang-Class类的理解" class="headerlink" title="java.lang.Class类的理解"></a><code>java.lang.Class</code>类的理解</h2><ol><li>程序经过<code>javac.exe</code>命令编译后, 会生成多个字节码文件<code>.class</code></li><li>当使用<code>java.exe</code>执行字节码文件时, 加载到内存中的类便称为运行时类, 此运行时类就是<code>Class</code>类的一个对象</li></ol><p><strong>注意:</strong> <code>Class</code>类的对象不是<code>new</code>出来的, 而是运行时类便对应<code>Class</code>类的一个对象</p><h2 id="获取运行时类的对象的方法"><a href="#获取运行时类的对象的方法" class="headerlink" title="获取运行时类的对象的方法"></a>获取运行时类的对象的方法</h2><p>加载到内存中的运行时类会缓存一定的时间, 在这段时间内获取到的都是同一个运行时类的对象</p><p>最常使用的是第三种方式, 因为将类作为参数传入, 没有写死代码, 更加灵活</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//      获取运行时类的方法一: 通过类名.class直接获取</span>        Class<span class="token operator">&lt;</span>Person<span class="token operator">></span> personClass1 <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClass1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        方法二: 通过运行时类的对象获取</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token operator">></span> personClass2 <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClass2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        方法三: 调用Class的静态方法forName(), 传入类的全类名, 从蓝色的java路径开始写</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> personClass3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java高级编程.反射.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>personClass3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射中的常用方法"><a href="#反射中的常用方法" class="headerlink" title="反射中的常用方法"></a>反射中的常用方法</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td><code>getFields()</code></td><td>获取当前运行时类及其父类中所有的<code>public</code>的方法</td></tr><tr><td><code>getDeclaredFields()</code></td><td>获取当前运行时类中所有的方法, 包括<code>private</code></td></tr><tr><td><code>getModifiers()</code></td><td>获取权限修饰符</td></tr><tr><td><code>getType()</code></td><td>获取类型</td></tr><tr><td><code>getName()</code></td><td>获取变量名</td></tr></tbody></table><p>通过类对象可查看到类内部的结构</p><p>正常方式:导入包–&gt;new对象–&gt;得到对象<br>反射:实例化对象–&gt;getClass方法–&gt;得到完整的类名</p><p>用来描述类的共同特征的类:Class<br>Person类和Dog类都属于Class类的实例化对象</p><p>反射的使用情景:服务器已经开启;这时代码已经执行<br>                客户端发送注册或者登录请求,服务器就在执行代码的期间还去生成对象,这种情况下就需要用到反射</p><p>通过类构造对象;类本身也是Class的对象,只是Person在java中表示变量类型,所以用Person.class来表示类本身</p><p>类结构中的static是通过类去调用的,而类本身也是对象,所以还是可以看作是通过对象去调用</p><p>运行时类:</p><p>接口:<br>    继承解决的是”是不是”<br>    接口解决的是”能不能”<br>    为了达到多重继承的效果</p><p>接口的使用:<br>1.接口使用interface来定义<br>2.java中,接口和类是并列的两个结构<br>3.如何定义接口:定义接口中的成员<br>4.接口中不能定义构造器,意味着接口不能实例化<br>5.java开发中,接口通过让类去实现,称为实现类<br>    如果实现类中中覆盖了接口中的所有方法,则此实现类就可以实例化</p><p>jdk7:只能定义全局常量和抽象方法<br>全局常量:public static final,可以省略<br>抽象方法:public abstract</p><p>接口的作用相当于统一,制定规范.<br>假设没有接口,针对Mysql添加数据别人以add来作为方法名,但是对于Oracle可能其他人写成append,这样就造成不兼容<br>没有接口=不兼容,同一个目的,你有的方法我没有,我有的方法你没有<br>有了接口,就相当于我先把实现这个目的的方法名给确定下来,你们具体要怎么实现我不管<br>假如说我要排序sort(),我就先在提供sort()的接口,你们来实现我这个接口,具体你们觉得哪种排序快,你们用来哪种排序来实现我不在乎</p><p>再提下多态性,我在接口sort()的定义里面只能用一个抽象类来代表<br>举个例子,假设有个网页只能由浏览器打开<br>我们提供一个open()的接口,但此时我们还不清楚用户会用哪种浏览器来打开这个网页,<br>所以我们定义一个抽象类:浏览器,用户要调用open的接口就要传入一个浏览器类的对象,但浏览器是个抽象类,实际上不可能有个浏览器对象<br>    此时我们有一些浏览器的子类,例如谷歌浏览器,火狐浏览器,IE浏览器等等,(你的谷歌和我的谷歌就相当于两个实例对象)</p><p>jdk8接口新特性<br>1.接口中定义的静态方法只能被接口调用,不能被实现类的对象调用<br>2.接口中通过关键字default设置默认方法,可以被实现类对象调用<br>3.如果父类和接口中有同名方法,父类优先<br>4.如果实现类没有重写两个接口中的同名同参数的方法,就会产生接口冲突</p><p>final关键字</p><p>用来修饰的结构:类,方法,变量</p><ul><li>1.用来修饰一个类,此类不能被其它类继承<br>比如String类,System类,StringBuffer类</li><li>用来修饰一个方法,表明此方法不可以被重写<br>比如Object类中的getClass()</li><li>用来修饰一个变量:此时的变量就称为常量(常变量) 类似const</li></ul><p>属性赋值的位置选择</p><ul><li>如果生成多个对象,且每个对象属性值初始值一样,则可以显式赋值</li><li>如果生成多个对象,每个对象属性不一样,则可以通过构造器传参赋值</li><li>如果不是简单的赋值,还要调用方法或抛出异常等等,则放到代码块中赋值</li></ul><p>注:构造器是对象生成的最后一道关卡</p><p>static final 一般只用来修饰属性:表示全局常量</p><p>当参数重名时,<br>    1)name表示形参,<br>    2)this.name表示内部类属性<br>    3)Person.this.name表示外部类的属性</p><p>外部类的属性—&gt;方法的形参—-&gt;内部类的属性<br>1     //当只有外部类的属性时<br>2————–&gt;1   //当类的属性和方法的形参名相同时,属性用this.name表示<br>3————–&gt;1————–&gt;2    //当还有内部类时,类的属性用类名.this.name表示</p><p>抽象类与抽象方法<br>abstract关键字的使用</p><p>子类如果没有重写父类中的所以抽象方法,则子类也为抽象类<br>    如果子类需要生成对象,则子类必须重写父类中的全部抽象方法</p><p>创建抽象类的匿名子类:</p><p>前面最多只能有static修饰:分为静态代码块和非静态代码块</p><p>代码块的作用:初始化类,对象</p><p>静态代码块<br>    内部可以有输出语句<br>    随着类的加载而执行,而且只执行一次<br>    如果一个类中定义了多个静态代码块,则按照定义的先后顺序执行,静态代码块比非静态代码块先执行,不建议,直接合成一个即可<br>    静态代码块内只能调用静态的属性或者方法</p><p>非静态代码块<br>    内部可以有输出语句<br>    随着对象的创建而执行<br>    作用:每次创建对象都执行非静态代码块,所以可以为对象的属性进行初始化</p><p>对属性可以赋值的位置:<br>    1.默认初始化<br>    2.显式初始化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/spring-05-springboot-jie-duan/"/>
      <url>/2022/11/11/spring-05-springboot-jie-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot阶段错误处理"><a href="#SpringBoot阶段错误处理" class="headerlink" title="SpringBoot阶段错误处理"></a>SpringBoot阶段错误处理</h1><hr><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>运行SpringBoot程序时报错, 报错代码如下</p><pre class="line-numbers language-log"><code class="language-log">Error running 'SprinbootDemoApplication': Command line is too long. Shorten command line for SprinbootDemoApplication or also for Spring Boot default configuration?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><ul><li>由于在新建SpringBoot工程时添加了Spring Native等, 这些工具需要Java 11的支持, 而我电脑中使用的是Java 8, 因此不能够正确运行</li></ul><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><p>删除掉Maven中暂时用不到的依赖</p><hr><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>需要添加<code>@ComponentScan</code>才能进行包扫描</p><h3 id="原因分析-1"><a href="#原因分析-1" class="headerlink" title="原因分析"></a>原因分析</h3><ul><li>主启动类没有和<code>controller</code>等包在同一目录下面</li></ul><h3 id="处理方法-1"><a href="#处理方法-1" class="headerlink" title="处理方法"></a>处理方法</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/11-han-shu-shi-bian-cheng/"/>
      <url>/2022/11/11/11-han-shu-shi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="函数式编程概述"><a href="#函数式编程概述" class="headerlink" title="函数式编程概述"></a>函数式编程概述</h1><h2 id="函数式编程的作用"><a href="#函数式编程的作用" class="headerlink" title="函数式编程的作用"></a>函数式编程的作用</h2><ul><li>公司使用的主流</li><li>大数量下处理集合效率高</li><li>代码可读性高</li><li>消灭嵌套地狱</li></ul><h2 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h2><p>关注点: 函数对数据进行的什么操作, 即关注<u>方法参数和方法体</u></p><p>优点:</p><ul><li>代码简洁, 开发快速</li><li>接近自然语言, 易于理解</li><li>易于并发编程</li></ul><h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda表达式是Java 8的一个语法糖, 是对<u>只有单个方法需要实现的匿名内部类</u>写法上的简化.</p><p>核心原则: 可推导即可省略</p><p><code>IntBinaryOperator</code>: 接收返回值为int类型的函数对象</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/cong-pei-zhi-wen-jian-dao-pei-zhi-lei-de-yi-chong-shi-xian-fang-shi/"/>
      <url>/2022/11/11/cong-pei-zhi-wen-jian-dao-pei-zhi-lei-de-yi-chong-shi-xian-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="通用接口"><a href="#通用接口" class="headerlink" title="通用接口"></a>通用接口</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XConfig</span> <span class="token punctuation">{</span>    Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Properties <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 用来接收各种输入类型, 不需要在使用的时候进行考虑类型     *     * @param key     * @param value     * @param &lt;V>     */</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">setProperty</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// value为字符串类型</span>            properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是一个类的类型</span>            properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// value为数值等其他基本类型</span>            properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XBaseConfig</span> <span class="token keyword">implements</span> <span class="token class-name">XConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置需要设置的各项配置属性</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        XConfig<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>CommonClientConfigs<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"hadoop001:9092,hadoop002:9092,hadoop003:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XConfig<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XConfig<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XConfig<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XConfig<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringDeserializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//整合所有的配置类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Properties <span class="token function">getSystemResource</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">XConfig</span><span class="token operator">>></span> configClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">XConfig</span><span class="token operator">></span> configClass <span class="token operator">:</span> configClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>                XConfig xConfig <span class="token operator">=</span> configClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                xConfig<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Properties propertiesX <span class="token operator">=</span> xConfig<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                propertiesX<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConfigClassTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里可以添加多个配置类</span>        List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">XConfig</span><span class="token operator">>></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>XBaseConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token function">getSystemResource</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221104214232986.png" alt="image-20221104214232986"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/10shardingjdbc-fen-ku-fen-biao/"/>
      <url>/2022/11/11/10shardingjdbc-fen-ku-fen-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><h2 id="分库分表是什么"><a href="#分库分表是什么" class="headerlink" title="分库分表是什么"></a>分库分表是什么</h2><p>为什么要分库分表?</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A801.svg" alt></p><h2 id="分库分表的方式"><a href="#分库分表的方式" class="headerlink" title="分库分表的方式"></a>分库分表的方式</h2><h3 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h3><p>按字段使用频率的高低来拆分表, 频率高的字段放入同一张表, 频率低的字段放入另一张表.</p><p><u>优点</u></p><ul><li>数据库以页为存储单位, 单页内数据行越多, 数据库性能越好</li><li>数据库以行为单位将数据加载到内存中</li></ul><h3 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h3><p>针对不同的业务, 将表进行分类, 不同类的表可以存放在不同的数据库上. 并且每个不同的数据库可以存放在不同的服务器上. ==核心理念是专库专用==.</p><p><u>优点</u></p><ul><li>解决了业务层面上的耦合, 业务清晰</li><li>能够对不同业务的数据进行分级管理, 维护, 监控, 扩展等</li><li>高并发场景下, 垂直分库一定程度的提升了IO, 数据库连接数, 降低了单机硬件资源的瓶颈</li></ul><h3 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h3><p>把同一个表的数据按照一定的规则拆分到不同的表中</p><ul><li>id范围(0-&gt;1000, 1000-&gt;2000)</li><li>id取模</li></ul><h3 id="水平分库"><a href="#水平分库" class="headerlink" title="水平分库"></a>水平分库</h3><h2 id="分库分表带来的问题"><a href="#分库分表带来的问题" class="headerlink" title="分库分表带来的问题"></a>分库分表带来的问题</h2><h3 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h3><p>分库分表将数据存储在不同数据库甚至不同服务器上, 因此会造成==分布式事务问题==. </p><p>(Sharding-JDBC不能解决分布式事务问题, 需要从其他方面考虑)</p><h3 id="跨节点关联查询"><a href="#跨节点关联查询" class="headerlink" title="跨节点关联查询"></a>跨节点关联查询</h3><p>不在同一个数据库, 甚至不在同一台服务器, 因此无法进行关联查询.</p><p>需要将原来的关联查询分为两次查询</p><h3 id="跨节点分页-排序等"><a href="#跨节点分页-排序等" class="headerlink" title="跨节点分页, 排序等"></a>跨节点分页, 排序等</h3><p>假设要取成绩最高的10条数据, 那么需要将每个数据库中成绩最高的10条数据查找出来, 然后在该结果集中再次查找.</p><h3 id="主键避免重复"><a href="#主键避免重复" class="headerlink" title="主键避免重复"></a>主键避免重复</h3><p>分库分表造成不同的表可以出现相同的主键, 但是这些表逻辑上属于同一张表, 不应该出现相同的主键.</p><h3 id="公共表"><a href="#公共表" class="headerlink" title="公共表"></a>公共表</h3><p>不同的表都需要依赖这些公共表. 例如不同的应用程序有依赖于手机的位置访问权限, 例如高德地图, 百度地图, 美团外卖.</p><h2 id="对分库分表数据库的操作Sharding-JDBC"><a href="#对分库分表数据库的操作Sharding-JDBC" class="headerlink" title="对分库分表数据库的操作Sharding-JDBC"></a>对分库分表数据库的操作Sharding-JDBC</h2><p>Sharding-JDBC不是如何去进行分库分表的工具, 而是在已经进行了分库分表的数据库中进行处理的工具.</p><p>Sharding-JDBC的核心功能是<u>数据分片和读写分离</u>. Sharding-JDBC可以透明的访问. <em>程序员不需要关注数据的分布, 在使用上相当于一张无限大的单表</em>.</p><p>==对于机器, 单表会造成性能瓶颈, 所以需要拆分, 即分库分表. 对于应用程序员, 不希望关注数据表的存储等细节, 希望看到的是一张无限大的表, 因此通过Sharding-JDBC来简化分库分表之后的数据库操作, 相当于封装了一层.==</p><h1 id="Sharding-JDBC使用"><a href="#Sharding-JDBC使用" class="headerlink" title="Sharding-JDBC使用"></a>Sharding-JDBC使用</h1><h2 id="快速入门案例"><a href="#快速入门案例" class="headerlink" title="快速入门案例"></a>快速入门案例</h2><ol><li><p>数据库准备, 创建表order_1, order_2</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE DATABASE `shardingjdbc`;CREATE TABLE `order_1`(    `order_id` bigint(20)                     NOT NULL COMMENT '订单id',    `price`    decimal(10, 2)                 not null comment '订单价格',    `user_id`  bigint(20)                     not null comment '用户id',    `status`   varchar(50) character set utf8 not null comment '订单状态',    primary key (`order_id`) using btree) character set utf8  row_format dynamic;CREATE TABLE `order_2`(    `order_id` bigint(20)                     NOT NULL COMMENT '订单id',    `price`    decimal(10, 2)                 not null comment '订单价格',    `user_id`  bigint(20)                     not null comment '用户id',    `status`   varchar(50) character set utf8 not null comment '订单状态',    primary key (`order_id`) using btree) character set utf8  row_format dynamic;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li>使用Sharding-JDBC对水平分表后的user表进行操作</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
