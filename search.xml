<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Data</title>
      <link href="/2023/05/05/springdata/"/>
      <url>/2023/05/05/springdata/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h1><h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><h3 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h3><p>查询方式有五种:</p><ol><li>调用父接口中的方法</li><li>方法命名规则查询(按照一定的规范定义接口中的方法, 自动生成SQL)</li><li>JPQL查询</li><li>本地SQL查询</li><li>Specification动态查询</li></ol><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><h4 id="OneToOne-关系"><a href="#OneToOne-关系" class="headerlink" title="OneToOne 关系"></a>OneToOne 关系</h4><p>(略)</p><h4 id="OneToMany-关系"><a href="#OneToMany-关系" class="headerlink" title="OneToMany 关系"></a>OneToMany 关系</h4><p>One：主表</p><p>Many：从表</p><p>OneToMany 关系通过<strong>从表的外键</strong>来刻画</p><h4 id="ManyToMany-关系"><a href="#ManyToMany-关系" class="headerlink" title="ManyToMany 关系"></a>ManyToMany 关系</h4><p>不区分主表和从表，通过<strong>中间表</strong>来代替外键，对 ManyToMany 关系进行刻画</p><blockquote><p>  OneToMany 和 ManyToMany 的区别：</p><ul><li>OneToMany 关系中，站在主表到从表的角度看，是一对多关系；而站在从表到主表的角度看，是一对一关系。</li><li>ManyToMany 关系中，无论站在两张表的那一方去看，都是一对多关系。</li></ul></blockquote><p>所谓的维护关系和放弃关系的维护权，本质上就是在调用save()方法时，需不需要额外去保存关系（可能是中间表，也可能是外键）。在保存维护关系的类之前，需要将不维护关系的实体类先保存。如果先保存维护关系的实体类A，那么同时触发保存关系表，而关系表设计到实体类A和实体类B，此时实体类B还没有保存，因此会报错。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230510153934822.png" alt="image-20230510153934822"></p><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"article"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * GenerationType.IDENTITY: 数据库的主键需要设置为AUTO_INCREMENT才会生效, 否则报错     * &lt;p>     * 虽然id可以唯一的标识一个对象, 但是如果重写hashCode和equals方法并不可以仅仅通过id, 因为在插入的时候, id还并没有生成     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"author"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"update_time"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span>    <span class="token comment" spellcheck="true">// 上面设置Article本身的属性字段, 下面设置与其它类的关系</span>    <span class="token comment" spellcheck="true">// 使用@JoinTable表示负责维护关系, 需要后保存</span>    <span class="token annotation punctuation">@ManyToMany</span>    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>            <span class="token comment" spellcheck="true">// 中间表在数据库中的名称</span>            name <span class="token operator">=</span> <span class="token string">"article_types"</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 中间表中对应到本表主键的列名, 因为主键可能是多列共同组成的一个复合列, 因此使用数组</span>            joinColumns <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"aid"</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 中间表中对应到另一张表主键的列名</span>            inverseJoinColumns <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tid"</span><span class="token punctuation">,</span> referencedColumnName <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Type<span class="token operator">></span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addType</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 类型id     */</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 类型名称     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * mappedBy用来表示主动放弃关系的维护权     */</span>    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">"types"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Article<span class="token operator">></span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addArticle</span><span class="token punctuation">(</span>Article article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>articles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationMainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ArticleRepository articleRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TypeRepository typeRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">manyToManyRelationshipTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Article</span>        Article article01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"JPA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Article article02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"Admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"Spring Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建Type</span>        Type type01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        type01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TypeA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Type type02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        type02<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"TypeB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置关系</span>        article01<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type01<span class="token punctuation">)</span><span class="token punctuation">;</span>        article01<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type02<span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type01<span class="token punctuation">)</span><span class="token punctuation">;</span>        article02<span class="token punctuation">.</span><span class="token function">addType</span><span class="token punctuation">(</span>type02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO: 1. 为什么会在这里报错java.lang.StackOverflowError呢?</span>        <span class="token comment" spellcheck="true">//  上面的也没有报错. hashCode的问题.</span>        <span class="token comment" spellcheck="true">//  并且奇怪的是, 在将@Data注解换成getter和setter方法后就正常了</span>        <span class="token comment" spellcheck="true">//  [解决]: 由于两个循环依赖的对象会互相调用toString方法, 从而导致栈溢出, @Data注解中默认包含@ToString注解. 可以显式地使用@ToString注解</span>        type01<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article01<span class="token punctuation">)</span><span class="token punctuation">;</span>        type01<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article02<span class="token punctuation">)</span><span class="token punctuation">;</span>        type02<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article01<span class="token punctuation">)</span><span class="token punctuation">;</span>        type02<span class="token punctuation">.</span><span class="token function">addArticle</span><span class="token punctuation">(</span>article02<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO: 为什么在保存成功后(insert)会执行select和update?</span>        <span class="token comment" spellcheck="true">//  [解决]: 莫名其妙地解决</span>        <span class="token comment" spellcheck="true">// 和OneToMany关系一样, 需要先保存不维护关系的实体Type, 否则会报错. </span>        <span class="token comment" spellcheck="true">// 不维护关系的实体可以认为仅仅保存自己, 不会产生循环依赖.</span>        <span class="token comment" spellcheck="true">// 而维护关系的实体, 在保存自己的时候, 还要去保存关系, 因此如果此时type没有保存, 就不会有tid, 因此报错</span>        typeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>type01<span class="token punctuation">)</span><span class="token punctuation">;</span>        typeRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>type02<span class="token punctuation">)</span><span class="token punctuation">;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article01<span class="token punctuation">)</span><span class="token punctuation">;</span>        articleRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>article02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="级联操作（需要改进）"><a href="#级联操作（需要改进）" class="headerlink" title="级联操作（需要改进）"></a>级联操作（需要改进）</h3><p><strong>TODO：对级联操作的理解有误，下面的涉及到cascade的不一定正确，有待改进。</strong></p><p>操作一个对象时，同时操作与他相关联的对象。</p><blockquote><p>  以User和Role为例，User和Role是多对多关系，数据库中有三张表 <code>user</code>、<code>role</code>、<code>user_role</code></p><ul><li><p>情况1：User和Role都不使用<code>@JoinTable</code>（没有维护关系）</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时user表和role表中都有数据, 但是user_role表中没有数据</span><span class="token comment" spellcheck="true">// 维护关系发生在save()时, 但是User和Role都没有去维护关系, 即都没有向user_role表中添加数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>情况2：User和Role都使用<code>@JoinTable</code>（都维护关系）</p><p>（TODO：期待报错主键重复，目前测试失败）</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此时roleDao.save()时出现主键重复的问题, </span><span class="token comment" spellcheck="true">// 假设userId=1, roleId=2, 在userDao.save()时向user_role表中添加数据, 但是在roleDao.save()时再次向user_role表中添加相同的主键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>情况2改进：User和Role任意一方放弃关系的维护，即调用save方法不会向user_role表中添加数据</p><p>放弃关系的维护，通过<code>@ManyToMany</code>中的<code>mappedBy</code>属性</p><p>（TODO：期待在任意一方添加上mappedBy属性后执行成功，目前测试失败）</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>情况3：在负责维护关系的实体类中使用级联操作（cascade）</p><p>不妨假设维护关系的实体类为User，那么期待仅仅通过userDao.save()就可以同时保存role</p><pre class="line-numbers language-java"><code class="language-java">userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></blockquote><h2 id="Spring-Data-Redis"><a href="#Spring-Data-Redis" class="headerlink" title="Spring Data Redis"></a>Spring Data Redis</h2><p>Spring Data Redis中提供的序列化器，可以通过 <code>RedisSerializer</code> 接口来查看有哪些序列化器</p><table><thead><tr><th>序列化器</th><th>作用</th></tr></thead><tbody><tr><td>StringRedisSerializer</td><td>简单的字符串序列化</td></tr><tr><td>GenericToStringSerializer</td><td>可以将任何对象泛化为字符串并序列化</td></tr><tr><td>Jackson2jsonRedisSerializer</td><td>序列化对象为json字符串</td></tr><tr><td>GenericJackson2jsonRedisSerializer</td><td>序列化对象为json字符串，更容易反序列化</td></tr><tr><td>OxmSerializer</td><td>序列化对象为xml字符串</td></tr><tr><td>JdkSerializationRedisSerializer（默认）</td><td>序列化对象为二进制数据</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring揭秘</title>
      <link href="/2023/05/01/spring-jie-mi/"/>
      <url>/2023/05/01/spring-jie-mi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 书籍阅读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/20/lun-wen-05-tu-shen-jing-wang-luo/"/>
      <url>/2023/04/20/lun-wen-05-tu-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="图深度学习"><a href="#图深度学习" class="headerlink" title="图深度学习"></a>图深度学习</h1><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><h3 id="1-1-图深度学习的动机"><a href="#1-1-图深度学习的动机" class="headerlink" title="1.1 图深度学习的动机"></a>1.1 图深度学习的动机</h3><blockquote><ul><li>为什么要将现实数据表示为图？</li><li>为什么要将深度学习与图联系起来？</li><li>图深度学习面临哪些挑战？</li></ul></blockquote><h4 id="为什么要将现实数据表示为图？"><a href="#为什么要将现实数据表示为图？" class="headerlink" title="为什么要将现实数据表示为图？"></a>为什么要将现实数据表示为图？</h4><p>现实世界应用产生的数据可以有多种表示形式：矩阵、张量、序列等。将数据表示为图有两个原因：</p><ul><li><strong>图提供了数据的通用表示形式，来自各个领域的系统的数据可以直接表示为图</strong>，例如，社交网络、交通运输网络、知识图谱等，许多其它类型的数据可以转换为图的表示</li><li><strong>许多现实问题可以通过图上的计算任务解决</strong>，例如，推断节点的属性、检测异常节点、识别与疾病相关的基因、向患者推荐药物，都可以归结为<strong>节点分类问题</strong>。对于朋友推荐、多药副作用预测、知识图谱补全，在本质上都是<strong>图上的链接预测问题</strong>。</li></ul><h4 id="为什么要将深度学习与图联系起来？"><a href="#为什么要将深度学习与图联系起来？" class="headerlink" title="为什么要将深度学习与图联系起来？"></a>为什么要将深度学习与图联系起来？</h4><p>图上的节点是自然相连的，这表明节点不是独立的，但是传统的机器学习方法通常假设数据是独立同分布的，因此它们不适合直接用来解决图上的计算任务，解决思路主要有两种：</p><ul><li>一种思路是建立一种特定于图的新机制，这种针对图设计的分类问题称为<strong>集体分类问题（collective classification）</strong>，与传统分类不同，对于结点来说，集体分类不仅考虑其特征与其标签之间的映射，而且还要考虑其邻域相应的映射</li><li>另一种思路是通过构建一组特征来表示其节点，在该表示上可以应用传统的分类技术，这种思路变得越来越流行且主流。<strong>该思路的关键是如何为节点构造一组特征，或者说如何构造节点表示。而深度学习在表示学习方面具有强大的功能。</strong></li></ul><h4 id="图深度学习面临哪些挑战？"><a href="#图深度学习面临哪些挑战？" class="headerlink" title="图深度学习面临哪些挑战？"></a>图深度学习面临哪些挑战？</h4><ul><li>传统的深度学习只是针对常规数据（例如图像和序列）进行设计的，而图可以具有不同的大小，图中的节点是无序的，并且可以具有不同的邻域</li><li>规则数据的结构信息很简单，而图的结构信息很复杂，并且节点和边可以包含丰富的额外信息。为传统数据设计的深度学习技术不足以捕获如此丰富的信息</li></ul><h3 id="1-2-图特征学习"><a href="#1-2-图特征学习" class="headerlink" title="1.2 图特征学习"></a>1.2 图特征学习</h3><p>为了利用传统的机器学习执行图上的计算任务，人们期望找到节点的表示形式，主要有两种方法可以实现此目标：特征工程和特征学习。</p><p>特征工程依赖手工设计的特征，例如节点度的统计信息；而特征学习是自动学习节点特征：</p><ul><li>一方面，人们通常没有办法事先知道哪些特征是重要的，特别是对于给定的下游任务而言，因此来自特诊工程的特征对于下游任务而言可能不是最理想的，并且该过程需要大量的人力；</li><li>另一方面，特征学习是自动学习特征，该过程可以由下游任务直接知道，因此学习到的特征可能适合于下游任务，且通常比通过特诊工程获得的特征能够取得更好的性能，同时该过程需要最少的人工干预，并且可以轻松地适应新任务。</li></ul><p>图的特征学习技术可以粗略地划分为：</p><ul><li>图特征选择，用于移除节点上的无关和冗余的特征</li><li>图表示学习，目的是生成一组新的节点特征</li></ul><h4 id="图特征选择"><a href="#图特征选择" class="headerlink" title="图特征选择"></a>图特征选择</h4><p>现实世界中的数据通常是高维度的，并且存在着嘈杂的、不相关的和多余的特征。<strong>特征选择的目的是</strong>自动地选择一小部分特征，这些子集具有最小的冗余度，但与学习目标有最大的相关性。在许多应用中，原始特征对于知识提取和模型解释至关重要，例如，在用于研究癌症的遗传分析中，除了区分癌组织，鉴定诱导癌症发生的基因（即原始特征）更重要。在这种应用场景下，特征选择是优先考虑的，因为它可以保留原始特征，并且他们的语义通常为学习问题提供关键见解和解释。<strong>传统的特征选择假定数据样本是独立同分布的，然而，许多应用中的数据样本都嵌入在图上，因此，它们本质上不是独立同分布的，这就是图特征选择研究的领域。</strong></p><ol><li>首先，在有监督的情况下，对该问题进行研究，这些方法使用线性分类器将所选特征映射到类别标签，并引入图正则化项，以捕获结构信息来选择特征，该正则化项的目的是确保具有所选特征的连接的节点可以映射到相似的标签中。</li><li>然后，在无监督的情况下，对问题进一步研究，首先从结构信息中提取伪标签，然后用伪标签充当监督信息知道特征选择过程。（假定节点内容和结构信息都是从一组高质量的特征中生成的，而这些特征可以通过最大化生成过程获得）</li><li>在后续的工作中，问题从简单图扩展到复杂图，例如，动态图、多维图、有符号图、属性图等等</li></ol><h4 id="图表示学习"><a href="#图表示学习" class="headerlink" title="图表示学习"></a>图表示学习</h4><p>图表示学习是学习一组新的节点特征，这个问题被研究了数十年，通过深度学习得到了极大的加速。</p><p>在早期阶段，图表示学习在谱聚类、基于图的降维和矩阵分解的背景下进行了研究。</p><ul><li><p>在谱聚类中，数据点被视为图的节点，然后聚类问题变成了将图划分为节点社区。谱聚类的关键一步是谱嵌入，它的目的是将节点嵌入到低维空间中，然后在该空间中可以将传统的聚类算法应用于识别聚类。</p></li><li><p>基于图的降维技术可以直接应用于学习节点表示，这些方法通常基于数据样本的原始特征，使用预定义的距离或相似度函数构建亲和度图，然后通过保留该亲和度图的结构信息学习节点表示。例如，IsoMap 通过测地线保留全局几何，而 LLE 和 eigenmap 保留亲和图中的局部邻域信息。因为前述方法经常需要在亲和矩阵（邻接矩阵或拉普拉斯矩阵）上进行特征分解，所以它们通常具有很高的计算复杂度。</p></li><li><p>矩阵分解可以自然地用于学习节点表示，矩阵分解的目的是将节点嵌入低维空间，在该低维空间中可以利用新的节点表示重建邻接矩阵</p></li><li><p>DeepWalk首先把Word2vec应用于图的节点表示学习，它首先把给定图中的节点视为人类语言的单词，并通过在图中随机游走生成该语言的句子。然后使用Skip-gram模型学习节点表示，从而保留了这些随机游走中的节点共现。（什么是节点共现？为什么在图中随机游走就是一个句子，该句子什么时候结束？）</p><ul><li>开发先进的方法保存节点共现</li><li>保留其他类型的信息，例如，节点的结构角色、社区信息和结点状态</li><li>设计复杂图的嵌入框架，例如，有向图、异构图、二分图、多维图、有符号图、超图、动态图</li></ul></li><li><p>因为深度学习在表示学习中的强大功能和成功经验，将深度学习扩展到图中的方法称为图神经网络（GNN），大致可以分为两类：空间方法和谱方法</p><p>空间方法显式地利用了图结构，例如空间上接近的邻居；谱方法通过图的傅里叶变换和逆变换得到图的谱视图。GNN在一下几个方面得到迅速发展：</p><ul><li>提出了大量新的GNN模型，包括谱方法和空间方法</li><li>侧重于图的任务，例如，图分类（需要得到整个图的表示）。<strong>因此，许多池化方法被提出来，目的是为了从节点表示中获得图表示</strong>。</li></ul></li></ul><h3 id="1-3-章节依赖关系"><a href="#1-3-章节依赖关系" class="headerlink" title="1.3 章节依赖关系"></a>1.3 章节依赖关系</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420104208006.png" alt="image-20230420104208006" style="zoom:50%;"><h2 id="第2章-图论基础"><a href="#第2章-图论基础" class="headerlink" title="第2章 图论基础"></a>第2章 图论基础</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><p>首先讨论图的邻接矩阵和拉普拉斯矩阵及其重要性质，接着介绍节点带有属性的图（属性图），并通过将属性定义为函数或者信号来对这类图进行新的理解。然后讨论为图深度学习奠定了重要基础的图傅里叶分析和图信号处理的基本概念。</p><h3 id="2-2-性质"><a href="#2-2-性质" class="headerlink" title="2.2 性质"></a>2.2 性质</h3><h4 id="中心性"><a href="#中心性" class="headerlink" title="中心性"></a>中心性</h4><p>节点的中心性（centrality）用于衡量节点在图中的重要性，中心性有多种类型的定义</p><ul><li><p><strong>度中心性</strong>（degree centrality）</p><p>如果有许多节点连接到某个节点 X，那么该结点 X 可以被认为是重要的。因此，可以基于一个结点的度来衡量它的中心性，即直接以节点的度作为其度中心性的定义。</p></li><li><p><strong>特征向量中心性</strong>（eigenvector centrality）</p><p>度中心性认为度越大的节点越重要，且认为所有邻居节点的贡献度是一样的。然而，这些相邻节点本身的重要性是不同的，因此，它们对于中心节点的影响也不相同。</p><p>对邻居节点的中心性的平均值，是一种递归定义。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420120627745.png" alt="image-20230420120627745"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420120639053.png" alt="image-20230420120639053"></p><p>其中 $\lambda$ 是矩阵 A 的最大的特征值，将最大特征值对应的特征向量作为中心性向量。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420121101708.png" alt="image-20230420121101708"></p><p>在上图的案例中，$v_2,v_3,v_4$ 的度都是 2，但是根据 A 得到的中心性向量 $[1,0.675,0.675,0.806,1]$，其中 $v_4$ 的中心性值为 0.806，高于另外两个度为 2 的节点，这是因为 $v_4$ 和 $v_1,v_5$ 这两个高中心性（度为3）的节点直接相连。</p></li><li><p><strong>Katz 中心性</strong></p><p>不仅考虑邻居的中心性，而且包含了一个常数来考虑中心节点本身。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420121535363.png" alt="image-20230420121535363"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420121549405.png" alt="image-20230420121549405"></p><p>$\beta$ 表示一个包含所有节点的常数项的向量。类比特征向量中心性，应该满足 $\alpha = \frac{1}{\lambda_{max}}$，但实际往往是  $\alpha &lt; \frac{1}{\lambda_{max}}$，目的是保证矩阵 $I-\alpha \cdot A$的可逆性</p></li><li><p><strong>介数中心性</strong>（Betweenness Centrality）</p><p>前面提到的中心性都是基于和相邻节点的连接，另一种度量节点重要性的方法是检查该结点是否位于图中的重要位置，例如，许多路通过同一个结点，那么该节点处于图中的一个重要位置。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420122232905.png" alt="image-20230420122232905"></p></li></ul><h3 id="2-3-谱图论"><a href="#2-3-谱图论" class="headerlink" title="2.3 谱图论"></a>2.3 谱图论</h3><p>图的拉普拉斯矩阵<br>$$<br>L = D-A<br>$$<br>归一化拉普拉斯矩阵<br>$$<br>L = D^{-\frac{1}{2}} (D-A) D^{\frac{1}{2}}<br>$$<br>拉普拉斯矩阵是半正定的，即对于任意一个实向量 $x$，满足 $x ^T L x \ge 0$。因此拉普拉斯矩阵的特征值是非负的。</p><p>拉普拉斯矩阵的零特征值的数量是图中连通分量的数目。</p><h3 id="2-4-图信号处理"><a href="#2-4-图信号处理" class="headerlink" title="2.4 图信号处理"></a>2.4 图信号处理</h3><p>图中的节点常常关联一些特征或属性，这种图结构数据可以看做图信号，它捕获结构信息（即节点之间的连接）和数据（即节点上的属性）。</p><p>图信号由图 G={V,E} 和映射函数 f 构造，其中映射函数 f 将节点域上节点映射为实数值。</p><p><strong>如果图中相邻的节点的值是相似的，那么认为这个图是平滑的（smooth）</strong>。一个平滑的图信号是低频率的，因为这些值通过图中的边在缓慢地变化。拉普拉斯矩阵的二次型可以用来测量一个图信号 f 的平滑度（频率），因为 $f^T L f$ 是所有相邻节点对的平方差之和。一个图信号 f 越平滑，则 $f^T L f$ 的值越小，<strong>即 $f^T L f$ 的值被称为信号的平滑度（频率）。</strong></p><p>在传统的信号处理，信号可以表示在两个域：时域和频域。同样，图信号也可以表示在两个域，即空间域和谱域（频域）。图信号的谱域基础是图傅里叶变换（GFT），GFT 建立在谱图论之上。</p><h3 id="2-5-复杂图"><a href="#2-5-复杂图" class="headerlink" title="2.5 复杂图"></a>2.5 复杂图</h3><h4 id="异质图"><a href="#异质图" class="headerlink" title="异质图"></a>异质图</h4><p>同质图中，每个节点都认为是同一个类型的节点，或者说每个节点具有的属性都相同；而异质图中，图中存在多种类型的节点，例如，知识图谱中存在作者节点、论文节点、会议节点等不同类型的节点。</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420133546299.png" alt="image-20230420133546299" style="zoom:50%;"><h4 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h4><h4 id="多维图"><a href="#多维图" class="headerlink" title="多维图"></a>多维图</h4><p>节点和节点之间可以同时存在多种关系，例如，用户可以对视频进行点赞、分享、投币等</p><h4 id="符号图"><a href="#符号图" class="headerlink" title="符号图"></a>符号图</h4><p>包含正边和负边的符号图（signed graphs），例如，用户关注用户为正，用户屏蔽用户为负</p><h4 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h4><p>每个节点或每条边都与时间戳相关联，例如，下图中每条边都与一个时间戳相关联，而节点的时间戳是该节点产生第一条边的时间。</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420134209184.png" alt="image-20230420134209184" style="zoom:67%;"><p>在实际情况中，无法记录每个节点和每条边的时间戳，通常在每隔一段时间记录图的快照，这种动态图称为离散动态图，它由一系列快照图组成。离散动态图可以认为是一个时间序列。</p><h3 id="2-6-图的计算任务"><a href="#2-6-图的计算任务" class="headerlink" title="2.6 图的计算任务"></a>2.6 图的计算任务</h3><p>图上的各种计算任务可以分为两大类：</p><ul><li><p>一类侧重于节点的任务（node-level tasks），其中整个数据通常表示为一个图，每个数据样本是图中的一个节点</p><ul><li><p>节点分类</p><p>在现实世界的图中，节点常常与有用的信息相关联，这些信息可以被视为节点的标签。在社交网络中，这类信息可以是用户的人口统计属性，例如，年龄、性别、职业、兴趣、爱好等。这些标签有助于描述该节点的特征。但是通常很难为所有节点获得完整的标签集，只有不到1%的用户提供了完整的个人属性，因此<strong>很多时候得到的是一个只有一部分节点有标签的图，而哪些无标签的节点就需要通过模型预测标签。这就是节点分类问题。</strong></p></li><li><p>节点排序</p></li><li><p>链接预测</p><p>在许多实际应用中，图并不是完整的，会缺失一些节点之间的连接。一方面，这些连接是真实存在的，但是它们没有被观察到或者被记录下来，这就导致在图中丢失一些边。另外，许多图是自然演变的，例如，用户可以不断地与其它用户成为朋友。推断或预测这些缺失的连接可以用于许多场景，例如，好友推荐（friend recommendation）、知识图谱补全（knowledge graph completion）和犯罪情报分析（criminal intelligence analysis）。简单来说，连接预测就是预测在邻接矩阵中，哪些0值的位置最有可能变成1。</p></li><li><p>社区检测</p></li></ul></li><li><p>另一类侧重于图的任务（graph-level tasks），其中数据往往包括一组图，每个数据样本是一个图</p><ul><li><p>图分类</p><p>图分类任务的本质是预测未标记图的标签。</p></li><li><p>图匹配</p></li><li><p>图生成</p></li></ul></li></ul><h2 id="第4章-图嵌入"><a href="#第4章-图嵌入" class="headerlink" title="第4章 图嵌入"></a>第4章 图嵌入</h2><p><strong>将节点特征和图结构作为输入，以一组新的节点特征作为输出的过程称为图滤波操作（graph filtering）</strong>。图深度学习目的是学习每个节点的代表性特征，这些节点特征有助于该类任务的后续处理。</p><p>对于侧重于节点的任务来说，仅仅使用图滤波操作就足够了，通常通过连续堆叠多个图滤波操作来生成最终的节点特征。但是对于侧重于图的任务来说，最终目标是学习整个图的代表性特征，而学习节点特征通常只是一个中间步骤，还需要其他的操作从节点特征生成整个图的特征，例如，池化操作（pooling）被用来汇总节点特征以生成图特征。<strong>由于图结构是不规则的，这就要求图的池化操作和传统的池化操作有所不同，图的池化操作应该利用图结构信息来指导池化过程。</strong>实际上，池化操作通常将图作为输入，然后生成节点更少的粗化图。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420155754867.png" alt="image-20230420155754867"></p><h3 id="4-3-图滤波器"><a href="#4-3-图滤波器" class="headerlink" title="4.3 图滤波器"></a>4.3 图滤波器</h3><h4 id="基于谱的图滤波器（graph-spectral-filtering）"><a href="#基于谱的图滤波器（graph-spectral-filtering）" class="headerlink" title="基于谱的图滤波器（graph spectral filtering）"></a>基于谱的图滤波器（graph spectral filtering）</h4><p>图谱滤波器是在图信号的谱域中设计的，图谱滤波的思想是调制图信号的频率，使得其中一些频率分量被保留或放大，而另一些频率分量被移除或减小。给定一个图信号，首先需要对其进行图傅里叶变换（GFT）以获得它的图傅里叶系数，然后对这些系数进行调制，再在图域（空间域）中重构该信号。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230420161524269.png" alt="image-20230420161524269"></p><h2 id="第10章-自然语言处理中的图神经网络"><a href="#第10章-自然语言处理中的图神经网络" class="headerlink" title="第10章 自然语言处理中的图神经网络"></a>第10章 自然语言处理中的图神经网络</h2><p>首先介绍常见的 NLP 任务，包括语义角色标注、神经机器翻译、关系抽取、问答系统和图到序列学习，以及它们对应的图神经网络模型。然后介绍知识图谱的概念，以及如何将 GNN 应用于知识图谱。</p><p>GNN 已经被用来辅助解决许多种 NLP 任务，例如，语义角色标注，多跳问答系统、关系抽取、神经机器翻译和图表示学习。以图的形式编码多种关系信息的知识图谱也在 NLP 任务中得到了广泛的应用，许多工作致力于将 GNN 模型推广到知识图谱领域。</p><h3 id="10-1-语义角色标注（Semantic-Role-Labeling，SRL）"><a href="#10-1-语义角色标注（Semantic-Role-Labeling，SRL）" class="headerlink" title="10.1 语义角色标注（Semantic Role Labeling，SRL）"></a>10.1 语义角色标注（Semantic Role Labeling，SRL）</h3><p>SRL 的目的是发现句子中隐藏的谓语-论元（predicate-argument）结构，可以非正式地被定义为发现<strong>“谁在哪里对谁做了什么”</strong>的任务。SRL 的步骤：</p><ol><li>检测谓语</li><li>识别论元并贴上语义角色的标签。（区分 agent 和 theme，即主语和宾语）</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/16/lun-wen-00-cai-liao/"/>
      <url>/2023/04/16/lun-wen-00-cai-liao/</url>
      
        <content type="html"><![CDATA[<p><strong>social network(社交网络)</strong>: graphs of people</p><p>Graphs are powerful structures useful not only for representing connected information, but also for supporting multiple types of analysis.</p><p>应用场景</p><ul><li>推荐系统Recommendation</li><li>欺诈检测Fraud detection</li></ul><p>性能</p><ul><li><p>精度accuracy</p></li><li><p>速度speed</p><p>例如推荐系统中提供预测的速度会影响整个产品的可用性</p></li></ul><p>图的优势：</p><ul><li>以一种易于理解和易于访问的方式来表示数据representing data in a way that is easily understandable and easily accessible</li><li>图对于数据的表示更快、更准确、更有效（全面）</li><li>图算法也是一种有效的机器学习工具：graph community detection 和 page rank 算法</li></ul><p>学习是将经验转化为专业知识或知识的过程，学习是要提升泛化能力，要能举三反一。模型要能够归纳推理</p><p>从错误的数据学习到错误的结果，无论使用的算法如何高级或者性能如何优异</p><p>为图上的顶点和边分配不同的语义来表示不同的网络：设计网络、交通网络、信息网络等等</p><p>contextalized word embedding（CoVe：Context Vector）：看完一整个句子后，才对每个单词进行编码。这样能够获取上下文信息，避免相同的单词一定输出相同的向量（普通的word2vec模型没有考虑语义信息，例如，单身狗和一只狗）</p><p>输入：</p><ul><li>one sentence</li><li>multiple sentences</li></ul><p>输出：</p><ul><li><p>one class</p><p>每个token的embedding vector平均，或RNN，…</p></li><li><p>class for each token</p></li></ul><ul><li><p>copy from input</p><p>例如，从文章里面提取答案，即答案完完全全从文章材料中获得。</p></li><li><p>general sequence</p></li></ul><p><strong>如何 pre train</strong></p><p>使用翻译任务作为预训练的任务，可以如实地呈现词语的语义信息，不会受到具体的下游任务的影响而造成embedding vector。但是需要成对的训练资料，英文资料和翻译后的中文资料，这给训练任务的数据收集造成困难。</p><p>因此提出self supervised learning技术，希望通过没有标注的文本来进行训练。self supervised learning是将训练数据x产生两个方向，分别是x‘和x’‘，其中x’作为模型的输入，而x’‘作为模型的输出。在NLP领域，用预测下一个token的任务来取代翻译任务作为模型预训练过程中的任务，此时有一个句子x（token1，token2，…，tokenn），将token1输入到模型中，其目标输出是token2，此时输入和目标输出都来源于原始的数据x中。</p><p>和时间序列一样，训练过程需要使用self-attention时需要使用mask，来防止模型直接使用后面的输入来作为前一个时刻的目标输出（这是self supervised的trick，但是不希望pre train的模型只学习到这个，因为没有泛化能力，所以需要<strong>使用mask来防止pre train的模型在训练过程中“偷看”答案</strong>）</p><p>BERT中似乎也有重构损失（reconstruction loss）</p><p>用pre-train的模型来作为encoder，用具体的task-specific的模型作为decoder。但是这样会导致task specific模型没有被预训练过</p><p><strong>如何 fine tune</strong></p><p>fine-tune阶段既可以将pre-train的模型中的参数固定住（fix），将pre-train模型作为一个特征提取器（feature extractor）；也可以将pre train模型和task specific模型一起fine tune（微调），一般而言，一起fine tune的效果可能更好，但是一起fine tune存在的问题是pre train模型会跟下游任务相关，导致一个下游任务产生一个pre train模型的参数。现在的想法是，下游任务对pre train模型造成的影响通过另外一个小模型体现出来（Apt适配器部分），对于一个具体的下游任务只需要保存小模型Apt适配器即可.</p><h2 id="Fastformer（2021-反例）"><a href="#Fastformer（2021-反例）" class="headerlink" title="Fastformer（2021 反例）"></a>Fastformer（2021 反例）</h2><p>宣称使用 O(n) 的加法注意力机制</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418144735823.png" alt="image-20230418144735823" style="zoom:67%;"><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418145140790.png" alt="image-20230418145140790"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418145154292.png" alt="image-20230418145154292"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418145212751.png" alt="image-20230418145212751"></p><p>批评点：</p><ul><li>不是attention机制，w在模型完成之后就定死了，而attention机制中qk都是跟随序列可变的，本质上是MLP</li><li>没有进行消融实验验证 最后一步拼接操作<code>+</code>的有效性，有些莫名其妙</li></ul><h2 id="Specformer（2023-ICLR）"><a href="#Specformer（2023-ICLR）" class="headerlink" title="Specformer（2023 ICLR）"></a>Specformer（2023 ICLR）</h2><p>对图特征的利用方式分类</p><ul><li><p>spatial GNN</p><p>采用消息传递框架（message passing framework），通过GCN来传播局部信息</p><ul><li>GAT</li><li>MPNN</li></ul><p>可能存在<strong>过度平滑和过度挤压的问题，GCN的层数不能太深，一般2到3层，需要平衡局部信息和全局信息</strong>，这也是spatial GNN研究的一个重点</p></li><li><p>spectral GNN</p><p>通过<strong>在图的拉普拉斯矩阵上应用spectral filter来替代GCN，利用图拉普拉斯矩阵的谱在谱域内进行卷积</strong>。</p><ul><li>一个主流方向是<strong>利用不同的正交多项式（正交基）来近似滤波器</strong>，依赖对称矩阵的对角化来避免高代价的矩阵的谱分解</li><li>另一个方向多多少少需要进行谱分解，例如SpectralCNN、LanczosNet。这个方向通过神经网络参数来表示spectral filter，因此比预定义的正交基有更强的表示能力，但是这种滤波器还是不能捕获多个特征值之间的依赖关系。</li></ul></li><li><p>Graph Transformer</p><p>Transformer 和 GNN 有着强关联，Transformer的attention weight可以看做是节点和节点之间的邻接矩阵。Graph Transformer仍然属于spatial GNN的一类。例如，Graphormer、SAN、GPS（graph signal process）。spatial attention 相较于 spectral attention 有一些限制，参考文献Bastos 2022。</p></li></ul><p>spectral GNN 目前发展不如 spatial GNN，原因有下：<strong>（引出关键是对spectral filter的设计，即论文贡献）</strong></p><ol><li><strong>现有大多数的 spectral filter 本质上是标量到标量的函数（scalar-to-scalar function）</strong>，具体来说，将单个特征值（eigenvalue）作为输入，<strong>对所有的特征值使用相同的 spectral filter</strong>，<strong>这种过滤机制忽略了嵌入在spectrum（频谱）中的丰富信息</strong>。例如，从spectral GNN的理论中，特征值为0的代数重数表示图中连通分量的个数，但是这些信息不能被scalar-to-scalar filter捕获到。</li><li><strong>spectral filter通常使用固定阶的标准正交基（切比雪夫多项式、图小波等）来表示</strong>，从而避免高代价的拉普拉斯矩阵的谱分解。虽然正交基有着很好的性质，但是<strong>固定阶（代表截断）</strong>的这种近似的表达能力比较差，可能会严重限制图表示的学习。</li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418135911797.png" alt="image-20230418135911797"></p><p>利用 Transformer 来捕获所有特征值的大小和相对差异</p><ol><li><p>如果直接使用特征值（标量scalar）来计算attention map，那么self-attention受到严重限制。所以<strong>使用一个encoding function使其从标量转换成向量</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418140838212.png" alt="image-20230418140838212"></p><p>该函数的三个优点：</p><ul><li>能够捕获特征值的相对频移（relative frequency shifts of eigenvalues ？？？），从标量转换成向量</li><li>波长范围是2pi到 10000*2pi，构成特征值的多尺度表示（？？？）</li><li>能够通过调节参数e来控制特征值的影响，并且该影响是巨大的，通过实验进行说明</li></ul><p>EE（eigenvalue encoding）和 PE（position encoding）相似，PE描述的是spatial domain中的位置信息，EE代表的是spectral domain中连续特征值（continuous eigenvalues）的信息，但是将PE应用于特征值的位置信息上会破坏permutation equivariance properties（排列等方差性），损害学习能力。</p></li><li><p>一个Zm对应经过decoder之后对应一个特征值的spectral filter，然后重构</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418142853870.png" alt="image-20230418142853870"></p><p>​                                         <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418142802735.png" alt="image-20230418142802735"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230418154417233.png" alt="image-20230418154417233"></p></li></ol><p>和其它模型的对比</p><ul><li><p>和Polynomial GNN对比：</p><p>Polynomial GNN使用多项式（x，x^2，x^3，…）来进行表示。</p><ul><li>Specformer更通用，Specformer可以近似表示任何多项式，多项式是Specformer的一种特例。</li><li>Specformer更灵活，Polynomial GNN对于所有的特征值都使用共享的function，而Specformer是每个特征值使用一个专门的function</li></ul></li><li><p>和MPNN对比：</p><ul><li>MPNN通过GCN聚合局部的邻居节点的信息，计算效率高，但是捕获全局信息的能力弱（存在过度平滑的问题）</li><li>Specformer由于使用了稠密的特征值，本质上是非局部的（no local）。</li></ul><p>全局信息 &gt; 局部信息吗？Specformer能够捕获全局信息就更优秀？</p></li><li><p>和 Graph Transformer对比：</p><p>现有的Graph Transformer在graph-level tasks上效果好，但是在node-level tasks上没有竞争力，例如node classification（最近一些研究在证明这个现象）。而Specformer 在这两类任务上表现都良好。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BERT</title>
      <link href="/2023/04/16/lun-wen-03-zi-jian-du-xue-xi-bert/"/>
      <url>/2023/04/16/lun-wen-03-zi-jian-du-xue-xi-bert/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/14/spring-yuan-ma-jie-xi-05/"/>
      <url>/2023/04/14/spring-yuan-ma-jie-xi-05/</url>
      
        <content type="html"><![CDATA[<h1 id="ComponentScan-组件扫描的实现逻辑"><a href="#ComponentScan-组件扫描的实现逻辑" class="headerlink" title="@ComponentScan 组件扫描的实现逻辑"></a>@ComponentScan 组件扫描的实现逻辑</h1><ol><li>通过 <code>AnnotationUtils.findAnnotation()</code> 来获取该注解的信息（注解信息主要是扫描的包，以及配置类中是否包含该注解）</li><li>解析并拼接转换字符串（从设置的包名到实际的文件路径名）</li><li>通过 <code>getResource()</code> 获取这些资源（二进制字节码 <code>.class</code>）</li><li>判断这些资源是否是 Spring 的组件：包含 <code>@Component</code> 或其衍生注解</li><li>创建并根据信息（信息通过反射工具类获取）设置 <code>BeanDefinition</code></li><li>在 BeanFactory 中注册 BeanDefinition</li></ol><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bean的生命周期</title>
      <link href="/2023/04/13/spring-yuan-ma-jie-xi-04/"/>
      <url>/2023/04/13/spring-yuan-ma-jie-xi-04/</url>
      
        <content type="html"><![CDATA[<h1 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h1><p>执行顺序：</p><ol><li>无参构造函数</li><li>依赖注入（包括属性注入）</li><li>初始化方法</li><li>销毁方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PreDestroy<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComponentBean</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ComponentBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 由于没有进行日志设置的配置, 因此默认情况下logger.debug()并不会被输出     */</span>    <span class="token keyword">public</span> <span class="token function">ComponentBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"无参构造函数:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @Autowired注解添加在方法上, 和@Bean的效果类似, 会从Spring容器中按类型查找形参对象,      * 但是如果形参是String类型, 则需要额外使用@Value进行注入. 暂且将其当作@Value为成员变量进行依赖注入     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAutowired</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${JAVA_HOME}"</span><span class="token punctuation">)</span> String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Autowired方法:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"set方法进行属性注入:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"postConstruct注解:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"preDestroy注解:{}"</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BeanPostProcessor-Bean后置处理器"><a href="#BeanPostProcessor-Bean后置处理器" class="headerlink" title="BeanPostProcessor Bean后置处理器"></a>BeanPostProcessor Bean后置处理器</h2><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h2><p>模板方法中的某个位置：对应一个函数式接口</p><p>一种增强：对应函数式接口的一个实现（或者称为一个lambda表达式）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodMain</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>MyPostProcessor<span class="token operator">></span> postProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPostProcessor</span><span class="token punctuation">(</span>MyPostProcessor myPostProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        postProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"依赖注入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理每一个的增强功能</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MyPostProcessor postProcessor <span class="token operator">:</span> postProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            postProcessor<span class="token punctuation">.</span><span class="token function">deal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TemplateMethodMain templateMethodMain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateMethodMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用者添加功能即可, 不需要修改原有的类</span>        templateMethodMain<span class="token punctuation">.</span><span class="token function">addPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析@MyAutowired注解"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMethodMain<span class="token punctuation">.</span><span class="token function">addPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解析@MyResource注解"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateMethodMain<span class="token punctuation">.</span><span class="token function">runV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">MyPostProcessor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">deal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230414105952274.png" alt="Bean生命周期的各个阶段(注解+Bean后处理器)"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/11/lun-wen-02-shi-jian-xu-lie/"/>
      <url>/2023/04/11/lun-wen-02-shi-jian-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="StemGNN（2020-NIPS"><a href="#StemGNN（2020-NIPS" class="headerlink" title="StemGNN（2020 NIPS)"></a>StemGNN（2020 NIPS)</h1><h2 id="Preliminary"><a href="#Preliminary" class="headerlink" title="Preliminary"></a>Preliminary</h2><p>此文做的是多变量时序预测任务。像通过一支股票的走势预测它未来的价格是单变量时序预测，如果同时观察多支股票并作出相应预测即可看成是多变量时序预测。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123338567.png" alt="image-20230411123338567"></p><h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><p>多变量时序预测往往需要对单个变量内在的时间模式和多个变量间的关系同时进行建模。现有的多变量时序预测模型大多是直接堆叠例如GRU、TCN、GCN等时空间模块来捕捉时空间依赖，只能捕捉到时域的时间模式并且需要预先定义好的邻接矩阵。</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>现在已经有工作使用离散傅里叶变换（DFT）与神经网络结合对时间序列做分析。考虑到<strong>将序列转到频域后能有更清晰的时间模式，作者选择在频域上提取时空依赖。</strong></p><h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><ul><li>此文设计了名为StemGNN的结构，<strong>通过离散傅里叶变换（DFT）和图傅里叶变换（GFT）将时空域转到频域，并同时在频域上捕捉时空间依赖。</strong></li><li>此文使用数据驱动的方法学习序列间的相关性来构建邻接矩阵从而<strong>不再需要预先定义邻接矩阵。</strong></li><li>StemGNN在9个基准上取得了sota的结果。</li></ul><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><h3 id="Overview："><a href="#Overview：" class="headerlink" title="Overview："></a>Overview：</h3><p>如下图所示，输入首先经过Latent correlation layer学习变量间的隐关联并作为邻接矩阵。然后将输入和学习到的邻接矩阵一同输入到两层StemGNN模块中。StemGNN模块首先使用GFT将空间维度从空域转换到频域，然后使用DFT将时间维度从时域转到频域。紧接着此文在时间频域中使用1D-CNN和GLU提取时间频域中的时间模式，然后再使用IDFT将时间维度从频域转回时域。最后使用GCN提取空间频域的空间依赖并使用IGFT将空间维度从频域转回空域。</p><p><img src="https://pic1.zhimg.com/80/v2-7e6445924efac84660be9fc9f2cb3dc4_1440w.webp" alt="img"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123456093.png" alt="image-20230411123456093"></p><p>上式的前一部分是预测loss，后一部分是重建loss。因为模型是迭代预测，那么模型是否能准确识别每一次的输入也至关重要，重建loss能让模型更好的识别每一次的输入。</p><h3 id="Latent-Correlation-Layer："><a href="#Latent-Correlation-Layer：" class="headerlink" title="Latent Correlation Layer："></a>Latent Correlation Layer：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123521433.png" alt="image-20230411123521433"></p><h3 id="StemGNN-Block："><a href="#StemGNN-Block：" class="headerlink" title="StemGNN Block："></a>StemGNN Block：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123536616.png" alt="image-20230411123536616"></p><h3 id="Spectral-Sequential-Cell-Spe-Seq-Cell-："><a href="#Spectral-Sequential-Cell-Spe-Seq-Cell-：" class="headerlink" title="Spectral Sequential Cell (Spe-Seq Cell)："></a>Spectral Sequential Cell (Spe-Seq Cell)：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123551002.png" alt="image-20230411123551002"></p><h3 id="Spectral-Graph-Convolution："><a href="#Spectral-Graph-Convolution：" class="headerlink" title="Spectral Graph Convolution："></a>Spectral Graph Convolution：</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230411123607535.png" alt="image-20230411123607535"></p><h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h2><h3 id="Datasets："><a href="#Datasets：" class="headerlink" title="Datasets："></a>Datasets：</h3><p>本文一共使用了9个数据集如下图所示</p><p><img src="https://pic4.zhimg.com/80/v2-30f840a10f17bf506441d58cab1fc9ff_1440w.webp" alt="img"></p><h3 id="Results："><a href="#Results：" class="headerlink" title="Results："></a>Results：</h3><p>StemGNN与单变量时序预测模型TCN、NBeats；多变量时序预测模型等DCRNN、ST-GCN等进行比较。下图中可以看到StemGNN除了PEMS08的MAE外均取得了最好的结果，同时多变量时序模型在多变量任务上优于单变量模型。</p><p><img src="https://pic1.zhimg.com/80/v2-7b423d902f8c7c5e0f62ac4b96d20588_1440w.webp" alt="img"></p><h3 id="Ablation-Study："><a href="#Ablation-Study：" class="headerlink" title="Ablation Study："></a>Ablation Study：</h3><p>此文进行消融实验验证了提出的各个部分的有效性，可以看出没有时间提取Spe-Seq后效果最差。</p><p><img src="https://pic2.zhimg.com/80/v2-7e9cbc75b8ff0cbd6489c58cab02f3fd_1440w.webp" alt="img"></p><h3 id="Analysis："><a href="#Analysis：" class="headerlink" title="Analysis："></a>Analysis：</h3><p>此文对学习到的邻接矩阵进行可视化如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-7733320f40e5a7c0854f7f426731baf5_1440w.webp" alt="img"></p><p>此文还对COVID-19数据集进行实验并可视化了邻接矩阵，如下图所示。</p><p><img src="https://pic4.zhimg.com/80/v2-e92c85e74506ed2b634bc52afe45b8cf_1440w.webp" alt="img"></p><p>最后此文可视化了GFT和DFT后的时间序列并可视化，可以看到频域上的序列更加平滑容易预测。</p><p><img src="https://pic4.zhimg.com/80/v2-8061f51725a3a716edca61b31d5a5787_1440w.webp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/07/dozer-de-shi-yong/"/>
      <url>/2023/04/07/dozer-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Dozer"><a href="#Dozer" class="headerlink" title="Dozer"></a>Dozer</h1><p>作用：BeanUtils 的升级版，用于实现的对两个 Java Bean 对象之间进行字段的映射，从而进行实体之间的转换。</p><p>dozer 映射文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappings</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dozermapper.github.io/schema/bean-mapping<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dozermapper.github.io/schema/bean-mapping                              https://dozermapper.github.io/schema/bean-mapping.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    可以使用map-id指定映射的标识，在程序中通过此标识来确定使用当前这个映射关系    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapping</span> <span class="token attr-name">date-format</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>yyyy-MM-dd<span class="token punctuation">"</span></span> <span class="token attr-name">map-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class-a</span><span class="token punctuation">></span></span>org.example.model.po.UserEntity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class-a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class-b</span><span class="token punctuation">></span></span>org.example.model.dto.UserDTO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>class-b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>userId<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>userName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>age<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>userAge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限管理系统</title>
      <link href="/2023/04/06/hei-ma-pin-da-quan-xian-guan-li-xi-tong/"/>
      <url>/2023/04/06/hei-ma-pin-da-quan-xian-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="权限管理系统"><a href="#权限管理系统" class="headerlink" title="权限管理系统"></a>权限管理系统</h1><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><h3 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/1581494294533.png" alt="1581494294533"></p><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/1581494316483.png" alt="1581494316483"></p><h2 id="SpringBoot-Starter-原理"><a href="#SpringBoot-Starter-原理" class="headerlink" title="SpringBoot Starter 原理"></a>SpringBoot Starter 原理</h2><p>SpringBoot 简化 Spring 的原因就是提供了许多 starter，而 starter 本质上就是引入了一些相关依赖和进行一些初始化的自动配置。</p><ul><li><p>打包依赖</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406110749971.png" alt="spring-boot-starter-web打包相关功能的依赖"></p></li><li><p>自动配置</p></li></ul><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><ol><li><p>基于 Java 代码的 Bean 配置</p><p>@Configuration + @Bean</p></li><li><p>自动配置条件依赖</p><p>@Conditional</p></li><li><p>Bean 参数获取</p><p>@EnableConfigurationProperties + @ConfigurationProperties（读取配置文件，转换为 Bean 对象）</p></li><li><p>Bean 的发现</p><p>@EnableAutoConfiguration + @Import</p><p>（解决的是 jar 包中的自动配置类 <code>XXXAutoConfiguration</code> 这些是如何被我们的 <code>@SpringBootApplication</code> 发现的）</p></li><li><p>Bean 的加载</p></li></ol><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="Nacos-配置"><a href="#Nacos-配置" class="headerlink" title="Nacos 配置"></a>Nacos 配置</h3><p>修改 Nacos 的配置文件，将由 Nacos 管理的数据保存到自定义的数据库中，而不是保存到 Nacos 内部的数据库。</p><ol><li><p>修改 <code>conf/application.properties</code> 文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token comment" spellcheck="true">## Count of DB:</span><span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">## Connect URL of DB:</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><span class="token attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行 <code>conf</code> 目录下的 sql 文件</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406190326374.png" alt="nacos数据库的表结构"></p></li><li><p>一般一个项目对应一个 namespace，默认情况下是 public，这里创建一个自定义的命名空间，同时可以在表中查看到相应的变化</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406192623599.png" alt="新建命名空间"></p></li><li><p>在 Nacos 中导入一些和项目相关的配置文件</p></li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="不使用签名"><a href="#不使用签名" class="headerlink" title="不使用签名"></a>不使用签名</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwtNoSignTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成JWT Token</span>        String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jwt jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Header 和 Body 直接打印输出就是 hash 表</span>        Header jwtHeader <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtHeader = "</span> <span class="token operator">+</span> jwtHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object alg <span class="token operator">=</span> jwtHeader<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>alg<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> jwtBody <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> jwt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtBody = "</span> <span class="token operator">+</span> jwtBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object userId <span class="token operator">=</span> jwtBody<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-HS256-对称加密算法签名"><a href="#使用-HS256-对称加密算法签名" class="headerlink" title="使用 HS256 对称加密算法签名"></a>使用 HS256 对称加密算法签名</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwtWithSignTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String secretKey <span class="token operator">=</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"alg"</span><span class="token punctuation">,</span> SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"JWT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>HS256<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtToken = "</span> <span class="token operator">+</span> jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jwt jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Header jwtHeader <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object jwtBody <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtHeader = "</span> <span class="token operator">+</span> jwtHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtBody = "</span> <span class="token operator">+</span> jwtBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-RS256-非对称加密算法签名"><a href="#使用-RS256-非对称加密算法签名" class="headerlink" title="使用 RS256 非对称加密算法签名"></a>使用 RS256 非对称加密算法签名</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readBytesFromFile</span><span class="token punctuation">(</span>String filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result<span class="token punctuation">;</span>        InputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        DataInputStream dataInputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResourceAsStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            dataInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>dataInputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dataInputStream<span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataInputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dataInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jwtRS256Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO: 这里需要替换成从指定的密钥文件读取的字节</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyBytes <span class="token operator">=</span> <span class="token function">readBytesFromFile</span><span class="token punctuation">(</span><span class="token string">"pri.key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PKCS8EncodedKeySpec privateKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>privateKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>privateKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyBytes <span class="token operator">=</span> <span class="token function">readBytesFromFile</span><span class="token punctuation">(</span><span class="token string">"pub.key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        X509EncodedKeySpec publicKeySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>publicKeyBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        PublicKey publicKey <span class="token operator">=</span> KeyFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>publicKeySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jwtToken <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>SignatureAlgorithm<span class="token punctuation">.</span>RS256<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Jwt jwt <span class="token operator">=</span> Jwts<span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jwtToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        Header jwtHeader <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object jwtBody <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtHeader = "</span> <span class="token operator">+</span> jwtHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jwtBody = "</span> <span class="token operator">+</span> jwtBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h2><p><strong>引入 <code>@EnableLoginArgsResolver</code> 注解才开启相应的功能</strong>，这种功能的实现是通过在配置类中完成相应功能的设置，但是此时配置类不添加 <code>@Configuration</code>，即该类拥有配置类的功能，但是不被 Spring 框架的组件扫描发现（不被认为是配置类）。而 <code>@EnableLoginArgsResolver</code> 做的事情可以认为是就是 <code>@Import(XXXConfig)</code>，即对 <code>@Import</code> 注解的封装，从而让 Spring 框架发现该配置类。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>如果不进行异常处理，那么程序中如果发生异常，则异常错误会直接显示在页面上，造成不友好的用户体验</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义 Spring-Boot-Starter</title>
      <link href="/2023/04/06/springboot-starter-zi-ding-yi/"/>
      <url>/2023/04/06/springboot-starter-zi-ding-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义-spring-boot-starter"><a href="#自定义-spring-boot-starter" class="headerlink" title="自定义 spring-boot-starter"></a>自定义 spring-boot-starter</h1><h2 id="spring-boot-starter-的作用"><a href="#spring-boot-starter-的作用" class="headerlink" title="spring-boot-starter 的作用"></a>spring-boot-starter 的作用</h2><p>xxx-spring-boot-starter 本质上也是一个 Spring 项目。将其作为一个 pom 依赖引入后，当前项目中可以直接使用在 xxx-spring-boot-starter 项目里面配置好的设置，达到一个配置重用的效果，即自动配置。下面以自定义的一个 <code>hello-spring-boot-starter</code> 为例，分别介绍如何使用和如何创建这样的一个 starter。</p><h2 id="spring-boot-starter-的使用"><a href="#spring-boot-starter-的使用" class="headerlink" title="spring-boot-starter 的使用"></a>spring-boot-starter 的使用</h2><p>hello-spring-boot-starter 是自定义的一个 springboot 项目，没有主启动类，也不需要主启动类。其功能是读取配置文件的值，利用这些值配置一个 <code>HelloService</code> 对象，从而达到其它项目在引入 <code>hello-spring-boot-starter</code>的 pom 依赖后可以直接利用 <code>@Autowired</code> 使用该 <code>HelloService</code> 对象。</p><ol><li><p>引入 pom 依赖</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--hello-spring-boot-starter是自定义的一个springboot项目--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件（可以省略，不省略则表示覆盖默认值）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 覆盖设置的默认值（root和root）</span><span class="token key atrule">hello</span><span class="token punctuation">:</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> admin    <span class="token key atrule">password</span><span class="token punctuation">:</span> admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>@SpringBootTest</code> 中使用 <code>HelloService</code> 对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">HeimaSecurityApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloService helloService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getHelloSpringBootStarterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406140250664.png" alt="输出测试结果"></p></li></ol><h2 id="spring-boot-starter-的创建"><a href="#spring-boot-starter-的创建" class="headerlink" title="spring-boot-starter 的创建"></a>spring-boot-starter 的创建</h2><ol><li><p>hello-spring-boot-starter 项目的结构</p><ul><li><code>HelloServiceAutoConfiguration</code>：（自动）配置类</li><li><code>HelloServiceProperties</code>：配置文件读取类</li><li><code>HelloService</code>：（自动）配置的目标类</li><li><code>META-INF/spring.factories</code>：在引入 hello-spring-boot-starter 的其它 SpringBoot 项目中，会扫描该文件路径来获取自动配置类（Spring自动配置源码硬编码）</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406141116924.png" alt="项目结构图"></p></li><li><p>pom 文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--引入spring-boot-starter-parent来进行版本管理, 减少需要手动管理的依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--本项目的相关信息--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hello-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--xxx-spring-boot-starter项目的核心依赖, 其它的都是次要的--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HelloService 自动配置的目标类（可以不是 hello-spring-boot-starter 项目中的类，或者说往往不是，这里为了简化问题的处理）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HelloService</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello{"</span> <span class="token operator">+</span>                <span class="token string">"username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>HelloServiceAutoConfiguration 自动配置类</p><p>自动配置是相对于使用 hello-spring-boot-starter 作为其 pom 依赖的 SpringBoot 项目而言的，在 hello-spring-boot-starter 项目本身中，所谓的自动配置类就是一个配置类。（对于 hello-spring-boot-starter 项目的维护者来说，这是手动配置类，我配置好了，别人再去使用就是自动配置了）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>ConditionalOnMissingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>EnableConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自动配置类, 用于自动配置HelloService */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloServiceProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloServiceProperties helloServiceProperties<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 另外一种注入方式</span>    <span class="token comment" spellcheck="true">// public HelloServiceAutoConfiguration(HelloServiceProperties helloServiceProperties) {</span>    <span class="token comment" spellcheck="true">//     this.helloServiceProperties = helloServiceProperties;</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">/**     * 添加 @Bean 注解才会自动调用该方法     * &lt;p>     * 添加 @ConditionalOnMissingBean 注解, 用户手动注入, 则默认的该设置则失效     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span>                helloServiceProperties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                helloServiceProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HelloServiceProperties 配置文件读取类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml 配置文件</p><p>配置文件对于 hello-spring-boot-starter 项目而言不是必须的，因为 hello-spring-boot-starter 项目本身并不执行，项目的配置文件是一种设置默认值的体现。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">hello</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> root  <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>spring.factories 自动配置类的地址指示文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 告诉使用hello-spring-boot-starter的SpringBoot项目去哪里加载 HelloService 的自动配置类</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">com.example.config.HelloServiceAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="自定义-spring-boot-starter-进阶（AOP编程）"><a href="#自定义-spring-boot-starter-进阶（AOP编程）" class="headerlink" title="自定义 spring-boot-starter 进阶（AOP编程）"></a>自定义 spring-boot-starter 进阶（AOP编程）</h1><p>两个关键点：</p><ul><li>自定义注解 + 拦截器（拦截器体现的是 AOP 编程）</li><li>在配置类中注入拦截器的方式（和一般的 Bean 对象不同）</li></ul><p>在上面 hello-spring-boot-starter 的基础上，进一步拓展</p><ol><li><p>自定义注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 自定义注解 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyLog</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 方法描述     *     * @return     */</span>    String <span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义拦截器（即AOP编程，对所有标注 <code>@MyLog</code> 注解的原始方法进行增强）</p><p>这里决定了 <code>@MyLog</code> 的生效范围是 web 中的 controller 方法？为什么在 <code>@SpringBootTest</code> 中进行测试无法正常输出信息</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>HandlerMethod<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>HandlerInterceptorAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>Long<span class="token operator">></span> startTimeThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 原始方法之前执行     *     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyLog annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyLog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 说明当前拦截的方法上添加了自定义的 @MyLog 注解</span>            <span class="token comment" spellcheck="true">// 1. 用 ThreadLocal 来记录该方法的开始执行时间</span>            <span class="token comment" spellcheck="true">// TODO 为什么要使用 ThreadLocal 呢?</span>            startTimeThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 该拦截器为添加 @MyLog 注解的方法进行功能增强, 而不是真正意义上的拦截某个请求, 因此所有方法都会放行（返回true）</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 原始方法之后执行     *     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token punctuation">(</span>HandlerMethod<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        Method method <span class="token operator">=</span> handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyLog annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyLog<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自定义一些日志的输出信息</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 的执行时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTimeThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">postHandle</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>MyLogAutoConfiguration 配置类中注入拦截器的 Bean 对象（和一般的 Bean 对象有所不同）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mylog<span class="token punctuation">.</span>MyLogInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 创建 web 层相关的配置类需要实现 WebMvcConfigurer */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 对于拦截器对象(AOP编程)的专门处理, 不使用@Bean注入, 而是使用registry.addInterceptor()的方式进行添加     *     * @param registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyLogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 spring.factories 文件中设置配置类的全类名（多个配置类之间使用逗号 <code>,</code> 进行分隔，换行需要添加 <code>\</code>）</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\  com.example.config.HelloServiceAutoConfiguration,\  com.example.config.MyLogAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过 controller 来进行测试（必须通过 controller 层）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>mylog<span class="token punctuation">.</span>MyLog<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSpringBootStarterController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloService helloService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"mylog"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@MyLog</span>    <span class="token keyword">public</span> String <span class="token function">testMyLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试结果</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230406161731766.png" alt="自定义拦截器的测试结果"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群</title>
      <link href="/2023/04/05/redis-ji-qun/"/>
      <url>/2023/04/05/redis-ji-qun/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h1><h2 id="Redis-集群的安装配置"><a href="#Redis-集群的安装配置" class="headerlink" title="Redis 集群的安装配置"></a>Redis 集群的安装配置</h2><ol><li><p>解压缩<code>tar -zxvf /opt/module/redis-6.2.7.tar.gz -C /opt/module</code></p></li><li><p>编译<code>make -C /opt/module/redis-6.2.7</code></p></li><li><p>安装<code>make install -C /opt/module/redis-6.2.7</code></p></li><li><p>将配置文件 <strong>redis.conf</strong> 复制到 <strong>/etc/opt/redis</strong> 目录下:  <code>cp /opt/module/redis-6.2.7/redis.conf /etc/opt/redis/redis.conf</code></p></li><li><p>修改配置文件, 抽取公共的配置, 内容如下</p><pre class="line-numbers language-conf"><code class="language-conf"> # 任意主机可连接 bind 0.0.0.0 # 允许远程访问连接 protected-mode no # 开启集群模式 cluster-enabled yes # 设置密码为root # requirepass root tcp-backlog 511 timeout tcp-keepalive 300 # 后台启动 daemonize yes # 日志级别 loglevel notice # 某一段slot的全部节点都宕机, 整个集群其他节点是否也变得不可用. yes表示不可用, no表示可用 cluster-require-full-coverage no databases 16 always-show-logo no set-proc-title yes proc-title-template "{title} {listen-addr} {server-mode}" stop-writes-on-bgsave-error yes rdbcompression yes rdbchecksum yes rdb-del-sync-files no replica-serve-stale-data yes replica-read-only yes repl-diskless-sync no repl-diskless-sync-delay 5 repl-diskless-load disabled repl-disable-tcp-nodelay no replica-priority 100 acllog-max-len 128 lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no replica-lazy-flush no lazyfree-lazy-user-del no lazyfree-lazy-user-flush no oom-score-adj no oom-score-adj-values 0 200 800 disable-thp yes appendonly no appendfilename "appendonly.aof" appendfsync everysec no-appendfsync-on-rewrite no auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb aof-load-truncated yes aof-use-rdb-preamble yes lua-time-limit 5000 slowlog-log-slower-than 10000 slowlog-max-len 128 latency-monitor-threshold 0 notify-keyspace-events "" hash-max-ziplist-entries 512 hash-max-ziplist-value 64 list-max-ziplist-size -2 list-compress-depth 0 set-max-intset-entries 512 zset-max-ziplist-entries 128 zset-max-ziplist-value 64 hll-sparse-max-bytes 3000 stream-node-max-bytes 4096 stream-node-max-entries 100 activerehashing yes client-output-buffer-limit normal 0 0 0 client-output-buffer-limit replica 256mb 64mb 60 client-output-buffer-limit pubsub 32mb 8mb 60 hz 10 dynamic-hz yes aof-rewrite-incremental-fsync yes rdb-save-incremental-fsync yes jemalloc-bg-thread yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>另外新建两份配置文件, 一份命名为 <strong>redis6379.conf</strong>, 另一份命名为 <strong>redis6380.conf</strong>. (同时将配置文件的内容中的6379替换为6380). 其中 <strong>redis6379.conf</strong> 配置文件的内容如下</p><pre class="line-numbers language-conf"><code class="language-conf"> # 引入公共配置文件 include /etc/opt/redis/redis.conf # 端口号 port 6379 # 当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定 pidfile /opt/module/redis-6.2.7/xredis/pid/redis_6379.pid # 日志文件保存位置 logfile "/opt/module/redis-6.2.7/xredis/log/redis_6379.log" # 指定rdb转储文件名 dbfilename dump_6379.rdb # 指定本地数据库(即rdb转储文件)存放目录, 两台redis服务器的数据存放目录必须区分, 否则会报错无法启动redis从服务器 dir /opt/module/redis-6.2.7/xredis/data/redis6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230222124240035.png" alt="image-20230222124240035"></p></li><li><p>创建配置文件中自定义设置的文件夹</p><ul><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/pid</code></li><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/log</code></li><li><code>mkdir -p /opt/module/redis-6.2.7/xredis/data</code></li></ul></li><li><p>根据两个配置文件, 启动redis主从服务器 <code>ls /etc/opt/redis | xarg -n1 redis-server</code></p></li><li><p>将多个redis服务器合并成为一个redis集群</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 安装包下的src目录中的redis-cli命令</span> /opt/module/redis-6.2.7/src/redis-cli \ <span class="token comment" spellcheck="true"># 将启动的多个redis服务器构建称为一个集群</span> --cluster create \ <span class="token comment" spellcheck="true"># 一主多从, 其中n由下面的参数决定</span> --cluster-replicas 1 \ <span class="token comment" spellcheck="true"># 这里使用host名称映射失败过, 但是在没有配置从服务器的时候使用host名称映射也成功过</span> <span class="token comment" spellcheck="true"># 前面的为主服务器</span> 192.168.248.101:6379 192.168.248.102:6379 192.168.248.103:6379 \ <span class="token comment" spellcheck="true"># 后面的为从服务器</span> <span class="token comment" spellcheck="true"># todo: 存在疑惑, 哪一台从服务器和哪一台主服务器相对应呢? 也有可能集群中设计成多个主服务器, 多个从服务器, 任意一个主服务器宕机都可以由从服务器顶替, 但这种设计的可能性不大, 相当于从服务器要拷贝所有主服务器中的数据保存</span> 192.168.102:6380 192.168.248.103:6380 192.168.248.101:6380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 前面三个为主节点, 后面三个为从节点</p><pre class="line-numbers language-bash"><code class="language-bash"> /opt/module/redis-6.2.7/src/redis-cli \ --cluster create \ --cluster-replicas 1 \ 192.168.248.101:6379 192.168.248.102:6379 192.168.248.103:6379 \ 192.168.102:6380 192.168.248.103:6380 192.168.248.101:6380<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>连接redis集群<code>redis-cli -c -p 6379</code>, 执行一条命令, 查看效果</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101021811676.png" alt="image-20221101021811676" style="zoom: 67%;"></li></ol><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><ol><li><p>根据之前的配置, 执行<code>cluster nodes</code>命令可以查看集群的主服务器节点和从服务器节点</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101155640192.png" alt="image-20221101155640192"></p></li><li><p>进入到<code>192.168.248.101:6379</code>的redis服务器中执行<code>shutdown</code>命令关闭一台redis的主服务器后, 再次查看集群信息</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101160830327.png" alt="image-20221101160830327"></p></li><li><p>再次启动<code>192.168.248.101:6379</code>的redis服务器, 查看集群信息, <strong>故障恢复后的原主服务器不会抢占当前的主服务器</strong></p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221101162420668.png" alt="image-20221101162420668"></p></li><li><p>关闭整个redis集群后, 再重启redis集群, 仍然按照最初创建集群时的主服务器和从服务器的配置</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试指南</title>
      <link href="/2023/04/04/java-mian-shi-zhi-nan/"/>
      <url>/2023/04/04/java-mian-shi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-面试指南"><a href="#Java-面试指南" class="headerlink" title="Java 面试指南"></a>Java 面试指南</h1><p>答题时，可以按下面三个步骤：</p><ol><li>是什么？</li><li>有什么用？</li><li>要注意什么？</li></ol><h2 id="第一章-Java-基础"><a href="#第一章-Java-基础" class="headerlink" title="第一章 Java 基础"></a>第一章 Java 基础</h2><h3 id="1-比较-amp-和-amp-amp-的区别"><a href="#1-比较-amp-和-amp-amp-的区别" class="headerlink" title="1. 比较 &amp; 和 &amp;&amp; 的区别"></a>1. 比较 <code>&amp;</code> 和 <code>&amp;&amp;</code> 的区别</h3><p>相同点：</p><ul><li>都可以作为逻辑与的运算符</li></ul><p>不同点：</p><ul><li>作为<strong>逻辑与</strong>的运算符，<code>&amp;</code> 不会短路，而 <code>&amp;&amp;</code> 会短路</li><li><code>&amp;</code> 还可以作为<strong>位运算与</strong>的操作符</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">booleanOperationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// &amp; 可以作为逻辑与的运算符, 但是不会短路, 因此 y 的值会发生改变</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token operator">++</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"y = "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// &amp;&amp; 会短路, 因此 z 的值不会发生改变</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>z <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"z = "</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bitOperationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Java-中跳出多层嵌套循环的方法（类似-goto）"><a href="#2-Java-中跳出多层嵌套循环的方法（类似-goto）" class="headerlink" title="2. Java 中跳出多层嵌套循环的方法（类似 goto）"></a>2. Java 中跳出多层嵌套循环的方法（类似 goto）</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FLAG<span class="token operator">:</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 跳转到 FLAG 作用域结束的位置</span>                        <span class="token keyword">break</span> FLAG<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// FLAG 标号作用域结束的位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Break FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-switch-语句作用的数据类型"><a href="#3-switch-语句作用的数据类型" class="headerlink" title="3. switch 语句作用的数据类型"></a>3. switch 语句作用的数据类型</h3><p><code>int</code> 、<code>String</code> 和枚举类型。以及<strong>所有能够被编译器隐式转换为 <code>int</code> 类型的数据类型</strong>：<code>byte</code>、<code>short</code>、<code>char</code> 以及它们对应的包装类 <code>Integer</code>、<code>Byte</code>、<code>Short</code>、<code>Character</code> 等。</p><p>由于 long 和 boolean 类型数据无法被编译器隐式地转换为 int 类型，所以不可以用于 switch 语句中，强制类型转换相当于生成了一个新的 int 类型数据。<strong>无法被编译器隐式转换而造成错误</strong>的类似案例还有很多，例如下面代码中，两处去掉强制类型转换后都会被编译器报错</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">switchTest</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shortTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// += 会被 Java 编译器进行特殊处理</span>        s <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-BigInteger的源码学习"><a href="#4-BigInteger的源码学习" class="headerlink" title="4. BigInteger的源码学习"></a>4. BigInteger的源码学习</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-final-关键字"><a href="#5-final-关键字" class="headerlink" title="5. final 关键字"></a>5. final 关键字</h3><p><code>final</code> 修饰的变量的值不能发生改变，但是该值可能是一个地址，而地址中对应的数据是可以发生改变的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaBaseMainV4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaBaseMainV4 app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaBaseMainV4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 一个新的地址值复制给final关键字修饰的person变量, 因此报错</span>        <span class="token comment" spellcheck="true">// app.person = new Person("root", 18);</span>        app<span class="token punctuation">.</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404212022306.png" alt="image-20230404212022306"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crossformer</title>
      <link href="/2023/04/04/lun-wen-01-shi-jian-xu-lie/"/>
      <url>/2023/04/04/lun-wen-01-shi-jian-xu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="Crossformer（2023-ICLR）"><a href="#Crossformer（2023-ICLR）" class="headerlink" title="Crossformer（2023 ICLR）"></a>Crossformer（2023 ICLR）</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="MTS-介绍"><a href="#MTS-介绍" class="headerlink" title="MTS 介绍"></a>MTS 介绍</h3><p>MTS（multivariate time series）中每一个维度都代表一个时间序列，且维度与维度之间是相互关联的，利用其它维度的历史信息可以更好地预测当前维度的信息。例如预测气温，不仅可以依据历史气温的信息，还可以依据历史风速的信息。</p><p>MTS需要考虑两个方面的依赖性：<strong>cross-time dependency（时间依赖性）</strong>和 <strong>cross-dimension dependency（维度依赖性）</strong>。</p><h3 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h3><p>cross-dimension dependency：</p><ul><li>CNN</li><li>GNN</li></ul><p>cross-time dependency：</p><ul><li>Transformer-based</li></ul><p>现有的 Transformer-based 模型没有充分（显式）地利用上 cross-dimension dependency，将多元时间序列当做单时间序列处理，如图所示：</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404095438641.png" alt="现有 Transformer-based 模型预测 MTS"></p><h3 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h3><ul><li>指出现有的 transformer-based 模型没有充分利用上 MTS 中的 cross-dimension dependency</li><li>提出 Crossformer 模型：第一个显式利用上 cross-dimension dependency 的 Transformer-based 模型</li><li>进行了大量实验论证 Crossformer 模型的效果</li></ul><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><ul><li><p>基于统计模型（VAR 和 VARMA）的 MTS</p><p>假定 cross-time dependency 和 cross-dimension dependency 是线性关系</p></li><li><p>基于其它神经网络（CNN、RNN、GNN）的 MTS </p><p>难以处理 long-term 依赖</p></li><li><p>基于 Transformer 的 MTS</p><p>主要研究方向都在 cross-time dependency 以及降低模型处理的时间复杂度</p></li><li><p>Vision Transformer</p><p>ViT 在 CV 领域取得不错的效果，启发论文作者设计 DSW</p></li></ul><h2 id="Crossformer-模型的设计"><a href="#Crossformer-模型的设计" class="headerlink" title="Crossformer 模型的设计"></a>Crossformer 模型的设计</h2><h3 id="设计-DSW-embedding（dimension-segment-wise-embedding）"><a href="#设计-DSW-embedding（dimension-segment-wise-embedding）" class="headerlink" title="设计 DSW embedding（dimension-segment-wise embedding）"></a>设计 DSW embedding（dimension-segment-wise embedding）</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>显式利用MTS中的 cross-dimension dependency</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ol><li><p>Transformer 一开始用于 NLP 领域，每个词对应一个向量。但是对于 MTS 来说，一个时间步对应一个 attention value 所包含的信息不够。所以现有的基于 Transformer 的模型直接应用于 MTS 考虑还不够。</p></li><li><p>针对 MTS 的特点：时域（time domain）附近的 attention value 是相近的。时间维度上按 segment 进行划分不仅可以提高局部相关性，还可以降低计算复杂度。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404104730398.png" alt="MTS 中的 attention value"></p></li></ol><h4 id="具体设计"><a href="#具体设计" class="headerlink" title="具体设计"></a>具体设计</h4><p>MTS 中每个 dimension 的时间序列被划分为多个 segment，每个 segment 对应一个 feature vector。<br>$$<br>x_{1:T}= { x_{i,d}^{(s)}| \leq i \leq \frac{T}{L_{seg},},1 \leq d \leq D } \<br>x_{i,d}^{(s)}= { x_{i,d}= { x_{t,d}|(i-1)\times L_{seg}&lt;t \leq i \times L_{seg}} \<br>h_{i,d}=Ex_{i,d}^{(s)}+E_{i,d}^{(pos)}<br>$$<br>MTS 的编码结果 $H= \left{ h_{i,d}|1 \leq i \leq \frac{T}{L_{seg}},1 \leq d \leq D \right} $ 是一个 2D 数组</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404101425489.png" alt="DSW 的输出结果"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404105438846.png" alt></p><h3 id="设计-TSA（two-stage-attention）layer"><a href="#设计-TSA（two-stage-attention）layer" class="headerlink" title="设计 TSA（two-stage-attention）layer"></a>设计 TSA（two-stage-attention）layer</h3><h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><p>用来高效处理 DSW 中的 cross-time dependency 和 cross-dimension dependency</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ol><li>Vision Transformer 中将 2D array 摊平成 1D vector，然后作为模型的输入。因为图片的 height axe 和 width axe 有着相同的含义，所以是可交换的，但是对于 MTS 而言，time axe 和 dimension axe 的含义是不同的，所以应该差别对待。</li><li>直接在 $H_{D \times L}$ 上应用 self-attention 的计算复杂度为 $O(D^2 L^2)$</li></ol><h4 id="具体设计-1"><a href="#具体设计-1" class="headerlink" title="具体设计"></a>具体设计</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404111442525.png" alt="Two-Stage-Attention的架构图"></p><h5 id="Cross-Time-Stage"><a href="#Cross-Time-Stage" class="headerlink" title="Cross-Time Stage"></a>Cross-Time Stage</h5><p>对单个维度的时间序列计算multi-head self-attention（MSA），所有维度共享参数，所以上图的 Corss-Time Stage 灰色块实际上看做是同一个。<br>$$<br>\hat{Z}<em>{:,d}^{time} = LayerNorm(Z</em>{:,d}+MSA^{time}(Z_{:,d},Z_{:,d},Z_{:,d})) \<br>Z^{time}=LayerNorm(\hat{Z}^{time}+MLP(\hat{Z}^{time}))<br>$$<br>单个维度的 self-attention 计算的时间复杂度为 $O(L^2)$，因此 Cross-Time Stage 的时间复杂度为 $O(DL^2)$</p><p>L 可以通过对 segment 分片的大小来进行控制</p><h5 id="Cross-Dimension-Stage"><a href="#Cross-Dimension-Stage" class="headerlink" title="Cross-Dimension Stage"></a>Cross-Dimension Stage</h5><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404112830516.png" alt="Cross-Dimension Stage对计算复杂度的优化"></p><p>常规计算 self-attention 的时间复杂度为 $O(LD^2)$，D 的值无法通过分片手段来进行压缩，因此通过 FC 层（router 机制）来整合一个时间步中各个维度的信息（即$Z_{i,:} \to B_{i,:}$），其中 $c \ll D$ 。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404114354833.png" alt="image-20230404114354833"></p><h3 id="设计-HED（Hierarchical-Encoder-Decoder）"><a href="#设计-HED（Hierarchical-Encoder-Decoder）" class="headerlink" title="设计 HED（Hierarchical Encoder-Decoder）"></a>设计 HED（Hierarchical Encoder-Decoder）</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404114714595.png" alt="HED的架构图"></p><p>通过 DSW 对 MTS 进行 embedding，通过 TSA 来堆叠 Encoder 和 Decoder</p><h4 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404114841948.png" alt="image-20230404114841948"></p><h4 id="Decoder"><a href="#Decoder" class="headerlink" title="Decoder"></a>Decoder</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404115236850.png" alt="image-20230404115236850"></p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>略</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404115545154.png" alt="消融实验验证组件的效果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 时间序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ApplicationContext的实现</title>
      <link href="/2023/04/03/spring-yuan-ma-jie-xi-03/"/>
      <url>/2023/04/03/spring-yuan-ma-jie-xi-03/</url>
      
        <content type="html"><![CDATA[<h1 id="ApplicationContext-的实现"><a href="#ApplicationContext-的实现" class="headerlink" title="ApplicationContext 的实现"></a>ApplicationContext 的实现</h1><h2 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h2><p>从类路径下读取 Spring 配置文件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>XmlBeanDefinitionReader<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ClassPathResource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextMainV1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上面applicationContext所做的事情大致可以被以下流程概括:</span>        <span class="token comment" spellcheck="true">// 1. applicationContext内部也是创建一个beanFactory</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 通过BeanDefinitionReader来读取配置文件, 将Bean对象注入到BeanFactory中</span>        XmlBeanDefinitionReader beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinitionReader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h2><p>从磁盘路径下读取 Spring 配置文件</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="AnnotationConfigApplicationContext"><a href="#AnnotationConfigApplicationContext" class="headerlink" title="AnnotationConfigApplicationContext"></a>AnnotationConfigApplicationContext</h2><p>基于 Java 配置类</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="AnnotationConfigServletWebServerApplicationContext"><a href="#AnnotationConfigServletWebServerApplicationContext" class="headerlink" title="AnnotationConfigServletWebServerApplicationContext"></a>AnnotationConfigServletWebServerApplicationContext</h2><p>用于 Web 应用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServletRegistrationBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>TomcatServletWebServerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServletWebServerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * web 应用至少需要三个基本的 Bean */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebServletConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletWebServerFactory <span class="token function">servletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DispatcherServletRegistrationBean <span class="token function">dispatcherServletRegistrationBean</span><span class="token punctuation">(</span>DispatcherServlet dispatcherServlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServletRegistrationBean</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 Controller（使用 Spring 的方式来配置，而不是使用 SpringBoot 中的注解 <code>@Controller</code>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControllerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 控制器的Bean的命名需要以 "/" 开头     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Controller <span class="token function">helloController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Controller 接口中只有一个方法, 即 handleRequest()</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拿到字符输出流, 向其中写入"Hello, Spring"</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello, Spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP2</title>
      <link href="/2023/04/03/http2/"/>
      <url>/2023/04/03/http2/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h1><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: ClientHello    Server-->>Client: ServerHello    Server-->>Client: Certificate, ServerKeyExchange, CertificateRequest, ServerHelloDone    Client->>Server: Certificate, ClientKeyExchange, CertificateVerify, ChangeCipherSpec, Finished    Server-->>Client: ChangeCipherSpec, Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: ClientHello    Server->>Client: ServerHello    Server->>Client: Certificate    Server->>Client: ServerKeyExchange    Server->>Client: CertificateRequest    Server->>Client: ServerHelloDone    Client->>Server: Certificate    Client->>Server: ClientKeyExchange    Client->>Server: CertificateVerify    Client->>Server: ChangeCipherSpec    Client->>Server: Finished    Server->>Client: ChangeCipherSpec    Server->>Client: Finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战</title>
      <link href="/2023/04/03/redis-shi-zhan/"/>
      <url>/2023/04/03/redis-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-实战"><a href="#Redis-实战" class="headerlink" title="Redis 实战"></a>Redis 实战</h1><h2 id="第一章-初识-Redis"><a href="#第一章-初识-Redis" class="headerlink" title="第一章 初识 Redis"></a>第一章 初识 Redis</h2><h3 id="1-1-Redis-简介"><a href="#1-1-Redis-简介" class="headerlink" title="1.1 Redis 简介"></a>1.1 Redis 简介</h3><ul><li>Redis 是内存数据库，但可以通过 RDB 和 AOF 两种方式来支持数据持久化。</li><li>Redis 通过<strong>主从复制特性</strong>来扩展读性能（主服务器写，从服务器读）</li><li>Redis 通过<strong>客户端分片</strong>来扩展写性能</li></ul><h4 id="1-1-1-持久化"><a href="#1-1-1-持久化" class="headerlink" title="1.1.1 持久化"></a>1.1.1 持久化</h4><p>Redis 拥有两种不同形式的持久化方法，这两种方式都可以用小而紧凑的格式将内存中的数据写入到磁盘中：</p><ul><li><p>方式一：时间点转储（point-in-time dump）</p><p>转储操作既可以在 ”<strong>指定时间段内有指定数量的写操作执行</strong>“ 时触发，也可以通过<strong>调用两条特定的转储命令</strong>来触发</p></li><li><p>方式二：AOF（append-only）文件</p><p>可以根据数据的重要程度，对AOF文件进行设置，从不重要到重要依次为：不同步、一秒同步一次、一次命令同步一次</p></li></ul><h4 id="1-1-2-Redis-的主从复制特性"><a href="#1-1-2-Redis-的主从复制特性" class="headerlink" title="1.1.2 Redis 的主从复制特性"></a>1.1.2 Redis 的主从复制特性</h4><ol><li>执行复制的从服务器会连接上主服务器，接收主服务器发送的整个数据库的初始副本（copy）</li><li>主服务器执行的写命令，都会被发送给从服务器，从而更新从服务器中的数据集</li><li>因为从服务器中的数据不断被更新，因此客户端可以从任意一台从服务器中读取数据，来避免对主服务器进行集中式的访问，减轻主服务器的压力</li></ol><h3 id="1-2-Redis-数据结构简介"><a href="#1-2-Redis-数据结构简介" class="headerlink" title="1.2 Redis 数据结构简介"></a>1.2 Redis 数据结构简介</h3><table><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td>String</td><td>字符串、整数、浮点数</td><td>字符串操作；<br>整数和浮点数执行自增、自减操作</td></tr><tr><td>List</td><td>双向链表结构，链表的每个节点都包含一个String</td><td></td></tr><tr><td>Set</td><td>无序集合</td><td>集合的增删查；<br>随机获取一个集合中的元素；<br>计算集合与集合之间的交集、差集、并集</td></tr><tr><td>Hash</td><td></td><td></td></tr><tr><td>ZSet</td><td>value值限制为score的一个Hash结构，<br>自动根据value值进行排序（升序）</td><td>获取[stop, end]之间的元素；<br>获取value在给定范围内的元素</td></tr></tbody></table><h3 id="1-3-Redis-应用场景"><a href="#1-3-Redis-应用场景" class="headerlink" title="1.3 Redis 应用场景"></a>1.3 Redis 应用场景</h3><p>最近越来越多的网站提供对网页链接、文章或问题进行投票的功能，以 StackOverflow 为例，网站会根据文章的发布时间和获得的投票数来计算一个分数，默认按照该分数来进行文章的排序。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403175427071.png" alt="在StackOverflow中使用Redis"></p><h4 id="1-3-1-对文章进行投票"><a href="#1-3-1-对文章进行投票" class="headerlink" title="1.3.1 对文章进行投票"></a>1.3.1 对文章进行投票</h4><p>为了产生一个能够随着时间流逝而不断减少的评分，程序需要根据文章的发布时间和当前时间来计算文章的评分，具体方法为：文章评分 = 文章得到的票数 $\times$ 某个常数 + 文章的发布时间的时间戳（秒数）。其中，常数表示的含义为一票能够等价对应的秒数。</p><p>根据评分进行排序只是展示的一种方式，还可以根据发布时间进行排序，因此需要提供多个 ZSet 集合，还是以 StackOverflow 为例</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403180845875.png" alt="一种排序方式对应一个ZSet"></p><p>为防止一个用户对同一篇文章进行多次投票，因此需要为每一篇文章记录一个已投票的用户名单。因此，每篇文章都会创建一个集合。为了节省内存，可以规定在一段时间后禁止投票，将文章的评分几乎确定下来，此时也可以自动删除这个已投票的用户名单集合（设置该集合的过期时间）。</p><h4 id="1-3-2-发布并获取文章"><a href="#1-3-2-发布并获取文章" class="headerlink" title="1.3.2 发布并获取文章"></a>1.3.2 发布并获取文章</h4><h4 id="1-3-3-对文章进行分组"><a href="#1-3-3-对文章进行分组" class="headerlink" title="1.3.3 对文章进行分组"></a>1.3.3 对文章进行分组</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>HashOperations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>SetOperations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ZSetOperations<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisInActionMainTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一周对应的毫秒数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ONE_WEEK_IN_MILLISECONDS <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 一张投票对应的毫秒数, 计算得出</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> VOTE_SCORE <span class="token operator">=</span> <span class="token number">432</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录文章是否过期</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TIMEOUT_PREFIX <span class="token operator">=</span> <span class="token string">"timeout:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录文章详细信息</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String POST_PREFIX <span class="token operator">=</span> <span class="token string">"post:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录文章的投票人</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VOTED_PREFIX <span class="token operator">=</span> <span class="token string">"voted:"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发布文章     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishPostTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对文章进行投票     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">votePostTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZSetOperations zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SetOperations setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashOperations hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userId <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>        String postId <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查是否已经过了能够投票的时间</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zSetOperations<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span>TIMEOUT_PREFIX<span class="token punctuation">,</span> postId<span class="token punctuation">)</span> <span class="token operator">+</span> ONE_WEEK_IN_MILLISECONDS <span class="token operator">></span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This Post isn't voted!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// TODO: 使用Lua脚本</span>        <span class="token comment" spellcheck="true">// 为该文章进行投票</span>        <span class="token comment" spellcheck="true">// 1. 记录投票人, 如果不是重复投票的话</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>VOTED_PREFIX <span class="token operator">+</span> postId<span class="token punctuation">,</span> userId<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2. 更新文章的得分</span>            hashOperations<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>POST_PREFIX <span class="token operator">+</span> postId<span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">,</span> VOTE_SCORE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 3. 更新文章的得票数</span>            hashOperations<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>POST_PREFIX <span class="token operator">+</span> postId<span class="token punctuation">,</span> <span class="token string">"votes"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanFactory容器的实现</title>
      <link href="/2023/04/02/spring-yuan-ma-jie-xi-02/"/>
      <url>/2023/04/02/spring-yuan-ma-jie-xi-02/</url>
      
        <content type="html"><![CDATA[<h1 id="BeanFactory-容器的实现"><a href="#BeanFactory-容器的实现" class="headerlink" title="BeanFactory 容器的实现"></a>BeanFactory 容器的实现</h1><p>BeanFactory 不会做的事情：</p><ul><li>不会主动调用 BeanFactoryPostProcessor</li><li>不会主动调用（添加）BeanPostProcessor</li><li>不会主动实例化单例对象（懒加载）</li><li>不会解析BeanFactory，且不会解析 <code>${}</code> 和 <code>#{}</code> 表达式</li></ul><h2 id="手动向-BeanFactory-容器中注入-Bean-对象"><a href="#手动向-BeanFactory-容器中注入-Bean-对象" class="headerlink" title="手动向 BeanFactory 容器中注入 Bean 对象"></a>手动向 BeanFactory 容器中注入 Bean 对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV1</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO: 此时的 BeanFactory 缺乏解析 @Bean 和 @Configuration 等注解的能力</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 默认的 BeanFactory 容器</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 创建 BeanDefinition</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 向容器中添加 BeanDefinition</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 输出容器中的 Bean</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为-BeanFactory-添加常用的后置处理器"><a href="#为-BeanFactory-添加常用的后置处理器" class="headerlink" title="为 BeanFactory 添加常用的后置处理器"></a>为 BeanFactory 添加常用的后置处理器</h2><blockquote><p>  后置处理器相当于 Spring 容器的插件，BeanFactory 容器本身的功能并没有多么丰富，很多功能都是通过后置处理器来进行实现的。</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//TODO: 后置处理器添加到BeanFactory工厂, 但是并没有运行</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析 @Bean 和 @Configuration 等注解是其它类的功能</span>        <span class="token comment" spellcheck="true">// 为 BeanFactory 添加一些常用的后处理器, 可以使得能够解析注解</span>        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402214836022.png" alt="将后置处理器添加到BeanFactory容器中"></p><h2 id="执行后置处理器的功能"><a href="#执行后置处理器的功能" class="headerlink" title="执行后置处理器的功能"></a>执行后置处理器的功能</h2><p>BeanFactoryPostProcessor 和 BeanPostProcessor 两大类后置处理器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanFactoryPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先注册Bean, 然后使用后置处理器进行解析才有效. 如果上面的registerBeanDefinition在解析过程之后则无法解析成功</span>        <span class="token comment" spellcheck="true">// 遍历执行添加到 BeanFactory 中的 BeanFactoryPostProcessor</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactoryPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// BeanPostProcessor: Bean后置处理器, 用来处理类似@Autowired和@Resource等Bean对象的生命周期</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanPostProcessor<span class="token operator">></span> beanPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 在此之前, Bean对象只是简单加入到容器中, 并没有调用构造方法进行实例化</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"################################################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean1 bean1 <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean2 bean2 <span class="token operator">=</span> bean1<span class="token punctuation">.</span><span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean2 = "</span> <span class="token operator">+</span> bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean1构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> Bean2 bean2<span class="token punctuation">;</span>        <span class="token keyword">public</span> Bean2 <span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean2构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402220547182.png" alt="执行后置处理器的功能"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403000547642.png" alt="默认懒加载方式创建Bean"></p><h2 id="提前创建好所有的单例对象"><a href="#提前创建好所有的单例对象" class="headerlink" title="提前创建好所有的单例对象"></a>提前创建好所有的单例对象</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanFactoryPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractBeanDefinition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactoryMainV4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"myConfig"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactoryPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            value<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanPostProcessor<span class="token operator">></span> beanPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanPostProcessorMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key = "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanDefinitionName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanDefinitionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提前创建好所有的单例对象</span>        beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"################################################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean1 bean1 <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bean2 bean2 <span class="token operator">=</span> bean1<span class="token punctuation">.</span><span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean2 = "</span> <span class="token operator">+</span> bean2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean1 <span class="token function">bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> Bean2 <span class="token function">bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean1</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean1构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> Bean2 bean2<span class="token punctuation">;</span>        <span class="token keyword">public</span> Bean2 <span class="token function">getBean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bean2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Bean2</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Bean2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Bean2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean2构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230403000438951.png" alt="提前创建容器中的Bean对象"></p><h2 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h2><p>从 <code>AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);</code> 开始查看后置处理器</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationConfigUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>            BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">unwrapDefaultListableBeanFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getDependencyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置比较器, 用于对后置处理器进行排序, 进而确定解析顺序</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setDependencyComparator</span><span class="token punctuation">(</span>AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanFactory<span class="token punctuation">.</span><span class="token function">setAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析@Configuration注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析@Autowired注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析@Resource注解(Common: Java中的注解)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jsr250Present <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>CommonAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jpaPresent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                def<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span>                        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        <span class="token string">"Cannot load optional framework class: "</span> <span class="token operator">+</span> PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>EventListenerMethodProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>DefaultEventListenerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> beanDefs<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  思考：</p><ol><li><p><code>@Autowired</code> 的注入规则是什么?</p><p><code>@Autowired</code> 是根据类型进行注入，如果存在多个相同的类型 Bean，则再使用变量名去进行匹配，如果不存在，则进行报错。另外也可以不修改变量名，而使用  <code>@Qualified</code> 来指定匹配的 Bean 的name。</p></li><li><p>如果同时添加 <code>@Autowired</code> 和 <code>@Resource</code>，那么哪个优先级高（或者说哪个生效）？</p><p>默认不进行排序，而 <code>@Autowired</code>的后置处理器在前，所以先执行解析。如果通过代码对后置处理器进行排序的话，那优先级高的（order值小）的先解析执行，即 <code>@Resource</code> 执行。（只有排序后才和后置处理器的优先级（order）有关，order值越小，优先级越高，排序越靠前，越先解析）</p><p><strong>排序的核心逻辑：优先级越高，排序越靠前，比较器只是用来制定优先级规则，即什么情况下优先级高，可以是分数越高，也可以是序号越小</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 排序接口,默认值越大,优先级越低(升序排序, 在前的优先级高)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Ordered</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> HIGHEST_PRECEDENCE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> LOWEST_PRECEDENCE <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationClassPostProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutowiredAnnotationBeanPostProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> order <span class="token operator">=</span> Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonAnnotationBeanPostProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CommonAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setInitAnnotationType</span><span class="token punctuation">(</span>PostConstruct<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDestroyAnnotationType</span><span class="token punctuation">(</span>PreDestroy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ignoreResourceType</span><span class="token punctuation">(</span><span class="token string">"javax.xml.ws.WebServiceContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// java.naming module present on JDK 9+?</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jndiPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>jndiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJndiBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/2023/04/01/netty/"/>
      <url>/2023/04/01/netty/</url>
      
        <content type="html"><![CDATA[<h1 id="零拷贝-性能优化"><a href="#零拷贝-性能优化" class="headerlink" title="零拷贝(性能优化)"></a>零拷贝(性能优化)</h1><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117211211130.png" alt="image-20230117211211130" style="zoom: 200%;"><p>零拷贝并不是不进行拷贝, 而是指<strong>0次CPU拷贝</strong>(从内核空间缓冲区-&gt;用户空间缓冲区). 而CPU拷贝是比DMA拷贝耗费的时间长得多, 所以减少CPU拷贝是提升性能的关键.</p><blockquote><p>mmap内存映射方式适用于小数据, 而sendFile()方式适用于大文件的传输</p></blockquote><pre class="line-numbers language-mermaid"><code class="language-mermaid">graph TD    A[应用程序] -->|1. 数据写入| B(内核缓冲区)    B -->|2. 内核复制| C(网络适配器缓冲区)    C -->|3. 发送到网络| D[目的地]    A -->|零拷贝| E(网络适配器缓冲区)    E -->|零拷贝| D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant A as 应用程序    participant B as 内核缓冲区    participant C as 网络适配器缓冲区    participant D as 目的地    A->>B: 写入数据    B->>C: 复制数据    C->>D: 发送数据    A->>C: 零拷贝发送数据    C->>D: 发送数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mmap-内存映射"><a href="#mmap-内存映射" class="headerlink" title="mmap(内存映射)"></a>mmap(内存映射)</h2><p>mmap是指让用户区和内核区的虚拟内存映射到同一片物理内存上. </p><p>mmap其实并不是零拷贝, 因为只是减少了从内核缓冲区到用户缓冲区的一次CPU拷贝, 但是仍然存在从内核缓冲区到Socket Buffer的一次CPU拷贝.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117211326776.png" alt="image-20230117211326776"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117212440029.png" alt="image-20230117212440029"></p><h2 id="sendFile-传递文件描述符"><a href="#sendFile-传递文件描述符" class="headerlink" title="sendFile(传递文件描述符)"></a>sendFile(传递文件描述符)</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117212722623.png" alt="image-20230117212722623"></p><center>图: Linux2.1版本的sendFile()函数</center><p>在Linux2.1版本中, 数据不经过用户态, 直接从内核缓冲区进入Socket Buffer. 由于不经过用户态, 因此相较于mmap方式额外减少了一次上下文切换. 但是sendFile()函数仍然存在一次从内核缓冲区到Socket Buffer的CPU拷贝. 所以也不是真正意义上的零拷贝.</p><p>但是在Linux2.4版本中, 进一步优化, 直接从内核缓冲区到<strong>网卡协议栈</strong>(protocol engine), 而从内核缓冲区到Socket Buffer的CPU拷贝并不是拷贝全部信息, 而是一种<strong>元数据的CPU拷贝(下图中的灰色部分)</strong>, 而元数据拷贝的消耗可以忽略不计. 因此在Linux2.3版本中的sendFile()函数可以认为是真正意义上的零拷贝.</p><p>这种元数据拷贝是通过将文件描述符传送给Socket缓冲区.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230117213324595.png" alt="image-20230117213324595"></p><center>图: Linux2.4版本的sendFile()函数</center><h2 id="零拷贝在项目中的应用"><a href="#零拷贝在项目中的应用" class="headerlink" title="零拷贝在项目中的应用"></a>零拷贝在项目中的应用</h2><p><code>transferTo()</code></p><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="Netty快速入门"><a href="#Netty快速入门" class="headerlink" title="Netty快速入门"></a>Netty快速入门</h2><h3 id="为什么使用Netty"><a href="#为什么使用Netty" class="headerlink" title="为什么使用Netty?"></a>为什么使用Netty?</h3><ul><li>NIO的类库和API繁杂, 使用麻烦, 需要熟练掌握Selector, ServerSocketChannel, SocketChannel, ByteBuffer等</li><li>需要非常熟悉多线程编程和网络编程才能编写出高质量的NIO程序</li><li>开发工作量和难度都非常大, 例如客户端面临以下问题:<ul><li>断线重连</li><li>重复接入</li><li>消息编码和解码</li><li>安全认证</li><li>网络闪断</li><li>半包读写(什么是半包读写?)</li><li>失败缓存</li><li>网络拥塞</li><li>异常流的处理</li></ul></li><li>NIO中Epoll的bug, 会导致Selector的空轮询, 最终导致CPU占用100%</li><li>NIO是IO多路复用模式, 一个I/O线程处理多个Channel, 程序的调试和跟踪非常麻烦, 往往只能靠一些日志来辅助分析, 定位问题的难度很大</li></ul><h3 id="Netty是什么"><a href="#Netty是什么" class="headerlink" title="Netty是什么"></a>Netty是什么</h3><p>Netty是最流行的NIO通信框架, 在许多主流的RPC框架(例如Dubbo)中都是用Netty作为其通信组件.</p><p>Netty优点:</p><ul><li>API使用简单, 开发门槛低</li><li>功能强大, 预置了多种编码解码功能, 支持多种主流协议</li><li>定制能力强, 可以通过ChannelHandler对框架进行灵活扩展</li><li>性能高, 和其它主流NIO框架对比, 综合性能最优</li><li>成熟稳定, 修复了所有已发现的JDK NIO的bug</li><li>在多个领域的应用得到了考验(Elasticsearch, Dubbo)</li></ul><h3 id="Netty基础应用"><a href="#Netty基础应用" class="headerlink" title="Netty基础应用"></a>Netty基础应用</h3><ol><li><p>引入pom依赖</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.87.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>Server端</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>netty<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>ServerBootstrap<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioServerSocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>public class Server {    public void bind(int port) {        //配置服务端的NIO线程组        //NioEventLoopGroup是个线程组, 包含一组NIO线程, 专门用于处理网络事件, 实际上就是Reactor线程组        //bossGroup用于接收客户端的连接        //workerGroup用于进行SocketChannel的网络读写        EventLoopGroup bossGroup = new NioEventLoopGroup();        EventLoopGroup workerGroup = new NioEventLoopGroup();        //ServerBootstrap对象, 用于启动NIO服务端的辅助启动类, 下面是对其进行配置, 目的是降低服务端的开发复杂度        //group(): 将两个NIO线程组当作形参传递到serverBootstrap中        //channel(): 设置创建的Channel为NioServerSocketChannel类型, 对应ServerSocketChannel        //option(): 配置TCP参数        //childHandler(): 绑定I/O事件的处理类(使用匿名类), 处理类主要用于处理网络I/O事件, 例如记录日志, 对消息进行编码和解码等        ServerBootstrap serverBootstrap = new ServerBootstrap();        serverBootstrap.group(bossGroup, workerGroup)                .channel(NioServerSocketChannel.class)                .option(ChannelOption.SO_BACKLOG, 1024)                .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {                    @Override                    protected void initChannel(SocketChannel socketChannel) {                        socketChannel.pipeline().addLast(new ServerHandler());                    }                });        ChannelFuture channelFuture = null;        try {            //绑定服务端的监听端口, 调用同步阻塞方法sync()等待绑定操作完成            //ChannelFuture对象的功能类似于JDK并发包中的Future, 主要用于异步操作的通知回调            channelFuture = serverBootstrap.bind(port).sync();            //阻塞, 等待服务端监听端口关闭之后, main()函数才退出            channelFuture.channel().closeFuture().sync();        } catch (InterruptedException e) {            throw new RuntimeException(e);        } finally {            //优雅地关闭资源            bossGroup.shutdownGracefully();            workerGroup.shutdownGracefully();        }    }    public static void main(String[] args) {        int port = 8888;        new Server().bind(port);    }}class ServerHandler extends ChannelInboundHandlerAdapter {    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        ByteBuf byteBuf = (ByteBuf) msg;        // 获取缓冲区中可读的字节数        int counts = byteBuf.readableBytes();        // 创建相应大小的字节数组, 一次读取完成        byte[] request = new byte[counts];        byteBuf.readBytes(request);        String s = new String(request, Charset.defaultCharset());        System.out.println(&quot;The time server receive order : &quot; + s);        String currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(s) ? new Date(System.currentTimeMillis()).toString() : &quot;BAD ORDER&quot;;        ByteBuf response = Unpooled.copiedBuffer(currentTime.getBytes());        //将响应消息通过write()方法异步发送给Client客户端        ctx.write(response);    }    @Override    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {        //flush()方法的作用: 将消息发送队列中的消息写入到SocketChannel中发送给对方        // 从性能角度考虑, 为了防止频繁地唤醒Selector进行消息发送,        // write()方法并不直接将消息写入到SocketChannel, 而是将消息发送到发送缓冲区,        // 再通过调用flush()方法, 将发送缓冲区中的响应消息全部写入到SocketChannel中        ctx.flush();    }    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        //当发生异常时, 关闭ChannelHandlerContext, 释放相关的句柄资源        ctx.close();    }}```</code></pre><ol start="3"><li><p>Client端</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>Bootstrap<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioSocketChannel<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>         <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>         EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//客户端的辅助启动类Bootstrap</span>         Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token comment" spellcheck="true">/**                      * 当创建NioSocketChannel成功之后, 在进行初始化时,                      * 将其ChannelHandler设置到ChannelPipeline中, 用于处理网络I/O事件                      * @param socketChannel            the {@link Channel} which was registered.                      */</span>                     <span class="token annotation punctuation">@Override</span>                     <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>                         socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>             ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>             group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>class ClientHandler extends ChannelInboundHandlerAdapter {    private static final Logger LOGGER = Logger.getLogger(ClientHandler.class.getName());    private final ByteBuf firstMessage;    public ClientHandler() {        //将字符串写入到ByteBuf对象中:        // 1. getBytes(): String-&gt;byte[]        // 2. writeBytes(): byte[]-&gt;ByteBuf        byte[] request = &quot;QUERY TIME ORDER&quot;.getBytes();        firstMessage = Unpooled.buffer(request.length);        firstMessage.writeBytes(request);    }    /**     * 当客户端和服务端TCP链路建立成功之后, Netty的NIO线程会调用channelActive()方法,     * 发送查询时间的指令给客户端, 调用ChannelHandlerContext对象的writeAndFlush()方法将请求消息发送给服务端     *     * @param ctx     * @throws Exception     */    @Override    public void channelActive(ChannelHandlerContext ctx) throws Exception {        ctx.writeAndFlush(firstMessage);    }    /**     * 当服务端返回应答消息时, channelRead()方法被调用     *     * @param ctx     * @param msg     * @throws Exception     */    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        ByteBuf byteBuf = (ByteBuf) msg;        byte[] request = new byte[byteBuf.readableBytes()];        byteBuf.readBytes(request);        String s = new String(request, Charset.defaultCharset());        System.out.println(&quot;Now is : &quot; + s);    }    /**     * 发生异常时, 打印日志, 释放客户端资源     *     * @param ctx     * @param cause     * @throws Exception     */    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        LOGGER.warning(&quot;Unexpected exception from downstream&quot; + cause.getMessage());        ctx.close();    }}```</code></pre><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="ChannelHandler接口"><a href="#ChannelHandler接口" class="headerlink" title="ChannelHandler接口"></a>ChannelHandler接口</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230119225926279.png" alt="image-20230119225926279"></p><p>ChannelInboundHandler: 包含处理入站事件的方法</p><p>ChannelInboundHandlerAdapter: ChannelInboundHandler的默认实现类</p><ul><li>channelRead(): 每个传入的消息都要调用</li><li>channelReadComplete(): </li></ul><h2 id="Netty的组件和设计"><a href="#Netty的组件和设计" class="headerlink" title="Netty的组件和设计"></a>Netty的组件和设计</h2><h3 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h3><p>Java NIO中提供了ByteBuffer, 其完全可以满足NIO编程的需要, 但是也有一些缺点:</p><ul><li>ByteBuffer长度固定, 容量不能动态扩展和收缩</li><li>ByteBuffer只有一个标识位置的指针position, 读写的时候需要通过flip()和rewind()进行切换</li><li>ByteBuffer的API功能有限, 一些常用的实用的高级特性需要额外编程实现</li></ul><p>为了弥补上面的这些不足, Netty提供了自己的ByteBuffer实现(ByteBuf)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelFuture<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelFutureListener<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>kqueue<span class="token punctuation">.</span>KQueueDatagramChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Channel channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KQueueDatagramChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//异步执行, 即运行该代码时不会等待执行完成, 因此channelFuture是操作成功的结果, 也可能是操作失败的结果</span>        ChannelFuture channelFuture <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果在添加监听器之前操作结果就已知了, 那么会立即调用该部分的处理逻辑</span>        channelFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ChannelFutureListener<span class="token punctuation">)</span> future <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//操作执行成功的处理逻辑</span>                ByteBuf byteBuf <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//操作执行失败的处理逻辑</span>                Throwable cause <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cause = "</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Channel-EventLoop和ChannelFuture"><a href="#Channel-EventLoop和ChannelFuture" class="headerlink" title="Channel, EventLoop和ChannelFuture"></a>Channel, EventLoop和ChannelFuture</h3><p>Channel: Socket</p><p>EventLoop: 控制流, 多线程, 并发</p><p>ChannelFuture: 异步通知</p><h4 id="Channel接口"><a href="#Channel接口" class="headerlink" title="Channel接口"></a>Channel接口</h4><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120010544256.png" alt="image-20230120010544256" style="zoom: 67%;"><p>每个 Channel 都将会被分配一个 ChannelPipeline 和 ChannelConfig. ChannelConfig包含了该Channel的所有配置设置, 并且支持热更新.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223436759.png" alt="image-20230120223436759"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223447811.png" alt="image-20230120223447811"></p><p>Channel 的正常生命周期如图 6-1 所示. 当这些状态发生改变时, 将会生成对应的事件. 这些事件将会被转发给 ChannelPipeline 中的 ChannelHandler, 其可以随后对它们做出响应</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223725233.png" alt="image-20230120223725233"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120223958357.png" alt="image-20230120223958357"></p><p>ChannelHandler中的方法和Channel的生命周期密切相关.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120224306022.png" alt="image-20230120224306022"></p><h4 id="channelFuture接口"><a href="#channelFuture接口" class="headerlink" title="channelFuture接口"></a>channelFuture接口</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120135058710.png" alt="image-20230120135058710"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230120151350291.png" alt="image-20230120151350291"></p><h2 id="TCP粘包-拆包问题的解决方案"><a href="#TCP粘包-拆包问题的解决方案" class="headerlink" title="TCP粘包/拆包问题的解决方案"></a>TCP粘包/拆包问题的解决方案</h2><p>对于TCP编程, 无论是客户端还是服务端, 当读取或者发送数据的时候, 都需要考虑TCP底层的粘包/拆包机制.</p><h3 id="TCP粘包-拆包"><a href="#TCP粘包-拆包" class="headerlink" title="TCP粘包/拆包"></a>TCP粘包/拆包</h3><p>TCP是一个“流”协议, TCP底层并不了解上层业务数据的具体含义, 底层会根据TCP缓冲区的实际情况进行包的划分. 所以在业务上认为, <strong>一个完整的包可能会被TCP拆分成多个包进行发送, 也有可能把多个小的包封装成一个大的数据包发送, 这就是所谓的TCP粘包和拆包问题.</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230118112657837.png" alt="image-20230118112657837"></p><p>假设Client客户端发送两个数据包D1和D2, 由于Server端一次读取的字节数是不确定的, 所以有以下可能情况:</p><ul><li>第1次读取D1, 第2次读取D2</li><li>第1次读取D1和D2(粘包)</li><li>第1次读取D1和D2的一部分, 第2次读取D2的剩余部分(拆包)</li><li>第1次读取D1的一部分, 第2次读取D1的剩余部分和D2(拆包)</li><li>由于D1和D2远大于TCP接收的滑动窗口, 所以D1和D2都需要进行多次拆包</li></ul><h3 id="由于TCP粘包-拆包导致功能异常的案例展示"><a href="#由于TCP粘包-拆包导致功能异常的案例展示" class="headerlink" title="由于TCP粘包/拆包导致功能异常的案例展示"></a>由于TCP粘包/拆包导致功能异常的案例展示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取缓冲区中可读的字节数</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> byteBuf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建相应大小的字节数组, 一次读取完成</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>counts<span class="token punctuation">]</span><span class="token punctuation">;</span>        byteBuf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>length <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order : "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\n the counter is : "</span> <span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        String currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>        currentTime <span class="token operator">=</span> currentTime <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf response <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将响应消息通过write()方法异步发送给Client客户端</span>        ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//flush()方法的作用: 将消息发送队列中的消息写入到SocketChannel中发送给对方</span>        <span class="token comment" spellcheck="true">// 从性能角度考虑, 为了防止频繁地唤醒Selector进行消息发送,</span>        <span class="token comment" spellcheck="true">// write()方法并不直接将消息写入到SocketChannel, 而是将消息发送到发送缓冲区,</span>        <span class="token comment" spellcheck="true">// 再通过调用flush()方法, 将发送缓冲区中的响应消息全部写入到SocketChannel中</span>        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当发生异常时, 关闭ChannelHandlerContext, 释放相关的句柄资源</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h2><h3 id="协议要素"><a href="#协议要素" class="headerlink" title="协议要素"></a>协议要素</h3><ul><li><strong>魔数</strong>: 用来第一时间判断是否为无效包</li><li><strong>版本号</strong>: 支持协议的升级</li><li><strong>序列化算法</strong>:  消息正文采用哪种序列化和反序列化方法</li><li><strong>指令类型</strong>: 登录, 注册, 私聊, 群聊等</li><li><strong>请求序号</strong>: 为了双工通信, 提供异步能力</li><li><strong>正文长度</strong></li><li><strong>消息正文</strong><ul><li>xml格式(早期)</li><li>json格式</li></ul></li></ul><h2 id="编解码器"><a href="#编解码器" class="headerlink" title="编解码器"></a>编解码器</h2><h3 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h3><p>解码器用于处理入站数据, 本质上也是一个ChannelInboundHandler, 用于将数据从一种格式转换为另一种格式</p><ul><li><p><strong>将字节解码为消息</strong></p><p>  ByteToMessageDecoder和ReplayingDecoder</p></li><li><p><strong>将一种消息类型解码为另一种消息类型</strong></p><p>  MessageToMessageDecoder</p></li></ul><h4 id="ByteToMessageDecoder"><a href="#ByteToMessageDecoder" class="headerlink" title="ByteToMessageDecoder"></a>ByteToMessageDecoder</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO多路复用</title>
      <link href="/2023/04/01/io-duo-lu-fu-yong/"/>
      <url>/2023/04/01/io-duo-lu-fu-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h1><ul><li><p>BIO: 同步阻塞式</p><p>  适用于连接数目比较少且固定的架构</p></li><li><p>NIO: 同步非阻塞式</p><p>  适用于连接数目多, 但是连接比较短(轻量操作)的架构</p></li><li><p>AIO: 异步非阻塞式</p><p>  适用于连接数目多, 且连接比较长(重操作)的架构</p></li></ul><h2 id="对于同步、异步和阻塞、非阻塞的理解"><a href="#对于同步、异步和阻塞、非阻塞的理解" class="headerlink" title="对于同步、异步和阻塞、非阻塞的理解"></a>对于同步、异步和阻塞、非阻塞的理解</h2><p>同步和异步</p><ul><li>同步: 顺序执行，例如线程同步</li><li>异步: 通过回调函数执行</li></ul><p>阻塞和非阻塞</p><ul><li>阻塞: 执行代码后，除非事件发生，否则不会继续向下执行。</li><li>非阻塞: 可以继续向下执行代码</li></ul><p><code>accept()</code> 和 <code>read()</code> 会被阻塞</p><h1 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h1><p>BIO(Blocking IO)是同步阻塞式的IO通信, 服务器实现模式为<strong>一个连接一个线程</strong>, 如果这个连接不做任何事情则会造成不必要的开销, 因此可以<strong>使用线程池机制来改善</strong>, 但是线程池机制也会引入<strong>新的问题: 如果请求数量超过线程池的最大连接数量, 则会造成后续请求失败</strong>. 因此<strong>BIO模式适用于连接数目比较少且固定的架构</strong>.</p><h2 id="客户端与服务器通信过程-BIO模式"><a href="#客户端与服务器通信过程-BIO模式" class="headerlink" title="客户端与服务器通信过程(BIO模式)"></a>客户端与服务器通信过程(BIO模式)</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230114235458276.png" alt="image-20230114235458276"></p><h3 id="服务端流程"><a href="#服务端流程" class="headerlink" title="服务端流程"></a>服务端流程</h3><ol><li>定义一个ServerSocket对象, 进行服务端的端口注册</li><li>监听客户端的Socket连接请求</li><li>从Socket管道中得到InputStream, 获取客户端发送过来的请求数据</li><li>进行业务逻辑的处理</li><li>向Socket管道中推送OutputStream, 向客户端返回响应数据</li></ol><h3 id="客户端流程"><a href="#客户端流程" class="headerlink" title="客户端流程"></a>客户端流程</h3><ol><li>连接服务器端口</li><li>发送请求信息(即向Socket中发送OutputStream)</li><li>等待服务器响应, 从Socket中得到InputStream</li></ol><h3 id="总交互流程"><a href="#总交互流程" class="headerlink" title="总交互流程"></a>总交互流程</h3><ol><li>服务端: 进行端口注册, 并监听客户端的Socket连接请求</li><li>客户端: 连接服务器端口, 发送请求数据</li><li>服务端: 从Socket中获取客户端发送的请求数据, 进行业务处理, 然后返回响应数据</li><li>客户端: 从Socket中获取服务器返回的响应数据</li></ol><h2 id="伪异步IO"><a href="#伪异步IO" class="headerlink" title="伪异步IO"></a>伪异步IO</h2><p>伪异步IO的概念来源于实践, 表示通过线程池来做缓冲区的方法.</p><h2 id="同步阻塞案例的演示"><a href="#同步阻塞案例的演示" class="headerlink" title="同步阻塞案例的演示"></a>同步阻塞案例的演示</h2><h3 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//为了简化处理, 并没有实现BIO模式中的一个客户端一个线程, 而是将处理逻辑写在了主线程中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按行读取字符需要使用BufferedReader</span>        <span class="token comment" spellcheck="true">// BufferedReader只能通过Reader获取, 因此需要将InputStream->Reader, 即使用InputStreamReader</span>        BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msg <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg = "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Socket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OutputStream os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于服务端的处理逻辑是读取完一行后打印, 所以这里故意使用print()而不是使用println()</span>        ps<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//客户端线程睡5s,更易观察效果</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>阻塞原因分析</strong> </p><ol><li>在总交互流程的第3步中, 从<code>br.readLine()</code>的代码逻辑中, 服务端Server会一直等待客户端发送至少一行数据. </li><li>而客户端Client在发送<code>“hello world”</code>之后并没有换行符, 服务端接收到<code>“hello world”</code>之后并不会认为这是一行数据, 所以阻塞继续等待客户端发送剩下的数据.</li><li>客户端由于<code>Thread.sleep(5000)</code>阻塞了5s之后(此时服务端线程也阻塞了5s)会结束, 此时服务端发现客户端的Socket连接断开, 因此会报错.</li></ol><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230115003352673.png" alt="image-20230115003352673"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230115003424794.png" alt="image-20230115003424794"></p><h3 id="多发和多收消息的演示案例"><a href="#多发和多收消息的演示案例" class="headerlink" title="多发和多收消息的演示案例"></a>多发和多收消息的演示案例</h3><h3 id="多客户端演示案例"><a href="#多客户端演示案例" class="headerlink" title="多客户端演示案例"></a>多客户端演示案例</h3><p>需要引入线程, 每有一个socket连接请求则创建一个线程</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><p>JVM是一把双刃剑，它提供了统一的操作系统，与特定操作系统平台的细枝末节都被隐藏起来，因此方便编程，但是隐藏操作系统同时意味着特定操作系统下那些独具特色、功能强大的特性被挡在JVM之外。现代操作系统底层提供一些高效的I/O操作，新的IO就是为了利用上这些操作系统提供的新特性。总结：本质上还是操作系统的进步。</p><blockquote><p>Java NIO 需要看所处的操作系统环境来判断是 非阻塞式IO（Windows系统） 还是 IO多路复用（Linux系统）。非阻塞式IO 和 IO多路复用 的区别在于是用户态进行轮询还是在内核态进行轮询。非阻塞式IO是在用户态进行轮询，则循环中每次调用 <code>read()</code> 都需要进行一次用户态和内核态的切换，开销过大。而IO多路复用则是在内核态进行轮询，减少了用户态和内核态的切换次数。</p><p>IO多路复用技术包括：select、poll 和 epoll。假如有 100w 个文件描述符（客户端连接），那么 select 会调用 100w 次 read 操作，而可能其中只有 2 个文件描述符中存在数据读写，使用 epoll 则只会调用 2 次 read 操作。目前理解：select 和 epoll 都不可避免的去判断这 100w 个文件描述符中是否有事件发生，但是 epoll 只需要再进行 2 次 read 系统调用；但 select 需要进行 100w 次 read 系统调用，根据每一次 read 的返回结果来读取数据，没有数据的客户端连接也会调用一次，只是没有读取到数据而已。</p></blockquote><h2 id="NIO开发步骤"><a href="#NIO开发步骤" class="headerlink" title="NIO开发步骤"></a>NIO开发步骤</h2><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>ServerSocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这一部分可以放置到</span>        ServerSocketChannel serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Selector只能和非阻塞模式的Channel配合使用, 而FileChannel是不可以配置成非阻塞模式的</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Selector selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ServerSocketChannel-> OP_ACCEPT服务器准备好接受连接</span>        <span class="token comment" spellcheck="true">//SocketChannel->OP_CONNECT客户端可以连接到服务器</span>        serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//Server服务端只需要监听ACCEPT和READ事件</span>            Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SelectionKey selectionKey <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 所有客户端的第一次请求都是向serverSocketChannel中发送连接请求</span>                    <span class="token comment" spellcheck="true">// 每有一个连接请求, 分配一个通道socketChannel</span>                    <span class="token comment" spellcheck="true">// 而socketChannel中监听读事件, 也就是服务端等待客户端发送请求信息, 然后在isReadable()的处理逻辑中执行处理逻辑然后返回给Client客户端响应数据</span>                    SocketChannel socketChannel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//读就绪</span>                    SocketChannel socketChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//读逻辑处理</span>                    <span class="token comment" spellcheck="true">//todo: 可以在try-catch中处理Client离线的逻辑: (1).SelectionKey取消, (2).Channel关闭</span>                    <span class="token comment" spellcheck="true">//todo: 优化时可以将处理逻辑另开一个线程, 而选择器只作轮询的选择和判断就绪操作</span>                    <span class="token comment" spellcheck="true">//todo: 更进一步, 可以使用线程池来执行处理逻辑</span>                    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> readCounts<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCounts <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readCounts<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//将选择键从Selected Key Set中移除. 需要使用迭代器的remove(), 而不是使用selectionKey.cancel().</span>                <span class="token comment" spellcheck="true">//cancel()方法&lt;->register()方法, 会取消Channel和Selector的注册关系</span>                <span class="token comment" spellcheck="true">//使用增强for的缺点就是不能访问下标和删除集合中的元素</span>                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SocketChannel socketChannel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileChannel fileChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//transferTo底层使用到了零拷贝</span>        <span class="token comment" spellcheck="true">//在Windows系统中, 一次transferTo最多传送8MB, 对于大文件需要多次发送, position, count也需要计算得出</span>        <span class="token comment" spellcheck="true">//在Linux系统中, 一次transferTo即可</span>        fileChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fileChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buffer缓冲区"><a href="#Buffer缓冲区" class="headerlink" title="Buffer缓冲区"></a>Buffer缓冲区</h2><h2 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h2><p>Channel是双向操作的, 既可以用于读(ReadableByteChannel接口), 也可以用于写(WritableByteChannel接口), 还可以用于读写同时操作(ReadableByteChannel接口和WritableByteChannel接口), 所有的Channel类都实现了读写接口, 即Channel是双向操作的.</p><p>Channel相较于Stream而言, <strong>Channel是全双工的</strong>, 而Stream是单向的.</p><p>I/O广义上可以分为两大类:</p><ul><li>File IO(文件IO)</li><li>Stream IO(流IO)</li></ul><p>通道作为I/O服务的导管, 相应地也有两种类型地Channel:</p><ul><li><p>File文件通道</p><p>  <code>FileChannel</code>: 文件</p></li><li><p>Socket套接字通道</p><ul><li><code>DatagramChannel</code>: UDP</li><li><code>SocketChannel</code>: TCP</li><li><code>ServerSocketChannel</code>: 服务器TCP</li></ul></li></ul><h3 id="FileChannel类"><a href="#FileChannel类" class="headerlink" title="FileChannel类"></a>FileChannel类</h3><h4 id="打开Channel"><a href="#打开Channel" class="headerlink" title="打开Channel"></a>打开Channel</h4><p>SocketChannel可以直接创建, 而FileChannel只能通过调用下面三类实例对象的<code>getChannel()</code>方法来获取:</p><ul><li>FileInputStream</li><li>FileOutputStream</li><li>RandomAccessFile</li></ul><pre class="line-numbers language-java"><code class="language-java">RandomAccessFile file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"C:/test.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileChannel channel <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="关闭Channel"><a href="#关闭Channel" class="headerlink" title="关闭Channel"></a>关闭Channel</h4><h4 id="从Channel中读取数据-Channel-gt-Buffer"><a href="#从Channel中读取数据-Channel-gt-Buffer" class="headerlink" title="从Channel中读取数据(Channel-&gt;Buffer)"></a>从Channel中读取数据(Channel-&gt;Buffer)</h4><p><code>channel.read(buffer)</code>操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// readCounts代表实际读取数据的字节长度</span><span class="token comment" spellcheck="true">// 计算逻辑:</span><span class="token comment" spellcheck="true">// 1. readCounts = min(bufferSize, 文件剩余数据长度);</span><span class="token comment" spellcheck="true">// 2. readCounts = (readCounts != 0) ? readCounts : -1;</span><span class="token keyword">int</span> readCounts <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时buffer中存在数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="向Channel中写入-Buffer-gt-Channel"><a href="#向Channel中写入-Buffer-gt-Channel" class="headerlink" title="向Channel中写入(Buffer-&gt;Channel)"></a>向Channel中写入(Buffer-&gt;Channel)</h4><p><code>channel.write(buffer)</code>操作</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DatagramChannel类"><a href="#DatagramChannel类" class="headerlink" title="DatagramChannel类"></a>DatagramChannel类</h3><h3 id="SocketChannel类"><a href="#SocketChannel类" class="headerlink" title="SocketChannel类"></a>SocketChannel类</h3><h3 id="ServerSocketChannel类"><a href="#ServerSocketChannel类" class="headerlink" title="ServerSocketChannel类"></a>ServerSocketChannel类</h3><h3 id="Channel源码"><a href="#Channel源码" class="headerlink" title="Channel源码"></a>Channel源码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Closeable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Channel</span> <span class="token keyword">extends</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h2><p>Selector，SelectableChannel 和 SelectionKey 这三个类组成了使得在 Java 平台上使得<strong>就绪检查</strong>变得可行的三驾马车.</p><h3 id="SelectableChannel类"><a href="#SelectableChannel类" class="headerlink" title="SelectableChannel类"></a>SelectableChannel类</h3><p>SelectableChannel并不是Selector选择器的一个组成部分, 而是属于Channel, 所有的SocketChannel都属于SelectableChannel, 而FileChannel不是SelectableChannel.</p><p>由于Selector中涉及使用到的Channel都属于SelectableChannel, 所以将SelectableChannel在这部分引入一下.</p><h3 id="SelectionKey类"><a href="#SelectionKey类" class="headerlink" title="SelectionKey类"></a>SelectionKey类</h3><h4 id="取消逻辑"><a href="#取消逻辑" class="headerlink" title="取消逻辑"></a>取消逻辑</h4><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230116222431922.png" alt="image-20230116222431922" style="zoom:50%;"><ul><li><p>当Channel关闭, 所有相关的键会被自动取消(即添加到相应Selector的取消键集合中)</p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230116222903906.png" alt="image-20230116222903906" style="zoom:50%;"></li><li><p>当Selector关闭, 所有注册到该Selector的Channel都被注销, 相关的键被取消</p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230116223229206.png" alt="image-20230116223229206" style="zoom:50%;"></li></ul><h3 id="Selector类"><a href="#Selector类" class="headerlink" title="Selector类"></a>Selector类</h3><p>Selector是注册各种IO事件的地方, 当我们关注的事件发生时, 由Selector对象进行通知.</p><p>每个Selector对象维护三个与SelectionKey相关集合: </p><ul><li>Registered Key Set (已注册键的集合)</li><li>Selected Key Set (已选择键的集合)</li><li>Cancelled Key Set (已取消键的集合)</li></ul><h4 id="选择过程select"><a href="#选择过程select" class="headerlink" title="选择过程select()"></a>选择过程select()</h4><ol><li><p>检查<code>Cancelled Key Set</code>.</p><p> 遍历每一个已取消的键, 从集合中移除, 也从其它两个集合(<code>Registered Key Set</code> 和 <code>Selected Key Set</code>)中移除, 注销相关的通道</p></li><li><p>检查<code>Registered Key Set</code>中每一个<code>SelectionKey</code>键的<code>interest</code>集合</p></li><li></li></ol><h4 id="停止选择过程wakeup"><a href="#停止选择过程wakeup" class="headerlink" title="停止选择过程wakeup()"></a>停止选择过程wakeup()</h4><p><code>wakeup()</code>提供了使线程从被阻塞的<code>select()</code>方法中优雅退出的能力.</p><p><code>wakeup()</code>作用:</p><ul><li>如果当前正在执行<code>select()</code>方法, 那么使得Selector选择器上的<strong>第一个还没有返回的</strong><code>select()</code>操作立即返回. </li><li>如果当前没有执行<code>select()</code>方法, 那么<strong>后续第一次(下一次)</strong>对<code>select()</code>的调用将立即返回. <strong>除后续第一次外</strong>的<code>select()</code>方法将正常进行. (<strong>延迟处理特性</strong>)</li><li>两次<code>select()</code>方法中连续多次调用<code>wakeup()</code>和只调用一次<code>wakeup()</code>的作用相同</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NIO, IO多路复用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security权限管理</title>
      <link href="/2023/03/31/spring-security-quan-xian-guan-li/"/>
      <url>/2023/03/31/spring-security-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUXT框架使用</title>
      <link href="/2023/03/26/qian-duan-qian-tai-xiang-mu/"/>
      <url>/2023/03/26/qian-duan-qian-tai-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="NUXT（不是必须的，直接使用vue-admin-template也不是不可以）"><a href="#NUXT（不是必须的，直接使用vue-admin-template也不是不可以）" class="headerlink" title="NUXT（不是必须的，直接使用vue-admin-template也不是不可以）"></a>NUXT（不是必须的，直接使用vue-admin-template也不是不可以）</h1><h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><ol><li><code>npm install -g npx</code></li><li><code>yarn install create-app nuxt-demo</code> 创建项目</li><li>先执行<code>npm install</code>，再执行 <code>npm install vue-awesome-swiper@3.1.3 swiper --save</code> 进行覆盖（后面不要再进行npm install操作，否则可能重新将swiper的版本覆盖）。后面执行npm install会覆盖掉的原因可能是因为lock.json文件的原因</li><li>配置 <code>nuxt.config.json</code></li></ol><h3 id="模仿vue-admin-template封装-axios"><a href="#模仿vue-admin-template封装-axios" class="headerlink" title="模仿vue-admin-template封装 axios"></a>模仿vue-admin-template封装 axios</h3><ol><li><p>安装 axios，<code>npm install axios</code></p></li><li><p>建立 utils 包，创建 request.js 文件，填充下面内容</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:8001'</span><span class="token punctuation">,</span>    timeout<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>创建 api 包，在 api 文件夹下创建前端接口，例如 banner.js 文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">"@/utils/request"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有的banner数据     * @returns {Promise&lt;AxiosResponse&lt;any>>}     */</span>    <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/edu/crm/banner/user/list`</span></span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="固定路由"><a href="#固定路由" class="headerlink" title="固定路由"></a>固定路由</h3><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>传入课程的 id，不同课程有着不同的课程 id</p><p>NUXT 的动态路由是以下划线开头的 vue 文件，参数名为下划线后面的文件名，例如 <code>_id.vue</code> 表示接收参数为 id 的动态路由</p><h1 id="轮播图业务"><a href="#轮播图业务" class="headerlink" title="轮播图业务"></a>轮播图业务</h1><h1 id="对首页（访问量大）进行缓存"><a href="#对首页（访问量大）进行缓存" class="headerlink" title="对首页（访问量大）进行缓存"></a>对首页（访问量大）进行缓存</h1><p>Redis 中适合存放什么类型的数据？</p><blockquote><ul><li>经常进行查询，并且不经常修改的数据适合用 Redis 进行缓存。</li><li>不是特别重要的数据可以放到 Redis 中进行缓存</li></ul></blockquote><p>这些注解用于Service层还是Controller层呢？感觉应该存放在Service层中。</p><p><code>@Cacheable</code> 和 <code>@CachePut</code> 是 Spring Framework 中用于缓存的注解。</p><p><code>@Cacheable</code> 注解用于<strong>将方法的返回值缓存起来，以便在相同的参数传递给该方法时，可以直接返回缓存中的结果，而不需要执行实际的方法。</strong>(用于查询方法)</p><p><code>@CachePut</code> 注解用于更新缓存中的数据，即使被注解的方法每次都会执行，也会将结果缓存起来。与 <code>@Cacheable</code> 不同的是，<code>@CachePut</code> 注解的方法始终会被执行，并将结果放入缓存中，以便后续使用。（用于新增方法）</p><p><code>@CacheEvict</code>注解用于清空指定的缓存，一般用于更新方法或删除方法</p><p>需要注意的是，<code>@Cacheable</code> 和 <code>@CachePut</code> 注解的使用需要在 Spring Framework 中启用缓存支持，可以通过在配置类上添加 <code>@EnableCaching</code> 注解来启用缓存支持。</p><p>似乎添加上这些注解就不需要显式地使用redisTemplate来进行Redis的数据操作吗？</p><h1 id="登录业务"><a href="#登录业务" class="headerlink" title="登录业务"></a>登录业务</h1><h2 id="单一服务器登录方式"><a href="#单一服务器登录方式" class="headerlink" title="单一服务器登录方式"></a>单一服务器登录方式</h2><p>使用session对象实现，在用户登录成功后，把用户数据放到session中。通过判断session中是否有数据来判断是否登录。</p><pre class="line-numbers language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方式只适合单一服务器，不适合服务器是集群和分布式的情况，不能实现单点登录的需求，只适合学习使用。</p><p>微服务模块在不同的服务器中，如果使用session对象，那么在某一个微服务中登录并保存，那么在另一个微服务中还需要再次登录。<strong>实际需求是要实现单点登录，即在项目中的任何一个模块中登录，在其他模块都不需要再次登录</strong></p><p>单点登录的应用场景：登录百度账号后，访问百度文库、百度贴吧、百度知道等服务时自动登录，不需要再次输入账号密码来进行登录验证。</p><h2 id="SSO（Single-Sign-On单点登录）"><a href="#SSO（Single-Sign-On单点登录）" class="headerlink" title="SSO（Single Sign On单点登录）"></a>SSO（Single Sign On单点登录）</h2><p>单点登录的实现方式：</p><ul><li>使用 session 的广播机制（session复制，复制造成浪费，现在被淘汰）</li><li>使用 cookie + redis 来实现</li><li>使用 token 来实现</li></ul><blockquote><p>  随机值state由应用程序生成，传递给认证服务器，之后认证服务器返回token时会顺带返回state值，state值的作用是为了防止伪造攻击，在应用程序收到token时会验证state值，确认这真的是认证服务器发送过来的token</p><p>  token由认证服务器生成</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230326210751846.png" alt="image-20230326210751846"></p><p>使用cookie和redis实现步骤：</p><ol><li>用户访问应用程序A。用户在浏览器中输入应用程序A的网址，然后浏览器将向应用程序A发送请求。</li><li>应用程序A检查用户是否已登录。应用程序A检查浏览器中是否存在SSO cookie，如果存在，则检查Redis中是否有相应的会话数据。如果会话数据存在，则说明用户已经在其他应用程序登录过，并且可以直接访问应用程序A。</li><li>应用程序A重定向到认证服务器。如果用户没有登录，则应用程序A将重定向用户到认证服务器，并将当前应用程序A的URL作为参数传递给认证服务器。此外，应用程序A还需要生成一个随机的state值，并将其保存在Redis中，以便后续验证。</li><li>用户登录认证服务器。用户在认证服务器上输入其凭据（用户名和密码）以登录。</li><li>认证服务器验证用户凭据并生成令牌。认证服务器验证用户凭据，并生成一个包含有关用户身份的令牌。</li><li>认证服务器重定向到应用程序A。认证服务器将用户重定向回应用程序A，并将令牌作为参数传递给应用程序A。此外，还需要将步骤3中生成的state值一并传递给应用程序A。</li><li>应用程序A验证state值和令牌。应用程序A检查传递回来的state值是否与之前保存在Redis中的相同。如果不同，则说明这个请求可能来自恶意的第三方，并且应用程序A应该拒绝这个请求。如果state值相同，则应用程序A从Redis中获取令牌，并验证令牌的有效性。如果令牌有效，则为用户创建一个会话，并设置SSO cookie以便在其他应用程序中进行验证。</li><li>用户访问应用程序B。用户访问应用程序B时，应用程序B首先检查浏览器中是否存在SSO cookie。如果存在，则应用程序B将检查Redis中是否有相应的会话数据。如果会话数据存在，则说明用户已经在其他应用程序登录过，并且可以直接访问应用程序B。</li></ol><p>需要注意的是，使用cookie和Redis来实现SSO时，需要确保Redis中保存的会话数据和cookie中保存的数据一致。此外，为了提高安全性，还需要定期清理Redis中的过期数据。</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant ClientApp    participant AuthorizationServer    participant UserAgent    ClientApp->>UserAgent: 1. Redirect to AuthorizationServer(携带生成的随机state值)    UserAgent->>AuthorizationServer: 2. Send authorization request    AuthorizationServer->>UserAgent: 3. Ask for user credentials    UserAgent->>AuthorizationServer: 4. Send user credentials    AuthorizationServer->>ClientApp: 5. Redirect to client callback URL with authorization code    ClientApp->>AuthorizationServer: 6. Request access token using authorization code    AuthorizationServer->>ClientApp: 7. Return access token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant User    participant App1    participant App2    participant AuthServer    participant Redis    User->>+App1: Login request    App1->>+AuthServer: Redirect to AuthServer for authentication    AuthServer->>+User: Prompt for credentials    User->>+AuthServer: Enter credentials    AuthServer->>+Redis: Create SSO session and generate token    Redis->>-AuthServer: Store SSO session and token    AuthServer->>-App1: Redirect back to App1 with token    App1->>+AuthServer: Request user info using token    AuthServer->>+Redis: Validate token and retrieve user info    Redis->>-AuthServer: Return user info    AuthServer->>-App1: Return user info    App1->>+App2: Forward user info to App2    App2->>+AuthServer: Request user info using token    AuthServer->>+Redis: Validate token and retrieve user info    Redis->>-AuthServer: Return user info    AuthServer->>-App2: Return user info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用token实现步骤：</p><ol><li><strong>用户访问应用程序。</strong>用户在浏览器中输入应用程序的网址，然后浏览器将向应用程序发送请求。</li><li><strong>应用程序重定向到认证服务器。</strong>当应用程序收到请求后，它将重定向用户到认证服务器。在重定向时，应用程序将向认证服务器传递一个特定的标识符，以便认证服务器可以识别应用程序。</li><li><strong>用户登录认证服务器</strong>。用户输入其凭据（用户名和密码）来登录认证服务器。</li><li><strong>认证服务器发放令牌。</strong>认证服务器通过验证用户凭据，然后发放一个令牌给用户。这个令牌包含有关用户身份的信息，例如用户名和权限等。</li><li><strong>用户被重定向回应用程序。</strong>认证服务器将用户重定向回应用程序，并将令牌一并发送给应用程序。</li><li><strong>应用程序验证令牌。应用程序收到令牌后，将与认证服务器通信以验证令牌的有效性。</strong>如果令牌有效，则应用程序会为用户创建一个会话，使用户可以在不需要再次登录的情况下访问应用程序。</li><li>用户访问应用程序。现在，用户已经被授权访问应用程序，并且可以在不需要再次输入凭据的情况下访问应用程序。</li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>给定一个生成 token 的规则。用来保存用户信息，至少应该保存用户id（唯一标识符），为了尽可能少的查询数据库，还可以包含一些基本的重要信息，例如用户身份（普通用户、vip、svip等）。</p><h2 id="整合阿里云短信服务"><a href="#整合阿里云短信服务" class="headerlink" title="整合阿里云短信服务"></a>整合阿里云短信服务</h2><h2 id="微信扫码登录"><a href="#微信扫码登录" class="headerlink" title="微信扫码登录"></a>微信扫码登录</h2><p>OAuth2流程图</p><p>单点登录解决是同一个系统内部的各个微服务之间的问题，OAuth2是解决不同系统之间的互相访问，OAuth2并不会授予客户端全部的权限。</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram    participant User    participant Client    participant Authorization_Server    participant Resource_Server    User->>Client: 1.发起请求（请求通过微信登录应用程序）    Client->>Authorization_Server: 2.请求授权    Authorization_Server->>User: 3.用户登录并授权    User->>Authorization_Server: 4.同意授权    Authorization_Server->>Client: 5.返回授权码/验证码（code）    Client->>Authorization_Server: 6.请求访问令牌（code+app_id+app_secret）    Authorization_Server->>Client: 7.返回访问令牌（access_token）    Client->>Resource_Server: 8.请求资源    Resource_Server-->>Client: 9.返回受保护资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230327144745298.png" alt="image-20230327144745298"></p><blockquote><p>  为什么要先获取授权码，再获取token令牌？</p><p>  授权码是尽可能确认是用户本人在操作，例如用曾经登录过的手机扫码，而新手机无法直接登录。<strong>授权码可以理解成发送给手机的动态验证码</strong>，即使用户的账号密码泄露，也需要授权码才能获得访问令牌（真实的访问权限）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis高级特性</title>
      <link href="/2023/03/26/redis-gao-ji-te-xing/"/>
      <url>/2023/03/26/redis-gao-ji-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-高级特性"><a href="#Redis-高级特性" class="headerlink" title="Redis 高级特性"></a>Redis 高级特性</h1><h2 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h2><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="单-Redis-实例做分布式锁（setnx）"><a href="#单-Redis-实例做分布式锁（setnx）" class="headerlink" title="单 Redis 实例做分布式锁（setnx）"></a>单 Redis 实例做分布式锁（setnx）</h3><p>这里的单 Redis 实例并不是指单机版的 Redis，这里可以是 Redis 集群，也可以是 Redis 主从哨兵。之所以称之为<strong>单Redis实例分布式锁</strong>，是因为只主动在一个 Redis节点上添加分布式锁，而锁的复制是通过 Redis 的主从复制被动进行的。这样可能存在锁的单点故障问题，例如：</p><blockquote><p>  某个线程在 master 节点（A）上成功添加分布式锁（即 Redis 数据库中添加了一个key），在节点 A 将该分布式锁同步到其它 slave 节点（B）前，A 节点发生故障，此时 B 节点称为新的 master 节点，但是此时 B 节点中并没有这把分布式锁。那其它的线程接着请求该锁时，B 节点会为其它线程分配锁，此时整个系统中存在两个线程拥有同一把锁，因此锁失效。</p></blockquote><h3 id="多-Redis-实例做分布式锁（Redisson）"><a href="#多-Redis-实例做分布式锁（Redisson）" class="headerlink" title="多 Redis 实例做分布式锁（Redisson）"></a>多 Redis 实例做分布式锁（Redisson）</h3><h4 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h4><ol><li><p>引入 pom 依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.20.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RedisConfig 配置类中注入一个 Redisson 对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Redisson <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    config<span class="token punctuation">.</span><span class="token function">useClusterServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span><span class="token string">"redis://hadoop002:6379"</span><span class="token punctuation">,</span> <span class="token string">"redis://hadoop002:6380"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Redisson<span class="token punctuation">)</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ol><h4 id="Reddisson-源码解析"><a href="#Reddisson-源码解析" class="headerlink" title="Reddisson 源码解析"></a>Reddisson 源码解析</h4><ul><li>默认过期时间为 30 s</li></ul><ul><li>WatchDog 的执行间隔是 1/3 个过期时间间隔，即 10 s </li></ul><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>应用场景：</p><p>共有50亿个电话号码，现有10万个电话号码，如何快速准确地判断这些电话号码是否存在？</p><p>安全连接网址，全球数10亿的网址判断</p><p>黑名单校验，识别垃圾邮件</p><p>白名单校验，识别出合法用户进行后续处理</p><p>布隆过滤器是一种空间效率高、判定效率高的数据结构，主要用于检索一个元素是否在一个集合中。它是一个长向量（位数组）和一系列随机映射函数的组合。</p><p><strong>布隆过滤器的基本思想是对于一个集合中的每个元素，将其通过 K 个哈希函数映射到一个位数组中的 K 个位置上，并将这些位置置为 1。判断一个元素是否在集合中时，只需要看一下这 K 个位置是否都为 1 即可。</strong></p><p>由于布隆过滤器对于存在和不存在的元素都有一定的误判率，因此它适合于那些可以容忍一定误判率的场景，比如黑名单过滤、URL去重等。</p><p>布隆过滤器的优点是空间利用率高、判定效率高，而缺点是存在一定的误判率，且难以删除元素。</p><p>误判的原因：布隆过滤器会将数据通过 K 个哈希函数进行映射，如果 K 个哈希映射都能够找到，则认为该数据存在。这种确定一个数据是否存在的方式是不精确的，可能将原本不存在的数据误判为存在。即布隆过滤器判断为真的数据未必为真，布隆过滤器判断为假的数据必定为假（存在假阳现象，不存在假阴现象）。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在加入事务队列的时候发现命令错误，则队列中的全部命令都不会执行。（类似于编译错误）</p><p>事务队列中的命令在执行时才发现错误，则跳过错误命令，其他命令执行。（类似于运行时错误）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-admin-template模板使用</title>
      <link href="/2023/03/22/vue-admin-template-mo-ban-shi-yong/"/>
      <url>/2023/03/22/vue-admin-template-mo-ban-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-admin-template模板"><a href="#vue-admin-template模板" class="headerlink" title="vue-admin-template模板"></a>vue-admin-template模板</h1><h2 id="谷粒学苑项目框架"><a href="#谷粒学苑项目框架" class="headerlink" title="谷粒学苑项目框架"></a>谷粒学苑项目框架</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230324182411190.png" alt="image-20230324182411190"></p><h2 id="框架入口"><a href="#框架入口" class="headerlink" title="框架入口"></a>框架入口</h2><p><code>index.html</code>和 <code>src/main.js</code></p><h2 id="框架作用"><a href="#框架作用" class="headerlink" title="框架作用"></a>框架作用</h2><p>对 Vue 和 Element-ui 的封装</p><h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><h3 id="index-js-文件"><a href="#index-js-文件" class="headerlink" title="index.js 文件"></a>index.js 文件</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>        assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>        assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>         port<span class="token punctuation">:</span> <span class="token number">9528</span><span class="token punctuation">,</span>         autoOpenBrowser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        errorOverlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        notifyOnErrors<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        poll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 这里修改为false, 不需要使用这么严格的Eslint检查</span>        useEslint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        showEslintErrorsInOverlay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        devtool<span class="token punctuation">:</span> <span class="token string">'cheap-source-map'</span><span class="token punctuation">,</span>        cssSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    build<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        assetsRoot<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>        assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        devtool<span class="token punctuation">:</span> <span class="token string">'source-map'</span><span class="token punctuation">,</span>        productionGzip<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        productionGzipExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        bundleAnalyzerReport<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_report <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        generateAnalyzerReport<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_generate_report <span class="token operator">||</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="dev-env-js-开发环境配置"><a href="#dev-env-js-开发环境配置" class="headerlink" title="dev.env.js 开发环境配置"></a>dev.env.js 开发环境配置</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prod.env'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>    NODE_ENV<span class="token punctuation">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// BASE_API: '"https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin"',</span>    <span class="token comment" spellcheck="true">// 修改BASE_API, 使得可以登录成功</span>    BASE_API<span class="token punctuation">:</span> <span class="token string">'"http://localhost:8001"'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工具目录"><a href="#工具目录" class="headerlink" title="工具目录"></a>工具目录</h2><p>request.js 文件中通过将 axios 封装成</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Message<span class="token punctuation">,</span> MessageBox<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'../store'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>getToken<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/auth'</span><span class="token comment" spellcheck="true">// 创建axios实例</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_API<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// api 的 base_url</span>    timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment" spellcheck="true">// 请求超时时间</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// request拦截器</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-Token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让每个请求携带自定义token 请根据实际情况自行修改</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> config    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Do something with request error</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for debug</span>        Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// response 拦截器</span>service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * code为非20000是抛错 可结合自己业务进行修改         */</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">20000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                message<span class="token punctuation">:</span> res<span class="token punctuation">.</span>message<span class="token punctuation">,</span>                type<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>                duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">50008</span> <span class="token operator">||</span> res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">50012</span> <span class="token operator">||</span> res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">50014</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">confirm</span><span class="token punctuation">(</span>                    <span class="token string">'你已被登出，可以取消继续留在该页面，或者重新登录'</span><span class="token punctuation">,</span>                    <span class="token string">'确定登出'</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        confirmButtonText<span class="token punctuation">:</span> <span class="token string">'重新登录'</span><span class="token punctuation">,</span>                        cancelButtonText<span class="token punctuation">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>                        type<span class="token punctuation">:</span> <span class="token string">'warning'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'FedLogOut'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 为了重新实例化vue-router对象 避免bug</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>data        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'err'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// for debug</span>        <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>            duration<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vue.config.js</p><p>配置文件, 修改访问端口地址</p><ul><li><p>src目录</p><ul><li><p>api目录</p><p>自定义方法</p></li><li><p>asset目录</p><p>静态资源</p></li><li><p>components目录</p><p>存放组件</p></li><li><p>icons目录</p><p>存放图标</p></li><li><p>router目录</p><p>路由</p></li><li><p>style目录</p><p>样式文件</p></li><li><p>utils目录</p><p>request文件</p></li><li><p>views目录</p><p>项目中的具体页面</p></li></ul></li></ul><p>@RestController表示交给Spring管理, 并返回数据</p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><ol><li>修改vue.config.js中的端口号为8001</li></ol><h2 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h2><ol><li>在router/index.js中添加</li><li>title属性决定页面的标题</li><li>component表示点击路由跳转到指定页面</li></ol><h2 id="讲师列表的前端实现"><a href="#讲师列表的前端实现" class="headerlink" title="讲师列表的前端实现"></a>讲师列表的前端实现</h2><h3 id="添加路由-1"><a href="#添加路由-1" class="headerlink" title="添加路由"></a>添加路由</h3><ol><li><p>在<code>router/index.js</code>中模仿样例改造一级路由<code>讲师管理</code>和二级路由</p></li><li><p>创建路由对应的页面并修改<code>router/index.js</code>中对应的路由映射路径</p><ol><li>讲师列表<code>views/edu/teacher/list.vue</code></li><li>添加讲师<code>views/edu/teacher/save.vue</code></li></ol></li><li><p><code>vue</code>页面的基本写法</p><pre class="line-numbers language-vue"><code class="language-vue"> <template>   <div class="app-container">     <!-- template和div标签是固定写法, 框架对其进行了封装 -->     添加讲师   </div> </template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>api</code>文件夹中创建<code>teacher.js</code>, 在其中定义接口的访问地址</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 引入utils/request, request中封装了axios</span> <span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span> <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     url<span class="token punctuation">:</span> <span class="token string">'/vue-admin-template/table/list'</span><span class="token punctuation">,</span>     method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>     params   <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="vue-admin-template-项目改造"><a href="#vue-admin-template-项目改造" class="headerlink" title="vue-admin-template 项目改造"></a>vue-admin-template 项目改造</h1><h2 id="后端请求路径改造"><a href="#后端请求路径改造" class="headerlink" title="后端请求路径改造"></a>后端请求路径改造</h2><p>vue-admin-template 默认使用 <a href="https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin/user/login" target="_blank" rel="noopener">https://easy-mock.com/mock/5950a2419adc231f356a6636/vue-admin/user/login</a> 地址进行请求，需要修改 dev.env.js 中的 <code>BASE_API</code> 属性</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prod.env'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>    NODE_ENV<span class="token punctuation">:</span> <span class="token string">'"development"'</span><span class="token punctuation">,</span>    BASE_API<span class="token punctuation">:</span> <span class="token string">'"http://localhost:8001"'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面改造"><a href="#页面改造" class="headerlink" title="页面改造"></a>页面改造</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230323003906516.png" alt="image-20230323003906516"></p><h3 id="讲师管理模块页面改造"><a href="#讲师管理模块页面改造" class="headerlink" title="讲师管理模块页面改造"></a>讲师管理模块页面改造</h3><h4 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h4><pre class="line-numbers language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// src/router/index.js</span>    <span class="token comment" spellcheck="true">// 侧边栏, 主体框架</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/teacher'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Layout<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 重定向到子路由的路径上, 相当于这一个分支的默认展示页面</span>        redirect<span class="token punctuation">:</span> <span class="token string">'/teacher/table'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'讲师管理'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// title 的修改会反映到对应页面上</span>            title<span class="token punctuation">:</span> <span class="token string">'讲师管理'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// icon 是 src/icons/svg 目录下存储的矢量图片</span>            icon<span class="token punctuation">:</span> <span class="token string">'user'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子路由的路径: /teacher/table</span>                path<span class="token punctuation">:</span> <span class="token string">'table'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'讲师列表'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// '@/views/edu/teacher/table' 这些页面从现有的模板中进行拷贝, 或者自己写页面</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/edu/teacher/table'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'讲师列表'</span><span class="token punctuation">,</span>                    icon<span class="token punctuation">:</span> <span class="token string">'table'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 子路由的路径: /teacher/tree</span>                path<span class="token punctuation">:</span> <span class="token string">'tree'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'讲师层次'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/edu/teacher/tree'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'讲师层次'</span><span class="token punctuation">,</span>                    icon<span class="token punctuation">:</span> <span class="token string">'tree'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/add'</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span> <span class="token string">'添加讲师'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/views/edu/teacher/add'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    title<span class="token punctuation">:</span> <span class="token string">'添加讲师'</span><span class="token punctuation">,</span>                    icon<span class="token punctuation">:</span> <span class="token string">'form'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="页面设置"><a href="#页面设置" class="headerlink" title="页面设置"></a>页面设置</h4><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230323005923169.png" alt="image-20230323005923169" style="zoom:150%;"><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230323005958836.png" alt="image-20230323005958836"></p><h1 id="后台的前端项目开发"><a href="#后台的前端项目开发" class="headerlink" title="后台的前端项目开发"></a>后台的前端项目开发</h1><h2 id="login-登录业务"><a href="#login-登录业务" class="headerlink" title="login 登录业务"></a>login 登录业务</h2><h4 id="前端接口修改（src-api-login-js）"><a href="#前端接口修改（src-api-login-js）" class="headerlink" title="前端接口修改（src/api/login.js）"></a>前端接口修改（src/api/login.js）</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/edu/user/login'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            username<span class="token punctuation">,</span>            password        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/edu/user/info'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        params<span class="token punctuation">:</span> <span class="token punctuation">{</span>token<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'/edu/user/logout'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> <span class="token string">'post'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后端接口修改"><a href="#后端接口修改" class="headerlink" title="后端接口修改"></a>后端接口修改</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>xiong<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Api<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * RestController注解: 表示该类交给Spring管理并返回数据 * &lt;p> * CrossOrigin注解: 用来解决跨域问题 * &lt;p> * 这里的逻辑纯粹是为了迎合前端vue-admin-template模板中的要求 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/edu/user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">"登录管理"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduLoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        "token"是由于vue-admin-template模板登录功能store/user中使用的token</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        这里的name和avatar应该和前端关键字相同吧</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span> <span class="token string">"[admin]"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"avatar"</span><span class="token punctuation">,</span> <span class="token string">"https://gw.alicdn.com/i4/710600684/O1CN01bNcLnV1GvJd3wK1k2_!!710600684.jpg_Q75.jpg_.webp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分页查询业务"><a href="#分页查询业务" class="headerlink" title="分页查询业务"></a>分页查询业务</h2><h3 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h3><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"带条件的分页查询"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"pageTeacherCondition/{current}/{limit}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result <span class="token function">pageTeacherCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"current"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"当前页"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span>                                       <span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"limit"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"每页最多个数"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">,</span>                                       <span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> TeacherQuery teacherQuery<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QueryWrapper<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> wrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teacherQuery <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            构建查询条件</span>            wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span>Teacher<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            多条件组合查询, 相当于mybatis中的动态sql</span>            String name <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Integer level <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String begin <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String end <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            拼接上下面的查询条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        对数据进行排序, 按照创建时间倒序排序</span>            wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//current和limit的参数类型是根据代码内部逻辑确定的, 而不是固定的String类型</span>        Page<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> teacherPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数据封装到teacherPage对象中</span>        teacherService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>teacherPage<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取返回数据的总条数</span>        <span class="token keyword">long</span> total <span class="token operator">=</span> teacherPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        获取每一条返回数据</span>        List<span class="token operator">&lt;</span>Teacher<span class="token operator">></span> records <span class="token operator">=</span> teacherPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"rows"</span><span class="token punctuation">,</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端接口"><a href="#前端接口" class="headerlink" title="前端接口"></a>前端接口</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token comment" spellcheck="true">// 导出为一个对象(例如为teacher), 可以通过teacher.pageQuery来调用方法, 不需要import {pageQuery, add, logout} from '@/api/edu/teacher'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">pageQuery</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> queryObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过路径进行传递值</span>            url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/edu/teacher/pageTeacherCondition/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>current<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageSize<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// data 的作用是将对象转为json</span>                <span class="token comment" spellcheck="true">// 通过 post 请求体进行传递值, 对应后端的 @RequestBody (将json数据变为对象)</span>                queryObject            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 添加一位教师     * @param teacherObject 待添加的teacher对象     */</span>    <span class="token function">add</span><span class="token punctuation">(</span>teacherObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'/edu/teacher/add'</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                teacherObject            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'/edu/user/logout'</span><span class="token punctuation">,</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端页面调用接口"><a href="#前端页面调用接口" class="headerlink" title="前端页面调用接口"></a>前端页面调用接口</h3><pre class="line-numbers language-vue"><code class="language-vue"><script>import teacher from '@/api/edu/teacher'export default {  filters: {    statusFilter(status) {      const statusMap = {        published: 'success',        draft: 'gray',        deleted: 'danger'      }      return statusMap[status]    }  },  // 定义页面或方法中需要使用的变量  data() {    return {      list: null,      total: 0,      // 当前页      currentPage: 1,      // 每页数量      pageSize: 3,      // 用于进行条件查询的对象      teacherQueryObject: {}    }  },  // 页面渲染前执行, 初始化方法  created() {    // todo: 默认进行一次全部的查询(这里可以进行优化)    this.pageQuery()  },  // 定义页面中的方法, 用来调用api中的接口  methods: {    pageQuery() {      teacher.pageQuery(this.currentPage, this.pageSize, this.teacherQueryObject)          //.then()方法中处理成功请求          .then(response => {            // response表示接口返回的数据            console.log(response)            // 用页面内定义的变量接收返回结果            this.list = response.data.rows            this.total = response.data.total          })          //.catch()方法中处理失败请求          .catch(error => {            console.log(error)          })    },    handleEdit(index, row) {      console.log(index, row);    },    handleDelete(index, row) {      console.log(index, row);    }  }}</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端页面内容"><a href="#前端页面内容" class="headerlink" title="前端页面内容"></a>前端页面内容</h3><h4 id="表单组件"><a href="#表单组件" class="headerlink" title="表单组件"></a>表单组件</h4><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div class="app-container">    <!--Element-ui中定义的table组件-->    <!--:data绑定一个数组, Element-ui会对该数组进行遍历-->    <el-table        :data="list"        element-loading-text="Loading..."        border        fit        highlight-current-row>      <!--      label: 页面显示的内容      prop: 对应response.data.rows中单个对象的属性      -->      <el-table-column align="center" label="ID" prop="id">      </el-table-column>      <el-table-column align="center" label="姓名" prop="name">        <template slot-scope="scope">          <el-popover trigger="hover" placement="top">            <p>姓名: {{ scope.row.name }}</p>            <p>头衔: {{ scope.row.level === 1 ? '高级' : '首席' }}</p>            <div slot="reference" class="name-wrapper">              <el-tag size="medium">{{ scope.row.name }}</el-tag>            </div>          </el-popover>        </template>      </el-table-column>      <el-table-column label="简介" align="center" prop="intro">      </el-table-column>      <!--头衔在数据库中保存的内容是数值, 但实际希望呈现的高级讲师, 初级讲师这种文字内容, 因此需要进一步处理-->      <el-table-column label="头衔" align="center" prop="level">        <template slot-scope="scope">          <!--          scope.row.<prop>来获取属性值          ===: 判断类型和值, 例如 '1' === 1 为false          ==: 判断值, 例如 '1'== 1为true          -->          {{ scope.row.level === 1 ? '高级讲师' : '首席讲师' }}        </template>      </el-table-column>      <el-table-column label="入职时间" align="center" prop="gmtCreate">      </el-table-column>      <el-table-column label="操作">        <template slot-scope="scope">          <el-button              size="mini"              @click="handleEdit(scope.$index, scope.row)">编辑          </el-button>          <el-button              size="mini"              type="danger"              @click="handleDelete(scope.$index, scope.row)">删除          </el-button>        </template>      </el-table-column>    </el-table>  </div></template><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h4><pre class="line-numbers language-vue"><code class="language-vue">    <div>      <!--当只有一页时, 通过设置按钮来隐藏分页-->      <el-switch v-model="paginationHiddenValue">      </el-switch>      <!--      element-ui中和分页插件相关的事件定义      1. @size-change: pageSize 改变时会触发      2. @current-change: currentPage 改变时会触发      3. @prev-click: 用户点击上一页按钮改变当前页后触发      4. @next-click: 用户点击下一页按钮改变当前页后触发      -->      <el-pagination          @size-change="pageQuery"          @current-change="pageQuery"          @prev-click="pageQuery"          @next-click="pageQuery"          :hide-on-single-page="paginationHiddenValue"          :page-sizes="[100, 200, 300, 400]"          :current-page="currentPage"          :page-size="pageSize"          :total="total"          background          layout="total, sizes, prev, pager, next, jumper">      </el-pagination>    </div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件查询组件"><a href="#条件查询组件" class="headerlink" title="条件查询组件"></a>条件查询组件</h4><pre class="line-numbers language-vue"><code class="language-vue"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除业务"><a href="#删除业务" class="headerlink" title="删除业务"></a>删除业务</h2><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>删除无法自动刷新，执行删除操作后需要手动进行一次刷新或者执行两次删除操作，才能看到删除效果</p><h2 id="修改业务"><a href="#修改业务" class="headerlink" title="修改业务"></a>修改业务</h2><h2 id="上传图片业务"><a href="#上传图片业务" class="headerlink" title="上传图片业务"></a>上传图片业务</h2><p>图片上传到阿里云OSS进行存储</p><p>如果想保存到自己本地的服务器该如何操作呢？这里只是图片上传功能，那通用的文件上传功能是如何实现的呢？</p><h2 id="课程分类业务-难点"><a href="#课程分类业务-难点" class="headerlink" title="课程分类业务(难点)"></a>课程分类业务(难点)</h2><h3 id="分类任务建模"><a href="#分类任务建模" class="headerlink" title="分类任务建模"></a>分类任务建模</h3><p>数据库中通过id和parentId进行实现</p><p>一级分类的parentId为默认的0</p><p>二级分类的parentId为一级分类的id</p><p>三级分类的parentId为二级分类的id</p><p>依此类推</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E6%8A%80%E6%9C%AF.svg" alt="课程分类"></p><table><thead><tr><th>id</th><th>parentId</th></tr></thead><tbody><tr><td>10（后端）</td><td>0（技术）</td></tr><tr><td>11（前端）</td><td>0（技术）</td></tr><tr><td>100（Java）</td><td>10</td></tr><tr><td>150（JavaScript）</td><td>11</td></tr></tbody></table><h3 id="EsayExcel-实现写操作"><a href="#EsayExcel-实现写操作" class="headerlink" title="EsayExcel 实现写操作"></a>EsayExcel 实现写操作</h3><h3 id="EsayExcel-实现读操作"><a href="#EsayExcel-实现读操作" class="headerlink" title="EsayExcel 实现读操作"></a>EsayExcel 实现读操作</h3><h3 id="文件上传功能"><a href="#文件上传功能" class="headerlink" title="文件上传功能"></a>文件上传功能</h3><h3 id="多级别的分类"><a href="#多级别的分类" class="headerlink" title="多级别的分类"></a>多级别的分类</h3><p><strong>多级选择框的联动问题：例如省市县</strong></p><p>可以返回一个map，其中key对应id（准确说是包含id，可能在前端还需要显示该对象的其他属性，往往显示的不是id属性），而value是一个子类别的列表。</p><p>这样在前端进行一级分类指定id后，可以获取该一级分类下的所有二级分类；同样在指定二级分类id后，可以获取三级分类列表，以此类推</p><p><strong>对于省市县这种固定的分类和不固定的分类是否需要分别考虑，固定的分类直接写死避免查询数据库吗？还是有什么其他的优化？存疑</strong></p><h2 id="课程管理业务"><a href="#课程管理业务" class="headerlink" title="课程管理业务"></a>课程管理业务</h2><h3 id="课程添加过程需求分析"><a href="#课程添加过程需求分析" class="headerlink" title="课程添加过程需求分析"></a>课程添加过程需求分析</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230324182715975.png" alt="image-20230324182715975"></p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230324191352674.png" alt="image-20230324191352674"></p><h3 id="Vo-和-Po-问题"><a href="#Vo-和-Po-问题" class="headerlink" title="Vo 和 Po 问题"></a>Vo 和 Po 问题</h3><blockquote><ol><li><strong>课程添加页面中包含各种信息，而这些信息分布在多张表中（edu_course 和 edu_course_description），因此需要创建一个 XXXVo 类来接收前端传入的对象</strong>，而 XXXPo 类则是和数据库表对应。（XXXPo 和 XXXVo 在简单的场景下可能是相同的，此时就没有必要额外创建一个 XXXVo 类）</li><li>同样由于 XXXVo 类和 XXXPo 类不完全相同，<strong>因此接收到的 XXXVo 需要将信息拆分添加到多张表中</strong>。</li><li>把 <strong>所属讲师</strong> 和 <strong>所属分类</strong> 在前端限制成下拉列表的形式，限制域的取值范围。所属分类是多级分类，需要实现<strong>多级联动效果</strong>（省市县）。</li></ol></blockquote><h3 id="添加课程业务中存在的问题"><a href="#添加课程业务中存在的问题" class="headerlink" title="添加课程业务中存在的问题"></a>添加课程业务中存在的问题</h3><p>添加课程在前端是三个阶段的过程：编辑基础信息、添加课程大纲、最终发布。但是目前在编辑基础信息的时候就将课程数据保存到数据库中，<strong>如果用户在执行到第二个阶段或第三个阶段希望取消，那该如何撤销之前保留的数据？</strong></p><p><strong>三个阶段之间的数据不能够回显，如何做到数据回显的效果？</strong></p><blockquote><p>  解决思路：第一个阶段执行完成后，保存到数据库，会自动生成课程id，此时需要获取该课程的id，传递给第二、三阶段进行使用。数据回显也可以基于课程id来实现。</p></blockquote><p>XXXVo 对象中不保存id，因此需要一个额外的属性来记录id值，该id值在第一次添加时由数据库生成并返回给前端进行记录，在进行修改时，前端需要通过该值来对数据库进行访问。类似cookie的作用。</p><h2 id="视频点播能力（阿里云）"><a href="#视频点播能力（阿里云）" class="headerlink" title="视频点播能力（阿里云）"></a>视频点播能力（阿里云）</h2><p>上传、自动化转码（普通视频转高清，怎么实现的呢？）、媒体资源管理、分发加速</p><p>这些功能如果需要存储在本地该如何实现呢？即老板愿意买磁盘，但是不愿意买阿里云的服务来存储视频。难道必须存储在阿里云，还是应该学点别的。</p><h3 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h3><p>数据库中不存储视频的地址，因为对于加密视频而言，不能通过视频地址直接播放，所以数据库中存储视频id。通过视频id来获取视频播放地址和凭证，再通过凭证来判断是否有播放（访问）权限。</p><h3 id="删除视频"><a href="#删除视频" class="headerlink" title="删除视频"></a>删除视频</h3><p>存放在阿里云的这种视频，如何保证事务一致性呢？会不会出现本地数据库中视频id被删除，但是实际阿里云存储的视频没有删除成功（先删除id，后删除视频会产生这个问题）。<strong>但先删除视频，后删除视频id，如果阿里云那边成功删除视频，但是本地删除数据库中的视频id时发生错误。这样导致本地数据库回滚，而阿里云中无法回滚，那该怎么办呢？</strong></p><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>在Controller中通过List来接收多个视频id，在阿里云存储视频的方式中，需要将List中的值拼接成一个以逗号分隔的字符串（因此用别人的接口，按照别人的要求）。这个需求可以使用Spring提供的工具类 StringUtils 中的 <code>join()</code> 方法</p><p>删除多个视频的时候，阿里云是如何保证事务的呢？会出现成功删除一部分，另外一部分删除失败吗？或者某个视频删除了一半？感觉删除还是先逻辑删除，确保业务操作简单，之后再在某个空闲的时候统一删除会更好。</p><h3 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h3><h1 id="SpringCloud-微服务框架"><a href="#SpringCloud-微服务框架" class="headerlink" title="SpringCloud 微服务框架"></a>SpringCloud 微服务框架</h1><p>模块和模块之间是相互独立的，一个模块引入另一个模块不属于微服务架构。因此微服务架构需要考虑微服务和微服务之间的相互调用问题（RPC）</p><p>SpringCloud 在接口调用上，会经过几个组件的配合：</p><ol><li><p>Feign 接口化请求调用</p><p>将restTemplate直接硬编码的请求地址给转化成接口的形式，Feign 会根据指定的服务名去服务注册中心中查找服务地址，然后向那个微服务发送调用请求</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"${nacos-service.vod}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/edu/vod/test/{id}"</span><span class="token punctuation">)</span>    String <span class="token function">getVodServiceTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Hystrix 服务熔断</p><p>通过在当前微服务模块中简单实现一个 VodClient 接口的实现类，作为VodClient 接口远程调用失败时的服务降级方案。对上面的接口进行一些简单修改，在@FeignClient注解中添加上 <code>fallback = VodClientImpl.class</code> 即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"${nacos-service.vod}"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> VodClientImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/edu/vod/test/{id}"</span><span class="token punctuation">)</span>    String <span class="token function">getVodServiceTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VodClientImpl</span> <span class="token keyword">implements</span> <span class="token class-name">VodClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Hystrix 服务降级</span>    <span class="token comment" spellcheck="true">// todo: 为什么这里会经过视图解析器, 不是添加了@ResponseBody吗? 这是IDEA的小bug</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getVodServiceTest</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"服务熔断"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>Ribbon 负载均衡</p><p>如果被调用的微服务有多个，那么会将请求通过负载均衡策略分配到该微服务的实例</p></li><li><p>Http Client / OkHttp 进行http请求调用 </p></li></ol><h1 id="前台的前端项目开发"><a href="#前台的前端项目开发" class="headerlink" title="前台的前端项目开发"></a>前台的前端项目开发</h1><h2 id="NUXT框架"><a href="#NUXT框架" class="headerlink" title="NUXT框架"></a>NUXT框架</h2><p>AJAX 请求：缺点是不利于SEO，不利于爬虫（百度、谷歌）的排名</p><p>服务端渲染技术</p><p>注意需要通过 <code>nvm use 14</code> 来切换成 node 14.x 版本，再通过 <code>npm run dev</code> 来启动nuxt项目</p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ul><li>assets：一般存放静态资源，例如css、js、img等</li><li>component：存放项目相关组件，例如上传功能组件</li><li>layouts</li></ul><h2 id="整合前台系统页面"><a href="#整合前台系统页面" class="headerlink" title="整合前台系统页面"></a>整合前台系统页面</h2><h2 id="首页显示banner数据（轮播图或幻灯片）"><a href="#首页显示banner数据（轮播图或幻灯片）" class="headerlink" title="首页显示banner数据（轮播图或幻灯片）"></a>首页显示banner数据（轮播图或幻灯片）</h2><h2 id="首页显示热门课程和名师"><a href="#首页显示热门课程和名师" class="headerlink" title="首页显示热门课程和名师"></a>首页显示热门课程和名师</h2><h2 id="首页数据使用-Redis-进行缓存"><a href="#首页数据使用-Redis-进行缓存" class="headerlink" title="首页数据使用 Redis 进行缓存"></a>首页数据使用 Redis 进行缓存</h2><h1 id="Maven-加载机制"><a href="#Maven-加载机制" class="headerlink" title="Maven 加载机制"></a>Maven 加载机制</h1><p>mapper.xml 文件应该存放在resource目录下的mapper包中（这些名称都是默认指定的，不要修改为别的名称，否则容易产生mapper文件找不到的问题）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端项目模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置使用</title>
      <link href="/2023/03/22/idea-pei-zhi-shi-yong/"/>
      <url>/2023/03/22/idea-pei-zhi-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h1><h2 id="编码配置"><a href="#编码配置" class="headerlink" title="编码配置"></a>编码配置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163327212.png" alt="编码配置"></p><h2 id="自动导包配置"><a href="#自动导包配置" class="headerlink" title="自动导包配置"></a>自动导包配置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163450423.png" alt="自动导包配置"></p><h2 id="提示忽略大小写配置"><a href="#提示忽略大小写配置" class="headerlink" title="提示忽略大小写配置"></a>提示忽略大小写配置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163625094.png" alt="提示忽略大小写"></p><h2 id="Java-编译级别设置"><a href="#Java-编译级别设置" class="headerlink" title="Java 编译级别设置"></a>Java 编译级别设置</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322163736667.png" alt="项目编译级别的设置"></p><h2 id="取消单行显示标签页"><a href="#取消单行显示标签页" class="headerlink" title="取消单行显示标签页"></a>取消单行显示标签页</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322164119723.png" alt="取消单行显示标签页"></p><h2 id="启用注解处理器"><a href="#启用注解处理器" class="headerlink" title="启用注解处理器"></a>启用注解处理器</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322164522975.png" alt="启用注解处理器"></p><h1 id="IDEA-使用"><a href="#IDEA-使用" class="headerlink" title="IDEA 使用"></a>IDEA 使用</h1><h2 id="配置远程连接Linux服务器"><a href="#配置远程连接Linux服务器" class="headerlink" title="配置远程连接Linux服务器"></a>配置远程连接Linux服务器</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220918130050461.png" alt="image-20220918130050461"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20220918130310602.png" alt="image-20220918130310602"></p><h2 id="查看类继承图"><a href="#查看类继承图" class="headerlink" title="查看类继承图"></a>查看类继承图</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/InputFormat.svg" alt></p><ul><li>使用右键可以添加属性字段等信息</li><li>使用<code>F4</code>可以直接跳转进入到图中相应的类</li></ul><h2 id="查看方法调用链"><a href="#查看方法调用链" class="headerlink" title="查看方法调用链"></a>查看方法调用链</h2><p><code>Ctrl + Alt + H</code>: 查看方法调用链</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221030214218536.png" alt="image-20221030214218536"></p><h2 id="Debug技巧"><a href="#Debug技巧" class="headerlink" title="Debug技巧"></a>Debug技巧</h2><ol><li><strong>为断点添加条件，来排除一些不必要关系的逻辑。</strong>例如，在进行 HashMap 的源码分析时，除了自己 new 的 HashMap，程序在一开始加载时也会经过一大串的 HashMap 初始化。</li><li>使用 <code>view as object</code>来查看对象比较原始的存放方式，而不使用IDEA中提供的视图优化</li></ol><h2 id="配置代码模板"><a href="#配置代码模板" class="headerlink" title="配置代码模板"></a>配置代码模板</h2><ol><li><p>使用 <code>$VAR_NAME$</code> 的方式来定义一个变量，作为占位符</p></li><li><p>在<strong>编辑变量</strong>中可以为变量设置默认值，字符串类型的默认值<strong>需要用双引号 <code>“”</code> 进行包裹</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230408235559371.png" alt="为模板中的变量设置默认值"></p></li><li><p>使用效果展示</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230408235729938.png" alt="模板自动填充"></p></li><li><p>还可以根据一些表达式来动态获取值，例如 <code>className()</code> 获取当前类的简单名，最常见的用于 springboot 应用主启动类的 main 方法中。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230409002817581.png" alt="根据表达式动态获取值"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisPlus的使用</title>
      <link href="/2023/03/22/mybatisplus-de-shi-yong/"/>
      <url>/2023/03/22/mybatisplus-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus-的使用"><a href="#MyBatisPlus-的使用" class="headerlink" title="MyBatisPlus 的使用"></a>MyBatisPlus 的使用</h1><h2 id="pom-依赖"><a href="#pom-依赖" class="headerlink" title="pom 依赖"></a>pom 依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--由SpringBoot进行版本管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.guigu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自定义内容, 辅助版本管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-plus-boot-starter.version</span><span class="token punctuation">></span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-plus-boot-starter.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swagger-spring-boot-starter.version</span><span class="token punctuation">></span></span>1.9.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swagger-spring-boot-starter.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spring套件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-plus-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring Boot 集成 swagger --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spring4all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>swagger-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${swagger-spring-boot-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis<span class="token punctuation">?</span>serverTimezone=GMT%2B8    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span class="token comment" spellcheck="true"># 用于打印 Mybatis 中的日志信息</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CURD-操作"><a href="#CURD-操作" class="headerlink" title="CURD 操作"></a>CURD 操作</h2><h3 id="插入操作（涉及主键策略）"><a href="#插入操作（涉及主键策略）" class="headerlink" title="插入操作（涉及主键策略）"></a>插入操作（涉及主键策略）</h3><h4 id="手动指定策略：INPUT、NONE"><a href="#手动指定策略：INPUT、NONE" class="headerlink" title="手动指定策略：INPUT、NONE"></a>手动指定策略：INPUT、NONE</h4><p>手动指定主键id，如果没有指定则插入失败</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322171714460.png" alt="INPUT 策略"></p><h4 id="自动增长策略：AUTO"><a href="#自动增长策略：AUTO" class="headerlink" title="自动增长策略：AUTO"></a>自动增长策略：AUTO</h4><p>需要数据库设置了主键自增，否则等同于 INPUT 策略</p><h4 id="UUID策略（MyBatisPlus默认）：ASSIGN-ID、ASSIGN-UUID"><a href="#UUID策略（MyBatisPlus默认）：ASSIGN-ID、ASSIGN-UUID" class="headerlink" title="UUID策略（MyBatisPlus默认）：ASSIGN_ID、ASSIGN_UUID"></a>UUID策略（MyBatisPlus默认）：ASSIGN_ID、ASSIGN_UUID</h4><p>数据库不需要设置主键自增，采用雪花算法分配一个全局唯一的值</p><ul><li><code>ASSIGN_ID</code>：支持主键为数值或字符串类型</li><li><code>ASSIGN_UUID</code>：主键必须为字符串类型</li></ul><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322171858227.png" alt="image-20230322171858227" style="zoom:150%;"><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322172113623.png" alt="image-20230322172113623"></p><h4 id="Redis-生成策略"><a href="#Redis-生成策略" class="headerlink" title="Redis 生成策略"></a>Redis 生成策略</h4><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><h2 id="其他常用功能"><a href="#其他常用功能" class="headerlink" title="其他常用功能"></a>其他常用功能</h2><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><blockquote><p>  自动填充记录的<strong>创建时间和更新时间</strong></p></blockquote><ol><li><p>实体类中的属性配置</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322174817592.png" alt="自动填充属性的配置" style="zoom:150%;"></li><li><p>创建一个处理器，分别绑定插入操作和更新操作，执行相应的方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MPMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用 Mybatis Plus 进行添加时会执行该方法     *     * @param metaObject     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用 Mybatis Plus 进行更新时会执行该方法     *     * @param metaObject     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试：插入时不需要关心 createTime 和 updateTime 属性的设置</p><blockquote><p>  自动填充不仅仅局限于 createTime 和 updateTime 的设置，通过 <code>setFieldValByName</code> 可以设置任意出现的属性值，例如为乐观锁设置初始值</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322175737871.png" alt="image-20230322175737871"></p></li></ol><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><ol><li><p>在实体类中进行相应修改</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322180803058.png" alt="image-20230322180803058" style="zoom:150%;"></li><li><p>Spring 中注入乐观锁插件对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Mybatis Plus 乐观锁插件配置     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInnerInterceptor <span class="token function">optimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用自动填充插件为版本号设置初始值</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322181534378.png" alt="image-20230322181534378" style="zoom:150%;"><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322181555814.png" alt="image-20230322181555814" style="zoom:150%;"></li><li><p>测试</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322182752321.png" alt="乐观锁需要先查询后修改"></p></li></ol><h3 id="分页插件（实现分页查询）"><a href="#分页插件（实现分页查询）" class="headerlink" title="分页插件（实现分页查询）"></a>分页插件（实现分页查询）</h3><ol><li><p>在Spring中注入分页查询插件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Mybatis Plus 乐观锁插件配置     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> OptimisticLockerInnerInterceptor <span class="token function">optimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 分页查询插件, 这里不能使用新版本的, 否则分页插件不生效, 可能是兼容性问题     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PaginationInterceptor <span class="token function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PaginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分页查询测试</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pageQueryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//SELECT uid AS uIndex,username,password,age,gender AS sex,email,is_delete</span>        <span class="token comment" spellcheck="true">// FROM user</span>        <span class="token comment" spellcheck="true">// WHERE is_delete=0</span>        <span class="token comment" spellcheck="true">// LIMIT ?,?</span>        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取page对象中的封装的所有数据</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"page.getTotal() = "</span> <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322191039703.png" alt="分页查询测试"></p></li></ol><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><p>配置逻辑删除后，通过 MyBatis Plus 调用删除代码时，不会在数据库中实际删除该数据，而是</p><ol><li><p>实体类修改</p></li><li><p>测试效果</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322191329038.png" alt="逻辑删除测试效果"></p></li></ol><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3>]]></content>
      
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2023/03/22/springboot/"/>
      <url>/2023/03/22/springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="SpringBoot-接口开发的常用注解有哪些"><a href="#SpringBoot-接口开发的常用注解有哪些" class="headerlink" title="SpringBoot 接口开发的常用注解有哪些?"></a>SpringBoot 接口开发的常用注解有哪些?</h2><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td><code>@Controller</code></td><td>标记此类是一个控制器，可以返回视图解析器指定的 html 页面，通过搭配 @ResponseBody 可以将结果返回 json、xml 等数据</td></tr><tr><td><code>@RestController</code></td><td>相当于 @Controller + @ResponseBody</td></tr><tr><td><code>@RequestMapping</code></td><td>定义接口地址，可以标记在类上，也可以标记在方法上</td></tr><tr><td><code>@RequestBody</code></td><td>定义在方法上，用于将前端传入的 JSON 串转化成 Java 对象</td></tr><tr><td><code>@PathVariable</code></td><td>接收请求路径中的占位符的值</td></tr><tr><td><code>@ApiOperation</code></td><td>Swagger 注解，对接口方法进行说明</td></tr><tr><td><code>@Api</code></td><td>Swagger 注解，对接口类进行说明</td></tr><tr><td><code>@Autowired</code></td><td>基于类型注入</td></tr><tr><td><code>@Resource</code></td><td>默认基于名称注入，如果失败则转为基于类型注入</td></tr></tbody></table><h2 id="ComponentScan-可以用于跨项目的扫描规则"><a href="#ComponentScan-可以用于跨项目的扫描规则" class="headerlink" title="@ComponentScan 可以用于跨项目的扫描规则"></a><code>@ComponentScan</code> 可以用于跨项目的扫描规则</h2><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322204401403.png" alt="image-20230322204401403" style="zoom:150%;">]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatisX代码生成器</title>
      <link href="/2023/03/22/mybatisx-dai-ma-sheng-cheng-qi/"/>
      <url>/2023/03/22/mybatisx-dai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisX-使用"><a href="#MyBatisX-使用" class="headerlink" title="MyBatisX 使用"></a>MyBatisX 使用</h1><h2 id="生成展示"><a href="#生成展示" class="headerlink" title="生成展示"></a>生成展示</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322013958894.png" alt="生成类的注解信息设置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/03/22/mysql-cong-ru-men-dao-jing-tong/"/>
      <url>/2023/03/22/mysql-cong-ru-men-dao-jing-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Linux-下的通过-rpm-进行安装"><a href="#在-Linux-下的通过-rpm-进行安装" class="headerlink" title="在 Linux 下的通过 rpm 进行安装"></a>在 Linux 下的通过 rpm 进行安装</h1><ol><li><p>卸载预安装的mariadb</p><pre class="line-numbers language-sh"><code class="language-sh">rpm -qa | grep mariadbrpm -e --nodeps mariadb-libs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装网络工具</p><pre class="line-numbers language-sh"><code class="language-sh">yum -y install net-toolsyum -y install libaio<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">下载rpm-bundle.tar安装包</a>，并解压，使用rpm进行安装</p><pre class="line-numbers language-sh"><code class="language-sh">rpm -ivh \mysql-community-common-5.7.28-1.el7.x86_64.rpm \mysql-community-libs-5.7.28-1.el7.x86_64.rpm \mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm \mysql-community-server-5.7.28-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化mysql</p><pre class="line-numbers language-sh"><code class="language-sh">mysqld --initialize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更改所属组</p><pre class="line-numbers language-sh"><code class="language-sh">chown mysql:mysql /var/lib/mysql -R<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动 MySQL 服务</p><pre class="line-numbers language-sh"><code class="language-sh">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看生成的初始密码</p><pre class="line-numbers language-sh"><code class="language-sh">cat /var/log/mysqld.log | grep password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录 MySQL，修改密码并设置允许远程访问</p><ul><li><p>修改密码</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> identified <span class="token keyword">by</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置允许远程访问</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span>root' <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>设置 MySQL 服务开机自启动</p><pre class="line-numbers language-sh"><code class="language-sh">systemctl enable mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看开机自启动是否设置成功</p><pre class="line-numbers language-sh"><code class="language-sh"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>退出 MySQL 服务</p><pre class="line-numbers language-sh"><code class="language-sh">systemctl stop mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="rpm安装方式"><a href="#rpm安装方式" class="headerlink" title="rpm安装方式"></a>rpm安装方式</h2><ul><li><p>进入mysql的下载地址<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p></li><li><p>选择版本</p></li><li><p>下载32位的服务端server和客户端client</p></li></ul><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><ul><li><p>启动mysql服务 </p><pre class="line-numbers language-shell"><code class="language-shell">service mysql start或systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>查看mysql的初始密码</p><pre class="line-numbers language-shell"><code class="language-shell">grep "password" /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>登录数据库</p><pre class="line-numbers language-shell"><code class="language-shell">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改mysql的默认密码</p><blockquote><p><strong>说明</strong> 新密码设置的时候如果设置的过于简单会报错，必须同时包含大小写英文字母、数字和特殊符号中的三类字符。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行如下命令，创建wordpress库</p><pre class="line-numbers language-shell"><code class="language-shell">create database wordpress; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看是否创建成功</p><pre class="line-numbers language-shell"><code class="language-shell">show database<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入<code>exit</code>退出数据库</p></li></ul><p>修改MySQL配置文件(拷贝一份,不修改原配置文件)</p><pre class="line-numbers language-shell"><code class="language-shell">cp my-huge.cnf /etc/my.cnf #5.5版本cp my-default.cnf /etc/my.cnf #5.6版本配置文件名称不一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果先建表, 再配置文件改为utf-8, 还是会导致乱码</p><h1 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h1><ul><li><p>二进制日志文件log-bin(主从复制)</p></li><li><p>错误日志log-error<br>默认是关闭, 记录严重的警告和错误信息, 每次启动和关闭的详细信息 </p></li><li><p>查询日志log</p><p>默认关闭, 记录查询的sql语句,如果开启会降低mysql的整体性能,</p></li><li><p>数据文件<br>myi文件(存放表索引)<br>myd文件(存放表数据)</p><p>myfrm(存放表结构)</p></li><li><p>配置文件路径(linux下是在/etc/my.cnf, 而windows下是my.ini)</p></li></ul><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>提高了查询速度,但同时提高了增删改的成本,因为需要维护B+树这种数据结构</p><p>不需要建立索引的情况</p><blockquote><ol><li>表记录太少的时候</li><li>经常增删改的表</li><li>某个数据列包含许多重复的内容,那这个表字段就没有必要建立索引</li></ol></blockquote><h1 id="explain作用"><a href="#explain作用" class="headerlink" title="explain作用"></a>explain作用</h1><p>能干嘛?</p><blockquote><ol><li>表的读取顺序</li><li>数据读取操作的操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间的引用</li><li>每张表有多少行被优化器查询</li></ol></blockquote><p>字段解释:</p><ol><li><p>id</p><blockquote><p>id越大的越先执行,id相同的从上到下执行</p></blockquote></li><li><p>table</p><blockquote><p>derived2表示的就是id为2的表的衍生表,相当于临时变量</p></blockquote></li><li><p>select_type</p></li><li><p>type(重点)</p><blockquote><p>最好到最差: system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</p><p>一般来说,得保证查询至少达到range级别,最好能达到ref,再往上比较理想,实际情况不太可能实现</p><p>ref:</p><p>range:</p><p>index:全索引扫描</p><p>all:全表扫描</p></blockquote></li><li><p>possible_keys和key</p><blockquote><p>possible_keys: 理论上可能用到的索引</p><p>key: mysql实际使用的索引,如果为null则表示索引失效,没有使用索引; 如果查询中使用了覆盖索引,则该索引仅仅出现在key列表中</p></blockquote></li><li><p>key_len</p><blockquote><p>key_len显示的值为索引字段的最大可能长度,==并非实际使用长度==</p><p>在不损失精确度的情况下,长度越短越好</p></blockquote></li><li><p>ref</p><blockquote><p>显示索引的哪一列被使用,可以的话最好是常量const</p></blockquote></li><li><p>rows</p><blockquote><p>大致估算出找到所需的记录所需要读取的行数</p></blockquote></li><li><p>Extra(重点)</p><blockquote><ol><li>Using filesort:尽可能优化sql, 这是一个糟糕的信息</li><li>Using temporary: 比上面的更糟糕,使用了临时表保存中间结果</li><li>Using index: 效率不错<ol><li>如果同时出现Using where表明索引被用来执行索引键值的查找</li><li>如果没有同时出现Using where表明索引用来读取数据而非执行查找动作</li></ol></li><li>Using where: 表明使用了where过滤</li><li>using joing buffer: 使用了连接缓存,当sql语句中的join过多时,可以调大配置文件中的joining buffer</li><li>impossible where: where子句的值是false, 相当于逻辑错误</li><li>distinct: 找到第一匹配的元组后即立即停止找同样值得动作</li></ol></blockquote></li></ol><h1 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h1><ol><li><p>单表索引优化案例</p><blockquote><p>range类型的索引后面的索引失效 where ==id&gt;1==</p><p>id = 1 and ==name_length&gt;2 order by name==这部分失效 </p></blockquote></li><li><p>双表索引优化案例</p></li><li><p>三表索引优化案例</p></li></ol><h1 id="解决like-数据-失效的问题"><a href="#解决like-数据-失效的问题" class="headerlink" title="解决like%数据%失效的问题"></a>解决like%数据%失效的问题</h1><p>使用覆盖索引</p><h1 id="日期时间数据"><a href="#日期时间数据" class="headerlink" title="日期时间数据"></a>日期时间数据</h1><pre class="line-numbers language-mysql"><code class="language-mysql"># 查找某一天的数据SELECT *FROM `table_x`WHERE DATE_FORMAT(date, '%Y%m%d') = 'xxxx-xx-xx'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面 sql 语句存在的问题：</p><ul><li>一般表中对于日期类型数据都有一个索引，但上面的代码将不会使用索引来查询数据，造成查询效率低下。</li></ul><h2 id="生日问题"><a href="#生日问题" class="headerlink" title="生日问题"></a>生日问题</h2><p>根据某个用户出生日期和当前日期，计算他最近的生日。</p><h2 id="重叠问题"><a href="#重叠问题" class="headerlink" title="重叠问题"></a>重叠问题</h2><h1 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h1><ul><li>SQL</li><li>事务</li><li>存储引擎</li><li>索引</li><li>SQL 优化</li><li>锁</li></ul><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>SQL分类</p><ul><li><p>DDL(Data Definition Language，数据定义语言)</p><p>用来定义数据库对象：数据库、表、字段</p></li><li><p>DML(Data Manipulation Language，数据操作语言)</p><p>用来对表中的数据进行增删改操作</p></li><li><p>DQL(Data Query Language，数据查询语言)</p><p>用来对表中的数据进行查询操作</p></li><li><p>DCL(Data Control Language，数据控制语言)</p><p>用来创建数据库用户、控制数据库的访问权限</p></li></ul><h3 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL 数据定义语言"></a>DDL 数据定义语言</h3><ul><li><p>增（创建数据库）</p><p><code>CREATE DATABASE [IF NOT EXISTS] &lt;数据库名&gt; [DEFAULT CHARSET &lt;字符集&gt;] [COLLATE &lt;排序规则&gt;];</code></p></li><li><p>删（删除数据库）</p><p><code>DROP DATABASE [IF EXISTS] &lt;数据库名&gt;</code></p></li><li><p>查（查询数据库）</p><p>查询所有数据库：<code>SHOW DATABASES;</code></p><p>查询当前数据库：<code>SELECT DATABASE();</code></p></li><li><p>使用</p><p><code>USE &lt;数据库名&gt;;</code></p></li></ul><pre class="line-numbers language-mysql"><code class="language-mysql">##################################### 1. 创建##################################### 1.1 创建数据库（增）CREATE DATABASE    IF NOT EXISTS `ddl`;USE `ddl`;# 1.2 创建数据表CREATE TABLE    IF NOT EXISTS `user`(    #字段 字段类型 注释    id     INT        COMMENT 'id主键',    name   VARCHAR(10)        COMMENT '姓名',    age    TINYINT UNSIGNED        COMMENT '年龄',    gender TINYINT        COMMENT '性别',    PRIMARY KEY (id))    COMMENT '用户表';##################################### 3. 查询##################################### 3.1 查询数据库# 3.1.1 查询所有的数据库SHOW DATABASES;# 3.1.2 查看当前使用的数据库SELECT DATABASE();# 3.2 查询表# 3.2.1 查询当前数据库中的所有表SHOW TABLES;# 3.2.2 查看特定的表的详细信息DESC `user`;# 3.2.3 查看特定表的建表语句SHOW CREATE TABLE `user`;##################################### 4. 删除####################################DROP DATABASE IF EXISTS `ddl`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML 数据操作语言"></a>DML 数据操作语言</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504110229975.png" alt="image-20230504110229975"></p><pre class="line-numbers language-mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL 数据查询语言"></a>DQL 数据查询语言</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504122058677.png" alt="image-20230504122058677"></p><h3 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL 数据控制语言"></a>DCL 数据控制语言</h3><p>在 MySQL 中，用户及用户权限信息都保存在 <code>mysql.user</code> 表中，通过对该表的操作即可实现对用户权限的控制管理了。</p><p>用户名和主机名两个字段才能唯一标识一个用户，主机名表示该用户可以在哪些主机上访问，如果是 <code>localhost</code> 则表示不可以远程访问，如果是 <code>%</code> 则表示任意主机均可以访问。</p><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504124629082.png" alt="image-20230504124629082"></p><ul><li><p>查询用户</p><pre class="line-numbers language-mysql"><code class="language-mysql">USE `mysql`;SELECT *FROM user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用户</p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE USER'<用户名>'@'<主机名>'IDENTIFIED BY '<密码>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改用户密码</p><pre class="line-numbers language-mysql"><code class="language-mysql">ALTER USER'<用户名>'@'<主机名>'IDENTIFIED WITH mysql_native_password BY '<新密码>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>删除用户</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP USER'<用户名>'@'<主机名>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504124643988.png" alt="image-20230504124643988"></p><ul><li><p>查询用户拥有的权限</p><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW GRANTS FOR '<用户名>'@'<主机名>';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>授予用户某种权限（增）</p><p>如果需要为所有的数据库和所有的表授予权限，那么需要使用 <code>*.*</code></p><pre class="line-numbers language-mysql"><code class="language-mysql">GRANT <权限列表>ON <数据库名.表名>TO '<用户名>'@'<主机名>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>撤销用户某种权限（删）</p><pre class="line-numbers language-mysql"><code class="language-mysql">REVOKE <权限列表>ON <数据库名.表名>FROM '<用户名>'@'<主机名>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504152928684.png" alt="image-20230504152928684"></p><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504160653212.png" alt="image-20230504160653212"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504161123244.png" alt="image-20230504161123244"></p><pre class="line-numbers language-mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><blockquote><p>  设置不同的事务隔离级别这种功能的底层原理是什么？如何实现的？是对修改后的数据写入磁盘文件的时间点决定的吗？例如，读未提交级别，则事务中执行的修改操作都会立即写入磁盘，此时其它事务就可能在该事务提交前感知到这个修改操作，因此出现脏读问题？</p></blockquote><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230504190156236.png" alt="image-20230504190156236"></p><ul><li><p>脏读问题：</p><p>事务A中读取到事务B中未提交的数据。具体来说，在t1时刻，事务A中读取到事务B中未提交的数据，并将该数据用于计算得到一个结果值；而在t2时刻，事务B执行回滚，那么事务A中得到的结果值就没有任何意义，这种现象就称为脏读。</p></li><li><p>不可重复读：</p><p>事务A在一次事务的执行过程中，两次读取结果不相同。具体来说，在t1时刻，事务A读取数据x1；在t2时刻，事务B将数据修改为x2并提交事务；在t3时刻，事务A再次读取数据得到x2；站在事务A的角度，可能在t1时刻到t3时刻并没有对数据进行修改，却得到两个不同的值（都是正确值），这种现象称为不可重复读。</p></li><li><p>幻读：</p><p>解决了不可重复读的问题，即在一次事务中，可以保证对数据的两次读取的结果是相同的。但是会出现幻读的问题。幻读问题是指事务A在查询时明明没有查到该数据，但是却无法插入成功。具体来说，在t1时刻，事务A查询是否有id=1的数据，发现没有；在t2时刻，事务B插入一条id=1的数据并提交；在t3时刻，事务A再次查询是否有id=1的数据，还是发现没有（因为可重复读），因此事务A打算插入一条id=1的数据，但是此时插入失败并报错，这时事务A就会纳闷，明明查询id=1的结果是没有，但是插入又报错说id=1的数据已经存在，这种现象称为幻读。</p></li></ul><p>三个问题，对应四种方案，分别是解决0个问题（读未提交）、解决1个问题（读已提交）、解决2个问题（可重复读）、解决3个问题（串行化）。</p><p>串行是一切并行问题的终点，没有并行就不会有并行导致的伴生问题</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT @@autocommit;# 关闭自动提交(开启事务)SET @@autocommit=0;# 提交事务COMMIT;# 回滚事务ROLLBACK;# 查看事务的隔离级别SELECT @@TRANSACTION_ISOLATION;# 设置事务的隔离级别SET [SESSION|GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230505224609773.png" alt="image-20230505224609773"></p><ul><li>连接层</li><li>服务层</li><li>存储引擎层（索引、表级别）</li><li>存储层</li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>不同的存储引擎有着不同的使用场景，各有优缺点。存储引擎就是存储数据、建立索引、更新、查询数据等技术的实现方式。存储引擎是基于表的，不是基于库的，因此存储引擎又被称为表类型。</p><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW ENGINES;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230506002954016.png" alt="image-20230506002954016"></p><h3 id="InnoDB-引擎"><a href="#InnoDB-引擎" class="headerlink" title="InnoDB 引擎"></a>InnoDB 引擎</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong>；</li><li>支持<strong>行级锁</strong>，相较于表锁而言可以提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性</li><li>xxx.idb：xxx代表表名，InnoDB引擎的每张表都会对应一个<strong>表空间文件（TableSpace）</strong>，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><h4 id="逻辑存储结构"><a href="#逻辑存储结构" class="headerlink" title="逻辑存储结构"></a>逻辑存储结构</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230506001052072.png" alt="image-20230506001052072"></p><h3 id="MyISAM-引擎（可被MongoDB替代）"><a href="#MyISAM-引擎（可被MongoDB替代）" class="headerlink" title="MyISAM 引擎（可被MongoDB替代）"></a>MyISAM 引擎（可被MongoDB替代）</h3><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>不支持事务、不支持外键、不支持行级锁</li><li>支持表锁</li><li>访问速度快</li><li>xxx.sdi：存储表结构信息（本质上是一个JSON文本数据）</li><li>xxx.MYD：存储数据</li><li>xxx.MYI：存储索引</li></ul><h3 id="Memory-引擎（可被Redis替代）"><a href="#Memory-引擎（可被Redis替代）" class="headerlink" title="Memory 引擎（可被Redis替代）"></a>Memory 引擎（可被Redis替代）</h3><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>表数据信息存储在内存中，会受到断电等问题的影响，因此这些表只适合用于作为临时表或缓存表</li><li>支持hash索引（默认）</li><li>xxx.sdi：表结构信息（Memory 引擎只会有这一个文件，因为数据保存在内存中）</li></ul><h2 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h2><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507104524396.png" alt="image-20230507104524396"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507152420221.png" alt="image-20230507152420221"></p><p>一张表对应一种存储引擎，而存储引擎之间可能使用相同或不同的索引。那如果使用相同索引的不同存储引擎之间有区别吗？还是可以认为存储引擎只是不同索引的集合，而如果两个不同的存储引擎使用相同的索引，则效果完全相同呢？暂时把索引和存储引擎的关系理解成接口和实现类的关系，即使是使用相同的索引结构，不同存储引擎对于该索引结构的实现和优化可能是不同的。这种区别应该只局限于效率，应该不会有功能上的不同。</p><p>InnoDB 存储引擎虽然不支持 hash 索引，但是具有 <strong>自适应hash</strong> 的功能，即根据 B+ Tree 索引在指定条件下自动构建 hash 索引。</p><blockquote><p>  面试题：为什么 MySQL 索引采用 B+ Tree，而不使用 RB Tree 或 B Tree？</p><ol><li>B+ Tree 和 B Tree 是一种多叉平衡树，相较于二叉树和RB Tree而言，每层节点数更多，因此树的高度会更少，搜索效率会更高些。</li><li>B+ Tree 和 B Tree 相比，由于在非叶子结点上不存储数据，因此一个页面能够存放更多的索引，即用更少的页面就能够完全保存索引，搜索效率也会更高些。（假设用B Tree保存，那1个页面保存2条索引；而用B+ Tree保存，一个页面保存200条索引，显然保存20000条索引，B Tree需要10000个页面，而B+ Tree树只需要100个页面）</li></ol></blockquote><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507172002606.png" alt="image-20230507172002606"></p><p><strong>聚集索引（唯一）</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507172248311.png" alt="image-20230507172248311"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230507172623381.png" alt="image-20230507172623381"></p><p>对于非主键字段上建立的索引，同样按照 B+ Tree 的结构去建立索引，但是在叶子结点上保存的不是数据，而是聚集索引（Clustered Index）中节点的id。<strong>而只有在聚集索引中，叶子结点上才保存这一行的所有数据。</strong></p><blockquote><p>  查询案例：使用 <code>SELECT * FROM user WHERE name=&#39;root&#39;;</code> 这条 SQL 语句进行查询，其中在 user.name 字段上已经建立了索引。展示通过二级索引来查询数据的过程，这个过程也称为<strong>回表查询</strong>。</p><p>  现在二级索引树中查到id，然后在聚集索引树中查询</p></blockquote><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h2 id="试图-存储过程-触发器"><a href="#试图-存储过程-触发器" class="headerlink" title="试图/存储过程/触发器"></a>试图/存储过程/触发器</h2><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h2 id="MySQL-管理"><a href="#MySQL-管理" class="headerlink" title="MySQL 管理"></a>MySQL 管理</h2><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li>什么是事务？事务的四大特性是什么？</li><li>事务的隔离级别有哪些？MySQL 默认是哪个？</li><li>内连接和左外连接的区别是什么？</li><li>常用的存储引擎有哪些？InnoDB 和 MyISAM 的区别？</li><li>MySQL 默认 InnoDB 引擎的索引是什么数据结构？</li><li>如何查看 MySQL 的执行计划？</li><li>索引失效的情况有哪些？</li><li>什么是回表查询？</li><li>什么是 MVCC？</li><li>MySQL 的主从复制的原理是什么？</li><li>主从复制之后的读写分离是如何实现的？</li><li>数据库的分库分表是如何实现的？</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/2023/03/21/git-shi-yong/"/>
      <url>/2023/03/21/git-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="Git-代码冲突怎么处理"><a href="#Git-代码冲突怎么处理" class="headerlink" title="Git 代码冲突怎么处理"></a>Git 代码冲突怎么处理</h3><p><strong>代码冲突的原因：</strong>出现冲突的原因是本地文件的版本和目标分支中文件的版本不一致。当出现同一行的内容不同时，在进行合并的时候就会产生冲突。</p><p><strong>代码冲突发生情况：</strong></p><ul><li>多个分支向主分支合并时</li><li>同一个分支下 push 或 pull 操作时</li></ul><p><strong>处理办法</strong>：发生代码冲突需要手动合并代码，选择最终的版本。可以通过图形界面，例如</p><h3 id="在哪个分支进行项目开发"><a href="#在哪个分支进行项目开发" class="headerlink" title="在哪个分支进行项目开发"></a>在哪个分支进行项目开发</h3><p>不直接在主分支进行开发，而是有技术经理创建独立的开发分支，在独立的开发分支进行开发，最后由技术经理将开发分支合并到主分支。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud项目实战</title>
      <link href="/2023/03/21/springcloud-xiang-mu-shi-zhan/"/>
      <url>/2023/03/21/springcloud-xiang-mu-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-项目介绍"><a href="#SpringCloud-项目介绍" class="headerlink" title="SpringCloud 项目介绍"></a>SpringCloud 项目介绍</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><h3 id="项目的背景"><a href="#项目的背景" class="headerlink" title="项目的背景"></a>项目的背景</h3><p>项目的三个端：用户端（客户端），机构端（客户端），运营端（服务端）</p><p>项目采用：</p><ul><li>前后端分离架构</li><li>后端采用 SpringBoot、SpringCloud 等技术栈进行开发；数据库使用 MySQL，还使用 Redis、MQ、分布式文件系统、ElasticSearch 等中间件系统</li></ul><p>微服务包括：</p><ul><li>内容管理服务</li><li>媒资管理服务</li><li>搜索服务</li><li>订单支付服务</li><li>学习中心服务</li><li>系统管理服务</li><li>认证授权服务</li><li>网关服务</li><li>注册中心服务</li><li>配置中心服务</li></ul><h3 id="项目的业务流程"><a href="#项目的业务流程" class="headerlink" title="项目的业务流程"></a>项目的业务流程</h3><h3 id="项目的功能模块"><a href="#项目的功能模块" class="headerlink" title="项目的功能模块"></a>项目的功能模块</h3><h3 id="项目的技术架构"><a href="#项目的技术架构" class="headerlink" title="项目的技术架构"></a>项目的技术架构</h3><h3 id="个人负责模块"><a href="#个人负责模块" class="headerlink" title="个人负责模块"></a>个人负责模块</h3><p>个人负责模块的详细说明，包括模块的设计，所用到的技术，技术的实现方案</p><h1 id="学成在线项目"><a href="#学成在线项目" class="headerlink" title="学成在线项目"></a>学成在线项目</h1><ul><li><code>xuecheng-plus-parent</code>：版本管理</li><li><code>xuecheng-plus-base</code>：</li><li><code>xuecheng-plus-content</code>：</li></ul><h2 id="媒体资源管理模块"><a href="#媒体资源管理模块" class="headerlink" title="媒体资源管理模块"></a>媒体资源管理模块</h2><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><h3 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h3><h1 id="谷粒学苑项目"><a href="#谷粒学苑项目" class="headerlink" title="谷粒学苑项目"></a>谷粒学苑项目</h1><p>后台部分：</p><ul><li>讲师管理模块</li><li>课程分类管理模块</li><li>课程管理模块</li><li>统计分析模块</li><li>订单管理</li></ul><p>前台部分</p><ul><li>首页数据显示</li><li>讲师列表和详情</li><li>课程列表和课程详情</li><li>登录与注册</li><li>支付功能</li></ul><h2 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h2><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><p>通过访问 <code>localhost:xxxx/swagger-ui.html</code> 进入到 Swagger-UI 的界面，其中端口号根据项目的端口号确定</p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker使用</title>
      <link href="/2023/03/21/docker-shi-yong/"/>
      <url>/2023/03/21/docker-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装、配置与卸载"><a href="#Docker-安装、配置与卸载" class="headerlink" title="Docker 安装、配置与卸载"></a>Docker 安装、配置与卸载</h1><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><pre class="line-numbers language-sh"><code class="language-sh">yum -y install gcc gcc-c++yum -y remove docker docker-common docker-selinux docker-engineyum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y install docker-cesystemctl start dockerdocker version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>安装gcc环境<code>yum -y install gcc gcc-c++</code></p></li><li><p>卸载docker旧版本(可能之前有安装)<code>yum -y remove docker docker-common docker-selinux docker-engine</code></p></li><li><p>安装需要的软件包<code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p></li><li><p>设置stable仓库</p><p> <code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p></li><li><p>更新yum软件包索引<code>yum makecache fast</code></p></li><li><p>安装Docker社区版<code>yum -y install docker-ce</code></p></li><li><p>启动Docker<code>systemctl start docker</code></p></li><li><p>测试是否安装成功</p><ul><li><code>docker version</code></li><li><code>docker run hello-world</code>: hello-world是docker仓库中提供的一个专门用于测试的镜像包</li></ul></li></ol><h2 id="Docker卸载"><a href="#Docker卸载" class="headerlink" title="Docker卸载"></a>Docker卸载</h2><pre class="line-numbers language-sh"><code class="language-sh">systemctl stop dockeryum -y remove docker-cerm -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>卸载docker之前需要先停止<code>systemctl stop docker</code></li><li>卸载docker<code>yum -y remove docker-ce</code></li><li>清除残留文件<code>rm -rf /var/lib/docker</code></li></ol><h2 id="配置Docker仓库的国内镜像加速"><a href="#配置Docker仓库的国内镜像加速" class="headerlink" title="配置Docker仓库的国内镜像加速"></a>配置Docker仓库的国内镜像加速</h2><pre class="line-numbers language-sh"><code class="language-sh">mkdir -p /etc/dockervim  /etc/docker/daemon.json#################################################################{    "registry-mirrors": ["https://zx8hwqme.mirror.aliyuncs.com"]}#################################################################systemctl daemon-reloadsystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>创建配置文件 /etc/docker/daemon.json</p><ul><li><p><code>mkdir -p /etc/docker</code></p></li><li><p><code>vim  /etc/docker/daemon.json</code></p><p>配置文件的具体内容因人而异, 需要登录<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">阿里云开发者平台</a>进行查看</p></li></ul></li><li><p>重新加载配置文件, 重启docker</p><ul><li><code>systemctl daemon-reload</code></li><li><code>systemctl restart docker</code></li></ul></li></ol><h1 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h1><h2 id="命令分类"><a href="#命令分类" class="headerlink" title="命令分类"></a>命令分类</h2><table><thead><tr><th>子命令分类</th><th>子命令</th></tr></thead><tbody><tr><td>Docker环境信息</td><td>info、version</td></tr><tr><td>容器生命周期管理</td><td>Create、exec、kill、pause、.restart、rm、run、start、stop、unpause</td></tr><tr><td>镜像仓库命令</td><td>login、logout、pull、push、search</td></tr><tr><td>镜像管理</td><td>build、images、import、load、rmi、save、tag、commit</td></tr><tr><td>容器运维操作</td><td>attach、export、inspect、port、ps、rename、stats、top、wait、cp、diff、update</td></tr><tr><td>容器资源管理</td><td>volume、network</td></tr><tr><td>系统日志信息</td><td>events、history、logs</td></tr></tbody></table><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404130124555.png" alt="Docker 命令结构图"></p><h2 id="Docker-进程命令"><a href="#Docker-进程命令" class="headerlink" title="Docker 进程命令"></a>Docker 进程命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><code>systemctl start docker</code></td><td>启动docker服务</td></tr><tr><td><code>systemctl stop docker</code></td><td>停止docker服务</td></tr><tr><td><code>systemctl status docker</code></td><td>查看docker服务状态</td></tr><tr><td><code>systemctl restart docker</code></td><td>重启docker服务</td></tr><tr><td><code>systemctl enable docker</code></td><td>设置docker开机自启动</td></tr></tbody></table><h2 id="Docker-容器命令"><a href="#Docker-容器命令" class="headerlink" title="Docker 容器命令"></a>Docker 容器命令</h2><table><thead><tr><th>容器命令</th><th>作用</th></tr></thead><tbody><tr><td><code>docker run ...</code></td><td>基于镜像创建容器并启动(第一次使用, 不能重复创建同名容器)</td></tr><tr><td><code>docker rm &lt;容器名&gt;</code></td><td>删除容器</td></tr><tr><td><code>docker start &lt;容器名或容器id&gt;</code></td><td>启动容器</td></tr><tr><td><code>docker stop &lt;容器名或容器id&gt;</code></td><td>停止容器</td></tr><tr><td><code>docker kill &lt;容器名或容器id&gt;</code></td><td>杀死容器</td></tr><tr><td><code>docker ps</code></td><td>查看当前运行中的容器</td></tr><tr><td><code>docker ps -a</code></td><td>查看所有容器</td></tr><tr><td><code>docker exec -it &lt;容器名&gt; /bin/bash</code></td><td>进入到容器中</td></tr><tr><td><code>docker stop &lt;容器id&gt;</code></td><td>停止容器</td></tr><tr><td><code>docker inspect &lt;容器名&gt;</code></td><td>查看容器信息（IP 地址等）</td></tr><tr><td><code>docker port &lt;容器名&gt;</code></td><td>查看容器的端口映射信息</td></tr><tr><td><code>docker attach &lt;容器名&gt;</code></td><td>用途未知</td></tr><tr><td><code>docker commit &lt;容器名&gt;</code></td><td>将正在运行的容器制作成一个镜像</td></tr></tbody></table><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404132827644.png" alt="docker commit 命令使用示例"></p><h2 id="Docker-镜像命令"><a href="#Docker-镜像命令" class="headerlink" title="Docker 镜像命令"></a>Docker 镜像命令</h2><table><thead><tr><th>镜像命令</th><th>作用</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>列出本地机器中的镜像</td></tr><tr><td><code>docker search &lt;镜像名&gt;</code></td><td>在docker hub中进行查找镜像</td></tr><tr><td><code>docker pull &lt;镜像名&gt;:&lt;版本号&gt;</code></td><td>下载镜像, 没指定版本号时默认为最新版</td></tr><tr><td><code>docker rmi -f &lt;镜像名&gt;:&lt;版本号&gt;</code></td><td>强制删除镜像</td></tr></tbody></table><h1 id="Docker-容器数据卷"><a href="#Docker-容器数据卷" class="headerlink" title="Docker 容器数据卷"></a>Docker 容器数据卷</h1><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷出现的目的是为了解决以下的两个问题:</p><ul><li>Docker容器删除后, 在容器中产生的数据也会随之消失</li><li>Docker容器和外部机器, Docker容器和Docker容器之间不可以直接交换文件</li></ul><p>如果想要进行多个docker容器之间的数据交换, 可以将多个容器挂载到同一个数据卷(共享文件夹)</p><h2 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h2><blockquote><p>  数据卷在宿主机上，挂载到 Docker 容器中。类似文件在U盘上，然后U盘接入到电脑中（挂载）。电脑重装系统并不会删除 U 盘中的数据，类似删除 Docker 容器并不会删除数据卷中的数据。</p></blockquote><p>文件挂载通过 <code>-v</code> 指定参数 <code>docker run -v &lt;宿主机目录&gt;:&lt;docker容器内目录&gt; --privileged=true</code></p><p><code>--privileged=true</code> 表示 docker </p><p>额外的功能：</p><ul><li>限制容器内的目录只能读取，在上面的命令中添加 <code>:ro</code>（read only），构成 <code>-v &lt;宿主机目录&gt;:&lt;容器内目录&gt;:ro</code></li></ul><h2 id="容器之间的数据卷继承"><a href="#容器之间的数据卷继承" class="headerlink" title="容器之间的数据卷继承"></a>容器之间的数据卷继承</h2><p>期望不同容器之间的挂载目录保持相同, 可以使用数据卷继承. 需要注意的是, <strong>继承的是文件挂载的规则</strong></p><p><code>--volumes-from &lt;希望保持相同挂载规则的容器名&gt;</code></p><p>数据卷的继承可以在不知道其它容器具体的挂载规则的情况下，复用该规则。继承的挂载规则是独立的，子容器的挂载规则不会因为父容器的删除而消失。</p><h1 id="Dockfile"><a href="#Dockfile" class="headerlink" title="Dockfile"></a>Dockfile</h1><h2 id="镜像原理"><a href="#镜像原理" class="headerlink" title="镜像原理"></a>镜像原理</h2><p>镜像是一层层文件堆叠而成，镜像是只读的，而容器是镜像上面在堆叠一层可写的文件，对于镜像生成的原始容器的操作都记录在容器层对应的文件中？</p><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><h3 id="commit-制作镜像"><a href="#commit-制作镜像" class="headerlink" title="commit 制作镜像"></a>commit 制作镜像</h3><p>对运行中的容器进行修改，然后通过 <code>docker commit &lt;容器名&gt; &lt;指定镜像名&gt;:&lt;指定版本号&gt;</code> 也可以创建镜像。这种方式的优点是简单，缺点在于不是自动化的，不适合复现。例如，在写博客教程时，读者需要按照博主相同的操作流程对 docker 容器进行修改配置，不能通过一行代码直接得到相同的环境。所以后面主要介绍通过 Dockerfile 来创建镜像。</p><p>通过 commit 方式制作的镜像不会打包挂载的数据卷吗？如果数据卷是容器和宿主机独立的两份，为什么这里又不会打包挂载的数据卷呢？数据卷是容器和宿主机共享的，正因为数据卷是宿主机的文件夹挂载在容器中（搞清楚谁挂载在谁上很重要，类比 U 盘插入电脑，数据卷挂载在容器中），数据卷不属于docker的文件系统，因此容器被打包成镜像时不会打包挂载的数据卷。</p><h3 id="Dockerfile-制作镜像"><a href="#Dockerfile-制作镜像" class="headerlink" title="Dockerfile 制作镜像"></a>Dockerfile 制作镜像</h3><p><strong>Dockerfile 文件中的每一行构建一层镜像</strong>，这就是RUN尽可能一个模块写在一起并使用 &amp;&amp; 进行连接的原因？</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># FROM: 指定基础镜像FROM centos:7# MAINTAINER: 指定作者信息MAINTAINER xiong# ENV: 设置环境变量ENV USERNAME rootENV PASSWORD root# RUN: 执行shell命令RUN yum install -y vimRUN apt-get update && apt-get install -y \    python    python-pipRUN pip install numpy# ADD: 将宿主机文件复制到容器中ADD hello.py /tmp/hello.py# WORKDIR: 指定工作目录WORKDIR /# EXPOSE: 暴露端口(谁的端口?)EXPOSE 5000# 接收docker run中的输入的字符串作为echo命令的参数, 一般用于制作一些执行后关闭的容器ENTRYPOINT ["/bin/echo"]# CMD: 容器启动时执行该命令, 后面是提供echo命令的参数CMD ["/bin/echo", "Hello, Dockerfile!"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义Dockerfile，发布SpringBoot项目（假设为springboot-hello.jar）</p><ol><li><p>创建一个 Dockerfile 文件，文件名和后缀都任意，假设为 springboot_hello.dockerfile。Dockerfile 文件和 jar 包放到同一个目录下。</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># jar包执行需要JRE环境FROM java:8ADD springboot-hello.jar ./spring-hello.jarCMD java -jar spring-hello.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入 <code>docker build -f &lt;Dockerfile文件路径&gt; -t &lt;镜像名&gt;:&lt;版本号&gt;</code> 命令来构建镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker build -f springboot_hello.dockerfile -t myHello:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h2><p>容器和镜像不能直接传输，需要将其保存成压缩文件，才能实现镜像的共享。（为什么不直接发布到 docker hub 或私有仓库上，让别人去拉取呢？）</p><ul><li>保存镜像：<code>docker save -o &lt;tar文件名&gt; &lt;镜像名&gt;:&lt;版本号&gt;</code></li><li>加载镜像：<code>docker load -i &lt;tar文件名&gt;</code></li><li>保存容器：<code>docker export</code></li><li>加载容器：<code>docker import</code></li></ul><p>保存镜像（先commit，再save）会保留它的历史，保存容器会对它的历史进行压缩，二者类似。</p><pre class="line-numbers language-sh"><code class="language-sh"># 将之前创建的redis-demo镜像保存为tar文件. docker save -o redis-docker.tar redis-demo:1.0# 输出路径为当前目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230404232643032.png" alt="docker save 保存镜像"></p><h1 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h1><p><strong>每个容器中只运行一个进程</strong>。容器和容器之间通过容器链接或者其它的容器网络技术来进行通信</p><p>获取容器的 IP 地址：<code>docker inspect &lt;容器名&gt; | grep &quot;IPAddress&quot;</code></p><p>如果在创建容器时不使用端口映射，相当于在宿主机和容器之间搭建了一个私人网络，在宿主机上可以通过查找容器 IP + 容器端口号来访问容器，但是在其它机器上无法访问容器。</p><h2 id="容器链接（过时）"><a href="#容器链接（过时）" class="headerlink" title="容器链接（过时）"></a>容器链接（过时）</h2><p>容器链接 <code>docker run --link</code> 在单台主机上可以正常工作，但是在一个大规模系统中，需要使用其它的服务发现方式。可以使用键值存储和 DNS 作为解决方案。另外，Docker Network 提供了一种内建机制来将容器内的服务暴露给外部，而不必使用容器链接。</p><h2 id="用户定义网络"><a href="#用户定义网络" class="headerlink" title="用户定义网络"></a>用户定义网络</h2><p>默认情况下使用 <code>bridge</code> 网络，但该网络的问题是<strong>不能将容器名解析为 IP 地址</strong>，例如不可以通过 <code>ping &lt;容器名&gt;</code> 的方式来进行容器间的通信。而用户定义的网络则解决了这个问题。</p><p>创建网络：<code>docker network create &lt;网络名&gt;</code></p><p>连接网络：</p><ul><li>创建容器时连接到指定网络 <code>docker run --name --network &lt;指定连接的网络名&gt;</code></li><li>运行中容器连接到指定网络 <code>docker network connect &lt;指定连接的网络名&gt; &lt;容器名&gt;</code></li></ul><p>断开网络连接：<code>docker network disconnect &lt;网络名&gt; &lt;容器名&gt;</code></p><p>查看网络信息：<code>docker network inspect &lt;网络名&gt;</code></p><p>从用法上来看，网络和容器的使用方法类似，只是使用 <code>docker network</code> 作为命令的前缀，例如 <code>docker network ls</code> 等等。</p><h1 id="Docker-Compose-服务编排"><a href="#Docker-Compose-服务编排" class="headerlink" title="Docker Compose 服务编排"></a>Docker Compose 服务编排</h1><h2 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h2><p>微服务架构中一般包含多个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启动和停止，维护的工作量会非常大。而服务编排就是按照一定的业务规则批量管理容器，而 Docker Compose 就是进行服务编排的工具之一。Docker Compose 的使用步骤：</p><ol><li>编写 Dockerfile 文件</li><li>使用 docker-compose.yml 文件定义组成应用程序的各个微服务</li><li>运行 docker-compose up 来启动应用程序</li></ol><h2 id="Docker-Compose-的使用"><a href="#Docker-Compose-的使用" class="headerlink" title="Docker Compose 的使用"></a>Docker Compose 的使用</h2><p>docker compose 默认被安装，可以通过 <code>docker compose version</code> 查看</p><p>使用 docker compose 来编排 nginx + springboot 项目，其中 nginx 能够反向代理多个 springboot 项目生成的容器</p><ol><li><p>编写 docker-compose.yml 文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 短线"-"在yaml文件中的含义表示是数组</span>      <span class="token comment" spellcheck="true"># 这里的80:80是没有空格的, 因为代表的是一个属性值&lt;host_port>:&lt;docker_port></span>      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>    <span class="token comment" spellcheck="true"># 需要连接的其它容器, 与其进行通信</span>    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> app1      <span class="token punctuation">-</span> app2    <span class="token comment" spellcheck="true"># 数据卷挂载</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#  nginx的配置文件名叫啥都可以, 以".conf"结尾即可, 推荐为nginx.conf, 在挂载目录中创建即可</span>      <span class="token punctuation">-</span> ./nginx/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d  <span class="token comment" spellcheck="true"># springboot-hello是springboot项目生成的一个docker镜像</span>  <span class="token comment" spellcheck="true"># app1 是生成的容器</span>  <span class="token key atrule">app1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>hello    <span class="token key atrule">expose</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080"</span>  <span class="token key atrule">app2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>hello    <span class="token key atrule">expose</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8081"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>编写 nginx 的配置文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server</span> <span class="token attr-value">{</span><span class="token attr-name">    listen</span> <span class="token attr-value">80;</span><span class="token attr-name">    access_log</span> <span class="token attr-value">off;</span><span class="token attr-name">    location</span> <span class="token attr-value">/ {</span><span class="token comment" spellcheck="true">        # 配置反向代理</span><span class="token attr-name">        proxy_pass</span> <span class="token attr-value">http://app1:8080 http://app2:8081;</span>    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>docker compose up</code>来执行 docker-compose.yml 文件中信息</p></li></ol><blockquote><p>  分布式系统中的容器通信该如何处理，至今未正面面对这个问题。K8S？</p></blockquote><h1 id="通过-Docker-安装其他软件"><a href="#通过-Docker-安装其他软件" class="headerlink" title="通过 Docker 安装其他软件"></a>通过 Docker 安装其他软件</h1><h2 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h2><ol><li><p>拉取 MySQL 的镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker pull mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322123351406.png" alt="docker 拉取 mysql 镜像"></p></li><li><p>查看本地镜像</p><pre class="line-numbers language-sh"><code class="language-sh">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322123428214.png" alt="docker 查看本地镜像"></p></li><li><p>运行容器</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \--name mysql-docker \-p 3306:3306 \-e MYSQL_ROOT_PASSWORD=root \-v /opt/module/data/mysql/data:/var/lib/mysql \-v /opt/module/data/mysql/log:/var/log/mysql \-v /opt/module/data/mysql/lib:/var/lib/mysql-files \-v /opt/module/data/mysql/conf:/etc/mysql \-d mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数介绍</th><th></th></tr></thead><tbody><tr><td><code>--name mysql-docker</code></td><td>指定创建的容器名为 <strong>mysql-docker</strong></td></tr><tr><td><code>-p 3306:3306</code></td><td>前一个 3306 是 Linux 宿主机上的端口，后一个 3306 是 mysql-docker 容器中的端口</td></tr><tr><td><code>-e MYSQL_ROOT_PASSWORD=root</code></td><td>设置环境变量 MySQL 的 root 用户的密码为 <strong>root</strong></td></tr><tr><td><code>-v /opt/module/data/mysql/data:/var/lib/mysql</code></td><td>指定 MySQL 的数据挂载目录</td></tr><tr><td><code>-v /opt/module/data/mysql/log:/var/log/mysql</code></td><td></td></tr><tr><td><code>-v /opt/module/data/mysql/lib/mysql-files:/var/lib/mysql-files</code></td><td></td></tr><tr><td><code>-v /opt/module/data/mysql/conf:/etc/mysql</code></td><td></td></tr><tr><td><code>-d mysql:latest</code></td><td>指定使用 mysql:latest 这个镜像来启动容器</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><code>-p &lt;宿主机的port&gt;:&lt;容器的port&gt;</code>：实现容器端口到宿主机端口的映射。外部机器不可以与宿主机的容器直接通信, 宿主机可以与容器直接通信, 外部机可以与宿主机直接通信。通过端口映射,例如宿主机的3307对应着访问容器的3306,当外部机器需要访问容器的3306端口时,访问宿主机的3307端口即可</p></li><li><p>使用 <code>docker ps</code> 来查看正在运行中的容器（取名为 mysql-docker）</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322125932459.png" alt="查看 mysql-docker 是否成功启动"></p></li><li><p>在宿主机上修改 MySQL 的配置 <code>vim /opt/module/data/mysql/conf/my.cnf</code></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 防止中文乱码</span>[client]<span class="token attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span>[mysql]<span class="token attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span>[mysqld]<span class="token attr-name">init_connect</span><span class="token punctuation">=</span><span class="token attr-value">'SET collation_connection = utf8_unicode_ci'</span><span class="token attr-name">init_connect</span><span class="token punctuation">=</span><span class="token attr-value">'SET NAMES utf8'</span><span class="token attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token attr-value">utf8</span><span class="token attr-name">collation-server</span><span class="token punctuation">=</span><span class="token attr-value">utf8_unicode_ci</span>skip-character-set-client-handshakeskip-name-resolve<span class="token comment" spellcheck="true">#################################### 集群配置 ###################################</span><span class="token comment" spellcheck="true"># mysql集群中的id, 集群下需要唯一</span><span class="token attr-name">server_id</span><span class="token punctuation">=</span><span class="token attr-value">101</span><span class="token comment" spellcheck="true"># 指定不需要同步的数据库名称</span><span class="token attr-name">binlog-ignore-db</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token comment" spellcheck="true"># 开启二进制日志功能</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">mall-mysql-bin</span><span class="token comment" spellcheck="true"># 设置二进制日志使用内存大小（事务）</span><span class="token attr-name">binlog_cache_size</span><span class="token punctuation">=</span><span class="token attr-value">1M</span><span class="token comment" spellcheck="true"># 设置mysql集群使用的binlog日志的格式（mixed，statement，row）</span><span class="token attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token attr-value">mixed</span><span class="token attr-name">expire_logs_days</span><span class="token punctuation">=</span><span class="token attr-value">7</span><span class="token attr-name">slave_skip_errors</span><span class="token punctuation">=</span><span class="token attr-value">1062</span><span class="token comment" spellcheck="true">############################ MySQL从服务器需要额外配置下面参数 ##########################</span><span class="token comment" spellcheck="true"># relay_log 配置中继日志</span><span class="token attr-name">relay_log</span><span class="token punctuation">=</span><span class="token attr-value">mall-mysql-relay-bin</span><span class="token comment" spellcheck="true"># log_slave_updates表示slave将复制事件写入自己的binlog日志中</span><span class="token attr-name">log_slave_updates</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true"># slave设置为只读</span><span class="token attr-name">read_only</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启 mysql-docker 来应用更新后的配置</p><pre class="line-numbers language-sh"><code class="language-sh">docker restart mysql-docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用 <code>docker exec -it mysql-docker</code> 进入到 mysql-docker 容器中，成功进入代表部署成功</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322131754718.png" alt="进入正在运行中的docker容器" style="zoom:150%;"></li><li><p>使用  <code>whereis mysql</code> 命令来查看 MySQL 的安装位置</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322132412368.png" alt="查看 MySQL 的安装位置" style="zoom:150%;"></li><li><p>使用 <code>cat /etc/mysql/my.cnf</code> 来查看在宿主机上修改的配置文件</p></li><li><p>使用 <code>mysql -uroot -proot</code> 来进入 MySQL，在其中创建一个数据库，方便后面的测试连接</p></li><li><p>在 IDEA 中进行外部的连接测试</p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230322134352404.png" alt="通过 IDEA 进行外部连接测试" style="zoom: 200%;"></li><li><p>（主从复制）MySQL 主服务器中开启主从复制</p><p>这部分感觉可以不用进行配置？直接把root用户给SLAVE服务器？</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'slave'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span><span class="token string">';GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO '</span>slave<span class="token string">'@'</span><span class="token operator">%</span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>（主从复制）在主服务器上获取一些用于主从复制的信息</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> MASTER <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>（主从复制）在从服务器中指定主服务器</p><pre class="line-numbers language-sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span> MASTER_HOST<span class="token operator">=</span><span class="token string">'&lt;mysql主服务器的ip地址>'</span><span class="token punctuation">,</span>MASTER_USER<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_PORT<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">'mall-mysql-bin.000001'</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span><span class="token number">617</span><span class="token punctuation">,</span>MASTER_CONNECT_RETRY<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的信息需要根据 MySQL主服务器上情况进行修改</p></li><li><p>（主从复制）在 MySQL 从服务器中开启主从复制</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">START</span> SLAVE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="16"><li><p>（主从复制）主从复制配置成功的测试</p><pre class="line-numbers language-sql"><code class="language-sql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h2><ol><li><p>创建并启动 Redis</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \-p 6379:6379 \--name redis-docker \-v /opt/module/data/redis/data:/data \-v /opt/module/data/redis/conf/:/etc/redis/conf \-d redis \redis-server /etc/redis/conf/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>  最后一行的 redis-server /etc/redis/redis.conf 实际上是 redis 启动服务端的命令，难道说 docker run 可以直接执行 sh 命令吗？那是否可以写上 mysql -uroot -proot 来直接登录 MySQL 呢？</p><p>  redis-server /etc/redis/conf/redis.conf 是指定redis-docker容器启动时使用的配置文件，由于上面没有创建 redis.conf 文件，所以实际上并没有成功启动。可以通过 <code>docker logs -f redis-docker</code> 查看日志，能够看到 <strong>Fatal error, can’t open config file ‘/etc/redis/conf/redis.conf’: No such file or directory</strong> 这样的错误。</p></blockquote></li><li><p>在宿主机的挂载目录 <code>/opt/module/data/redis/conf</code> 中创建 redis.conf 文件，并设置允许远程访问 Redis</p><p>挂载目录实际上就是容器内的目录，相当于创建了一个快捷方式（软链接），对挂载目录中的操作实际上是对容器内部的目录进行操作。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">bind</span> <span class="token attr-value">0.0.0.0</span><span class="token attr-name">protected-mode</span> <span class="token attr-value">no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用 <code>docker start redis-docker</code> 来真正启动Redis容器</p></li><li><p>使用 redis-docker 容器来执行连接 Redis</p><pre class="line-numbers language-sh"><code class="language-sh">docker exec -it redis-docker redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>  这里标明不需要进入到容器中再去执行 redis-cli 命令，做了一点点简化。</p></blockquote></li></ol><h2 id="Docker-安装-Redis-集群"><a href="#Docker-安装-Redis-集群" class="headerlink" title="Docker 安装 Redis 集群"></a>Docker 安装 Redis 集群</h2><p>配置一个 3 主 3 从的 Redis 集群</p><ol><li><p>创建一个用户自定义网络，不妨命名为 <code>redis-network</code></p><pre class="line-numbers language-sh"><code class="language-sh">docker network create redis-network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>下面的配置文件复制 6 份，启动 6 个 Redis 容器<br>（redis-master-6380、redis-master-6381、redis-master-6382、redis-slave-6383、redis-slave-6384、redis-slave-6385）</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \-p 6380:6379 \--name redis-master-6380 \--network redis-network--privileged=true \-v /opt/module/data/redis/data:/data \-v /opt/module/data/redis/conf/:/etc/redis/conf \--cluster-enabled yes \--appendonly yes \-d redis \redis-server /etc/redis/conf/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将多个 Redis 节点合并成一个 Redis 集群（不指定 master 和 slave）</p><pre class="line-numbers language-sh"><code class="language-sh">redis-cli --cluster create \<ip1>:<port1> \<ip2>:<port2> \<ip3>:<port3> \<ip4>:<port4> \<ip5>:<port5> \<ip6>:<port6> \--cluster-replicas 1 \--cluster-yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为 master 节点添加 slave 节点</p><p>其中 <code>&lt;node-id&gt;</code> 通过 <code>redis-cli cluster nodes</code> 来获取</p><pre class="line-numbers language-sh"><code class="language-sh">redis-cli \-h <ip1> -p <port1> \cluster replicate <node-id><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Docker-安装-Nginx"><a href="#Docker-安装-Nginx" class="headerlink" title="Docker 安装 Nginx"></a>Docker 安装 Nginx</h2><ol><li><p>创建并启动 Nginx</p><pre class="line-numbers language-sh"><code class="language-sh">docker run \-p 8000:80 \--name nginx-docker \-v /opt/module/data/nginx/conf:/etc/nginx/conf \-v /opt/module/data/nginx/log:/var/log/nginx \-d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ol><h1 id="安装过程中的错误记录"><a href="#安装过程中的错误记录" class="headerlink" title="安装过程中的错误记录"></a>安装过程中的错误记录</h1><h2 id="使用-docker-ps-查看正在运行的容器"><a href="#使用-docker-ps-查看正在运行的容器" class="headerlink" title="使用 docker ps 查看正在运行的容器"></a>使用 docker ps 查看正在运行的容器</h2><p><strong>使用 <code>docker logs mysql-docker</code> 来查看容器报错日志</strong></p><p>可能存在的问题：</p><ul><li>如果这里并没有 mysql 容器在运行，那么有可能是因为端口冲突，或者一些其它别的问题？（换一台主机测试成功）</li><li>可能一开始能够通过 <code>docker ps</code> 查看到运行中的 mysql-docker，但是隔一段时间后发现 mysql-docker 停止了，这也说明 mysql-docker 并没有成功运行。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringAMQP的使用</title>
      <link href="/2023/03/21/springamqp-de-shi-yong/"/>
      <url>/2023/03/21/springamqp-de-shi-yong/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的使用</title>
      <link href="/2023/03/21/rabbitmq-de-shi-yong/"/>
      <url>/2023/03/21/rabbitmq-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="同步调用方式和异步调用方式"><a href="#同步调用方式和异步调用方式" class="headerlink" title="同步调用方式和异步调用方式"></a>同步调用方式和异步调用方式</h2><p>同步调用</p><p>微服务间基于 Feign 的调用就属于同步调用方式</p><p>缺点：</p><ul><li>耦合度高，每次加入新的需求都要修改原来的代码</li><li>性能下降，调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用的时间之和</li><li>资源浪费，调用链中的每个服务在等待响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源</li><li>级联失败，如果服务提供者出现问题，所有调用方都会跟着出问题，如同多米诺骨牌一样，迅速导致整个微服务集群故障</li></ul><p>异步调用</p><p>异步调用常见实现就是事件驱动模式</p><p>优点：</p><ul><li>服务解耦，异步方式下，服务只发布事件，而不调用其它服务。如果有新的业务需求出现，只需要去订阅该事件主题。</li><li>性能提高，吞吐量提升</li><li>服务没有强依赖关系</li><li>流量消峰</li></ul><p>缺点：</p><ul><li>依赖于 Broker(消息队列) 的可靠性、安全性、吞吐能力</li><li>架构复杂，业务没有明显的流程线，不方便问题排查和追踪管理</li></ul><h2 id="RabbitMQ-的安装部署"><a href="#RabbitMQ-的安装部署" class="headerlink" title="RabbitMQ 的安装部署"></a>RabbitMQ 的安装部署</h2><ol><li><p>启动docker容器 <code>systemctl start docker</code></p></li><li><p>下载rabbitmq镜像 <code>docker pull rabbitmq:3-management</code></p></li><li><p>安装mq并配置用户信息</p><pre class="line-numbers language-sh"><code class="language-sh"> docker run \     -e RABBITMQ_DEFAULT_USER=root \     -e RABBITMQ_DEFAULT_PASS=root \     --name mq \     --hostname hadoop001 \     -p 15672:15672 \     -p 5672:5672 \     -d \     rabbitmq:3-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h1><ol><li><p>引入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置连接信息</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">hadoop001</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="HelloWorld-案例"><a href="#HelloWorld-案例" class="headerlink" title="HelloWorld 案例"></a>HelloWorld 案例</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321174138325.png" alt="简单队列的使用"></p><h3 id="消息发送者"><a href="#消息发送者" class="headerlink" title="消息发送者"></a>消息发送者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringAmqpApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publisherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String queueName <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> <span class="token string">"Hello, Spring AMQP!"</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param message 发送的消息类型是字符串, 则接收的消息类型也是字符串     */</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer receive message = "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工作队列-Work-Queues"><a href="#工作队列-Work-Queues" class="headerlink" title="工作队列 Work Queues"></a>工作队列 Work Queues</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321174212647.png" alt="工作队列的使用"></p><blockquote><p>  进行案例演示测试时，先启动消费者（即SpringApplication），再启动消息发送者（SpringBootTest）。因为 SpringBootTest 框架也会扫描 @Component，所在在调用测试方法发送消息时，就已经有一部分消息被消费了。但是由于 @Test 方法的生命周期结束得更早，因此往往只会输出几条消息。产生如下图所示的场景：</p><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321181646064.png" alt="SpringBoot Test 框架中向 RbbitMQ 发送消息"></p></blockquote><h3 id="消息发送者-1"><a href="#消息发送者-1" class="headerlink" title="消息发送者"></a>消息发送者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SpringAmqpApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">workQueuePublisherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String queueName <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">;</span>        String message <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : Hello, Spring AMQP "</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token punctuation">(</span>message <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消息消费者-1"><a href="#消息消费者-1" class="headerlink" title="消息消费者"></a>消息消费者</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkQueueConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenByA</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumerA : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"mq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenByB</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumerB : "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布-订阅模式-Publish-Subscribe"><a href="#发布-订阅模式-Publish-Subscribe" class="headerlink" title="发布-订阅模式 Publish-Subscribe"></a>发布-订阅模式 Publish-Subscribe</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230321182454521.png" alt="发布-订阅模式"></p><p><strong>发布-订阅模式</strong>通过交换机来保存数据信息，发送到所有绑定的队列中，从而避免消息只能被一个消费者消费。</p><h3 id="Fanout-Exchange-交换机"><a href="#Fanout-Exchange-交换机" class="headerlink" title="Fanout Exchange 交换机"></a>Fanout Exchange 交换机</h3><blockquote><p>  发送到与 Fanout Exchange 交换机绑定的所有队列</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka简单入门</title>
      <link href="/2023/03/21/kafka-jian-dan-ru-men/"/>
      <url>/2023/03/21/kafka-jian-dan-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Kafka命令行使用"><a href="#Kafka命令行使用" class="headerlink" title="Kafka命令行使用"></a>Kafka命令行使用</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 注解版, 不可直接复制使用</span><span class="token comment" spellcheck="true"># 前台启动</span>kafka-server-start.sh \<span class="token comment" spellcheck="true"># 配置文件所在路径</span>/opt/module/kafka_2.13-3.3.1/config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 复制使用版本</span>kafka-server-start.sh \/opt/module/kafka_2.13-3.3.1/config/server.properties<span class="token comment" spellcheck="true"># 后台启动版本</span>kafka-server-start.sh \-daemon \/opt/module/kafka_2.13-3.3.1/config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Topic主题"><a href="#Topic主题" class="headerlink" title="Topic主题"></a>Topic主题</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre class="line-numbers language-shell"><code class="language-shell">kafka-topics.sh \# 创建topic--create \# 连接kafka broker的host和port--bootstrap-server hadoop001:9092 \# 设置分区数(相当于将一个主题拆分成多少个文件夹)--partitions 2 \# 设置副本数--replication-factor 2 \# 设置topic的名称为xtopic--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-topics.sh \--create \--bootstrap-server hadoop001:9092 \--partitions 2 \--replication-factor 2 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h3><blockquote><p>压力测试和使用的topic主题节点相关, 例如xtopic是2副本2分区, 所以压力测试相当于测试2副本2分区的集群性能.</p></blockquote><h4 id="生产者基准测试"><a href="#生产者基准测试" class="headerlink" title="生产者基准测试"></a>生产者基准测试</h4><pre class="line-numbers language-bash"><code class="language-bash">kafka-producer-perf-test.sh \<span class="token comment" spellcheck="true"># 测试使用的主题为xtopic</span>--topic xtopic \<span class="token comment" spellcheck="true"># 数量为5M</span>--num-records 5000000 \<span class="token comment" spellcheck="true"># 吞吐量为-1表示无限制</span>--throughput -1 \<span class="token comment" spellcheck="true"># 数据大小限制为1000B</span>--record-size 1000 \<span class="token comment" spellcheck="true"># 其他属性配置</span>--producer-props \    <span class="token comment" spellcheck="true"># kafka集群</span>bootstrap.servers<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092 \    <span class="token comment" spellcheck="true"># ack应答机制</span>acks<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-producer-perf-test.sh \--num-records 5000000 \--throughput -1 \--record-size 1000 \--producer-props \bootstrap.servers<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092 \acks<span class="token operator">=</span>1 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>2副本2分区的测试结果</p><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103175519629.png" alt="image-20221103175519629"></p></li><li><p>1副本1分区的测试结果</p><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103180841963.png" alt="image-20221103180841963"></p></li></ul><h4 id="消费者基准测试"><a href="#消费者基准测试" class="headerlink" title="消费者基准测试"></a>消费者基准测试</h4><pre class="line-numbers language-bash"><code class="language-bash">kafka-consumer-perf-test.sh \<span class="token comment" spellcheck="true"># 测试使用的主题为xtopic</span>--topic xtopic \<span class="token comment" spellcheck="true"># 每次拉取的数据量的大小: 1MB</span>--fetch-size 1048576 \<span class="token comment" spellcheck="true"># 要消费的数据量: 5M条</span>--messages 5000000 \<span class="token comment" spellcheck="true"># kafka集群</span>--broker-list<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-consumer-perf-test.sh \--topic xtopic \--fetch-size 1048576 \--messages 5000000 \--broker-list<span class="token operator">=</span>hadoop001:9092,hadoop002:9092,hadoop003:9092<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103175816558.png" alt="image-20221103175816558"></p><h3 id="查看分区和副本信息"><a href="#查看分区和副本信息" class="headerlink" title="查看分区和副本信息"></a>查看分区和副本信息</h3><pre class="line-numbers language-shell"><code class="language-shell">kafka-topics.sh \# 描述topic--describe \# 连接kafka集群--bootstrap-server hadoop001:9092 \# 设置查看的topic, 不设置代表查找全部--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-topics.sh \--describe \--bootstrap-server hadoop001:9092 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103024715228.png" alt="image-20221103024715228"></p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><pre class="line-numbers language-shell"><code class="language-shell">kafka-console-producer.sh \# 生产者从broker-list中查找topic所在的分区, 发送到这些partition分区的leader服务器--broker-list hadoop001:9092 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">kafka-console-producer.sh \--broker-list hadoop001:9092 \--topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103084853648.png" alt="image-20221103084853648"></p><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h2><ul><li><p>方式一: 不查看历史信息</p><pre class="line-numbers language-bash"><code class="language-bash">  kafka-console-consumer.sh \  <span class="token comment" spellcheck="true"># 从kafka集群中获取消息(bootstrap-server代表kafka集群)</span>  --bootstrap-server hadoop001:9092 \  --topic xtopic  <span class="token comment" spellcheck="true"># 指定消费者使用的配置文件, 可选项, 一般用于xiao'fei'zh</span>  --consumer.config /opt/module/kafka_2.13-3.3.1/config/consumer.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103085307742.png" alt="image-20221103085307742"></p></li><li><p>方式二: 查看历史信息</p><pre class="line-numbers language-bash"><code class="language-bash">  kafka-console-consumer.sh \  <span class="token comment" spellcheck="true"># 从kafka集群中获取消息(bootstrap-server代表kafka集群)</span>  --bootstrap-server hadoop001:9092 \  <span class="token comment" spellcheck="true"># 查看历史消息, 相当于查看未关注公众号前, 该公众号推送过的消息</span>  --from-beginning \  --topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">  kafka-console-consumer.sh \  --bootstrap-server hadoop001:9092 \  --from-beginning \  --topic xtopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103091008121.png" alt="image-20221103091008121"></p></li></ul><h2 id="数据实际保存位置"><a href="#数据实际保存位置" class="headerlink" title="数据实际保存位置"></a>数据实际保存位置</h2><p>由于目前还不清楚具体的分区规则, 因此分别查看 <strong>xtopic-0</strong> 和<strong>xtopic-1</strong> 这两个分区中的数据. 结果在 <strong>xtopic-1</strong> 中可以查看到</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103092637617.png" alt="image-20221103092637617"></p><h2 id="查看zookeeper中保存的信息"><a href="#查看zookeeper中保存的信息" class="headerlink" title="查看zookeeper中保存的信息"></a>查看zookeeper中保存的信息</h2><ol><li><p>通过 <code>zkCli.sh</code>命令 来启动zookeeper客户端</p></li><li><p>查看 <strong>brokers</strong> 节点信息</p><p> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103094039135.png" alt="image-20221103094039135"></p></li><li><p>查看 <strong>topics</strong> 节点信息</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NLP自然语言处理学习笔记</title>
      <link href="/2023/03/20/nlp-zi-ran-yu-yan-chu-li-xue-xi-bi-ji/"/>
      <url>/2023/03/20/nlp-zi-ran-yu-yan-chu-li-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h1><p>上下文无关：看一个词，输出一个词的向量。相同词的向量输出是相同的，不能体现“养只狗”和“单身狗”中“狗”的区别</p><p>Contextualized Word Embedding</p><p>上下文相关：看一个句子，输出每一个词的向量</p>]]></content>
      
      
      
        <tags>
            
            <tag> NLP, 自然语言处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP概述</title>
      <link href="/2023/03/20/nlp-gai-shu/"/>
      <url>/2023/03/20/nlp-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="NLP-概述"><a href="#NLP-概述" class="headerlink" title="NLP 概述"></a>NLP 概述</h1><p>自然语言处理系统常常被称为“流水线”（pipeline），这是因为该系统往往包括多个处理环节，其中自然语言从“流水线”的一端输入，处理后的结果从另一端输出。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>语音识别</td><td>语言到文本</td></tr><tr><td>语音生成</td><td>文本到语音</td></tr><tr><td></td><td></td></tr></tbody></table><p>一旦从自然语言中提取出结构化的数值型数据，即向量化表示之后，就可以利用各种数学工具和机器学习工具。我们可以使用类似于将三维物体投影到二维计算机屏幕的线性代数的方法，让计算机能够解释和存储语句的“含义”，而不仅仅是对其中的词或字符进行计数。语义分析和统计学一起可以有助于解决自然语言的歧义性，歧义性是指词或短语通常具有多重含义和解释，例如：看病的是张三。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230320154809730.png" alt="image-20230320154809730"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230320170708641.png" alt="image-20230320170708641"></p><h1 id="构建自己的词汇表-分词"><a href="#构建自己的词汇表-分词" class="headerlink" title="构建自己的词汇表(分词)"></a>构建自己的词汇表(分词)</h1><blockquote><ul><li>将文本切分成词或词条(n-gram)</li><li>处理非标准的标点符号和表情符号(例如社交媒体帖子上的表情符号)</li><li>利用词干还原和词形归并方法来压缩词汇表</li><li>构建语句的向量表示</li><li>基于手工标注的词条得分构建情感分析工具</li></ul></blockquote><p>第一件事是需要<strong>一个强大的词汇表</strong>，使用的技术只涉及词、标点符号和数值，但是这些技术可以推广到任何其他有意义的单元，例如ASCII表情符号、Unicode表情符号和数学符号等。</p><p>本章将给出将输入串切分成词的直接算法，同时我们还可以提取出连续 2 个、3 个、4 个甚至 5 个词条组成的词对、三元组、四元组和五元组。这些语言单位称为 <em>n</em>-gram（<em>n</em> 元）。连续两个词称为 2-gram（bigram），连续 3 个词称为 3-gram（trigram），连续 4 个词称为 4-gram，其余以此类推。</p><p><strong>在自然语言处理中，从文本中产生其数值向量实际是一个特别“有损”的特征提取过程。</strong>尽管如此，词袋（bag-of-words，BOW）向量从文本中保留了足够的信息内容来产生有用和有趣的机器学习模型。</p><p>一旦从文档中确定好要加入词汇表中的词条之后，需要使用正则表达式工具来将意义相似的词合并在一起，这个过程称为<strong>词干还原（stemming）</strong>。</p><h2 id="词干还原"><a href="#词干还原" class="headerlink" title="词干还原"></a>词干还原</h2><p>所谓词干还原，指的是将某个词的不同变化形式统统“打包”到同一个“桶”或者类别中。</p><p>要将“ending”中的动词后缀“ing”去掉，那么就需要有个称为“end”的词干来表示上面两个词。同样，我们将词“running”还原成“run”，于是这两个词可以同等对待。当然，上述处理过程实际上有些棘手，因为“running”中要去掉的不仅仅是“ing”还有一个额外的字母“n”。还有，对于“sing”来说，我们期望不要去掉后面的“ing”而保留整个词，否则，最后就会得到单个字母“s”。</p><p>或者，大家再设想一下如何区分名词复数后面加的“s”（如 words）和词本身（如 bus 和 lens）后面就有的“s”。词当中一个个独立的字母或者词的一部分是否为整个词的意义提供了信息？这些字母是否可能产生误导？这两个问题的答案都是 yes。</p><h2 id="利用分词器构建词汇表"><a href="#利用分词器构建词汇表" class="headerlink" title="利用分词器构建词汇表"></a>利用分词器构建词汇表</h2><p>在 NLP 中，<strong>分词（tokenization，也称切词）</strong>是一种特殊的文档切分（segmentation）过程。</p><p>文档切分可以是将文档分成段落，将段落分成句子，将句子分成短语，或将短语分成词条（通常是词）和标点符号。</p><p>于编译计算机语言的<strong>分词器</strong>通常称为扫描器（scanner）或者词法分析器（lexer）。某种计算机语言的词汇表（所有有效的记号合）构成所谓的<strong>词库（lexicon）</strong>，如果分词器合并到计算机语言编译器的分析器（parser）中，则该分析器常常称为无扫描器分析器（scannerless parser）。</p><p>而<strong>记号（token）</strong>则是用于分析计算机语言的上下文无关语法（context-free grammar，CFG）的最终输出结果，由于它们终结了 CFG 中从根节点到叶子节点的一条路径，因此它们也称为<strong>终结符（terminal）</strong>。</p><table><thead><tr><th>NLP</th><th>编译器</th></tr></thead><tbody><tr><td>分词器</td><td>扫描器、词法分析器</td></tr><tr><td>词汇表</td><td>词库</td></tr><tr><td>分析器</td><td>编译器</td></tr><tr><td>词条、词项、词、n-gram</td><td>标识符、终结符</td></tr></tbody></table><p>分词是 NLP 流水线的第一步，分词器将自然语言文本这种非结构化数据切分成多个信息块，每个块都可看成可计数的离散元素。这些元素在文档中的出现频率可以直接用于该文档的向量表示。</p><p>上面的词向量表示及文档的表格化表示有一个优点，就是任何信息都没有丢失。只要记录了哪一列代表哪个词，就可以基于整张表格中的独热向量重构出原始文档。即使分词器在生成我们认为有用的词条时只有 90%的精确率，上述重构过程的精确率也是 100%。因此，和上面一样的独热向量常常用于神经网络、序列到序列语言模型及生成式语言模型中。对任何需要保留原始文本所有含义的模型或 NLP 流水线来说，独热向量模式提供了一个好的选择。</p><p>即使将表格中的每个元素用单个位来表示，这个表格也超过了百万位乘以百万位的规模。在单个位表示一个元素的情况下，大概需要 20 TB 来存储上述小小书架上的书籍。即使对于长达几页的文档，<strong>词袋向量</strong>也可以用来概括文档的本质内容。</p><p>词袋向量：一个hashmap</p><h2 id="计算向量之间的相似度"><a href="#计算向量之间的相似度" class="headerlink" title="计算向量之间的相似度"></a>计算向量之间的相似度</h2><p>点积（内积）</p><h1 id="词的重要度"><a href="#词的重要度" class="headerlink" title="词的重要度"></a>词的重要度</h1><p>将词表示为连续空间后，可以用更高级的数学方法对这些表示进行计算。我们的目标是寻找这些词的数值表示，这些表示在某种程度上刻画了次所代表的信息内容或重要度。</p><blockquote><ul><li>词袋</li><li>n-gram</li><li>TF-IDF</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 自然语言处理NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS队列同步器</title>
      <link href="/2023/03/20/aqs-dui-lie-tong-bu-qi/"/>
      <url>/2023/03/20/aqs-dui-lie-tong-bu-qi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数仓</title>
      <link href="/2023/03/16/shu-cang/"/>
      <url>/2023/03/16/shu-cang/</url>
      
        <content type="html"><![CDATA[<h1 id="数仓项目"><a href="#数仓项目" class="headerlink" title="数仓项目"></a>数仓项目</h1><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316220838709.png" alt="技术选型" style="zoom:50%;"><h3 id="系统数据流程图"><a href="#系统数据流程图" class="headerlink" title="系统数据流程图"></a>系统数据流程图</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316221729706.png" alt="系统架构图"></p><h3 id="版本选型"><a href="#版本选型" class="headerlink" title="版本选型"></a>版本选型</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316222459855.png" alt="版本选型" style="zoom:50%;"><h3 id="集群资源规划"><a href="#集群资源规划" class="headerlink" title="集群资源规划"></a>集群资源规划</h3><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316223030415.png" alt="image-20230316223030415"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316223041971.png" alt="image-20230316223041971"></p><h2 id="用户行为日志"><a href="#用户行为日志" class="headerlink" title="用户行为日志"></a>用户行为日志</h2><h3 id="用户行为日志概述"><a href="#用户行为日志概述" class="headerlink" title="用户行为日志概述"></a>用户行为日志概述</h3><p>用户行为日志的内容，主要包含用户的各项行为信息以及行为所处的环境信息。收集这些信息的主要目的是为了优化产品和为各项分析统计指标提供数据支撑。收集用户行为数据的手段称为 <strong>埋点</strong>。</p><p><strong>埋点方式</strong>：</p><ul><li><p>代码埋点（前端埋点、后端埋点）</p><p>通过 <code>onClick()</code> 等事件触发函数，向用户行为服务器发送数据。</p></li><li><p>可视化埋点</p></li><li><p>全埋点（第三方公司提供SDK）</p></li></ul><h3 id="用户行为日志内容"><a href="#用户行为日志内容" class="headerlink" title="用户行为日志内容"></a>用户行为日志内容</h3><h4 id="页面浏览记录"><a href="#页面浏览记录" class="headerlink" title="页面浏览记录"></a>页面浏览记录</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316224604490.png" alt="页面浏览记录"></p><h4 id="动作记录"><a href="#动作记录" class="headerlink" title="动作记录"></a>动作记录</h4><p>比如，因为领劵进行的点击动作，不能单单记录点击，因为点击对于分析没有意义，而是要记录因为领券而进行的点击，即领券动作。</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316224821041.png" alt="动作记录"></p><h4 id="曝光记录"><a href="#曝光记录" class="headerlink" title="曝光记录"></a>曝光记录</h4><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316224917667.png" alt="曝光记录"></p><h4 id="启动记录"><a href="#启动记录" class="headerlink" title="启动记录"></a>启动记录</h4><p>启动类型：</p><ul><li>图标启动：用户主动点击 app 的图标 来启动 app</li><li>推送启动：用户由推送信息来启动 app</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316225357461.png" alt="image-20230316225357461"></p><h4 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h4><p>500 错误码</p><p>404 错误码</p><p>……</p><h3 id="用户行为日志格式"><a href="#用户行为日志格式" class="headerlink" title="用户行为日志格式"></a>用户行为日志格式</h3><h4 id="页面日志"><a href="#页面日志" class="headerlink" title="页面日志"></a>页面日志</h4><p>页面日志，以页面浏览为单位，即一个页面浏览记录生成一条页面埋点日志。一条完整的页面日志包含：</p><ul><li>一个页面浏览记录</li><li>若干个用户在该页面上所做的动作记录</li><li>若干个该页面的曝光记录</li><li>一个在该页面发生的错误记录</li><li>各种环境信息：<ul><li>用户信息</li><li>时间信息</li><li>地理位置信息</li><li>设备信息</li><li>应用信息</li><li>渠道信息</li></ul></li></ul><h4 id="启动日志"><a href="#启动日志" class="headerlink" title="启动日志"></a>启动日志</h4><p>启动日志以启动为单位，一起启动行为生成一条启动日志。一条完整的启动日志包括：</p><ul><li>一个启动记录</li><li>一个本次启动的错误记录</li><li>各种环境信息</li></ul><h2 id="Maxwell（Mysql到Kafka）"><a href="#Maxwell（Mysql到Kafka）" class="headerlink" title="Maxwell（Mysql到Kafka）"></a>Maxwell（Mysql到Kafka）</h2><p>Maxwell 是一款开源软件，用 Java 编写的 MySQL 变更数据抓取软件。<strong>它会实时监控 MySQL 数据库的数据变更操作（包括 insert、update、delete），并将变更数据以 JSON 格式发送给 Kafka 等流数据处理平台。</strong></p><h3 id="Maxwell-的工作原理"><a href="#Maxwell-的工作原理" class="headerlink" title="Maxwell 的工作原理"></a>Maxwell 的工作原理</h3><p>实时读取 MySQL 数据库的二进制日志<strong>（Binlog）</strong>，从中获取变更数据，再将变更数据以 JSON 格式发送到 Kafka 等流处理平台。</p><p>Binlog 日志是 MySQL 服务端非常重要的一种日志，它会保存 MySQL 数据库的所有数据变更记录。Binlog 的主要作用包括主从复制和数据恢复。<strong>Maxwell 的工作原理和主从复制密切相关。（伪装成 MySQL slave，监控 MySQL master 中的 Binlog 日志，但数据不存入从数据库，而是以 JSON 格式发送给Kafka）</strong></p><p>Binlog 日志不是 redo log 日志，整体流程是：</p><ol><li>先写 redo log 日志</li><li>数据库执行写操作</li><li>再写 Binlog 日志</li><li>redo log 日志提交</li></ol><p>MySQL 中的主从复制和读写分离和 Redis 中有些类似，又有些不同：</p><ul><li>主从复制：只有一台服务器对外工作，另一台作为备份提供容错，备份服务器不对外提供服务（Redis 中从服务器会提供服务）</li><li>读写分离：一台服务器提供写操作服务，另一台服务器提供读操作服务，两台服务器都对外提供服务。</li></ul><h3 id="Maxwell-的部署安装"><a href="#Maxwell-的部署安装" class="headerlink" title="Maxwell 的部署安装"></a>Maxwell 的部署安装</h3><ol><li><p>下载 Maxwell 合适的版本 </p><p>Maxwell 1.30.0 及以上版本不支持 JDK8，所以下载 Maxwell 1.29.2 版本。下载地址：<a href="https://maxwells-daemon.io/" target="_blank" rel="noopener">Maxwell’s Daemon (maxwells-daemon.io)</a></p></li><li><p>通过修改 MySQL 的配置文件 <code>/etc/my.cnf</code> 来开启 MySQL 的 Binlog 日志（默认情况下不开启）</p><pre class="line-numbers language-properties"><code class="language-properties">[mysqld]<span class="token comment" spellcheck="true"># 数据库id, 单节点MySQL原本没有必要开启, 但为了使用Maxwell则必须开启. Maxwell当做是一台MySQL slave</span><span class="token attr-name">server-id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true"># 启动Binlog, 该参数值会作为Binlog的文件名</span><span class="token attr-name">log-bin</span><span class="token punctuation">=</span><span class="token attr-value">mysql-binlog</span><span class="token comment" spellcheck="true"># Binlog类型, Maxwell要求其为row类型</span><span class="token attr-name">binlog_format</span><span class="token punctuation">=</span><span class="token attr-value">row</span><span class="token comment" spellcheck="true"># MySQL中需要启用Binlog的数据库, 即Maxwell需要监控的数据库. 根据实际情况进行更改</span><span class="token attr-name">binlog-do-db</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Binlog 日志的模式</strong></p><ul><li><strong>Statement-based 模式</strong>：基于 SQL 语句，会记录所有的写操作的 SQL 语句。<ul><li>优点：节省空间</li><li>缺点：如果 SQL 语句中存在 <code>now()</code> 这种函数，可能造成数据的不一致</li></ul></li><li><strong>Row-based 模式</strong>：基于行，Binlog 日志会记录每次写操作后被操作行的变化。<strong>Maxwell 要求使用 MySQL 使用 Row-based 模式</strong><ul><li>优点：保证数据的绝对一致性</li><li>缺点：如果一条 SQL 的影响行数非常多，那么占用空间会很大</li></ul></li><li><strong>mixed 模式</strong>：混合模式，默认是 Statement-based 模式，如果 SQL 语句可能导致数据不一致，那么自动切换到 Row-based 模式</li></ul></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全的集合</title>
      <link href="/2023/03/16/ji-he-de-xian-cheng-an-quan/"/>
      <url>/2023/03/16/ji-he-de-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC中的线程安全的集合"><a href="#JUC中的线程安全的集合" class="headerlink" title="JUC中的线程安全的集合"></a>JUC中的线程安全的集合</h1><blockquote><p>  所谓的线程安全的集合，指的是集合中的每一个方法是原子操作，例如 <code>get()</code>、<code>put()</code>等。但这并不表示使用了线程安全的集合就不会造成线程安全问题，正如事务不是简单地由一系列原子操作堆叠就可以实现的一样，只有正确地使用线程安全的集合，才能保证线程安全问题。</p></blockquote><h2 id="Blocking-类"><a href="#Blocking-类" class="headerlink" title="Blocking 类"></a>Blocking 类</h2><p>Blocking 大部分基于锁，并提供阻塞的方法</p><h2 id="CopyOnWrite-类"><a href="#CopyOnWrite-类" class="headerlink" title="CopyOnWrite 类"></a>CopyOnWrite 类</h2><p>CopyOnWrite类的容器使用修改时拷贝，在修改时开销比较大，适用于读多写少的场景</p><h2 id="Concurrent-类"><a href="#Concurrent-类" class="headerlink" title="Concurrent 类"></a>Concurrent 类</h2><p>内部使用CAS操作进行优化，一般可以提供比较高的吞吐量，性能相对较高</p><h3 id="弱一致性"><a href="#弱一致性" class="headerlink" title="弱一致性"></a>弱一致性</h3><h4 id="遍历时弱一致性"><a href="#遍历时弱一致性" class="headerlink" title="遍历时弱一致性"></a>遍历时弱一致性</h4><p>当利用迭代器进行遍历时，如果Concurrent容器发生修改，迭代出来的数据还是旧值。</p><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于非安全容器来讲，遍历时发生修改会利用 fail-fast 机制让遍历立刻失败，抛出 ConcurrentModificationException 异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoSafeCollectionMain</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 迭代次数应该设置得稍微大些, 保证在执行 forEach() 方法时还有线程没有加入到集合中, 这样才能正常显示错误</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ITER_COUNTS <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用非线程安全的集合类</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> threadNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ITER_COUNTS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                threadNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"thread-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 主线程的 threadNames 进行遍历时, 可能其它线程对 threadNames 这个集合进行修改, 此时报错 ConcurrentModificationException</span>        threadNames<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402141740586.png" alt="线程不安全的集合的fast-fail机制演示"></p><h4 id="求大小时弱一致性"><a href="#求大小时弱一致性" class="headerlink" title="求大小时弱一致性"></a>求大小时弱一致性</h4><p><code>size()</code> 获取的值未必准确，例如另一个线程对容器进行修改</p><h4 id="读取时弱一致性"><a href="#读取时弱一致性" class="headerlink" title="读取时弱一致性"></a>读取时弱一致性</h4><h3 id="使用-ConcurrentHashMap-进行-WordCount-案例"><a href="#使用-ConcurrentHashMap-进行-WordCount-案例" class="headerlink" title="使用 ConcurrentHashMap 进行 WordCount 案例"></a>使用 ConcurrentHashMap 进行 WordCount 案例</h3><ol><li><p>生成测试数据</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>OutputStreamWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMapMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALPHA <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> ALPHA<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            PrintWriter printWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                printWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"G:/java/juc/src/main/resources/words/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String collect <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i <span class="token operator">*</span> COUNT<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> COUNT<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            printWriter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注意这里的flush(), 否则生成的文件中没有数据</span>            printWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>正确地使用 ConcurrentHashMap</p><p>ConcurrentHashMap 相较于 synchronized 等锁的优势在于锁的粒度更细，可以提供更高的并发度，这是使用 ConcurrentHashMap 来替代 synchronized + HashMap 的原因。和 Redis 中通过 Lua 脚本来将多条非原子指令拼接成一条指令的操作类似，应该去寻找 ConcurrentHashMap 中是否提供某些方法，将多个方法拼接成一个原子方法。</p><p>ConcurrentHashMap 提供在多线程环境下还能够正常使用的集合（不需要显式加锁），搭配 CAS 操作的其他类型或方法才能够完成正确的并发控制。</p></li><li></li></ol><h3 id="多线程下扩容时的并发死链问题"><a href="#多线程下扩容时的并发死链问题" class="headerlink" title="多线程下扩容时的并发死链问题"></a>多线程下扩容时的并发死链问题</h3><h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><ol><li><p>JDK7 中的 HashMap 在遇到哈希冲突时，使用头插法。</p><p>这样可能会造成 e 节点两次被访问，第一次访问 e.next = null，第二次访问 e.next = next，而 next.next = e，则可能产生链表环路。</p></li></ol><h4 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h4><ol><li><p>需要在 JDK7 的环境下进行测试，因为 JDK7 时 HashMap 的拉链法是使用的头插法，而 JDK8 中使用的是尾插法。另外 JDK8 对于扩容机制和 hash 值的计算方法都发生的改变</p></li><li><p>测试代码</p><ul><li>找到扩容前和扩容后桶下标相同的key</li><li>触发扩容：元素个数达到阈值（总容量的3/4），初始容量是16</li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="3"><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanFactory接口与ApplicationContext接口功能介绍</title>
      <link href="/2023/03/16/spring-yuan-ma-jie-xi-01/"/>
      <url>/2023/03/16/spring-yuan-ma-jie-xi-01/</url>
      
        <content type="html"><![CDATA[<h1 id="BeanFactory-接口和-ApplicationContext-接口功能"><a href="#BeanFactory-接口和-ApplicationContext-接口功能" class="headerlink" title="BeanFactory 接口和 ApplicationContext 接口功能"></a>BeanFactory 接口和 ApplicationContext 接口功能</h1><h2 id="类关系结构"><a href="#类关系结构" class="headerlink" title="类关系结构"></a>类关系结构</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316120503562.png" alt="ApplicationContext接口和BeanFactory接口"></p><h2 id="BeanFactory-功能介绍"><a href="#BeanFactory-功能介绍" class="headerlink" title="BeanFactory 功能介绍"></a>BeanFactory 功能介绍</h2><p><code>BeanFactory</code> 是核心容器，负责管理 Bean 对象</p><ul><li><p>BeanFactory 接口的功能只有一个 <code>getBean()</code> 方法</p></li><li><p>BeanFactory 的实现类（<code>DefaultListableBeanFactory</code>）包含：<strong>控制反转、基本的依赖注入、Bean 生命周期的各种功能</strong>，不能只考虑接口功能</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultSingletonBeanRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableApplicationContext context <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplicationMain<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射方式来获取私有成员变量</span>        Field singletonObjectsField <span class="token operator">=</span> DefaultSingletonBeanRegistry<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"singletonObjects"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singletonObjectsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> singletonObjectsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 事先已经通过注解为Spring容器中注入两个以"component_"开头的组件, 这里过滤得到</span>        singletonObjects<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"component_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230402185349601.png" alt="断点调试获取默认实现类"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230316121640791.png" alt="BeanFactory接口的默认实现类"></p></li></ul><h2 id="ApplicationContext-功能介绍"><a href="#ApplicationContext-功能介绍" class="headerlink" title="ApplicationContext 功能介绍"></a>ApplicationContext 功能介绍</h2><ul><li><code>MessageSource</code>：国际化的能力</li><li><code>ResourcePatternResolve</code>：根据通配符去匹配文件资源（磁盘路径、类路径等）</li><li><code>ApplicationEventPublisher</code>：发布事件对象（ApplicationEvent）</li><li><code>EnvironmentCapable</code>：读取系统环境变量或配置文件中的信息</li></ul><h3 id="MessageSource-接口"><a href="#MessageSource-接口" class="headerlink" title="MessageSource 接口"></a>MessageSource 接口</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>提供了 <code>getMessage()</code> 方法，以实现国际化的能力</p><ol><li><p>需要准备各种不同语言的资源，例如 <code>messages_en.properties</code> 和 <code>messages_zh.properties</code> 文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">hi</span><span class="token punctuation">=</span><span class="token attr-value">Hello</span><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">hi</span><span class="token punctuation">=</span><span class="token attr-value">嗨</span><span class="token attr-name">user</span><span class="token punctuation">=</span><span class="token attr-value">用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>提供 <code>resource_en.properties</code> 和 <code>resource_zh.properties</code> 文件</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">username</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">username</span><span class="token punctuation">=</span><span class="token attr-value">用户名</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过调用 <code>getMessage()</code> 来获取资源</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DefaultSingletonBeanRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationMain</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableApplicationContext context <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplicationMain<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认情况下, 文件必须以"messages.properties"命名</span>        String hiZh <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        String hiEn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hiZh<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hiEn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 默认情况下会报错, 希望正常运行需要进行一些配置</span>        String usernameZh <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>        String passwordEn <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>ENGLISH<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"usernameZh = "</span> <span class="token operator">+</span> usernameZh<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"passwordEn = "</span> <span class="token operator">+</span> passwordEn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>额外对Spring配置文件 <code>application.properties</code> 进行修改</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span><span class="token attr-value">messages,resource</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><ol><li><p>找到自动配置类 <code>MessageSourceAutoConfiguration</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. 自动配置类标配@ConditionalOnMissingBean注解</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> AbstractApplicationContext<span class="token punctuation">.</span>MESSAGE_SOURCE_BEAN_NAME<span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. @Conditional注解, 在ResourceBundleCondition注入之后进行注入, 指定前置依赖项</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>ResourceBundleCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3. @EnableConfigurationProperties搭配@ConfigurationProperties使用</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> NO_RESOURCES <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. MessageSourceProperties配置类, 对应一些默认配置项</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.messages"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> MessageSourceProperties <span class="token function">messageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MessageSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span>MessageSourceProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setBasenames</span><span class="token punctuation">(</span>StringUtils                    <span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getBasename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setFallbackToSystemLocale</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isFallbackToSystemLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Duration cacheDuration <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getCacheDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheDuration <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            messageSource<span class="token punctuation">.</span><span class="token function">setCacheMillis</span><span class="token punctuation">(</span>cacheDuration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageSource<span class="token punctuation">.</span><span class="token function">setAlwaysUseMessageFormat</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isAlwaysUseMessageFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSource<span class="token punctuation">.</span><span class="token function">setUseCodeAsDefaultMessage</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">isUseCodeAsDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResourceBundleCondition</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootCondition</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> ConcurrentReferenceHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ConditionOutcome<span class="token operator">></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentReferenceHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ConditionOutcome <span class="token function">getMatchOutcome</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String basename <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.messages.basename"</span><span class="token punctuation">,</span> <span class="token string">"messages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConditionOutcome outcome <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>basename<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outcome <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                outcome <span class="token operator">=</span> <span class="token function">getMatchOutcomeForBasename</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> basename<span class="token punctuation">)</span><span class="token punctuation">;</span>                cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>basename<span class="token punctuation">,</span> outcome<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> outcome<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> ConditionOutcome <span class="token function">getMatchOutcomeForBasename</span><span class="token punctuation">(</span>ConditionContext context<span class="token punctuation">,</span> String basename<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConditionMessage<span class="token punctuation">.</span>Builder message <span class="token operator">=</span> ConditionMessage<span class="token punctuation">.</span><span class="token function">forCondition</span><span class="token punctuation">(</span><span class="token string">"ResourceBundle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span>basename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> <span class="token function">getResources</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">found</span><span class="token punctuation">(</span><span class="token string">"bundle"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">items</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ConditionOutcome<span class="token punctuation">.</span><span class="token function">noMatch</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">didNotFind</span><span class="token punctuation">(</span><span class="token string">"bundle with basename "</span> <span class="token operator">+</span> basename<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResources</span><span class="token punctuation">(</span>ClassLoader classLoader<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String target <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath*:"</span> <span class="token operator">+</span> target <span class="token operator">+</span> <span class="token string">".properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> NO_RESOURCES<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看配置文件类 <code>MessageSourceProperties</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里使用lombok注解对一些冗余代码进行修改</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageSourceProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn't contain a package qualifier (such as     * "org.mypackage"), it will be resolved from the classpath root.     */</span>    <span class="token keyword">private</span> String basename <span class="token operator">=</span> <span class="token string">"messages"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Message bundles encoding.     */</span>    <span class="token keyword">private</span> Charset encoding <span class="token operator">=</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Loaded resource bundle files cache duration. When not set, bundles are cached     * forever. If a duration suffix is not specified, seconds will be used.     */</span>    <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span>ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token keyword">private</span> Duration cacheDuration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether to fall back to the system Locale if no files for a specific Locale have     * been found. if this is turned off, the only fallback will be the default file (e.g.     * "messages.properties" for basename "messages").     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> fallbackToSystemLocale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether to always apply the MessageFormat rules, parsing even messages without     * arguments.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> alwaysUseMessageFormat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether to use the message code as the default message instead of throwing a     * "NoSuchMessageException". Recommended during development only.     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useCodeAsDefaultMessage <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>     public boolean isFallbackToSystemLocale() {         return this.fallbackToSystemLocale;     }     public boolean isAlwaysUseMessageFormat() {         return this.alwaysUseMessageFormat;     }     public boolean isUseCodeAsDefaultMessage() {         return this.useCodeAsDefaultMessage;     } } ```</code></pre><h3 id="ApplicationEventPublisher-接口"><a href="#ApplicationEventPublisher-接口" class="headerlink" title="ApplicationEventPublisher 接口"></a>ApplicationEventPublisher 接口</h3><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><ol><li><p>自定义一类事件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationEvent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// source代表事件源, 即谁发送的事件</span>    <span class="token keyword">public</span> <span class="token function">MyEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义一个或多个事件监听器（任意一个Spring组件即可）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>event<span class="token punctuation">.</span>MyEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 任意一个Spring组件都可以作为事件监听器</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyEventListenerComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法参数需要和监听的事件类型保持一致, 例如发送的事件类型是String.class, 那么方法参数中也应该是String.class</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStringEvent</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String Event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@EventListener</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMyEvent</span><span class="token punctuation">(</span>MyEvent myEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyClass Event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 ApplicationContext 中的功能进行事件发布</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ConfigurableApplicationContext<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationV5Main</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableApplicationContext context <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringApplicationV5Main<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token string">"Hello Event"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度优先搜索</title>
      <link href="/2023/03/15/shen-du-you-xian-sou-suo/"/>
      <url>/2023/03/15/shen-du-you-xian-sou-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵背景"><a href="#矩阵背景" class="headerlink" title="矩阵背景"></a>矩阵背景</h1><h2 id="面试题13-机器人的运动范围"><a href="#面试题13-机器人的运动范围" class="headerlink" title="面试题13. 机器人的运动范围"></a><a href="https://leetcode.cn/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/" target="_blank" rel="noopener">面试题13. 机器人的运动范围</a></h2><blockquote><p>  <strong>问题描述</strong>：</p><p>  地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。</p><p>  <strong>案例展示</strong>：</p><p>  例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。</p><p>  <strong>问题</strong>：</p><p>  请问该机器人能够到达多少个格子？</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">digSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">checkPosition</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> visited<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> visited<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标准化检查: 检查下标合法性和访问标志</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> m <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> n <span class="token operator">||</span> visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定制化检查: 根据题目要求确定, 行坐标和列坐标数位之和不大于k</span>        <span class="token keyword">return</span> <span class="token function">digSum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">digSum</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// dfs核心逻辑</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前遍历位置[i,j]的合法性检查</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">checkPosition</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 位置合法</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置访问标记</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 每次允许的运动策略: 上、下、左、右</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前位置允许访问, 结果值 + 1</span>        <span class="token keyword">return</span> <span class="token operator">++</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 入口函数, 从[0,0]位置开始即可, 可以不需要嵌套两层for循环从任意位置开始扫描, 这个取决于具体问题, 这里采用通用模板</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result <span class="token operator">+=</span> <span class="token function">movingCountDFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> visited<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="图背景"><a href="#图背景" class="headerlink" title="图背景"></a>图背景</h1><h2 id="207-课程表"><a href="#207-课程表" class="headerlink" title="207. 课程表"></a><a href="https://leetcode.cn/problems/course-schedule/" target="_blank" rel="noopener">207. 课程表</a></h2><blockquote><p>  <strong>问题描述</strong>：</p><p>  你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程  bi 。</p><p>  <strong>案例展示</strong>：</p><p>  例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。</p><p>  <strong>问题</strong>：</p><p>  请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。</p></blockquote><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><p>思路：</p><ul><li>邻接表 + 入度表 + BFS队列</li><li>依次 <strong>“删除”</strong> 入度为 0 的节点 </li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canFinish</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> indegrees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>numCourses<span class="token punctuation">]</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> adjs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numCourses<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            adjs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisite <span class="token operator">:</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>            indegrees<span class="token punctuation">[</span>prerequisite<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            adjs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prerequisite<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>prerequisite<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化队列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> indegrees<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>indegrees<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                numCourses<span class="token operator">--</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> adjNode <span class="token operator">:</span> adjs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>indegrees<span class="token punctuation">[</span>adjNode<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    numCourses<span class="token operator">--</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>adjNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numCourses <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>思路：</p><ul><li>三种遍历状态<ul><li>0：未遍历</li><li>1：正在遍历</li><li>-1：已遍历</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="210-课程表"><a href="#210-课程表" class="headerlink" title="210. 课程表"></a>210. 课程表</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> numCourses<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prerequisites<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度优先搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无锁并发</title>
      <link href="/2023/03/14/wu-suo-bing-fa/"/>
      <url>/2023/03/14/wu-suo-bing-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="无锁并发"><a href="#无锁并发" class="headerlink" title="无锁并发"></a>无锁并发</h1><h2 id="使用-CAS-代替锁"><a href="#使用-CAS-代替锁" class="headerlink" title="使用 CAS 代替锁"></a>使用 CAS 代替锁</h2><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadUnsafeAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ThreadUnsafeAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ThreadUnsafeAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SynchronizedAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicInteger balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CASAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CASAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> expect <span class="token operator">=</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> update <span class="token operator">=</span> expect <span class="token operator">-</span> amount<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// CAS操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ACCOUNT <span class="token operator">=</span> <span class="token number">20000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runDemo</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>Thread<span class="token operator">:</span><span class="token operator">:</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        threads<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>thread <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 主线程中调用每一个子线程的join()方法, 主线程等待每一个子线程运行结束</span>                thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getBalance() = "</span> <span class="token operator">+</span> account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cost times = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span> <span class="token operator">/</span> 1_000_000 <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadUnsafeAccount threadUnsafeAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadUnsafeAccount</span><span class="token punctuation">(</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            SynchronizedAccount synchronizedAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedAccount</span><span class="token punctuation">(</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            CASAccount casAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CASAccount</span><span class="token punctuation">(</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runDemo</span><span class="token punctuation">(</span>threadUnsafeAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runDemo</span><span class="token punctuation">(</span>synchronizedAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">runDemo</span><span class="token punctuation">(</span>casAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CAS-底层原理"><a href="#CAS-底层原理" class="headerlink" title="CAS 底层原理"></a>CAS 底层原理</h3><p>用当前线程获取到的值和共享变量的最新值进行比较，如果相同，则通过CAS原子操作进行设置。（最终一致性）</p><p>因此，CAS 需要搭配 volatile 关键字进行使用，而 AtomicInteger 类中的值 value 则是使用了 volatile 进行修饰。</p><h3 id="最终一致性（ABA问题）演示"><a href="#最终一致性（ABA问题）演示" class="headerlink" title="最终一致性（ABA问题）演示"></a>最终一致性（ABA问题）演示</h3><p><strong>线程无法感知到其它线程对共享变量的修改，在大多数情况下是没有影响的。但是如果希望判断是否有其他线程对该共享变量进行修改，那么需要额外使用版本号，即不仅比较值，而且比较版本号，每次更新版本号加1。</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABACAS</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicInteger num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> prev <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> prev <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> prev <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> next <span class="token operator">=</span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//主线程无法感知到这个1经历过1->0->1的变化, 只要满足最终一致性即可</span>        num<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num.get() = "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABACASV2</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// version版本号是int类型, 如果发生整数上溢该怎么办?</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicStampedReference<span class="token operator">&lt;</span>String<span class="token operator">></span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> version <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String prev <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String next <span class="token operator">=</span> <span class="token string">"HELLO"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> version<span class="token punctuation">,</span> version <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getReference() = "</span> <span class="token operator">+</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> version <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String prev <span class="token operator">=</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String next <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>reference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">,</span> version<span class="token punctuation">,</span> version <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getReference() = "</span> <span class="token operator">+</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".getReference() = "</span> <span class="token operator">+</span> reference<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AtomicXXX-工具类"><a href="#AtomicXXX-工具类" class="headerlink" title="AtomicXXX 工具类"></a>AtomicXXX 工具类</h2><h3 id="AtomicInteger-原子整数"><a href="#AtomicInteger-原子整数" class="headerlink" title="AtomicInteger 原子整数"></a>AtomicInteger 原子整数</h3><h3 id="AtomicReference-原子引用"><a href="#AtomicReference-原子引用" class="headerlink" title="AtomicReference 原子引用"></a>AtomicReference 原子引用</h3><h3 id="原子数组"><a href="#原子数组" class="headerlink" title="原子数组"></a>原子数组</h3><h3 id="AtomicReferenceFieldUpdater-字段更新器"><a href="#AtomicReferenceFieldUpdater-字段更新器" class="headerlink" title="AtomicReferenceFieldUpdater 字段更新器"></a>AtomicReferenceFieldUpdater 字段更新器</h3><ul><li>通过静态方法 <code>newUpdater()</code> 来创建字段更新器</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReferenceFieldUpdater<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CAS 相关工具类必须搭配 volatile 变量</span>    <span class="token keyword">volatile</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldUpdater</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AtomicReferenceFieldUpdater<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> String<span class="token operator">></span> studentNameUpdater <span class="token operator">=</span> AtomicReferenceFieldUpdater<span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                studentNameUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"thread-0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                studentNameUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student = "</span> <span class="token operator">+</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-Unsafe-类来模拟实现-AtomicInteger-原子整数类"><a href="#使用-Unsafe-类来模拟实现-AtomicInteger-原子整数类" class="headerlink" title="使用 Unsafe 类来模拟实现 AtomicInteger 原子整数类"></a>使用 Unsafe 类来模拟实现 AtomicInteger 原子整数类</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>SneakyThrows<span class="token punctuation">;</span><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFake</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe unsafe<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过反射获取unsafe对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里在JDK8之后可以直接通过Unsafe.getUnsafe()来获取Unsafe对象</span>            Field theUnsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            theUnsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> theUnsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>AtomicIntegerFake<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFake</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> prev<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 这些方法都必须通过unsafe对象直接进行调用, 而不能通过方法重用的思想调用当前类中的其它方法     *     * @param amount     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrease</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义的 AtomicIntegerFake 来替换掉原有的 AtomicInteger 来进行测试</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>cas<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicIntegerFake<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFakeAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicIntegerFake balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFakeAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">AtomicIntegerFakeAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerFake</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">int</span> balance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerFake</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        balance<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronized关键字详解</title>
      <link href="/2023/03/13/synchronized-guan-jian-zi-xiang-jie/"/>
      <url>/2023/03/13/synchronized-guan-jian-zi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Synchronized关键字详解"><a href="#Synchronized关键字详解" class="headerlink" title="Synchronized关键字详解"></a>Synchronized关键字详解</h1><h2 id="Monitor对象"><a href="#Monitor对象" class="headerlink" title="Monitor对象"></a>Monitor对象</h2><p>普通对象</p><h2 id="wait-和notify"><a href="#wait-和notify" class="headerlink" title="wait()和notify()"></a>wait()和notify()</h2><p>只有获取了锁的线程才能够调用 <code>wait()</code> 方法和 <code>notify()</code> 方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interrupt方法详解</title>
      <link href="/2023/03/13/interrupt-fang-fa-xiang-jie/"/>
      <url>/2023/03/13/interrupt-fang-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Interrupt方法详解"><a href="#Interrupt方法详解" class="headerlink" title="Interrupt方法详解"></a>Interrupt方法详解</h1><h2 id="Interrupt打断阻塞态线程"><a href="#Interrupt打断阻塞态线程" class="headerlink" title="Interrupt打断阻塞态线程"></a>Interrupt打断阻塞态线程</h2><blockquote><p>  打断阻塞态的线程会抛出异常，同时清空打断状态。该异常常用来作为唤醒手段</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptBlockedMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 目前看来, 打断标志在执行异常处理前就被重新设置为false. </span>                <span class="token comment" spellcheck="true">// 目前认为打断标志经历: false(初始值) -> true(主线程调用interrupt()方法) -> false(清空打断状态)</span>                <span class="token comment" spellcheck="true">// todo: 打断标志是否会进行更改? 如果实际上没有更改那么如何检测到被打断呢? 可能是直接抛出溢出, 根本没有修改打断标志</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为了确保threadA启动, 调用sleep()方法进入阻塞状态</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断threadA是否被打断</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> threadA<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Interrupt打断运行态线程"><a href="#Interrupt打断运行态线程" class="headerlink" title="Interrupt打断运行态线程"></a>Interrupt打断运行态线程</h2><blockquote><p>  打断标志可以认为是线程与线程之间的一个接口，主线程调用<code>interrupt()</code>是希望其他线程能够被打断，但实际的实现逻辑取决于其他线程的代码逻辑（由程序员编写）。即 <code>interrupted</code>打断标志并不能真正意义上的停止线程。</p></blockquote><h3 id="isInterrupted-方法不会清空打断标志"><a href="#isInterrupted-方法不会清空打断标志" class="headerlink" title="isInterrupted() 方法不会清空打断标志"></a>isInterrupted() 方法不会清空打断标志</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptRunningMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 线程被打断, 执行退出逻辑</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被打断, 退出!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// interrupted() 不会清空打断标志, 所以这里输出true</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> threadA<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313112652385.png" alt="isInterrupted()方法调用结果" style="zoom:150%;"><h3 id="interrupted-方法清空打断标志"><a href="#interrupted-方法清空打断标志" class="headerlink" title="interrupted() 方法清空打断标志"></a>interrupted() 方法清空打断标志</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptRunningMainWithCleanFlag</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 线程被打断, 执行退出逻辑</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被打断, 退出!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// interrupted() 会清空打断标志, 所以这里输出false</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里线程结束后打断标志重置为默认值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"threadA.isInterrupted() = "</span> <span class="token operator">+</span> threadA<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313112622230.png" alt="image-20230313112622230"></p><h2 id="两阶段终止模式"><a href="#两阶段终止模式" class="headerlink" title="两阶段终止模式"></a>两阶段终止模式</h2><h3 id="不合适的思路"><a href="#不合适的思路" class="headerlink" title="不合适的思路"></a>不合适的思路</h3><ul><li><p>使用<code>stop()</code>方法强制杀死线程</p><p>直接杀死占用锁的线程，会使得其无法释放锁，导致其他线程无法获取该锁</p></li><li><p>使用<code>System.exit()</code>方法退出整个程序</p><p>小题大做</p></li></ul><h3 id="使用interrupt实现优雅退出的两阶段终止模式"><a href="#使用interrupt实现优雅退出的两阶段终止模式" class="headerlink" title="使用interrupt实现优雅退出的两阶段终止模式"></a>使用interrupt实现优雅退出的两阶段终止模式</h3><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>例如监控程序，每隔一段时间执行一次，相比于上面的直接打断运行态线程的方式，两阶段终止模式由于使用了<code>sleep()</code>，所以对CPU的占用更小。监控进程每隔一段时间执行一次即可，不需要 <code>while(true)</code> 死循环重复不断地执行。</p><h4 id="两阶段的含义"><a href="#两阶段的含义" class="headerlink" title="两阶段的含义"></a>两阶段的含义</h4><ul><li>第一阶段：考虑线程被中断时处于运行态的情况</li><li>第二阶段：考虑线程被中断时处于阻塞态的情况</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TwoPhaseTermination</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> exitFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exitFlag <span class="token operator">||</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果被打断, 进行善后处理, 然后退出</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行善后处理工作, 优雅退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// threadA的处理逻辑</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"监控中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果没有被打断</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    exitFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 这里也可以不使用exitFlag变量来辅助判断, 再次执行interrupt()重新设置打断标志即可, 取消下面注释即可</span>                    <span class="token comment" spellcheck="true">// Thread.currentThread().interrupt();</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313110314610.png" alt="image-20230313110314610" style="zoom:150%;"><h2 id="interrupt打断park线程"><a href="#interrupt打断park线程" class="headerlink" title="interrupt打断park线程"></a>interrupt打断park线程</h2><blockquote><p>  <code>park()</code>是LockSupport类中的一个方法，作用也是阻塞线程，但其原理是通过判断打断标志<code>interrupted</code>：</p><ul><li>如果打断标志为false，那么会阻塞</li><li>如果打断标志为true，那么相当于没有效果</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>LockSupport<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptParkMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// interrupted打断标志为false, pack生效, unpack time cost接近10s(主线程sleep的时间)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpack time cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// interrupted打断标志为true, pack失效, unpack time cost接近0</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"######################################################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".isInterrupted() = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"park"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unpack time cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Join方法详解</title>
      <link href="/2023/03/13/join-fang-fa-xiang-jie/"/>
      <url>/2023/03/13/join-fang-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Join-方法详解"><a href="#Join-方法详解" class="headerlink" title="Join 方法详解"></a>Join 方法详解</h1><blockquote><p>  <code>join()</code> 用来等待一个线程的结束，是一种<strong>比较”暴力“的线程同步机制</strong>，必须等到一个线程结束后另一个线程才开始执行接下来的代码。</p><p>  同时，<code>join(3000)</code>指定最长等待时间，如果等待时间超过指定的最长等待时间，那么会直接执行下面的方法。</p></blockquote><h2 id="默认无限等待"><a href="#默认无限等待" class="headerlink" title="默认无限等待"></a>默认无限等待</h2><h3 id="测试案例1"><a href="#测试案例1" class="headerlink" title="测试案例1"></a>测试案例1</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin: "</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// threadA在sleep的时候, threadB也在sleep</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//-------假设threadA和threadB都已经出于running运行态阶段</span>            threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------此时threadA和threadB都已经睡眠1s</span>            threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------threadB再睡眠1s, 主线程便可以执行后面的逻辑</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end: "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果约等于2s</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run time cost is: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试案例2"><a href="#测试案例2" class="headerlink" title="测试案例2"></a>测试案例2</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin: "</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// threadA在sleep的时候, threadB也在sleep</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadA已经出于running运行态阶段</span>            threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------此时threadA已经睡眠1s, 主线程可以执行启动threadB的代码</span>            threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadB已经出于running运行态阶段</span>            threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------threadB睡眠2s, 主线程便可以执行后面的逻辑</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end: "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果约等于3s</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run time cost is: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>：<code>join()</code>方法执行后，如果不满足条件，则调用线程阻塞，不会执行 <code>join()</code> 方法后面的代码。</p><h2 id="指定最长等待时间"><a href="#指定最长等待时间" class="headerlink" title="指定最长等待时间"></a>指定最长等待时间</h2><blockquote><p>  <strong>最长等待时间并不是必须等待指定时间</strong>，而是如果在该指定时间内还没结束，则不再等待；如果在该指定时间内结束，也可以执行下面的流程。</p></blockquote><h3 id="测试案例3"><a href="#测试案例3" class="headerlink" title="测试案例3"></a>测试案例3</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程被唤醒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"begin: "</span> <span class="token operator">+</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// threadA在sleep的时候, threadB也在sleep</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadA已经出于running运行态阶段</span>            threadA<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------此时threadA已经睡眠1s, 主线程可以执行启动threadB的代码</span>            threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------假设threadB已经出于running运行态阶段</span>            threadB<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//-------threadB睡眠2s, join(3000)至多等待3s, 任一条件满足即可, 因此阻塞时间为: min(max_wait_time, thread_run_time);</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end: "</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出结果约等于3s</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run time cost is: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/2023/03/13/hexo/"/>
      <url>/2023/03/13/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo搭建个人博客"><a href="#hexo搭建个人博客" class="headerlink" title="hexo搭建个人博客"></a>hexo搭建个人博客</h1><h2 id="下载nodejs使用npm"><a href="#下载nodejs使用npm" class="headerlink" title="下载nodejs使用npm"></a>下载nodejs使用npm</h2><h2 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h2><p><strong>全局安装的作用是以后没有网络的时候也能建立工程</strong></p><ol><li><p>全局安装淘宝的cnpm, 方便加速</p><pre class="line-numbers language-shell"><code class="language-shell"> npm install -g cnpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>全局安装hexo</p><pre class="line-numbers language-shell"><code class="language-shell"> cnpm install -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="hexo使用流程"><a href="#hexo使用流程" class="headerlink" title="hexo使用流程"></a>hexo使用流程</h2><ol><li><p>在IDEA中新建工程<code>blogtest</code></p></li><li><p>打开命令行终端, 进入resources文件夹, 使用<code>hexo init</code>命令建立hexo项目. <strong>必须为空文件夹才能用来初始化hexo项目</strong></p><p> <img src="https://gitee.com/andewkarsa/pictures/raw/master/image-20220127041335213.png" alt="image-20220127041335213"></p></li><li><p>使用<code>hexo n</code>命令新建文章, 存放在生成的<code>source</code>-&gt;<code>_posts</code>文件夹下<br> <img src="https://gitee.com/andewkarsa/pictures/raw/master/image-20220126231641532.png" alt="image-20220126231641532"></p></li><li><p>使用<code>Typora</code>软件对文章进行修改后保存</p></li><li><p>使用<code>hexo g</code>命令对<code>_post</code>文件夹下的文章进行处理生成<code>html</code>文件, 以便放到网站上展示</p></li><li><p>使用<code>hexo s</code>命令启动项目进行本地预览</p></li><li><p>在github上新建仓库, 必须将其命名为:  <strong>&lt;用户名&gt;.github.io</strong> (不需要尖括号“&lt;”)</p></li><li><p>使用<code>cnpm install --save hexo-deployer-git</code>命令下载部署插件</p></li><li><p>修改<code>_config.yml</code>配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token comment" spellcheck="true"># Deployment</span> <span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span> <span class="token key atrule">deploy</span><span class="token punctuation">:</span>   <span class="token key atrule">type</span><span class="token punctuation">:</span> git   <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/&lt;用户名<span class="token punctuation">></span>/&lt;用户名<span class="token punctuation">></span>.github.io <span class="token comment" spellcheck="true">#如果部署到gitee上, 则将github该层gitee即可</span>   <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防止一些莫名奇妙的问题</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global http.sslVerify "false"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><ol start="11"><li><p>使用<code>hexo d</code>命令推送到远端</p></li><li><p>输入网址 <a href="https://yimeisuren.github.io" target="_blank" rel="noopener">https://yimeisuren.github.io</a> 对个人博客进行访问</p></li></ol><h2 id="修改博客主题"><a href="#修改博客主题" class="headerlink" title="修改博客主题"></a>修改博客主题</h2><ul><li><p>网上搜索hexo主题,找到github的地址, 并克隆到blog文件夹下. 下载慢速的情况下加入<code>.cnpmjs.org</code>后缀</p><pre class="line-numbers language-shell"><code class="language-shell">  git clone https://github.com.cnpmjs.org/next-theme/hexo-theme-next.git themes/next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="https://gitee.com/andewkarsa/pictures/raw/master/image-20220127001135016.png" alt="image-20220127001135016"></p><p>  其中<code>themes/next</code>为<code>blog</code>文件夹下的子文件夹</p></li><li><p>修改配置文件<code>_config.yml</code><br>  theme部分修改为</p><pre class="line-numbers language-yaml"><code class="language-yaml">  <span class="token key atrule">theme</span><span class="token punctuation">:</span> next <span class="token comment" spellcheck="true">#和文件夹保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="hexo操作"><a href="#hexo操作" class="headerlink" title="hexo操作"></a>hexo操作</h2><ol><li><p><strong>必须使用hexo n来新建文章, 否则文章的名字属于“无标题”</strong></p></li><li><p>在<code>hexo d</code>推送之前, 要先下载部署器</p></li></ol><pre class="line-numbers language-shell"><code class="language-shell">hexo clean#清楚public里面的文件(待推送的文件)hexo n#新建markdown文档hexo g#由source/_post中的文件生成public中的html文件hexo s#启动hexo服务hexo d #推送到github上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Volatile关键字</title>
      <link href="/2023/03/12/volatile-guan-jian-zi/"/>
      <url>/2023/03/12/volatile-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h1><p>Java 多线程需要解决三个问题：</p><ul><li><strong>原子性</strong>：保证指令不会受到线程上下文切换的影响</li><li><strong>可见性</strong>：保证指令不会受到 CPU 缓存的影响</li><li><strong>有序性</strong>：保证指令不会受到 CPU 指令重排序和 JIT 即时编译器的指令重排序的影响</li></ul><p>其中，<strong>原子性</strong>通过<code>synchronized</code>关键字（锁）来实现；而<strong>可见性</strong>和<strong>有序性</strong>则通过<code>volatile</code>关键字来实现（也可以通过<code>synchronized</code>来实现）。</p><h2 id="Java内存模型造成的可见性问题"><a href="#Java内存模型造成的可见性问题" class="headerlink" title="Java内存模型造成的可见性问题"></a>Java内存模型造成的可见性问题</h2><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230313002403327.png" alt="image-20230313002403327"></p><h2 id="指令重排序造成的有序性问题"><a href="#指令重排序造成的有序性问题" class="headerlink" title="指令重排序造成的有序性问题"></a>指令重排序造成的有序性问题</h2><h3 id="指令重排序现象"><a href="#指令重排序现象" class="headerlink" title="指令重排序现象"></a>指令重排序现象</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 没有相互依赖关系，可能发生指令重排序</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种情况下不会发生指令重排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="潜在问题演示"><a href="#潜在问题演示" class="headerlink" title="潜在问题演示"></a>潜在问题演示</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Volatile的实现原理"><a href="#Volatile的实现原理" class="headerlink" title="Volatile的实现原理"></a>Volatile的实现原理</h2><p>volatile 通过<strong>读写屏障</strong>来实现在多线程环境下共享变量的可见性和有序性。</p><h3 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h3><ul><li><strong>写屏障之前</strong>执行的代码，对共享变量的修改都会立即同步到主内存中（可见性保证之一）</li><li><strong>写屏障之前</strong>的代码不会发生重排序（有序性保证之一）</li></ul><h3 id="读屏障"><a href="#读屏障" class="headerlink" title="读屏障"></a>读屏障</h3><ul><li><strong>读屏障之后</strong>执行的代码，对共享变量的读取都必须从主内存中获取最新值，而不能使用工作内存中的缓存之（可见性保证之一）</li><li><strong>读屏障之后</strong>的代码不会发生重排序（有序性保证之一）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="双重检测锁机制的完善（DCL）"><a href="#双重检测锁机制的完善（DCL）" class="headerlink" title="双重检测锁机制的完善（DCL）"></a>双重检测锁机制的完善（DCL）</h2><h3 id="双重检测锁"><a href="#双重检测锁" class="headerlink" title="双重检测锁"></a>双重检测锁</h3><pre class="line-numbers language-java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类详解</title>
      <link href="/2023/03/12/string-lei-xiang-jie/"/>
      <url>/2023/03/12/string-lei-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>#String的基本特性</p><h2 id="String的不可变性"><a href="#String的不可变性" class="headerlink" title="String的不可变性"></a>String的不可变性</h2><pre class="line-numbers language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改s变量指向的字符串对象, 而不是改变原本的字符串对象</span>s <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过StringBuilder的append()方法来拼接, 然后改变s的指向</span>s <span class="token operator">+=</span> <span class="token string">"world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">exchange</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 将app.str作为实参传入, 相当于s和app.str指向同一个字符串对象</span>        <span class="token comment" spellcheck="true">// 2. s = "world" 是改变局部变量s的引用对象, 并没有对原本的引用对象"hello"产生影响</span>        s <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>        chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'w'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringMain app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>str<span class="token punctuation">,</span> app<span class="token punctuation">.</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206141304607.png" alt="image-20230206141304607" style="zoom:150%;"><h2 id="字符串常量池-String-Pool-中不会存储两个相同内容的字符串"><a href="#字符串常量池-String-Pool-中不会存储两个相同内容的字符串" class="headerlink" title="字符串常量池(String Pool)中不会存储两个相同内容的字符串"></a>字符串常量池(String Pool)中不会存储两个相同内容的字符串</h2><p>和Set的性质一样, 底层也是使用HashTable来实现的.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加断点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一次遇到字面量字符串, 会添加到字符串常量池中, 调试时字符串计数会增加.</span>        <span class="token comment" spellcheck="true">// 注意应该用运行完一行代码后的值来进行比较</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后面再次遇到相同的字符串, 就不会再次添加, 而是直接从常量池中获取, 此时字符串计数不再增加</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206151437938.png" alt="image-20230206151437938"></p><h1 id="String的内存分配"><a href="#String的内存分配" class="headerlink" title="String的内存分配"></a>String的内存分配</h1><p>8种基本数据类型和String类型提供了一个<strong>常量池</strong>. 常量池类似一个Java系统级别的缓存.</p><p>在Java8中字符串常量池在堆中.</p><pre class="line-numbers language-JAVA"><code class="language-JAVA">// 方式一: 通过双引号声明的String对象会直接存储在常量池中String s = "hello";// 方式二: 使用intern()方法添加到字符串常量池中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h1><ul><li>常量 + 常量 =&gt; 编译期优化 =&gt; 常量池</li><li>变量 + 常量(变量) =&gt; StringBuilder() =&gt; 堆</li></ul><blockquote><p>  StringBuilder类的toString()方法会通过new String()来在堆空间创建一个字符串</p></blockquote><h2 id="常量拼接"><a href="#常量拼接" class="headerlink" title="常量拼接"></a>常量拼接</h2><p>注意final修饰的量会在编译期优化, 相当于符号常量</p><h3 id="Java源代码"><a href="#Java源代码" class="headerlink" title="Java源代码"></a>Java源代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true. 由于编译期优化, 本质上String s1 = "abc";</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字节码反编译的Java代码"><a href="#字节码反编译的Java代码" class="headerlink" title="字节码反编译的Java代码"></a>字节码反编译的Java代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">StringMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class字节码"><a href="#class字节码" class="headerlink" title="class字节码"></a>class字节码</h3><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206155400962.png" alt="image-20230206155400962" style="zoom:150%;"><h2 id="变量拼接"><a href="#变量拼接" class="headerlink" title="变量拼接"></a>变量拼接</h2><p>只要拼接过程中出现变量, 那么就属于变量拼接</p><h3 id="Java源代码-1"><a href="#Java源代码-1" class="headerlink" title="Java源代码"></a>Java源代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 常量</span>        String s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 变量</span>        String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="class字节码-1"><a href="#class字节码-1" class="headerlink" title="class字节码"></a>class字节码</h3><p>注: 使用Java8</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206175146341.png" alt="image-20230206175146341"></p><h3 id="正确使用StringBuilder提高效率"><a href="#正确使用StringBuilder提高效率" class="headerlink" title="正确使用StringBuilder提高效率"></a>正确使用StringBuilder提高效率</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func01</span><span class="token punctuation">(</span><span class="token keyword">int</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每次拼接都会创建一个StringBuilder对象, 完成append()和toString()操作, 重复counts次</span>            <span class="token comment" spellcheck="true">// 每次toString()都会创建一个新的字符串</span>            <span class="token comment" spellcheck="true">// 过多的String对象和StringBuilder对象需要回收, 增加了垃圾回收的负担</span>            s <span class="token operator">+=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func02</span><span class="token punctuation">(</span><span class="token keyword">int</span> counts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只会创建一个StringBuilder()对象, 不会将每个中间临时结果都保存成一个字符串</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counts<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin<span class="token punctuation">;</span>        begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func01</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"func01: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        begin <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func02</span><span class="token punctuation">(</span>counts<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"func02: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 常量 + 常量</span>        String s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>        String s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 常量</span>        String s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 变量 + 变量</span>        String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="intern-与字符串常量池-重点图解"><a href="#intern-与字符串常量池-重点图解" class="headerlink" title="intern()与字符串常量池(重点图解)"></a>intern()与字符串常量池(重点图解)</h1><p>将堆中字符串放入到常量池中</p><ul><li>如果常量池中已经存在该字符串, 那么intern()会返回该字符串在常量池中的地址</li><li>如果常量池中不存在该字符串, 那么会在常量池中创建一个引用变量, 指向字符串已经在堆中分配的内存空间. 即放入常量池并不是在常量池中新开辟一片内存空间来保存这个字符串对象, 而是复用堆空间中已有的字符串对象.</li></ul><p><code>s.intern() == t.intern() &lt;=&gt; s.equals(t)</code></p><h2 id="字符串常量池中存在相同内容的字符串"><a href="#字符串常量池中存在相同内容的字符串" class="headerlink" title="字符串常量池中存在相同内容的字符串"></a>字符串常量池中存在相同内容的字符串</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// "abc"已经放入到字符串常量池中</span>        String sc <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (1)</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (2)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 因为常量池中已经有相同内容的字符串, 因此返回sc的值</span>        <span class="token comment" spellcheck="true">// 问: 这里如何快速判断s字符串是否出现在字符串常量池中呢? 通过挨个字符比较吗? 那样效率太低了吧. 通过hashCode可能会有hash冲突啊, 相同hashCode也不能说明两个字符串内容相同啊</span>        <span class="token comment" spellcheck="true">// 答: 通过equals()方法</span>        String intern <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (3)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206172929418.png" alt="image-20230206172929418" style="zoom:150%;"><h2 id="字符串常量池中不存在相同内容的字符串-易错"><a href="#字符串常量池中不存在相同内容的字符串-易错" class="headerlink" title="字符串常量池中不存在相同内容的字符串(易错)"></a>字符串常量池中不存在相同内容的字符串(易错)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// s指向是堆空间的一个字符串对象"abc", 因为是通过StringBuilder的toString()方法生成的字符串对象, 而toString()底层又是调用new String(char[], int, int), 所以"abc"以字符数组['a','b','c']的形式存在于StringBuilder对象的value属性中, 并不会将"abc"记录到字符串常量池中. 因此这里创建了一个s = "abc", 但是</span>        String s <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (1)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将s指向的字符串对象放入到字符串常量池中, 之后对于"abc"的引用都是引用s指向的字符串对象</span>        String intern <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (2)</span>        <span class="token comment" spellcheck="true">// sc一定指向字符串常量池中指向的字符串对象</span>        String sc <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> intern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20230206172652616.png" alt="image-20230206172652616" style="zoom:150%;"><h1 id="new-String-到底创建了多少个对象"><a href="#new-String-到底创建了多少个对象" class="headerlink" title="new String()到底创建了多少个对象"></a>new String()到底创建了多少个对象</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 字面量"x" =></span>        <span class="token comment" spellcheck="true">//      1.1. 如果字符串常量池中不存在"x", 那么会在堆空间中创建一个字符串对象"x"(假设地址为0x100), 并自动放入到字符串常量池中</span>        <span class="token comment" spellcheck="true">//      1.2. 如果字符串常量池中存在"x", 那么不会再次创建对象(说明之前已经创建过), 直接返回即可</span>        <span class="token comment" spellcheck="true">// 2. new String("x") => 堆空间中再创建一个字符串对象"x"(假设地址为0x200), 则s1 = 0x200</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建两个字符串对象</span>        String s2 <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 创建一个字符串对象, 并放入到字符串常量池中</span>        String s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 只创建一个字符串对象</span>        <span class="token comment" spellcheck="true">// 1. +                     => 创建一个StringBuilder对象</span>        <span class="token comment" spellcheck="true">// 2. 字面量"a"              => 创建一个字符串对象"a", 并放入常量池</span>        <span class="token comment" spellcheck="true">// 3. a = new String("a")   => 在堆空间中再次创建一个字符串对象"a"</span>        <span class="token comment" spellcheck="true">// 4. append(a)             => 添加到字符数组中 value = ['a',...]</span>        <span class="token comment" spellcheck="true">// 5. 字面量"b"              => 创建一个字符串对象"b", 并放入常量池</span>        <span class="token comment" spellcheck="true">// 6. b = new String("b")   => 在堆空间中再次创建一个字符串对象"b"</span>        <span class="token comment" spellcheck="true">// 7. append(b)             => 添加到字符数组中 value = ['a', 'b', ...]</span>        <span class="token comment" spellcheck="true">// 8. builder.toString()    => 底层调用new String(char[], int, int)再次创建一个字符串对象</span>        String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="什么时候会放入字符串常量池"><a href="#什么时候会放入字符串常量池" class="headerlink" title="什么时候会放入字符串常量池"></a>什么时候会放入字符串常量池</h1><p>结论: 显式地出现了字面量就会放入到常量池中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// new String("hello")时已经将"hello"放入到字符串常量池中, 而s1是在堆空间中的一个引用变量</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// intern()返回值和字面量都是从字符串常量池中获得, 因此是同一个对象</span>        String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s3 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "hello"和"world"作为字面量都保存在字符串常量池中, 但是"helloworld"并没有出现在字符串常量池中</span>        <span class="token comment" spellcheck="true">// 这里是通过StringBuilder的toString()方法, 底层是new String(char[] value, int begin, int offset), 所以此时和new String("helloworld")还是存在差距.</span>        <span class="token comment" spellcheck="true">// 通过chars[]方式生成的字符串, 并没有将该字符串放入到字符串常量池中, 因为使用的是字符数组.</span>        <span class="token comment" spellcheck="true">// 对于StringBuilder中的append(String str), 会先获取str的字符数组, 然后再追加</span>        String s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将"helloworld"通过intern()方法添加到字符串常量池中, 因为s4是第一个, 所以常量池中保存的实际上就是s4这个堆空间的字符串对象</span>        String s5 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s6 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="字节码指令附录"><a href="#字节码指令附录" class="headerlink" title="字节码指令附录"></a>字节码指令附录</h1><table><thead><tr><th>字节码指令</th><th>含义与解释</th></tr></thead><tbody><tr><td>ldc</td><td>从字符串常量池中加载数据</td></tr><tr><td>astore_3, astore 4</td><td>前者直接作为一条指令, 而后者是astore指令加上操作数4. <br>因为1,2,3常用, 所以将其直接作为整合到操作码中, 达到加速效果</td></tr><tr><td>dup</td><td>复制</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/03/suo/"/>
      <url>/2023/02/03/suo/</url>
      
        <content type="html"><![CDATA[<h1 id="锁的两种实现"><a href="#锁的两种实现" class="headerlink" title="锁的两种实现"></a>锁的两种实现</h1><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>可以多次加锁, 加锁几次就要解锁几次 </p><h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p>读写分离, 提高多线程的并发读的能力.</p><ul><li>不同线程: 读锁和写锁互斥, 写锁和写锁互斥.</li><li>同一线程: 支持锁降级, 不支持锁升级(写锁级别比读锁高, 获取到写锁后可以继续获取读锁, 但是反之则不行)</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 锁降级案例演示: 成功</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func01Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读写锁对象并没有实现Lock接口, 需要获取其内部的读锁对象或写锁对象</span>    ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock readLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock writeLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 锁升级案例演示: 失败</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func02Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ReadWriteLock readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock readLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Lock writeLock <span class="token operator">=</span> readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取读锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 申请写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 会阻塞在这里, 主线程获取到readLock后无法再获取writeLock</span>    writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : 获取写锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h1><p>非公平锁: 效率更高, 但可能某个线程饥饿</p><p>公平锁: 线程放入到一个阻塞队列中, 每次将锁分配给队首线程</p><p>默认情况是非公平锁.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 默认情况是非公平锁    </span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7316153563782823691L<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3000897897090466540L<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在队列中没有线程等待, 突然多个并发线程竞争一把锁的时候会导致多个线程同时进入到CAS操作, 可能造成不公平</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Read fields in reverse initialization order</span>    Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>     Node h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node s<span class="token punctuation">;</span>    <span class="token keyword">return</span> h <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>thread <span class="token operator">!=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h1><h1 id="AQS抽象队列同步器"><a href="#AQS抽象队列同步器" class="headerlink" title="AQS抽象队列同步器"></a>AQS抽象队列同步器</h1><h2 id="加锁过程"><a href="#加锁过程" class="headerlink" title="加锁过程"></a>加锁过程</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// tryAcquire(arg)->true: 成功获取锁, 直接返回</span>    <span class="token comment" spellcheck="true">// tryAcquire(arg)->false: 未能成功获取锁, 说明锁已经被其它线程占用, 进入阻塞队列acquireQueued()</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程放置到阻塞队列后, 中断当前线程, 等待被唤醒</span>        <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 公平锁的tryAcquire()重载方法</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// state属性表示上了几次锁, 如果一个线程上了3次锁, 则state属性值为3</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// c为0表示锁没有被任意一个线程占用</span>        <span class="token comment" spellcheck="true">// hasQueuedPredecessors()在并发的情况下可能多个线程都能判断成功, 相当于设置一道简单的门槛</span>        <span class="token comment" spellcheck="true">// CAS操作只会有一个线程能够成功, 通过第一道门槛筛选一部分线程, 减轻CAS的压力</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 此时成功进行CAS的那个唯一的线程获取到锁, 其它未能成功CAS的线程跳出if直接返回false</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前线程已经是锁的拥有者, 这是获取锁的线程又一次上锁, 也是为什么state会增加的原因</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加锁次数太多, 导致发生int上溢</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 公平锁只有在上面两种情况下才能够成功获取锁, 否则获取锁失败</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 非公平锁的tryAcquire()重载方法</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Thread current <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// overflow</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将当前线程封装成Node节点, 准备放入到阻塞队列末尾</span><span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将当前线程封装到为一个Node, 准备放入队列中</span>    Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 非首次入队可以不需要考虑初始化</span>    Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试通过CAS快速加入到队列中, 如果失败再通过enq()来加入队列</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 首次入队或CAS快速入队失败</span>    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 自旋入队, 这里面是一个死循环</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 非首次入队</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理CAS快速入队失败的情况, 并且这里面的CAS也可能再次失败, 因此使用死循环</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自旋机制的标志: 出现死循环(伪)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取前一个节点</span>            <span class="token keyword">final</span> Node p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果当前线程是队列中的第一个节点, 则会再次进行获取锁的操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果当前线程获取了锁, 那么当前节点出队列(相当于设置其为head)</span>                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// help GC</span>                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没有获取到锁或者不是队列中的第一个线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// pred是node的前驱节点, 一直重复尝试, 直到将pred的状态设置为SIGNAL才停止</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>Node pred<span class="token punctuation">,</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ws > 0 &lt;-> 获取锁的操作已经取消</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 找到第一个没有被取消的节点, 通过双向链表操作将中间的取消节点删除掉</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果获取锁的操作没有被取消, 则尝试设置其等待状态为SIGNAL(设置操作在此执行)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> Node<span class="token punctuation">.</span>SIGNAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// LockSupport是一个工具类, park()方法将线程挂起, 直到其它线程发送一个unpack()信号或者interrupt()中断信号</span>    LockSupport<span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解锁过程"><a href="#解锁过程" class="headerlink" title="解锁过程"></a>解锁过程</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/15/linux/shell/"/>
      <url>/2022/11/15/linux/shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><p>脚本以<code>#!/bin/bash</code>开头</p><h2 id="执行方式"><a href="#执行方式" class="headerlink" title="执行方式"></a>执行方式</h2><ul><li><p>直接使用文件名执行: 文件需要执行权限</p></li><li><p>以<code>bash xxx.sh</code>来执行, 本质上是bash解析器去执行, 文件作为一个输入, 因此可以不需要执行权限</p></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>系统变量</p><p>自定义变量</p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 定义一个变量username, 注意不能有多余的空格</span>username<span class="token operator">=</span>ROOT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115190919833.png" alt="image-20221115190919833"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># bash中变量默认类型都是字符串</span>x<span class="token operator">=</span>1+1<span class="token keyword">echo</span> <span class="token variable">$x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115191154660.png" alt="image-20221115191154660"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将变量提升为全局变量, 使得其他的shell程序可以使用</span><span class="token function">export</span> <span class="token operator">&lt;</span>变量名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><ul><li><code>$n</code>: 表示第 n 个参数, 其中 <code>$0</code> 表示文件名</li><li><code>$#</code>: 获取所有的输入参数的个数, 即 n 的值</li><li><code>$*</code>: 获取所有的输入参数, 将输入参数看作是一个整体(本质上: 将空格看作是参数的一个字符)</li><li><code>$@</code>: 获取所有的输入参数, 把每个参数区分对待</li><li><code>$?</code>: 判断上一条命令是否正确执行, <ul><li>如果返回值为0, 则说明上一条命令执行成功</li><li>返回值非0, 则说明上一条命令执行失败</li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul><li><p><code>expr &lt;表达式&gt;</code> </p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115192940200.png" alt="image-20221115192940200"></p></li><li><p><code>$[&lt;表达式&gt;]</code>(推荐)</p></li></ul><p><strong>执行表达式 <code>(3 + 2)  * 4</code> 的案例</strong></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115193228674.png" alt="image-20221115193228674"></p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115193534053.png" alt="image-20221115193534053"></p><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><code>[ &lt;条件判断&gt; ]</code>(注意前后需要方括号的前后需要添加空格)</p><ul><li><p>字符串比较</p><ul><li><code>-lt</code>: 小于</li><li><code>-le</code>: 小于等于</li><li><code>-gt</code>: 大于</li><li><code>-ge</code>: 大于等于</li><li><code>-eq</code>: 等于</li><li><code>-ne</code>: 不等于</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115205901218.png" alt="image-20221115205901218"></p></li><li><p>按照文件权限进行判断</p><ul><li><code>-r</code>: 有读权限</li><li><code>-w</code>: 写权限</li><li><code>-x</code>: 执行权限</li></ul></li><li><p>按照文件类型进行判断</p><ul><li><code>-e</code>: 文件存在</li><li><code>-f</code>: 文件存在, 且是一个普通文件</li><li><code>-d</code>: 文件存在, 且是一个目录文件</li></ul><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115210442059.png" alt="image-20221115210442059"></p></li></ul><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if分支"><a href="#if分支" class="headerlink" title="if分支"></a>if分支</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>条件判断表达式<span class="token operator">></span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token comment" spellcheck="true"># if分支</span><span class="token keyword">elif</span>    <span class="token comment" spellcheck="true"># else分支</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">case</span> <span class="token operator">&lt;</span>变量引用<span class="token operator">></span> <span class="token keyword">in</span>    <span class="token operator">&lt;</span>情况一<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分支一, 必须要加")"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>情况二<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分支二</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 默认分支, 相当于default</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span> <span class="token operator">&lt;</span>初始值<span class="token operator">></span><span class="token punctuation">;</span>循环控制条件<span class="token punctuation">;</span>变量变化 <span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token comment" spellcheck="true"># 程序主体</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 计算1到100的累和</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>sum<span class="token operator">=</span>0<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token comment" spellcheck="true"># 不支持+=的方式, 其中$[]表示运算表达式</span>    sum<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span> + <span class="token variable">$i</span><span class="token punctuation">]</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token variable">$sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 打印所有的输入参数 (比较 $* 和 $@)</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$*</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span class="token keyword">echo</span> <span class="token string">"==========================分隔符测试======================="</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115213545543.png" alt="image-20221115213545543"></p><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>sum<span class="token operator">=</span>0i<span class="token operator">=</span>0<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -le 100 <span class="token punctuation">]</span><span class="token keyword">do</span>    sum<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$sum</span> + <span class="token variable">$i</span><span class="token punctuation">]</span>    i<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$i</span> + 1<span class="token punctuation">]</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="read读取控制台输入"><a href="#read读取控制台输入" class="headerlink" title="read读取控制台输入"></a>read读取控制台输入</h2><p>相当于读取一个输入变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>second<span class="token operator">=</span>7<span class="token function">read</span> -t <span class="token variable">$second</span> -p <span class="token string">"提示信息: 请在 <span class="token variable">$second</span> 秒内输入 name 的值. "</span> name<span class="token keyword">echo</span> <span class="token string">"您输入的 name 的值为: <span class="token variable">$name</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取最后一个"/"后面的字符串</span><span class="token function">basename</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span><span class="token comment" spellcheck="true"># 获取最后一个"/"前面的字符串</span><span class="token function">dirname</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 获取当前文件夹所在的 basename 和 dirname</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 反引号表示其中的字符串当作bash命令进行执行</span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">dirname</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">basename</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><blockquote><p>函数不可以写形参, 只能通过 <code>$1</code>, <code>$2</code> 这种形式来获取传入函数的值</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 注意: 函数不能写形参列表, 因此()内部必须是空, 甚至也可以不写()</span><span class="token keyword">function</span> <span class="token operator">&lt;</span>函数名<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 函数主体, 可以有返回值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>案例应用: 计算两个输入值的和</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># 定义add()函数</span><span class="token keyword">function</span> add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 传入两个值, 将其相加</span>    result<span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$1</span> + <span class="token variable">$2</span><span class="token punctuation">]</span>    <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 准备工作, 读取数据</span><span class="token function">read</span> -p <span class="token string">"请输入x的值: "</span> x<span class="token function">read</span> -p <span class="token string">"请输入y的值: "</span> y<span class="token comment" spellcheck="true"># 调用add()函数</span>add <span class="token variable">$x</span> <span class="token variable">$y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shell工具-重点"><a href="#shell工具-重点" class="headerlink" title="shell工具 (重点)"></a>shell工具 (重点)</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p><code>cut [选项参数] &lt;文件路径&gt;</code></p><ul><li><p><code>-f</code>: 指定提取第几列</p><ul><li><code>-f 3</code>: 表示获取第3列</li><li><code>-f 3-</code>: 表示获取第3列及其之后的数据的原始结果</li><li><code>-f -3</code>: 表示获取第3列及其之前的数据的原始结果</li><li><code>-f m-n</code>: 表示获取从第m列到第n列的数据的原始结果</li></ul></li><li><p><code>-d</code>: 指定分隔符, 默认分隔符是制表符</p></li></ul><blockquote><p>注意cut并不能使用正则表达式的功能, 只能生硬的格式匹配</p><p><strong>可以和grep搭配使用, 先进行一些数据的过滤, 然后在进行切分</strong> </p></blockquote><h3 id="sed-文件处理工具"><a href="#sed-文件处理工具" class="headerlink" title="sed (文件处理工具)"></a>sed (文件处理工具)</h3><p>按行处理文件, 并将处理结果发送到控制台上, 源文件的内容默认并不会发生改变, 除非将输出结果重定向到源文件中</p><p><strong>案例应用</strong></p><ul><li><p>将“hello world”插入到指定文件的第 2 行下面</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 2: 表示第2行</span><span class="token comment" spellcheck="true"># a: 表示插入模式</span><span class="token function">sed</span> <span class="token string">"2a hello world"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115224708586.png" alt="image-20221115224708586"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用 -i 选项可以将输出流重定向到源文件中, 因此控制台不会产生输出, 并且源文件发生修改</span><span class="token function">sed</span> -i <span class="token string">"2a hello world"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115224806343.png" alt="image-20221115224806343"></p></li><li><p>删除指定文件中包含“hello”的行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># /hello/: 表示"hello"字符串, 注意用两个斜杠包围起指定的字符串</span><span class="token comment" spellcheck="true"># d: 表示删除模式</span><span class="token function">sed</span> <span class="token string">"/hello/d"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115225519505.png" alt="image-20221115225519505"></p></li><li><p>替换指定文件中的“2”为 “7”</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># s: 表示替换模式</span><span class="token comment" spellcheck="true"># g: 全局替换, 默认情况下只替换第一次出现的</span><span class="token function">sed</span> <span class="token string">"s/2/7/"</span> data.txt<span class="token function">sed</span> <span class="token string">"s/2/7/g"</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221115225627374.png" alt="image-20221115225627374"></p></li></ul><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>格式: <code>awk [选项参数] &#39;&lt;命令1&gt; &lt;命令2&gt; &lt;...&gt;&#39; &lt;文件名&gt;</code></p><ul><li><p><code>-F</code>: 指定输入文件的分隔符, 默认是空格</p></li><li><p><code>-v</code>: 可以定义一个变量并为其赋值, 之后在动作中可以使用该变量, 例如<code>-v i=1</code>定义了一个变量i, 其值为1</p><blockquote><p>内置变量, 可以直接在动作中使用</p><ul><li>FILENAME: 文件名</li><li>NR: 已读的记录数(模式匹配时光标所处的行号)</li><li>NF: 浏览记录的域的个数(即切割后, 列的个数)</li></ul></blockquote></li><li><p><code>&lt;命令&gt;</code>: <strong>命令由模式匹配+动作组成</strong>, 模式匹配中可以使用正则表达式</p></li></ul><p><strong>案例应用</strong></p><ul><li><p>搜索 passwd 文件中以root开头的所有行, 并输出该行的第1列和第7列</p><ol><li><p>原始文件</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117230936698.png" alt="image-20221117230936698"></p></li><li><p>代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从原始文件可以看作, 使用":"进行分隔</span><span class="token comment" spellcheck="true"># 1. 使用 -F : 来指定使用":"进行分割</span><span class="token comment" spellcheck="true"># 2. /^root/ 表示模式匹配部分, 两个"/"之间的内容是正则表达式, ^root表示以root开头</span><span class="token comment" spellcheck="true"># 3. {} 中包含着要执行的动作, $1和$7分别表示分割后的第1列和第7列, </span><span class="token comment" spellcheck="true"># 4. 特别原始的字符串拼接 $1","$7 = $1 + "," + $7</span><span class="token comment" spellcheck="true"># 5. 只有匹配了^root的行, 才会执行后面的{}中的动作</span><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'/^root/{print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><ol start="3"><li><p>效果展示</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117231508062.png" alt="image-20221117231508062"></p></li></ol><ul><li><p>只显示passwd文件的第1列和第7列, 以逗号分隔, 并且在所有行的前面添加一个列名, 在所有行的末尾新添加一行数据</p><blockquote><p>多个需求的应用展示</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> -F <span class="token keyword">:</span> <span class="token string">'BEGIN{print "user,filepath"} END{print "hello,world"} {print <span class="token variable">$1</span>","<span class="token variable">$7</span>}'</span> <span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117232901864.png" alt="image-20221117232901864"></p></li><li><p>读取空行所在的全部行号</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117234009845.png" alt="image-20221117234009845"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 正则表达式^$表示空行</span><span class="token comment" spellcheck="true"># NR表示当前读取到的光标的位置, 用来输出行号</span><span class="token function">awk</span> <span class="token string">'/^$/{print NR}'</span> data.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117234059968.png" alt="image-20221117234059968"></p></li></ul><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>排序不改变源文件, 除非重定向</p><ul><li><code>-n</code>: 按数值大小进行排序</li><li><code>-r</code>: 逆序排序</li><li><code>-t</code>: 设置排序时所用的分隔符</li><li><code>-k</code>: 指定按哪一列进行排序</li></ul><p><strong>案例应用</strong></p><ol><li><p>数据文件</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117235129641.png" alt="image-20221117235129641"></p></li><li><p>按<code>:</code>进行分隔, 按切分后的第3列进行逆序排序</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> -t <span class="token keyword">:</span> -n -r -k 3 sort.data<span class="token comment" spellcheck="true"># 没有带输入参数的选项可以合并, 因此可以简写为</span><span class="token function">sort</span> -t <span class="token keyword">:</span> -nrk 3 sort.data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221117235358379.png" alt="image-20221117235358379"></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/next-zhu-ti-cai-keng-you-hua/"/>
      <url>/2022/11/11/next-zhu-ti-cai-keng-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="Next主题踩坑优化"><a href="#Next主题踩坑优化" class="headerlink" title="Next主题踩坑优化"></a>Next主题踩坑优化</h1><p>对于Typora上编辑的markdown文档, 直接使用Next主题会有导致一些问题: </p><ul><li>Latex公式不能够正常显示</li><li>mermaid绘制的图形不能够正常显示</li><li>高亮效果不能够正常显示</li></ul><p><strong>术语</strong></p><ul><li>站点配置文件<em>config.yml</em></li><li>主题配置文件<em>themes/next/config.yml</em></li></ul><h2 id="Latex公式显示异常"><a href="#Latex公式显示异常" class="headerlink" title="Latex公式显示异常"></a>Latex公式显示异常</h2><ol><li><p>更换hexo默认的markdown渲染引擎</p><pre class="line-numbers language-shell"><code class="language-shell">npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hexo-renderer-kramed引擎解决了一些问题, 但是并没有完全解决</p></li><li><p>取消一些转义<br>对文件<code>node_modules\kramed\lib\rules\inline.js</code>进行修改</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//escape: /^\\([\\`*{}\[\]()#$+\-.!_>])/,</span>escape<span class="token punctuation">:</span> <span class="token regex">/^\\([`*\[\]()#$+\-.!_>])/</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//取消了对\,{,}的转义</span><span class="token comment" spellcheck="true">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span>em<span class="token punctuation">:</span> <span class="token regex">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><span class="token punctuation">,</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 Next 主题中开启 MathJax 开关<br>对主题配置文件<code>themes/next/config.yml</code>进行修改</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Math Equations Render Support</span><span class="token key atrule">math</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#由false改为true</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在文章的Front-matter里打开mathjax开关<br>使用hexo new命令生成的markdown文件的开头部分</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: index.htmldate: 2018-07-05 12:01:30tags:<span class="token title important">mathjax: true<span class="token punctuation">--</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="mermaid图形显示异常"><a href="#mermaid图形显示异常" class="headerlink" title="mermaid图形显示异常"></a>mermaid图形显示异常</h2><ol><li><p>添加对于mermaid的支持</p><pre class="line-numbers language-shell"><code class="language-shell">npm install --save hexo-filter-mermaid-diagrams<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在主题配置文件<code>/themes/next/_config.yml</code>中启用mermaid模块</p><pre class="line-numbers language-yaml"><code class="language-yaml"> <span class="token comment" spellcheck="true">#Mermaid tag</span><span class="token key atrule">mermaid</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># Available themes: default | dark | forest | neutral</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> forest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="高亮效果显示异常"><a href="#高亮效果显示异常" class="headerlink" title="高亮效果显示异常"></a>高亮效果显示异常</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/pei-zhi-ruan-jian-cang-ku/"/>
      <url>/2022/11/11/linux/pei-zhi-ruan-jian-cang-ku/</url>
      
        <content type="html"><![CDATA[<p><u>操作步骤</u></p><ol><li><p>进入<code>/etc/yum.repos.d</code>目录中（因为该目录存放着软件仓库的配置文件）</p></li><li><p>创建一个后缀为<code>.repo</code>的配置文件, 例如<code>yumCentos7.repo</code></p></li><li><p><code>yumCentos7.repo</code>配置文件的各个配置项如下</p><pre class="line-numbers language-repo"><code class="language-repo">[BaseOS]name=BaseOSbaseurl=file:///media/cdrom/BaseOSenabled=1gpgcheck=0[AppStream]name=AppStreambaseurl=file:///media/cdrom/AppStreamenabled=1gpgcheck=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="4"><li><p>按配置参数中所填写的仓库位置挂载光盘, 并把光盘挂载信息写入到<code>/etc/fstab</code>文件中</p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/linux-jiu-gai-zhe-me-xue/"/>
      <url>/2022/11/11/linux/linux-jiu-gai-zhe-me-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="开源软件发展"><a href="#开源软件发展" class="headerlink" title="开源软件发展"></a>开源软件发展<a name="1"></a></h1><blockquote><p> <strong>章节目录</strong></p><ul><li><a href="#1-1">开源协议</a></li><li><a href="#1-2">开源软件的盈利模式</a></li><li><a href="#1-3">开源软件的优势</a></li><li><a href="#1-4">Linux系统的发展</a></li><li><a href="#1-5">常见的Linux系统版本</a></li></ul></blockquote><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议<a name="1-1"></a></h2><p>从<u>GPL</u>到<u>MIT</u>的许可证协议越来越自由.</p><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE.svg" alt></p><h2 id="开源软件的盈利模式"><a href="#开源软件的盈利模式" class="headerlink" title="开源软件的盈利模式"></a>开源软件的盈利模式<a name="1-2"></a></h2><ul><li><p><u>多条产品线</u></p><p>如MySQL数据库便有个人版和企业版两种产品，个人版完全免费起到推广作用，企业版销售授权许可盈利。</p></li><li><p><u>技术服务型</u>，</p><p>JBoss应用服务器便是典型代表，软件可自由免费使用，通过技术文档、培训课程以及定制开发服务来盈利。</p></li><li><p><u>软硬件结合</u></p><p>IBM公司在出售服务器时，一般会为用户捆绑销售AIX或Linux系统来确保硬件设施的盈利。</p></li><li><p><u>技术出版物</u></p><p>O’Reilly即是一家开源公司，也是一家出版商，诸多优秀书籍便是由此产生。</p></li><li><p><u>品牌和口碑</u></p></li></ul><h2 id="开源软件的优势"><a href="#开源软件的优势" class="headerlink" title="开源软件的优势"></a>开源软件的优势<a name="1-3"></a></h2><ul><li><p><u>低风险</u></p><p>使用闭源软件无疑在把命运交付给他人，一旦封闭的源代码没有人来维护，你将进退维谷，而相较于商业软件公司，开源社区则很少存在倒闭的问题。并且源代码一旦公布于世，任何人或组织都可以接替上任进行未来新的维护工作。</p></li><li><p><u>高品质</u></p><p>相较于闭源软件产品，开源项目通常是由开源社区来研发及维护的，参与编写、维护、测试的用户量众多，一般的ug还没有等爆发就已经被修补。另外在灵感不断碰撞、代码不断迭代的交流氛围中，不会有程序员将”半成品”上传到开源社区中的。</p></li><li><p><u>低成本</u></p><p>开源工作者大多都是在幕后默默且无偿地付出劳动成果，为美好的世界贡献一份力量，因此使用开源社区推动的软件项目可以节省大量的人力、物力和财力。</p></li><li><p><u>更透明</u></p><p>没有哪个笨蛋会把木马或后门代码放到开源项目中的，这样无疑是把自己的罪行暴露在阳光之下，一眼就能被发现。</p></li></ul><h2 id="Linux系统的发展"><a href="#Linux系统的发展" class="headerlink" title="Linux系统的发展"></a>Linux系统的发展<a name="1-4"></a></h2><ol><li>Bell实验室, 通用电气公司, MIT决定联手打造一款操作系统<u>MULTICS</u></li><li>MULTICS的开发并不顺利, 其中一位开发人员Ken Thompson使用汇编语言编写出一款新的系统内核<u>UNICS</u></li><li>C语言之父Dennis M.Ritchie考虑到汇编语言的跨平台性很差, 因此使用C语言重新编写一遍UNICS系统, 即<u>UNIX系统</u></li><li>贝尔实验室的公司AT&amp;T收回UNIX的版权, 逐步限制了UNIX系统源代码的自由传播</li><li>Richard Stallman发起<u>GNU源代码开放计划</u>并制定了<u>GPL许可证</u>, 在和社区成员的共同履历下编写出了一款能够运行C语言代码的编译器<u>gcc(GNU C Compiler)</u></li><li>荷兰教授仿照UNIX系统编写出一款<u>Minix操作系统</u>, 用于课堂教学</li><li>Linus Torvalds使用bash解释器和gcc编译器编写了一个全新的<u>系统内核Linux</u></li><li>红帽公司创始人Bob Young在Linux系统内核的基础之上, 集成了众多常用源代码和程序软件, 发布RedHat操作系统并开始出售技术服务, 推动了Linux系统的普及.</li><li>IBM和Intel为首的多家IT巨头开始大力推动开源软件的发展. 红帽公司也成为了世界上第一家年收入10亿美元的开源公司.</li></ol><h2 id="常见的Linux系统版本"><a href="#常见的Linux系统版本" class="headerlink" title="常见的Linux系统版本"></a>常见的Linux系统版本<a name="1-5"></a></h2><ul><li><p><u>红帽企业版系统(RHEL, RedHatEntrepriseLinux)</u></p><p>极强的稳定性</p></li><li><p><u>CentOS(Community Enterprise Operation System)</u></p><p>免费, 将RHEL中的付费功能去掉之后的版本</p></li><li><p><u>Fedora</u></p><p>桌面版本系统, 类似于Windows10, 是<u>RHEL系统的试验田</u>, 一些新功能新特性会放到该系统中进行测试, 技术成熟之后才移植到RHEL系统中</p></li><li><p><u>Debian</u></p><p>非红帽公司出品, 使用<code>apt</code>作为包管理工具</p></li><li><p><u>Ubuntu</u></p><p>桌面版本系统, 基于Debian系统, 修改衍生而来</p></li><li><p><u>Kali Linux</u></p><p>一般是被黑客或安全人员使用, 能够对网站进行渗透测试, 即“<u>攻击网站</u>”</p></li></ul><h1 id="动手部署一台Linux操作系统"><a href="#动手部署一台Linux操作系统" class="headerlink" title="动手部署一台Linux操作系统"></a>动手部署一台Linux操作系统</h1><blockquote><p><strong>章节目录</strong></p><ul><li><a href="#2-1">安装并配置VM虚拟机</a></li><li><a href="#2-2">安装Linux系统</a></li><li><a href="#2-3">Linux系统中安装软件</a></li><li><a href="#2-4">系统初始化进程</a></li><li><a href="#2-5">重置root用户密码</a></li></ul></blockquote><h2 id="安装并配置VM虚拟机"><a href="#安装并配置VM虚拟机" class="headerlink" title="安装并配置VM虚拟机"></a>安装并配置VM虚拟机<a name="2-1"></a></h2><p><u>三种模式</u></p><ul><li><p>桥接模式</p><p>虚拟机可以通过物理主机的网卡访问外部网络, 占用物理IP地址, 主机数过多时可能存在IP冲突</p></li><li><p>NAT模式</p><p>VM虚拟机中的网络服务相当于路由器的作用, 虚拟机可以访问外网, 对应的网卡为VMnet8</p></li><li><p>仅主机模式</p><p>不能访问外网, 对应的网卡为VMnet1</p></li></ul><h2 id="安装Linux系统"><a href="#安装Linux系统" class="headerlink" title="安装Linux系统"></a>安装Linux系统<a name="2-2"></a></h2><p>安装RHEL8或CentOS8系统时，物理电脑的CPU需要支持虚拟化技术(Virtualization Technology), 简称VT。</p><p>VT技术是一种能够让单台计算机分割出多个独立资源区，并让每个资源区按照需要模拟出系统的一项技术，其本质就是通过中间层实现计算机资源的管理和再分配，让系统资源的利用率最大化。</p><p>VT虚拟化大多数情况下时默认开启的, 万一没有开启, 则在开机时进入到BIOS面板中进行开启.</p><h2 id="Linux系统中安装软件"><a href="#Linux系统中安装软件" class="headerlink" title="Linux系统中安装软件"></a>Linux系统中安装软件<a name="2-3"></a></h2><p>在RPM（红帽软件包管理器）公布之前，要想在Linux系统中安装软件只能采取编译源码包的方式，所以早期安装软件是一件非常困难、耗费耐心的事情，而且大多数的服务程序仅仅提供自身的源代码，还需要运维人员编译代码后自行解决软件之间的依赖关系。因此要安装好一个服务程序，运维人员不仅需要具备丰富的知识、高超的技能，还要有良好的耐心，这其中的艰辛我们会在本书第20章节为读者们实战演练一遍。</p><p>总而言之，早期Linux系统在安装、升级、卸载服务程序时还要考虑到其他程序、库的依赖关系，所以在进行校验、安装、卸载、查<br>询、升级等管理软件操作时难度都非常大，RPM机制则正是为了解决这些问题而设计的。</p><p>通过RPM安装的服务程序会像Windows系统中的控制面板那样，建立统一的数据库，详细记录软件信息并能够自动分析依赖关系。</p><h1 id="Linux系统中必须掌握的常用命令"><a href="#Linux系统中必须掌握的常用命令" class="headerlink" title="Linux系统中必须掌握的常用命令"></a>Linux系统中必须掌握的常用命令</h1><p>在输入命令之前就已经存在的那部分内容, 例如<code>[root@hadoop100 ~]#</code>称为<u>终端提示符</u>. </p><p>终端提示符用于提示一些基本信息, <code>#</code>结尾代表管理员身份, <code>?</code>结尾代表普通用户身份.</p><h2 id="帮助文档man的使用"><a href="#帮助文档man的使用" class="headerlink" title="帮助文档man的使用"></a>帮助文档<code>man</code>的使用</h2><center>man命令中常用按键及其作用</center><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td><code>空格键/Pagedown</code></td><td>向下翻页</td></tr><tr><td><code>Pageup</code></td><td>向上翻页</td></tr><tr><td><code>home</code></td><td>跳转首页</td></tr><tr><td><code>end</code></td><td>跳转尾页</td></tr><tr><td><code>/</code></td><td>从上到下搜索某个关键字, 例如<code>/linux</code></td></tr><tr><td><code>?</code></td><td>从下到上搜索某个关键字, 例如<code>?linux</code></td></tr><tr><td><code>n</code></td><td>搭配搜索功能使用, 定位到下一个关键字</td></tr><tr><td><code>N</code></td><td>搭配搜索功能使用, 定位到上一个关键字</td></tr><tr><td><code>q</code></td><td>退出</td></tr></tbody></table><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a><code>echo</code>命令</h2><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>作用</td><td><code>echo</code>命令用于<u>在终端设备上输出字符串或变量提取后的值</u></td></tr><tr><td>语法格式</td><td><code>echo &lt;字符串&gt;</code>或者<code>echo &lt;$变量名&gt;</code><br><code>$</code>表示取变量的实际值</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $SHELL</span>/bin/bash<span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo SHELL</span>SHELL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a><code>date</code>命令</h2><h1 id="管道符-重定向与环境变量"><a href="#管道符-重定向与环境变量" class="headerlink" title="管道符, 重定向与环境变量"></a>管道符, 重定向与环境变量</h1><blockquote><ul><li><a href="#4-1">输入输出重定向</a></li><li><a href="#4-2">管道命令符</a></li><li><a href="#4-3">命令行的通配符</a></li><li><a href="#4-4">常用的转义字符</a></li><li><a href="#4-5">重要的环境变量</a></li></ul></blockquote><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向<a name="4-1"></a></h2><p><u>输入重定向</u>是指从指定文件中读取输入数据, 而<u>输出重定向</u>是指把原本要输出到屏幕的数据信息写入到指定文件中.</p><p>输出重定向的使用频率更高, 又将其分为<u>标准输出重定向</u>和<u>错误输出重定向</u>两种不同的技术, 以及<u>清空写入</u>和<u>追加写入</u>两种模式.</p><p>三种输入输出重定向技术:</p><ul><li><p>标准输入重定向(STDIN, 文件描述符为0): 默认从键盘输入, 也可以从其他文件或命令中输入</p></li><li><p>标准输出重定向(STDOUT, 文件描述符为1): 默认输出到屏幕</p></li><li><p>错误输出重定向(STDERR, 文件描述符为2): 默认输出到屏幕</p></li></ul><p>文件描述符中的1可以省略不写, 但是文件描述符中的2必须要写, 例如下表所示.</p><center>重定向技术中用到的符号</center><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>将文件作为命令的标准输入</td></tr><tr><td><code>&lt;&lt;</code></td><td>指定标准输入中的结束符</td></tr><tr><td><code>&gt;</code></td><td>将标准输出重定向到一个文件中, 清空文件中原有数据</td></tr><tr><td><code>2&gt;</code></td><td>将错误输出重定向到一个文件中, 清空文件中原有数据</td></tr><tr><td><code>&gt;&gt;</code></td><td>将标准输出重定向到一个文件中, 追加数据</td></tr><tr><td><code>2&gt;&gt;</code></td><td>将错误输出重定向到一个文件中, 追加数据</td></tr><tr><td><code>&amp;&gt;&gt;</code></td><td>将标准输出和错误输出共同写入到一个文件中, 追加数据</td></tr></tbody></table><h2 id="管道命令符"><a href="#管道命令符" class="headerlink" title="管道命令符"></a>管道命令符<a name="4-2"></a></h2><p>==管道命令符<code>|</code>的作用是: 将前一个命令的标准输出作为后一个命令的标准输入==</p><p>修改root用户命令: <code>echo &quot;password&quot; | passwd --stdin root</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "xiong" | passwd --stdin xiong</span>Changing password <span class="token keyword">for</span> user xiong.passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果要将管道命令符处理后的结果==既输出到屏幕上, 又添加到文件中==, 可以搭配<code>tee</code>命令使用.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps aux | grep bash</span>root       1502  0.0  0.0 115540  1976 tty1     Ss+  15:44   0:00 -bashroot       1524  0.0  0.0 115544  2052 pts/0    Ss   15:44   0:00 -bashroot       1553  0.0  0.0 112808   964 pts/0    R+   15:48   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto <span class="token function">bash</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps aux | grep bash | tee psAux_grepBash</span><span class="token comment" spellcheck="true"># 创建了psAux_grepBash文件用来保存输出结果</span>root       1502  0.0  0.0 115540  1976 tty1     Ss+  15:44   0:00 -bashroot       1524  0.0  0.0 115544  2052 pts/0    Ss   15:44   0:00 -bashroot       1556  0.0  0.0 112808   960 pts/0    S+   15:49   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto <span class="token function">bash</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>anaconda-ks.cfg  hardLink  installed_software  LinuxProbe.pdf  original-ks.cfg  psAux_grepBash  <span class="token function">test</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat psAux_grepBash </span>root       1502  0.0  0.0 115540  1976 tty1     Ss+  15:44   0:00 -bashroot       1524  0.0  0.0 115544  2052 pts/0    Ss   15:44   0:00 -bashroot       1556  0.0  0.0 112808   960 pts/0    S+   15:49   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令行中的通配符"><a href="#命令行中的通配符" class="headerlink" title="命令行中的通配符"></a>命令行中的通配符<a name="4-3"></a></h2><center>Linux系统中的通配符</center><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td><code>*</code></td><td>任意字符</td></tr><tr><td><code>?</code></td><td>单个任意字符</td></tr><tr><td><code>[a-z]</code></td><td>单个小写字母</td></tr><tr><td><code>[A-Z]</code></td><td>单个大写字母</td></tr><tr><td><code>[0-9]</code></td><td>单个数字</td></tr><tr><td><code>[:alpha:]</code></td><td>任意字母</td></tr><tr><td><code>[:upper:]</code></td><td>任意大写字母</td></tr><tr><td><code>[:lower:]</code></td><td>任意小写字母</td></tr><tr><td><code>[:digit:]</code></td><td>所有数字</td></tr><tr><td><code>[:alnum:]</code></td><td>任意字母加数字</td></tr><tr><td><code>[:punct:]</code></td><td>标点符号</td></tr></tbody></table><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符<a name="4-4"></a></h2><ul><li>反斜杠<code>\</code>: 使其后面的一个字符变为纯文本字符</li><li>单引号<code>‘’</code>: 将单引号中的所有内容作为纯文本</li><li>双引号<code>“”</code>: 保留其中的变量</li><li>反引号: 将其中的内容作为命令进行执行, 并返回执行结果</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># price=5</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo 'price is $price'</span>price is <span class="token variable">$price</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "price is $$price"</span>price is 1524price<span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "price is $price"</span>price is 5<span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "price is \$$price"</span>price is <span class="token variable">$5</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo `echo $price`</span>5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量<a name="4-5"></a></h2><p>在Linux系统中, 一般用大写字母表示变量名, 用小写字母表示命令(命名规范).</p><p><u>命令执行流程</u>:</p><ol><li>通过==绝对路径或相对路径==的方式来尝试执行该命令</li><li>==检查==输入的命令是否是自定义的==别名==</li><li>判断用户输入的是Bash Shell的内部命令还是外部命令(内外部命令是针对Bash程序而言的)</li><li>在系统定义的PATH变量的文件夹下查找命令</li></ol><p><u>环境变量本质就是在命令行中定义变量</u>, 和上面的<code>price=5</code>没有差别. 有两点不同的是:</p><ul><li><code>price</code>变量不能被其他用户所使用, 因此需要使用<code>export</code>关键字来将其提升为==全局变量==</li><li><code>price</code>变量在服务器重启后就会消失掉, 因此需要将其写入到<code>.bashrc</code>或<code>.bash_profile</code>配置文件中</li></ul><h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><p>vi编辑器是Unix系统最初始的编辑器, 在GNU项目将vi编辑器一直到开源世界后, 将其进行一些改进, 并重命名为vim(vi improved)</p><h2 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h2><p>在Centos7系统中, 使用<code>yum install -y vim</code>进行安装</p><p>在Ubuntu系统中, 使用<code>sudo apt-get install vim</code>进行安装</p><h2 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h2><p>vim在内存缓冲区中处理数据</p><ul><li>未指定文件名或文件不存在, 则开辟一段新的缓冲区域来编辑</li><li>指定文件存在, 则将文件的整个内容读入到缓冲区中</li></ul><p>vim编辑器有两种操作模式: <u>普通模式和插入模式</u>. 在普通模式下, 输入的按键将会被解释为命令(<u>区分大小写</u>); 在插入模式下则输入文本内容.</p><center>vim操作模式的相互转换</center> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F.svg" style="zoom:25%;"><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><ul><li><code>方向键</code>: 上下左右</li><li><code>&lt;PageDown&gt;/&lt;PageUp&gt;</code>: 向下/上翻页</li><li><code>G</code>: 移到文本的最后一行</li><li><code>gg</code>: 移动到文本的第一行</li><li><code>&lt;num&gt; G</code>: 移动到文本的第<code>num</code>行</li><li><code>:</code>: <u>命令行模式</u><ul><li><code>q</code>: 如果未修改缓冲区数据, 则可以退出</li><li><code>q!</code>: 取消对数据的修改并退出, 强制退出</li><li><code>w &lt;filename&gt;</code>: 将数据保存到一个名为<code>filename</code>的文件中</li><li><code>wq</code>: 保存数据修改并退出</li></ul></li></ul><h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><center>vim编辑命令</center><table><thead><tr><th>命令</th><th>描述</th><th>拓展使用</th></tr></thead><tbody><tr><td><code>x/&lt;Delete&gt;</code></td><td><u>删除</u>当前光标所在位置的字符</td><td><code>2x</code></td></tr><tr><td><code>dd</code></td><td><u>删除</u>当前光标所在<u>行</u>的字符串</td><td><code>5dd</code></td></tr><tr><td><code>dw</code></td><td><u>删除</u>当前光标所在位置的<u>单词</u></td><td></td></tr><tr><td><code>d$</code></td><td><u>删除</u>当前光标至<u>行尾(<code>$</code>)</u>的内容</td><td></td></tr><tr><td><code>J</code></td><td><u>删除</u>当前光标所在行行尾的<u>换行符(即拼接行)</u></td><td></td></tr><tr><td><code>u</code></td><td><u>撤销</u></td><td></td></tr><tr><td><code>a</code></td><td>在当前光标位置后<u>追加数据</u></td><td></td></tr><tr><td><code>A</code></td><td>在当前光标所在行<u>行尾追加数据</u></td><td></td></tr><tr><td><code>r &lt;char&gt;</code></td><td>用<code>&lt;char&gt;</code>字符替换当前光标所在位置的<u>单个字符</u></td><td></td></tr><tr><td><code>R &lt;text&gt;</code></td><td>用<code>&lt;text&gt;</code>覆盖当前光标所在位置的数据, 直到按下esc键(<u>进入到REPLACE模式</u>)</td><td></td></tr></tbody></table><p><u>删除命令</u>会将删除数据存放到寄存器中, 使用<code>p</code>命令可以取回数据, 搭配使用相当于<code>剪切 + 粘贴</code></p><h4 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h4><p>复制命令和删除命令相类似, 只需要将<code>d</code>改为<code>y</code>即可. 由于复制不会影响到复制的文本, 因此只有当使用<code>p</code>命令进行粘贴之后才能清楚实际复制了什么内容. 当然, 这个问题可以通过<u>可视模式</u>进行解决, 按下<code>v</code>键会高亮文本, <u>高亮的内容即为选中的文本</u></p><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><ol><li>输入<code>/</code>, 再输入需要查找的内容(<u>区分大小写</u>), 按下回车键即可查找</li><li>找到内容后, 使用<code>n</code>可以查看下一个</li><li>在<u>命令行模式</u>下才可以使用替换功能, 格式为<code>:s /&lt;old&gt;/&lt;new&gt;</code></li></ol><center>替换功能格式</center><table><thead><tr><th>格式</th><th>功能</th></tr></thead><tbody><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;</code></td><td>从当前光标到文件末尾查找<code>&lt;old&gt;</code>并将第一个替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>将当前光标所在行的<code>&lt;old&gt;</code>替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:n,ms /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换从行号<code>n</code>到行号<code>m</code>之间所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/gc</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code>且每次进行提示确认</td></tr></tbody></table><h2 id="Vim其它设置"><a href="#Vim其它设置" class="headerlink" title="Vim其它设置"></a>Vim其它设置</h2><p>通过<code>vim ~/.vimrc</code>命令创建(或打开)<code>.vimrc</code>文件, 具体配置信息如下</p><center>.vimrc文件配置及其含义</center><table><thead><tr><th>文件配置</th><th>含义</th></tr></thead><tbody><tr><td>set hlsearch</td><td>高亮度反白</td></tr><tr><td>set backspace=2</td><td>可随时用退格键删除</td></tr><tr><td>set autoindent</td><td>自动缩进</td></tr><tr><td>set ruler</td><td>可显示最后一行的状态</td></tr><tr><td>set showmode</td><td>左下角那一行的状态</td></tr><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set bg=dark</td><td>显示不同的底色</td></tr><tr><td>syntax on</td><td>语法高亮</td></tr></tbody></table><h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><p>Shell脚本内设置了一些用于接收参数的变量, 变量和变量之间用空格隔开.</p><center>Shell脚本中的参数</center><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>当前Shell脚本程序的名称</td></tr><tr><td><code>$#</code></td><td>参数的个数</td></tr><tr><td><code>$1, $2, ..., $N</code></td><td>第1, 2, …, N个位置的参数</td></tr><tr><td><code>$*</code></td><td>所有位置的参数值</td></tr><tr><td><code>$?</code></td><td>上一次命令的执行返回值</td></tr></tbody></table><p>编写<code>example.sh</code>脚本, 内容如下. 其中第一行表示告诉系统使用bash这种Shell解释器来执行脚本文件.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">echo</span> <span class="token string">"当前脚本名称为<span class="token variable">$0</span>"</span><span class="token keyword">echo</span> <span class="token string">"总共有<span class="token variable">$#</span>个参数, 分别是<span class="token variable">$*</span>"</span><span class="token keyword">echo</span> <span class="token string">"第一个参数是<span class="token variable">$1</span>, 第二个参数是<span class="token variable">$2</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>bash example.sh</code>来执行脚本文件, 也可以使用<code>./example.sh</code>来执行, 但是默认情况下该文件被当作普通文件, 没有执行权限, 通过<code>chmod u+x example.sh</code>来为文件添加执行权限之后才可以使用<code>./example.sh</code>来执行文件. ==(此时example.sh文件有颜色渲染)==</p><pre class="line-numbers language-shell"><code class="language-shell">[root@hadoop100 ~]# ./example.sh hello world当前脚本名称为./example.sh总共有2个参数, 分别是hello world第一个参数是hello, 第二个参数是world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h2><p>系统在执行<code>mkdir</code>命令时会判断用户输入的信息，即判断用户指定的文件夹名称是否已经存在，如果存在则提示报错；反之则自动创建。</p><p>Shell脚本中的条件测试语法可以判断表达式是否成立，若条件成立则返回数字0，否则便返回非零值。</p><p>格式: <code>[ &lt;expression&gt; ]</code>, <u>括号和表达式之间需要用空格隔开</u></p><h3 id="文件测试语句"><a href="#文件测试语句" class="headerlink" title="文件测试语句"></a>文件测试语句</h3><center>文件测试参数表</center><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-d</code></td><td>测试文件是否为目录类型</td></tr><tr><td><code>-e</code></td><td>测试文件是否存在</td></tr><tr><td><code>-f</code></td><td>判断是否为一般文件</td></tr><tr><td><code>-r</code></td><td>测试当前用户是否有权限读取</td></tr><tr><td><code>-w</code></td><td>测试当前用户是否有权限写入</td></tr><tr><td><code>-x</code></td><td>测试当前用户是否有权限执行</td></tr></tbody></table><blockquote><p>测试<code>example.sh</code>文件是否属于目录类型</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@hadoop100 ~]# [ -d example.sh ][root@hadoop100 ~]# echo $?1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="amp-amp-与操作"><a href="#amp-amp-与操作" class="headerlink" title="&amp;&amp;与操作"></a><code>&amp;&amp;</code>与操作</h4><p>与其它高级编程语言不同, <code>&amp;&amp;</code>表示==当前面的命令执行成功时, 才执行后面的操作==.</p><h4 id="或操作"><a href="#或操作" class="headerlink" title="||或操作"></a><code>||</code>或操作</h4><p><code>||</code>表示==当前面的命令执行失败时, 才执行后面的操作==</p><blockquote><p>测试<code>example.sh</code>文件是否存在, <u>使用逻辑运算符&amp;&amp;</u></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ -e example.sh ] &amp;&amp; echo $?</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>测试当前用户是否为root用户, <u>使用逻辑运算符||</u></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ $USER != root ] || echo "root"</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><u>三目运算符的使用</u>: 若当前用户为root, 则输出“root”, 否则输出“user”</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ $USER = root ] &amp;&amp; echo "root" || echo "user"</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数值比较语句"><a href="#数值比较语句" class="headerlink" title="数值比较语句"></a>数值比较语句</h3><p>因为<code>&gt;, &lt;, =</code>等符号分别用来表示输出重定向, 输入重定向, 赋值等操作, 因此需要使用字母符号</p><center>整数比较运算符</center><table><thead><tr><th>比较运算符</th><th>作用</th></tr></thead><tbody><tr><td><code>-eq</code></td><td>==</td></tr><tr><td><code>-ne</code></td><td>!=</td></tr><tr><td><code>-gt</code></td><td>&gt;</td></tr><tr><td><code>-lt</code></td><td>&lt;</td></tr><tr><td><code>-le</code></td><td>&lt;=</td></tr><tr><td><code>ge</code></td><td>&gt;=</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ 10 -ge 10 ] &amp;&amp; echo "yes"</span><span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="字符串比较语句"><a href="#字符串比较语句" class="headerlink" title="字符串比较语句"></a>字符串比较语句</h3><center>字符串比较运算符</center><table><thead><tr><th>比较操作符</th><th>作用</th></tr></thead><tbody><tr><td><code>=</code></td><td>比较字符串内容是否相同</td></tr><tr><td><code>!=</code></td><td>比较字符串内容是否不同</td></tr><tr><td><code>-z</code></td><td>判断字符串内容是否为空</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># [ -z $string ] &amp;&amp; echo "string is null"</span>string is null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p><u>单分支结构</u>由<code>if, then, fi</code>关键词组成</p><pre class="line-numbers language-bash"><code class="language-bash">DIR<span class="token operator">=</span><span class="token string">"/media/cdrom"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -e <span class="token variable">$DIR</span> <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#如果DIR不是一个目录类型</span><span class="token keyword">then</span>     <span class="token function">mkdir</span> -p <span class="token variable">$DIR</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><u>双分支结构</u>由<code>if, then, else, fi</code>关键字组成</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true"># /dev/null是一个被称作Linux黑洞的文件，把输出信息重定向到这个文件等同于删除数据(类似于没有回收功能的垃圾箱)</span><span class="token function">ping</span> -c 3 -i 0.2 -W 3 <span class="token variable">$1</span> <span class="token operator">&amp;</span><span class="token operator">></span> /dev/null<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq 0 <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$1</span> is Online"</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Host <span class="token variable">$1</span> is Offline"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># bash pingtest.sh hadoop100</span>Host hadoop100 is Online<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><u>多分支结构</u>由<code>if, then, else, elif, fi</code>关键词组成</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">read</span> -p <span class="token string">"Enter your score (0-100):"</span> GRADE <span class="token comment" spellcheck="true">#获取输入, 赋值给变量GRADE, 相当于input</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -ge 85 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -le 100 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Excellent"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -ge 70 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$GRADE</span> -le 84 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Pass"</span><span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$GRADE</span> is Fail"</span> <span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> 变量名 <span class="token keyword">in</span> 取值列表<span class="token keyword">do</span>    执行流程<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>可以使用<code>exit</code>关键字来强行退出循环, 类似<code>break</code>的功能</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">while</span> 逻辑表达式<span class="token keyword">do</span>    执行流程<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">case</span> 变量值 <span class="token keyword">in</span>模式1<span class="token punctuation">)</span>    流程1    <span class="token punctuation">;</span><span class="token punctuation">;</span>模式2<span class="token punctuation">)</span>    流程2    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    流程3esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计划任务服务程序"><a href="#计划任务服务程序" class="headerlink" title="计划任务服务程序"></a>计划任务服务程序</h2><p>在指定的时间段自动启用或停止某些服务或命令.</p><p>计划任务分为<u>一次性计划任务</u>和<u>长期性计划任务</u>.</p><center>at命令参数表</center><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>-f</code></td><td>指定包含命令的任务文件</td></tr><tr><td><code>-q</code></td><td>指定新任务名称</td></tr><tr><td><code>-l</code></td><td>显示待执行任务的列表</td></tr><tr><td><code>-d</code></td><td>删除指定待执行任务</td></tr><tr><td><code>-m</code></td><td>任务执行后给用户发邮件</td></tr></tbody></table><p><code>at</code>命令默认情况下使用交互式方式, 在输入<code>at &lt;time&gt;</code>之后, 会让用户输入待执行的任务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># at 23:00</span>at<span class="token operator">></span> poweroffat<span class="token operator">></span> <span class="token operator">&lt;</span>EOT<span class="token operator">></span>job 1 at Mon Jun 13 23:00:00 2022Can't <span class="token function">open</span> /var/run/atd.pid to signal atd. No atd running? <span class="token comment" spellcheck="true">#似乎对正确执行脚本没有影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过管道符来实现非交互式方式的脚本方式</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "poweroff" | at 23:00</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="用户身份与文件权限"><a href="#用户身份与文件权限" class="headerlink" title="用户身份与文件权限"></a>用户身份与文件权限</h1><blockquote><ul><li>用户身份与能力</li><li>文件权限与归属</li><li>文件的特殊权限</li><li>文件的隐藏属性</li><li>文件访问控制列表</li><li>su命令与sudo服务</li></ul></blockquote><p>Linux时一个多用户, 多任务的操作系统. 本章介绍如何添加, 删除, 修改用户账户信息. </p><p><u>文件访问控制列表(Access Control List, ACL)</u>可以进一步让单一用户或用户组对文件或目录进行权限设置, <u>使得文件具有满足工作需求的最小权限.</u></p><h2 id="用户身份与能力"><a href="#用户身份与能力" class="headerlink" title="用户身份与能力"></a>用户身份与能力</h2><p>Linux系统的设计初衷之一是为了满足多个用户同时工作的需求, 因此必须具备很好的安全性, 尤其是不能因为一两个服务出错而影响到整台服务器.</p><p>root管理员就是存在于所有类UNIX系统中的超级用户, 它拥有最高的系统所有权，能够管理系统的各项功能，如添<u>加/删除用户、启动/关闭服务进程、开启/禁用硬件设备</u>等. root管理员工作时不会受到系统的限制, 但如果root管理员执行了错误的<a href="https://www.linuxcool.com/" target="_blank" rel="noopener">Linux命令</a>, 可能会直接毁掉整个系统.</p><h3 id="UID"><a href="#UID" class="headerlink" title="UID"></a>UID</h3><ul><li>uid=0: root用户</li><li>uid$\in$[1,999]: 系统用户, 执行系统服务进程</li><li>uid$\in$[1000, $+\infty$): root用户创建的普通用户</li></ul><h3 id="GID"><a href="#GID" class="headerlink" title="GID"></a>GID</h3><p>在Linux系统中创建每个用户时，将自动创建一个与其同名的<u>基本用户组</u>，而且这个基本用户组只有该用户一个人。如果该用户以后被归纳到其他用户组，则这个其他用户组称之为<u>扩展用户组</u>。一个用户只有一个基本用户组，但是可以有多个扩展用户组</p><p>基本用户组相当于==“我”==这个组, 有且只有一个成员. 而<u>扩展用户组则相当于用户的身份</u>, 用户可以有不同的身份, 例如既可以是男性, 也可以是学生, 还可以是志愿者. </p><p>如果扩展组被删除, 则该组中用户的扩展组会重新变为其基本用户组.</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h3><p>用于显示用户的详细信息, 分别是uid(用户id), gid(基本用户组id), groups(扩展组id)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id root</span>uid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span> groups<span class="token operator">=</span>0<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id xiong</span>uid<span class="token operator">=</span>1000<span class="token punctuation">(</span>xiong<span class="token punctuation">)</span> gid<span class="token operator">=</span>1000<span class="token punctuation">(</span>xiong<span class="token punctuation">)</span> groups<span class="token operator">=</span>1000<span class="token punctuation">(</span>xiong<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useradd命令"><a href="#useradd命令" class="headerlink" title="useradd命令"></a>useradd命令</h3><p>用于创建普通用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd tom</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id tom</span>uid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> gid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> groups<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="userdel命令"><a href="#userdel命令" class="headerlink" title="userdel命令"></a>userdel命令</h3><p>用于删除用户, 虽然用户已经被删除, 但是其目录数据仍然存放在其家目录中, 需要手动进行删除.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># userdel tom</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># useradd tom</span>useradd: warning: the home directory already exists.Not copying any <span class="token function">file</span> from skel directory into it.Creating mailbox file: File exists<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="groupadd命令"><a href="#groupadd命令" class="headerlink" title="groupadd命令"></a>groupadd命令</h3><p>用于创建扩展组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># groupadd people</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="usermod命令"><a href="#usermod命令" class="headerlink" title="usermod命令"></a>usermod命令</h3><p>用于修改用户的属性. 在Linux系统中一切都是文件, 因此可以使用<code>usermod</code>命令来修改用户信息.</p><center>usermod命令选项参数表</center><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-c</code></td><td>填写用户账户的备注信息</td></tr><tr><td><code>-dm</code></td><td>重新指定用户的家目录, 并将旧数据迁移过去</td></tr><tr><td><code>-e</code></td><td>账户的到期时间, 格式为YYYY-mm-DD</td></tr><tr><td><code>-g</code></td><td>变更所属的用户组</td></tr><tr><td><code>-G</code></td><td>变更所属的扩展组</td></tr><tr><td><code>-L</code></td><td>将用户加入黑名单, 禁止其登录系统</td></tr><tr><td><code>-U</code></td><td>解除黑名单限制</td></tr><tr><td><code>-s</code></td><td>变更默认终端</td></tr><tr><td><code>-u</code></td><td>修改用户的UID</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将用户tom添加到扩展组people中</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># usermod -G people tom</span><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># id tom</span>uid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> gid<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span> groups<span class="token operator">=</span>1001<span class="token punctuation">(</span>tom<span class="token punctuation">)</span>,1002<span class="token punctuation">(</span>people<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="passwd命令"><a href="#passwd命令" class="headerlink" title="passwd命令"></a>passwd命令</h3><p>用于修改用户密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># passwd --stdin xiong</span>Changing password <span class="token keyword">for</span> user xiong.xiongpasswd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>passwd命令选项参数表</center><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-l</code></td><td>加黑名单</td></tr><tr><td><code>-u</code></td><td>解除黑名单</td></tr><tr><td><code>--stdin</code></td><td>允许通过标准输入来修改用户密码</td></tr><tr><td><code>-d</code></td><td>删除用户密码, 之后可以不使用密码进行登录</td></tr><tr><td><code>-e</code></td><td>强制用户在下次登录时修改密码</td></tr><tr><td><code>-S</code></td><td>显示用户密码是否被锁定, 以及密码所采用的加密算法</td></tr></tbody></table><h2 id="文件权限与归属"><a href="#文件权限与归属" class="headerlink" title="文件权限与归属"></a>文件权限与归属</h2><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>在Linux系统中，每个文件都有归属的所有者和所属组，并且规定了文件的所有者、所属组以及其他人对文件所拥有的可读（r）、可写（w）、可执行（x）等权限.</p><center>文件和目录的权限</center><table><thead><tr><th>权限</th><th>文件</th><th>目录</th></tr></thead><tbody><tr><td>读取(r=4)</td><td><code>cat</code></td><td><code>ls</code></td></tr><tr><td>写入(w=2)</td><td><code>vim</code></td><td><code>touch/mv</code></td></tr><tr><td>执行(x=1)</td><td><code>./&lt;filename&gt;</code></td><td><code>cd</code></td></tr></tbody></table><p><u>对文件</u></p><ul><li>==可读==: 能够读取文件的实际内容</li><li>==可写==: 能够编辑, 新增, 修改, 删除文件的实际内容</li><li>==可执行==: 能够运行一个脚本程序</li></ul><p><u>对目录</u></p><ul><li>==可读==: 能够读取目录中的文件列表</li><li>==可写==: 能够在目录内增加, 删除, 重命名文件</li><li>==可执行==: 能够进入到该目录中</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>在下面列出的文件信息中, 依次分别是==文件类型, ugo的文件权限, 硬链接数量, 属主, 属组, 占用大小, 修改时间, 文件名==. </p><p><u>第一位字符表示文件类型</u>, 常见的文件类型见<a href="#table7-4">表7-4</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l</span>total 17556-rw-------. 1 root root     2610 Jun  5 14:14 anaconda-ks.cfg-rwxr--r--. 1 root root      136 Jun 13 19:50 example.sh-rw-r--r--. 1 root root      581 Jun  9 14:32 hardLink-rw-r--r--. 1 root root    34960 Jun  8 19:35 installed_software-rw-r--r--. 1 root root 17676281 Sep 22  2020 LinuxProbe.pdf-rwxr--r--. 1 root root       66 Jun 13 21:26 mkdir.sh-rw-------. 1 root root     2045 Jun  8 18:06 original-ks.cfg-rw-r--r--. 1 root root      134 Jun 13 21:30 pingtest.sh-rw-r--r--. 1 root root      233 Jun 13 15:49 psAux_grepBash-rw-r--r--. 1 root root   233354 Jun 10 18:57 <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通文件的范围最广泛, 例如纯文本信息, 配置文件, 日志文件, shell脚本等.</p><p>目录文件的范围也比较广泛.</p><p>块设备文件和字符设备文件一般是指硬件设备, 比如鼠标, 键盘, 光驱, 硬盘等.</p><center><a name="table7-4"></a>文件类型参数表</center><table><thead><tr><th>符号</th><th>文件类型</th></tr></thead><tbody><tr><td><code>-</code></td><td>普通文件</td></tr><tr><td><code>d</code></td><td>目录文件</td></tr><tr><td><code>l</code></td><td>链接文件</td></tr><tr><td><code>p</code></td><td>管道文件</td></tr><tr><td><code>b</code></td><td>块设备文件</td></tr><tr><td><code>c</code></td><td>字符文件</td></tr></tbody></table><h2 id="文件的特殊权限"><a href="#文件的特殊权限" class="headerlink" title="文件的特殊权限"></a>文件的特殊权限</h2><p>特殊权限是用来弥补一般权限不能实现的功能, 是对一般权限的一种补充, 通常和一般的文件权限rwx搭配使用.</p><h3 id="SUID权限"><a href="#SUID权限" class="headerlink" title="SUID权限"></a>SUID权限</h3><p>SUID权限是一种对二进制程序设置的特殊权限, 能够==让二进制程序的执行者临时拥有所有者的权限==. <u>SUID权限仅仅对拥有执行权限的二进制程序有效.</u></p><p>对一个应用程序, 在Linux系统中实际上就是一个命令, 例如<code>passwd</code>命令, 通过<code>ls -l /bin/passwd</code>查看其信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l /bin/passwd</span>-rwsr-xr-x. 1 root root 27856 Apr  1  2020 /bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到拥有者的文件权限为<code>rws</code>, 其中的<code>s</code>即表示该程序具有SUID权限. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/linux-si-fang-cai/"/>
      <url>/2022/11/11/linux/linux-si-fang-cai/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h1><h2 id="内核功能"><a href="#内核功能" class="headerlink" title="内核功能"></a>内核功能</h2><p>Linux系统的核心是内核. 内核控制着计算机系统上的所有硬件和软件, 在必要时分配硬件, 并根据需要执行软件.</p><p>内核主要负责以下4种功能:</p><ul><li><p><u>系统内存管理</u></p><p>内核不仅管理服务器上的可用物理内存, 还可以创建和管理虚拟内存(外存虚拟). 内核通过硬盘上的存储空间来实现虚拟内存, 这块区域称为==交换空间(swap space)==. 内核不断地交换<u>实际的物理内存和外存中交换空间</u>之间虚拟内存中的内容. 这使得系统以为它拥有比物理内存更多的可用内存.</p><p>内存存储单元按组划分成很多块, 这些块称为<u>页面(page)</u>. 内核将页面放在物理内存或交换空间中. 然后内核维护一个内存页面表, 指明哪些页面位于物理内存中, 哪些页面被交换到交换空间中.</p><p>内核会记录哪些内存页面正在使用, 并自动把一段时间未访问的内存页面复制到交换空间区域, 即使还有可用内存, 该过程称为<u>换出(swapping out)</u>. 当程序要访问一个在交换空间上的页面时, 内核需要为其分配物理内存或者换出另外一个内存页面.</p></li><li><p><u>软件程序管理</u></p><p>内核创建<u>第一个进程(init进程)</u>, 从而启动系统上的其它所有进程. 当内核启动时, 它会将init进程加载到虚拟内存中. 内核在启动任何其它进程时, 都会在虚拟内存中给新进程分配一块专有区域来存储该进程用到的数据和代码.</p><p>Linux操作系统采用了<u>运行级</u>. 运行级决定了init进程运行<code>/etc/inittab</code>文件或<code>/etc/rc[1-5].d</code>目录中定义好的某些特定类型的进程. Linux操作系统共有5个启动运行级.</p><ul><li>运行级为1时, 只启动基本的系统进程以及一个控制台终端进程, 我们称之为<u>单用户模式</u>. 单用户模式通常用来在系统有问题时进行紧急的文件系统维护, 在这种模式下, 只能由系统管理员登录到系统上操作数据.</li><li>标准的启动运行级是3, 在这个运行级上大多数应用软件都会启动</li><li>另一个常见的运行级是5, 在这个运行级上系统会启动图形化的X Window系统, 允许用户通过图形化桌面窗口登录系统.</li></ul></li><li><p><u>硬件设备管理</u></p><p>内核的另一职责是管理硬件设备, 任何Linux系统需要与之通信的设备, 都需要在内核代码中加入其驱动程序代码. 驱动程序代码相当于应用程序和硬件设备之间的中介, 允许内核与设备之间进行数据交换. 在Linux内核中有两种方式插入设备驱动代码:</p><ul><li>编译进内核的设备驱动代码</li><li>可插入内核的设备驱动模块</li></ul><p>以前插入设备驱动代码的唯一途径是重新编译内核, 每次给系统添加新设备, 都需要重新编译一遍内核代码. 随着Linux内核支持的硬件设备越来越多, 这个过程变得越来越低效, Linux开发人员设计出一种更好的将驱动代码插入到运行中的内核的方法, 提出了<u>内核模块</u>的概念, <strong>它允许将驱动代码插入到运行中的内核而无需重新编译内核, 同时当设备不再使用时也可以将内核模块从内核中移走</strong>. 这种方式极大地简化和扩展了硬件设备在Linux上的使用.</p><p>Linux系统将硬件设备当作特殊的文件, 称为设备文件. 设备文件共有3种分类:</p><ul><li><p><strong>字符型设备文件</strong></p><p>字符型设备文件是指处理数据时每次只能处理一个字符的设备. 大多数类型的调制解调器和终端都是作为字符型设备文件创建的.</p></li><li><p><strong>块设备文件</strong></p><p>块设备文件是指处理数据时每次能处理大块数据的设备, 比如硬盘.</p></li><li><p><strong>网络设备文件</strong></p><p>网络设备文件是指采用数据包发送和接收数据的设备, 包括各种网卡和一个特殊的回环设备. <u>这个回环设备允许Linux系统使用常见的网络编程协议同自身通信.</u></p></li></ul><p>Linux为系统上的<u>每个设备</u>都创建一种称为<u>节点</u>的特殊文件. 与设备的所有通信都通过设备节点完成, 每个节点都有唯一的数值对作为其标识符, 包括一个主设备号和一个次设备号. 类似的设备被划分到同样的主设备号下, 次设备号用于标识主设备组下的某个特定设备.</p></li><li><p><u>文件系统管理</u></p><p>Linux内核<u>支持通过不同类型的文件系统</u>从硬盘中读写数据. 内核必须在编译时就加入所有可能用到的文件系统的支持.</p><p>Linux服务器中访问的所有硬盘都必须格式化成下表所列文件系统类型中的一种. Linux内核采用虚拟文件系统(VFS)作为和每个文件系统交互的接口. 这为Linux内核同任何类型文件系统通信提供了一个标准接口. 当每个文件系统都被挂载和使用时, VFS将信息都缓存在内存中.</p></li></ul><center>Linux文件系统</center><table><thead><tr><th>文件系统</th><th>描述</th></tr></thead><tbody><tr><td>ext</td><td>Linux扩展文件系统, 最早的Linux文件系统</td></tr><tr><td>ext2</td><td>第二扩展文件系统, 在ext的基础上提供了更多的功能</td></tr><tr><td>ext3</td><td>第三扩展文件系统, 支持日志功能</td></tr><tr><td>ext4</td><td>第四扩展文件系统, 支持高级日志功能</td></tr><tr><td>hpfs</td><td>OS/2高性能文件系统</td></tr><tr><td>jfs</td><td>ISM日志文件系统</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="GNU工具"><a href="#GNU工具" class="headerlink" title="GNU工具"></a>GNU工具</h2><p>核心GNU工具(core utilities)包括三个部分:</p><ul><li>管理进程的工具</li><li>操作文本的工具</li><li>处理文件的工具</li></ul><p>shell工具为用户提供了启动程序, 管理文件系统中的文件以及运行在Linux系统上的进程的途径. 如果需要将多个shell命令放在一起工作执行, 则可以使用<u>shell脚本</u>.</p><h1 id="主机规划与磁盘分区"><a href="#主机规划与磁盘分区" class="headerlink" title="主机规划与磁盘分区"></a>主机规划与磁盘分区</h1><p><u>内容</u></p><ul><li>磁盘分区</li><li>文件系统</li><li>Linux操作较频繁的目录</li></ul><p><u>在Linux中, 一切皆文件</u></p><center>常见设备及其在Linux系统中的文件名</center><table><thead><tr><th>设备</th><th>设备在Linux内的文件名</th></tr></thead><tbody><tr><td>SCSI/SATA/USB硬盘</td><td><code>/dev/sd[a-p]</code></td></tr><tr><td>VirtI/O界面</td><td><code>/dev/vd[a-p]</code></td></tr><tr><td>软盘</td><td><code>/dev/fd[0-7]</code></td></tr><tr><td>打印机</td><td><code>/dev/lp[0-2]</code><br><code>/dev/usb/lp[0-15]</code></td></tr><tr><td>鼠标</td><td><code>/dev/input/mouse[0-15]</code><br><code>/dev/psaux</code><br><code>/dev/mouse</code></td></tr><tr><td>CDROM<br>DVDROM</td><td><code>/dev/scd[0-1]</code><br><code>/dev/sr[0-1]</code><br><code>/dev/cdrom</code></td></tr><tr><td>磁带机</td><td><code>/dev/ht0</code><br><code>/dev/st0</code><br><code>/dev/tape</code></td></tr></tbody></table><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><p>以Windows系统的观点来看, 将一块磁盘分为C,D,E三个盘区, 则C,D,E就是<u>分区(partition)</u>.</p><blockquote><p>例题: 如果你的PC上面有两个SATA磁盘以及一个USB磁盘, 而主板上面有六个SATA的插槽. 这两个SATA磁盘分别安插在主板上的SATA1, SATA5插槽上, 请问这三个磁盘在Linux中的设备文件名为何？</p></blockquote><p>答: 由于是<u>使用侦测到的顺序来决定设备文件名, 并非与实际插槽代号有关</u>, 因此设备的文件名如下: </p><ol><li>SATA1插槽上的文件名: <code>/dev/sda</code></li><li>SATA5插槽上的文件名: <code>/dev/sdb</code></li><li>USB磁盘（开机完成后才被系统捉到）: <code>/dev/sdc</code></li></ol><h3 id="开机流程中的BIOS与UEFI开机检测程序"><a href="#开机流程中的BIOS与UEFI开机检测程序" class="headerlink" title="开机流程中的BIOS与UEFI开机检测程序"></a>开机流程中的BIOS与UEFI开机检测程序</h3><p>操作系统会控制所有的硬件并向上层应用程序提供核心功能, 因此计算机就能够认识硬盘内的文件系统, 并进一步读取硬盘内的软件文件与执行.</p><p><strong>问题是, 操作系统也是软件, 那么计算机又是如何认识这个操作系统软件并且执行它的？ 明明开机时计算机中还没有任何软件系统, 那它要如何读取硬盘内的操作系统文件呢？这就得要牵涉到计算机的开机启动程序了！</strong></p><p>目前主要有两种方式: 早期的BIOS和新的UEFI</p><p>CMOS是记录各项硬件参数且嵌入在主板上面的储存器, BIOS则是一个写入到主板上的一个固件（固件就是写入到硬件上的一个软件程序）。</p><h4 id="BIOS搭配MBR-GPT的开机流程"><a href="#BIOS搭配MBR-GPT的开机流程" class="headerlink" title="BIOS搭配MBR/GPT的开机流程"></a>BIOS搭配MBR/GPT的开机流程</h4><ol><li><p>计算机系统会主动执行<u>BIOS程序</u>.</p></li><li><p>BIOS会分析计算机里面有哪些存储设备, 根据用户的设置, 到该硬盘里面区读取第一个扇区的<u>MBR</u>位置.</p></li><li><p>MBR这个仅有446B的硬盘容量里面会放置最基本的<u>开机管理程序(boot loader)</u>, 接下来就是MBR内的开机管理程序的工作了.</p></li><li><p>开机管理程序加载<u>核心文件</u></p><p>开机管理程序是操作系统在安装的时候所提供的, 它会认识硬盘内的文件系统格式, 因此能够读取核心文件.</p></li><li><p>操作系统正常工作</p></li></ol><p>如果分区表是GPT格式, 那么BIOS也能够从LBA0的MBR相容的区块读取第一阶段的开机管理程序码. 能否正常开机取决于boot loader是否能够识别GPT格式, 如果不能识别GPT, 则无法读取操作系统核心文件, 故而开机失败.</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>在图形化桌面出现之前, 与Unix系统进行交互的唯一方法是借助shell所提供的<u>文本命令行界面(command line interface, CLI)</u>. CLI只能接受文本输入, 也只能显示文本和基本的图形输出.</p><h2 id="启动shell"><a href="#启动shell" class="headerlink" title="启动shell"></a>启动shell</h2><p>登录时启动的shell依赖于用户账户的配置, 在<code>/etc/passwd</code>文件中包含了所有系统用户账户列表以及每个用户的基本配置信息.</p><pre class="line-numbers language-sh"><code class="language-sh">  1 root:x:0:0:root:/root:/bin/bash  2 bin:x:1:1:bin:/bin:/sbin/nologin  3 daemon:x:2:2:daemon:/sbin:/sbin/nologin  4 adm:x:3:4:adm:/var/adm:/sbin/nologin  5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin  6 sync:x:5:0:sync:/sbin:/bin/sync  7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown  8 halt:x:7:0:halt:/sbin:/sbin/halt  9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin 10 operator:x:11:0:operator:/root:/sbin/nologin 11 games:x:12:100:games:/usr/games:/sbin/nologin 12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin 13 nobody:x:99:99:Nobody:/:/sbin/nologin 14 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin 15 dbus:x:81:81:System message bus:/:/sbin/nologin 16 polkitd:x:999:998:User for polkitd:/:/sbin/nologin 17 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin 18 postfix:x:89:89::/var/spool/postfix:/sbin/nologin 19 xiong:x:1000:1000:xiong:/home/xiong:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个条目有7个字段, 中间用冒号<code>:</code>分隔. 最后一个字段指明了用户使用的shell程序.</p><p><u>bash shell程序会在登录后自动启动</u>, 但是是否显示命令行界面取决于登录方式, 如果是控制台终端登录则显示, 如果是图形化界面则不显示.</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>在Windows系统中, 会为每个物理磁盘驱动器分配一个盘符, 每个驱动器都会有自己的目录结构, 以便访问存储其中的文件.</p><p>Linux在路径名中不使用驱动器盘符(即磁盘分区C,D,E…), 将文件存储在单个目录结构中, 这个目录称为<u>虚拟目录(virtual directory)</u>. Linux虚拟目录结构只包含一个称为根目录(root)的基础目录, 使用<code>/</code>表示. </p><p>Linux系统中的路径本身并没有提供任何有关文件究竟存放在哪个物理磁盘上的信息, 例如<code>/opt/module/test.txt</code>. 而在Windows系统中, 如果外接USB, 假设其盘符为F, 则能够从路径中清楚地看出一个文件是否属于F盘, 即是否存放在U盘上.</p><h3 id="Linux文件系统"><a href="#Linux文件系统" class="headerlink" title="Linux文件系统"></a>Linux文件系统</h3><p>在Linux系统上安装的<u>第一块硬盘称为根驱动器</u>. 根驱动器包含虚拟目录的核心, 其它目录都是从那里开始创建的. </p><p>Linux会在根驱动器上创建一些特别的目录, 这些目录称为<u>挂载点(mount point)</u>. 挂载点是虚拟目录中用于分配额外存储设备的目录, 虚拟目录会让文件和目录出现在这些挂载点目录中, 然后实际上它们却存储在另外一个驱动器中. <u>挂载是将其他机器上的磁盘映射到本机器上来, 使得在本机器上可以访问其他机器的文件</u>.</p><p>常见的目录名均遵循<u>文件系统层级标准(FHS, filesystem hierarchy standard)</u></p><center>常见Linux目录名称</center><table><thead><tr><th align="center">目录</th><th align="center">功能</th><th>对应单词</th></tr></thead><tbody><tr><td align="center"><code>/</code></td><td align="center">与启动系统有关, 根目录, 通常不会在这里存储文件</td><td>root</td></tr><tr><td align="center"><code>/bin</code></td><td align="center">二进制目录, 存放许多用户级的GNU工具</td><td>binary</td></tr><tr><td align="center"><code>/boot</code></td><td align="center">启动目录, 存放启动文件</td><td></td></tr><tr><td align="center"><code>/etc</code></td><td align="center">配置文件目录，如账号密码等</td><td></td></tr><tr><td align="center"><code>/dev</code></td><td align="center">设备目录, Linux在这里创建设备节点</td><td></td></tr><tr><td align="center"><code>/home</code></td><td align="center">普通用户的家(主)目录</td><td></td></tr><tr><td align="center"><code>/lib</code></td><td align="center">库目录, 存放系统和应用程序的库文件</td><td></td></tr><tr><td align="center"><code>/media</code></td><td align="center">可移动媒体的常用挂载点</td><td></td></tr><tr><td align="center"><code>/mnt</code></td><td align="center">另一个挂载点</td><td></td></tr><tr><td align="center"><code>/opt</code></td><td align="center">第三方软件包和数据文件</td><td></td></tr><tr><td align="center"><code>/proc</code></td><td align="center">进程目录, 存放现有硬件和当前进程信息, 虚拟文件系统, 不要往里面写东西</td><td></td></tr><tr><td align="center"><code>/root</code></td><td align="center">root用户的主目录</td><td></td></tr><tr><td align="center"><code>/sbin</code></td><td align="center">系统二进制目录, 存放许多GNU管理员级工具, 只允许超级用户查看</td><td></td></tr><tr><td align="center"><code>/run</code></td><td align="center">运行目录, 存放系统运作时的运行时数据</td><td></td></tr><tr><td align="center"><code>/srv</code></td><td align="center">服务目录, 存放本地服务相关的文件</td><td></td></tr><tr><td align="center"><code>/sys</code></td><td align="center">虚拟文件系统，不要往里面写东西。系统目录, 保存硬件和内核相关信息</td><td></td></tr><tr><td align="center"><code>/tmp</code></td><td align="center">临时目录, 可以在该目录中创建和删除临时工作文件</td><td></td></tr><tr><td align="center"><code>/usr</code></td><td align="center">用户存放系统软件资源目录, 软件存放处.大量用户级GNU工具和数据文件都在这</td><td>unix software resource</td></tr><tr><td align="center"><code>/var</code></td><td align="center">动态数据保存位置, 与系统运行过程有关的日志文件等</td><td>variable</td></tr><tr><td align="center">/etc/opt</td><td align="center">放置/opt的相关配置文件</td><td></td></tr><tr><td align="center">/etc/X11</td><td align="center">与x window有关的各种配置文件, 尤其是xorg.conf这个配置文件</td><td></td></tr><tr><td align="center">/etc/sgml</td><td align="center">与sgml格式有关的各项配置文件</td><td></td></tr><tr><td align="center">/etc/xml</td><td align="center">与xml格式有关的各项配置文件</td><td></td></tr><tr><td align="center">/usr/local</td><td align="center">第三方安装的软件保存位置</td><td></td></tr><tr><td align="center">/var/mail</td><td align="center">用户邮箱</td><td></td></tr><tr><td align="center">/var/run</td><td align="center">程序相关</td><td></td></tr><tr><td align="center">/var/spool/news</td><td align="center">新闻组</td><td></td></tr><tr><td align="center">/var/lock</td><td align="center">程序相关</td><td></td></tr><tr><td align="center">lost+found</td><td align="center">文件碎片</td><td></td></tr><tr><td align="center">/misc</td><td align="center">盘符</td><td></td></tr><tr><td align="center">/usr/sbin</td><td align="center">只允许超级用户</td><td></td></tr><tr><td align="center">/usr/bin</td><td align="center">在单用户模式(类似windows系统下的安全模式，用最少的资源恢复系统)下不能执行</td><td></td></tr></tbody></table><h3 id="访问目录cd"><a href="#访问目录cd" class="headerlink" title="访问目录cd"></a>访问目录<code>cd</code></h3><p>可以使用<u>绝对路径或相对路径</u></p><h3 id="查看文件和目录ls"><a href="#查看文件和目录ls" class="headerlink" title="查看文件和目录ls"></a>查看文件和目录<code>ls</code></h3><ul><li><p><code>pwd</code>: 查看当前目录的路径</p></li><li><p><code>ls</code>: 查看当前目录下的文件和子目录(列按字典序排列)</p></li><li><p><code>ls -a</code>: 查看包括<u>隐藏文件</u>在内的所有文件和子目录</p></li><li><p><code>ls -F</code>: 如果没有彩色终端仿真器的情况下, 可以区分出目录和文件</p></li><li><p><code>ls -R</code>: <u>递归显示</u>文件和目录, 即子目录下的文件和目录也会显示</p></li><li><p><code>ls -l</code>: 显示<u>文件详情</u>, 长列表</p></li><li><p><code>ls -l &lt;filename&gt;</code>: 过滤器, 只显示<code>&lt;filename&gt;</code>相关的文件信息</p><p>可以使用<code>?, *, [], !, -</code>等通配符来匹配文件, 使用通配符来进行模式匹配的过程称为<u>文件扩展匹配(file globbing)</u>.</p></li></ul><center>文件详情中的信息</center><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文件类型</td><td><code>d</code>: 目录<br><code>-</code>: 文件<br><code>c</code>: 字符型文件<br><code>b</code>: 块设备</td></tr><tr><td>文件权限</td><td></td></tr><tr><td>文件的硬链接总数</td><td></td></tr><tr><td>文件的拥有者</td><td></td></tr><tr><td>文件的拥有组</td><td></td></tr><tr><td>文件的大小(单位: Byte)</td><td></td></tr><tr><td>文件的最近修改时间</td><td></td></tr><tr><td>文件名(或目录名)</td><td></td></tr></tbody></table><p><strong>输出示例:</strong></p><pre class="line-numbers language-bash"><code class="language-bash">drwxr-xr-x.  2 root root      6 Apr 11  2018 xinetd.ddrwxr-xr-x.  6 root root    100 Jun  5 14:11 yum-rw-r--r--.  1 root root    970 Oct  2  2020 yum.confdrwxr-xr-x.  2 root root    262 Jun  7 20:14 yum.repos.d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h3><ul><li><p><code>touch &lt;filename&gt;</code>: 创建名为<code>&lt;filename&gt;</code>的空文件</p></li><li><p><code>cp -i &lt;source&gt; &lt;destination&gt;</code>: 将<code>&lt;source&gt;</code>文件复制到<code>&lt;destination&gt;</code>文件中, 使用<code>-i</code>选项会提示是否覆盖已有文件</p></li><li><p><code>cp -R &lt;sourceDir&gt; &lt;destinationDir&gt;</code>: 将目录文件递归的复制到另一个目录中, <code>-R</code>表示递归复制</p><p>在cp命令中<u>可以使用通配符</u></p></li><li><p><code>ln -s &lt;filename&gt; &lt;linkname&gt;</code>: 创建名为<code>&lt;linkname&gt;</code>的软链接</p></li><li><p><code>ln &lt;filename&gt; &lt;linkname&gt;</code>: 创建名为<code>&lt;linkname&gt;</code>的硬链接</p><p>链接文件包括硬链接和软链接(符号链接), 符号链接相当于创建了一个原文件的快捷方式. </p><p><u>软链接文件保存的信息是原文件的文件路径, 软链接文件和原文件是两个完全不相同的文件.</u></p><p>硬链接文件和原文件可以认为是同一个东西, 都是硬盘上的文件资源的一个入口, 新建硬链接会使得该资源的inode节点加1, 删除硬链接和原文件都会使得inode节点数减1, 只有当inode节点数为0时该资源才会被删除. 需要注意的是<u>硬链接不会使得原来硬盘上的资源拷贝复制一份</u>. 即原来占用1MB的文件不会因为创建硬链接而变为占用2MB.</p></li><li><p><code>mv &lt;source&gt; &lt;destination&gt;</code>: 移动文件, 如果是同一目录下, 则可以实现<strong>重命名文件</strong></p></li><li><p><code>rm &lt;filename&gt;</code>: 删除文件</p></li></ul><h3 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h3><ul><li><code>mkdir &lt;dirname&gt;</code>: 创建目录</li><li><code>mkdir -p &lt;dirname&gt;/&lt;subdirname&gt;</code>: 选项<code>-p</code>帮助创建目录及其子目录</li><li><code>rmdir &lt;dirname&gt;</code>: 删除<strong>空目录</strong></li><li><code>rm -rf &lt;dirname&gt;</code>: 删除带有内容的目录(递归删除)</li><li><code>tree &lt;dirname&gt;</code>: 以树形方式展示目录结构</li></ul><h2 id="监测程序"><a href="#监测程序" class="headerlink" title="监测程序"></a>监测程序</h2><ul><li><code>ps</code>: 查看进程</li><li><code>top</code>: 实时显示<u>进程</u></li><li><code>kill &lt;pid&gt;</code>: 根据<code>&lt;pid&gt;</code>结束进程</li></ul><h2 id="监测磁盘空间"><a href="#监测磁盘空间" class="headerlink" title="监测磁盘空间"></a>监测磁盘空间</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>Linux文件系统将所有的磁盘都放入到虚拟目录下, 所以在使用新的存储媒体之前需要将其放到虚拟目录下, 这个过程称为<u>挂载(mounting)</u>. 大多数的Linux发行版都支持自动挂载可移动存储媒体, 例如CD-ROM, 软盘, U盘等.</p><ul><li><p><code>mount</code>: 默认输出当前系统中挂载的设备列表</p><p>mount命令输出的信息由4个部分组成:</p><ul><li>媒体的设备文件名</li><li>媒体挂载到虚拟目录的挂载点</li><li>文件系统类型</li><li>已挂载媒体的访问状态</li></ul><p>手动在虚拟目录中挂载设备, 需要root权限, 基本命令为<code>mount -t &lt;type&gt; &lt;device&gt; &lt;directory&gt;</code>: 表示将设备<code>&lt;device&gt;</code>以<code>&lt;type&gt;</code>的文件格式化类型挂载到<code>&lt;directory&gt;</code>目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop100 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount</span>sysfs on /sys <span class="token function">type</span> sysfs <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel<span class="token punctuation">)</span>proc on /proc <span class="token function">type</span> proc <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime<span class="token punctuation">)</span>devtmpfs on /dev <span class="token function">type</span> devtmpfs <span class="token punctuation">(</span>rw,nosuid,seclabel,size<span class="token operator">=</span>1919884k,nr_inodes<span class="token operator">=</span>479971,mode<span class="token operator">=</span>755<span class="token punctuation">)</span>securityfs on /sys/kernel/security <span class="token function">type</span> securityfs <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime<span class="token punctuation">)</span>tmpfs on /dev/shm <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,seclabel<span class="token punctuation">)</span>devpts on /dev/pts <span class="token function">type</span> devpts <span class="token punctuation">(</span>rw,nosuid,noexec,relatime,seclabel,gid<span class="token operator">=</span>5,mode<span class="token operator">=</span>620,ptmxmode<span class="token operator">=</span>000<span class="token punctuation">)</span>tmpfs on /run <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,seclabel,mode<span class="token operator">=</span>755<span class="token punctuation">)</span>tmpfs on /sys/fs/cgroup <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>ro,nosuid,nodev,noexec,seclabel,mode<span class="token operator">=</span>755<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/systemd <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,xattr,release_agent<span class="token operator">=</span>/usr/lib/systemd/systemd-cgroups-agent,name<span class="token operator">=</span>systemd<span class="token punctuation">)</span>pstore on /sys/fs/pstore <span class="token function">type</span> pstore <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/net_cls,net_prio <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,net_prio,net_cls<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/perf_event <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,perf_event<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/pids <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,pids<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/hugetlb <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,hugetlb<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/memory <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,memory<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/cpuset <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuset<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/cpu,cpuacct <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,cpuacct,cpu<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/devices <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,devices<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/blkio <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,blkio<span class="token punctuation">)</span>cgroup on /sys/fs/cgroup/freezer <span class="token function">type</span> cgroup <span class="token punctuation">(</span>rw,nosuid,nodev,noexec,relatime,seclabel,freezer<span class="token punctuation">)</span>configfs on /sys/kernel/config <span class="token function">type</span> configfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>/dev/sda3 on / <span class="token function">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,noquota<span class="token punctuation">)</span>selinuxfs on /sys/fs/selinux <span class="token function">type</span> selinuxfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>systemd-1 on /proc/sys/fs/binfmt_misc <span class="token function">type</span> autofs <span class="token punctuation">(</span>rw,relatime,fd<span class="token operator">=</span>23,pgrp<span class="token operator">=</span>1,timeout<span class="token operator">=</span>0,minproto<span class="token operator">=</span>5,maxproto<span class="token operator">=</span>5,direct,pipe_ino<span class="token operator">=</span>12625<span class="token punctuation">)</span>mqueue on /dev/mqueue <span class="token function">type</span> mqueue <span class="token punctuation">(</span>rw,relatime,seclabel<span class="token punctuation">)</span>hugetlbfs on /dev/hugepages <span class="token function">type</span> hugetlbfs <span class="token punctuation">(</span>rw,relatime,seclabel<span class="token punctuation">)</span>debugfs on /sys/kernel/debug <span class="token function">type</span> debugfs <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>fusectl on /sys/fs/fuse/connections <span class="token function">type</span> fusectl <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span>/dev/sda1 on /boot <span class="token function">type</span> xfs <span class="token punctuation">(</span>rw,relatime,seclabel,attr2,inode64,noquota<span class="token punctuation">)</span>tmpfs on /run/user/0 <span class="token function">type</span> tmpfs <span class="token punctuation">(</span>rw,nosuid,nodev,relatime,seclabel,size<span class="token operator">=</span>386132k,mode<span class="token operator">=</span>700<span class="token punctuation">)</span>binfmt_misc on /proc/sys/fs/binfmt_misc <span class="token function">type</span> binfmt_misc <span class="token punctuation">(</span>rw,relatime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><code>umount &lt;directory&gt;</code>: 卸载指定设备</p><p>从Linux系统上移除一个可移动设备时, 不能直接从系统上移出, 而应该先卸载. 使用umount来卸载设备, 如果有任何程序正在使用设备上的文件, 系统不会允许你卸载它.</p></li></ul><h1 id="包管理系统PMS-package-management-system"><a href="#包管理系统PMS-package-management-system" class="headerlink" title="包管理系统PMS(package management system)"></a>包管理系统PMS(package management system)</h1><h2 id="包管理基础"><a href="#包管理基础" class="headerlink" title="包管理基础"></a>包管理基础</h2><p>PMS使用一个数据库来记录各种相关内容:</p><ul><li>Linux系统上<u>已经安装了什么软件包</u></li><li><u>每个包安装了什么文件</u></li><li>每个已安装软件包的<u>版本</u></li></ul><p>软件包存储在服务器上, 这些服务器称为<u>仓库(repository)</u>. 可以通过Linux系统中的PMS来下载或更新软件包.</p><h2 id="基于Red-Hat系统"><a href="#基于Red-Hat系统" class="headerlink" title="基于Red Hat系统"></a>基于Red Hat系统</h2><h3 id="列出已安装的包"><a href="#列出已安装的包" class="headerlink" title="列出已安装的包"></a>列出已安装的包</h3><ul><li><p>使用<code>yum list installed</code>在控制台输出, 或者使用<code>yum list installed &gt; &lt;filename&gt;</code><u>重定向输出</u>到文件中</p></li><li><p>使用<code>yum list installed &lt;packageName&gt;</code>查看指定包名<code>&lt;packageName&gt;</code>的包是否安装</p></li><li><p>使用<code>yum provides &lt;filename&gt;</code>查看<code>&lt;filename&gt;</code>文件属于哪个软件包</p></li></ul><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><ul><li><p>使用<code>yum install &lt;packageName&gt;</code>从仓库中下载软件包并安装</p></li><li><p>也可以下载<code>rpm</code>安装包, 使用<code>yum localinstall &lt;packageName.rpm&gt;</code>进行本地安装</p></li></ul><h3 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h3><ul><li>使用<code>yum list updates</code>列出所有已安装软件包的可用更新</li><li>使用<code>yum update</code>更新所有安装包</li><li>使用<code>yum update &lt;packageName&gt;</code>更新<code>&lt;packageName&gt;</code>软件包</li></ul><h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><ul><li>使用<code>yum remove &lt;packageName&gt;</code>卸载软件, 但保留配置文件和数据文件</li><li>使用<code>yum erase &lt;packgeName&gt;</code>卸载软件并删除和它相关的所有文件</li></ul><h3 id="处理损坏的包依赖关系"><a href="#处理损坏的包依赖关系" class="headerlink" title="处理损坏的包依赖关系"></a>处理损坏的包依赖关系</h3><p>在安装多个软件包时, 某个包的软件依赖关系可能会被另一个包的安装覆盖掉, 这叫做<u>损坏的包依赖关系(broken dependency)</u>.</p><p>如果系统出现该问题</p><ol><li>使用<code>yum clean all</code>进行尝试</li><li>再使用<code>yum update</code>进行尝试</li><li>最后使用<code>yum deplist &lt;packageName&gt;</code>查看包依赖关系, 知道依赖关系后可以手动进行安装</li><li>如果还是无法解决, 使用<code>yum update --skip-broken</code>来跳过更新那些包依赖关系损坏的包而继续更新其它包</li></ol><h3 id="软件仓库"><a href="#软件仓库" class="headerlink" title="软件仓库"></a>软件仓库</h3><p>yum的仓库定义文件位于<code>/etc/yum.repos.d</code>, 通过编辑配置文件可以添加仓库, 一般需要配置正确的URL和加密密钥</p><ul><li>使用<code>yum repolist</code>查看目前配置可使用的仓库</li></ul><h2 id="通过源码进行软件安装"><a href="#通过源码进行软件安装" class="headerlink" title="通过源码进行软件安装"></a><u>通过源码进行软件安装</u></h2><ol><li>下载<code>xxx.tar.gz</code>压缩包</li><li>使用<code>tar -zxvf xxx.tar.gz</code>解压缩</li><li>进入到解压后的文件目录中, 使用<code>./configure</code>查看是否具备库依赖环境, 若缺少则使用<code>yum</code>进行下载</li><li>在满足依赖环境后, 使用<code>make</code>进行编译, 再使用<code>make install</code>进行安装</li></ol><h1 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h1><p>vi编辑器是Unix系统最初始的编辑器, 在GNU项目将vi编辑器一直到开源世界后, 将其进行一些改进, 并重命名为vim(vi improved)</p><h2 id="vim安装"><a href="#vim安装" class="headerlink" title="vim安装"></a>vim安装</h2><p>在Centos7系统中, 使用<code>yum install -y vim</code>进行安装</p><p>在Ubuntu系统中, 使用<code>sudo apt-get install vim</code>进行安装</p><h2 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h2><p>vim在内存缓冲区中处理数据</p><ul><li>未指定文件名或文件不存在, 则开辟一段新的缓冲区域来编辑</li><li>指定文件存在, 则将文件的整个内容读入到缓冲区中</li></ul><p>vim编辑器有两种操作模式: <u>普通模式和插入模式</u>. 在普通模式下, 输入的按键将会被解释为命令(<u>区分大小写</u>); 在插入模式下则输入文本内容.</p><center>vim操作模式的相互转换</center> <img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/%E6%99%AE%E9%80%9A%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8F%92%E5%85%A5%E6%A8%A1%E5%BC%8F.svg" style="zoom:25%;"><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><ul><li><code>方向键</code>: 上下左右</li><li><code>&lt;PageDown&gt;/&lt;PageUp&gt;</code>: 向下/上翻页</li><li><code>G</code>: 移到文本的最后一行</li><li><code>gg</code>: 移动到文本的第一行</li><li><code>&lt;num&gt; G</code>: 移动到文本的第<code>num</code>行</li><li><code>:</code>: <u>命令行模式</u><ul><li><code>q</code>: 如果未修改缓冲区数据, 则可以退出</li><li><code>q!</code>: 取消对数据的修改并退出, 强制退出</li><li><code>w &lt;filename&gt;</code>: 将数据保存到一个名为<code>filename</code>的文件中</li><li><code>wq</code>: 保存数据修改并退出</li></ul></li></ul><h4 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h4><center>vim编辑命令</center><table><thead><tr><th>命令</th><th>描述</th><th>拓展使用</th></tr></thead><tbody><tr><td><code>x/&lt;Delete&gt;</code></td><td><u>删除</u>当前光标所在位置的字符</td><td><code>2x</code></td></tr><tr><td><code>dd</code></td><td><u>删除</u>当前光标所在<u>行</u>的字符串</td><td><code>5dd</code></td></tr><tr><td><code>dw</code></td><td><u>删除</u>当前光标所在位置的<u>单词</u></td><td></td></tr><tr><td><code>d$</code></td><td><u>删除</u>当前光标至<u>行尾(<code>$</code>)</u>的内容</td><td></td></tr><tr><td><code>J</code></td><td><u>删除</u>当前光标所在行行尾的<u>换行符(即拼接行)</u></td><td></td></tr><tr><td><code>u</code></td><td><u>撤销</u></td><td></td></tr><tr><td><code>a</code></td><td>在当前光标位置后<u>追加数据</u></td><td></td></tr><tr><td><code>A</code></td><td>在当前光标所在行<u>行尾追加数据</u></td><td></td></tr><tr><td><code>r &lt;char&gt;</code></td><td>用<code>&lt;char&gt;</code>字符替换当前光标所在位置的<u>单个字符</u></td><td></td></tr><tr><td><code>R &lt;text&gt;</code></td><td>用<code>&lt;text&gt;</code>覆盖当前光标所在位置的数据, 直到按下esc键(<u>进入到REPLACE模式</u>)</td><td></td></tr></tbody></table><p><u>删除命令</u>会将删除数据存放到寄存器中, 使用<code>p</code>命令可以取回数据, 搭配使用相当于<code>剪切 + 粘贴</code></p><h4 id="复制和粘贴"><a href="#复制和粘贴" class="headerlink" title="复制和粘贴"></a>复制和粘贴</h4><p>复制命令和删除命令相类似, 只需要将<code>d</code>改为<code>y</code>即可. 由于复制不会影响到复制的文本, 因此只有当使用<code>p</code>命令进行粘贴之后才能清楚实际复制了什么内容. 当然, 这个问题可以通过<u>可视模式</u>进行解决, 按下<code>v</code>键会高亮文本, <u>高亮的内容即为选中的文本</u></p><h4 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h4><ol><li>输入<code>/</code>, 再输入需要查找的内容(<u>区分大小写</u>), 按下回车键即可查找</li><li>找到内容后, 使用<code>n</code>可以查看下一个</li><li>在<u>命令行模式</u>下才可以使用替换功能, 格式为<code>:s /&lt;old&gt;/&lt;new&gt;</code></li></ol><center>替换功能格式</center><table><thead><tr><th>格式</th><th>功能</th></tr></thead><tbody><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;</code></td><td>从当前光标到文件末尾查找<code>&lt;old&gt;</code>并将第一个替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>将当前光标所在行的<code>&lt;old&gt;</code>替换为<code>&lt;new&gt;</code></td></tr><tr><td><code>:n,ms /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换从行号<code>n</code>到行号<code>m</code>之间所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/g</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code></td></tr><tr><td><code>:%s /&lt;old&gt;/&lt;new&gt;/gc</code></td><td>替换整个文件中所有的<code>&lt;old&gt;</code>且每次进行提示确认</td></tr></tbody></table><h2 id="Vim其它设置"><a href="#Vim其它设置" class="headerlink" title="Vim其它设置"></a>Vim其它设置</h2><p>通过<code>vim ~/.vimrc</code>命令创建(或打开)<code>.vimrc</code>文件, 具体配置信息如下</p><center>.vimrc文件配置及其含义</center><table><thead><tr><th>文件配置</th><th>含义</th></tr></thead><tbody><tr><td>set hlsearch</td><td>高亮度反白</td></tr><tr><td>set backspace=2</td><td>可随时用退格键删除</td></tr><tr><td>set autoindent</td><td>自动缩进</td></tr><tr><td>set ruler</td><td>可显示最后一行的状态</td></tr><tr><td>set showmode</td><td>左下角那一行的状态</td></tr><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set bg=dark</td><td>显示不同的底色</td></tr><tr><td>syntax on</td><td>语法高亮</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/03-cheng-xu-kai-ji-zi-qi-dong/"/>
      <url>/2022/11/11/linux/03-cheng-xu-kai-ji-zi-qi-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux程序开机自启动-以zookeeper为例"><a href="#Linux程序开机自启动-以zookeeper为例" class="headerlink" title="Linux程序开机自启动(以zookeeper为例)"></a>Linux程序开机自启动(以zookeeper为例)</h1><ol><li><p>在<strong>/etc/rc.d/init.d</strong> 目录下创建脚本, 例如 <strong>zookeeper.sh</strong>, 内容如下</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bash#chkconfig: 2345 10 90#description: service zookeeper#process name:zookeeper#环境变量加载source /etc/profileexport JAVA_HOME=/opt/module/jdk1.8.0_341export ZOOKEEPER_HOME=/opt/module/zookeeper-3.5.7case "$1" in    start) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh start;;    stop) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh stop;;    status) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh status;;    restart) su root ${ZOOKEEPER_HOME}/bin/zkServer.sh restart;;    *) echo "require start|start-foreground|stop|status|restart|print-cmd";;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>添加到开机自启动服务(关键)</p><pre class="line-numbers language-sh"><code class="language-sh"># 上面相当于创建了一个zookeeper.sh脚本, 添加到开机自启动服务相当于调用zookeeper.sh start命令chkconfig --add zookeeper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>查看开机自启动服务</p><pre class="line-numbers language-sh"><code class="language-sh">chkconfig --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://namebucket.oss-cn-beijing.aliyuncs.com/img/image-20221103165936613.png" alt="image-20221103165936613"></p></li><li><p>使用 <code>systemctl start zookeeper</code> 命令来启动服务, 或者使用<code>systemctl status zookeeper</code>命令来查看服务运行状态</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/02-guan-dao-fu-he-duo-can-shu-ming-ling/"/>
      <url>/2022/11/11/linux/02-guan-dao-fu-he-duo-can-shu-ming-ling/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># xargs -I {} 的作用是指定"{}"作为占位符</span><span class="token comment" spellcheck="true"># cp命令就可以使用"{}"来获取管道传过来的参数</span><span class="token function">ls</span> /opt/module/test01 <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">cp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> /opt/module/test02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>xargs命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 分别查看xargs -n 1和xargs -n 2的效果</span><span class="token comment" spellcheck="true"># 其中hello.txt文件的内容为hello world</span><span class="token function">cat</span> /opt/module/test01/hello.txt <span class="token operator">|</span> <span class="token function">xargs</span> -n 2 <span class="token keyword">echo</span><span class="token function">cat</span> /opt/module/test01/hello.txt <span class="token operator">|</span> <span class="token function">xargs</span> -n 2 <span class="token keyword">echo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/01-sha-si-jin-cheng/"/>
      <url>/2022/11/11/linux/01-sha-si-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="ps-grep-awk-和-kill-的组合使用"><a href="#ps-grep-awk-和-kill-的组合使用" class="headerlink" title="ps, grep, awk 和 kill 的组合使用"></a>ps, grep, awk 和 kill 的组合使用</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># awk '{print $2}' 用来获取打印出来的进程号</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> redis <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> -I <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">kill</span> -9 <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/pwd/"/>
      <url>/2022/11/11/linux/ming-ling/pwd/</url>
      
        <content type="html"><![CDATA[<h1 id="options-参数表"><a href="#options-参数表" class="headerlink" title="[options]参数表"></a>[options]参数表</h1><table><thead><tr><th>options</th><th>含义</th><th>对应单词</th></tr></thead><tbody><tr><td><code>P</code></td><td>显示真正的路径, 而非链接路径</td><td>Physical</td></tr><tr><td><code>L</code>默认</td><td>显示链接路径</td><td>Logical</td></tr></tbody></table><h1 id="结果比较"><a href="#结果比较" class="headerlink" title="结果比较"></a>结果比较</h1><blockquote><p>已知:  /lib链接的目录就是/usr/lib</p></blockquote><ul><li><p>进入<code>/lib</code>目录</p></li><li><p>进入<code>/usr/lib</code>目录</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/top/"/>
      <url>/2022/11/11/linux/ming-ling/top/</url>
      
        <content type="html"><![CDATA[<ul><li>top</li></ul><p>功能：动态监视系统任务的工具，输出结果是连续的</p><p>格式：top [参数]</p><p>-b        以批量模式运行，但不接受命令行输入</p><p>-c        显示命令行，而不仅仅是命令名</p><p>-d    N    显示两次刷新时间的间隔，比如-d 5 ，表示两次刷新间隔为5秒</p><p>-I        禁止显示空闲进程或僵尸进程</p><p>-n N    显示更新次数，然后退出。比如-n 5， 表示top更新5次数据就退出</p><p>-p PID    PID仅监视制定进程的ID；PID是一个数值</p><p>-q            </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/chown/"/>
      <url>/2022/11/11/linux/ming-ling/chown/</url>
      
        <content type="html"><![CDATA[<h1 id="chown使用"><a href="#chown使用" class="headerlink" title="chown使用"></a>chown使用</h1><ul><li>使用前</li></ul><ul><li><p>执行<code>chown -R xiong:xiong xiong.txt</code>命令</p><blockquote><p>-R 递归修改    改变根目录的同时，将该目录下的所有子文件修改成同样的权限</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/man/"/>
      <url>/2022/11/11/linux/ming-ling/man/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td><code>空格</code></td><td>向下翻页</td></tr><tr><td><code>pagedown</code>也就是<code>fn</code>+$\downarrow$</td><td>向下翻页</td></tr><tr><td><code>pageup</code></td><td>向上翻页</td></tr><tr><td><code>/string</code></td><td>向下查找string这个字符串</td></tr><tr><td><code>?string</code></td><td>向上查找string这个字符串</td></tr><tr><td><code>n</code>,<code>N</code></td><td>n表示继续, N表示反向</td></tr><tr><td><code>q</code></td><td>结束这次的man page</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/info/"/>
      <url>/2022/11/11/linux/ming-ling/info/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>按键</th><th>功能</th><th>解释</th></tr></thead><tbody><tr><td><code>空格</code></td><td>向下翻页</td><td></td></tr><tr><td><code>pagedown</code></td><td>向下翻页</td><td></td></tr><tr><td><code>pageup</code></td><td>向上翻页</td><td></td></tr><tr><td><code>tab</code></td><td>在节点之间移动, 有节点的地方, 通常以<code>*</code>显示</td><td></td></tr><tr><td><code>enter</code></td><td>当光标在节点上时, 按下可以进入节点</td><td></td></tr><tr><td><code>b</code></td><td>移动到第一个节点处</td><td>begin</td></tr><tr><td><code>e</code></td><td>移动到最后一个节点处</td><td>end</td></tr><tr><td><code>n</code></td><td>前往下一个节点处</td><td>next</td></tr><tr><td><code>p</code></td><td>前往上一个节点处</td><td>previous</td></tr><tr><td><code>u</code></td><td>向上移动一层</td><td></td></tr><tr><td><code>s(/)</code></td><td>在info page当中进行查找</td><td>search</td></tr><tr><td><code>h</code>,<code>?</code></td><td>显示帮助选项</td><td>help</td></tr><tr><td><code>q</code></td><td>结束这次的info page</td><td>quit</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/ps/"/>
      <url>/2022/11/11/linux/ming-ling/ps/</url>
      
        <content type="html"><![CDATA[<h1 id="options-参数表"><a href="#options-参数表" class="headerlink" title="[options]参数表"></a>[options]参数表</h1><table><thead><tr><th>options</th><th>含义</th><th>对应单词</th></tr></thead><tbody><tr><td><code>l</code></td><td>长格式输出</td><td>long</td></tr><tr><td><code>u</code></td><td>按用户名和启动时间的顺序来显示进程</td><td></td></tr><tr><td><code>j</code></td><td>用任务格式来显示进程</td><td></td></tr><tr><td><code>f</code></td><td>用树形格式来显示进程</td><td></td></tr><tr><td><code>a</code></td><td>显示所有用户的所有进程</td><td>all</td></tr><tr><td><code>x</code></td><td>显示无控制终端的进程</td><td></td></tr><tr><td><code>r</code></td><td>显示运行中的进程</td><td>run</td></tr></tbody></table><h1 id="各种情况下的对比"><a href="#各种情况下的对比" class="headerlink" title="各种情况下的对比"></a>各种情况下的对比</h1><ul><li>$options=null$<br>![](C:\Users\Administrator\Pictures\Saved Pictures\Linux\命令\ps\ps.png)</li><li>$options=l$<br>![](C:\Users\Administrator\Pictures\Saved Pictures\Linux\命令\ps\ps_l.png)</li><li>$options=u$<br>![](C:\Users\Administrator\Pictures\Saved Pictures\Linux\命令\ps\ps_u.png)</li><li>$options=j$<br>![](C:\Users\Administrator\Pictures\Saved Pictures\Linux\命令\ps\ps_j.png)</li><li>$options=f$<br>![](C:\Users\Administrator\Pictures\Saved Pictures\Linux\命令\ps\ps_f.png)</li><li>options=a<br>![](C:\Users\Administrator\Pictures\Saved Pictures\Linux\命令\ps\ps_a.png)</li><li>options=x<br><img src alt></li><li>options=r</li></ul><h1 id="结果解释表"><a href="#结果解释表" class="headerlink" title="结果解释表"></a>结果解释表</h1><table><thead><tr><th>名称</th><th>含义</th><th>解释</th></tr></thead><tbody><tr><td><code>UID</code></td><td></td><td></td></tr><tr><td><code>PID</code></td><td></td><td></td></tr><tr><td><code>PPID</code></td><td></td><td></td></tr><tr><td><code>PGID</code></td><td></td><td></td></tr><tr><td><code>C</code></td><td></td><td></td></tr><tr><td><code>SID</code></td><td></td><td></td></tr><tr><td><code>PRI</code></td><td></td><td></td></tr><tr><td><code>TTY</code></td><td></td><td></td></tr><tr><td><code>STAT</code></td><td></td><td></td></tr><tr><td><code>TIME COMMAND</code></td><td></td><td></td></tr><tr><td><code>TIME CMD</code></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/linux/ming-ling/ls/"/>
      <url>/2022/11/11/linux/ming-ling/ls/</url>
      
        <content type="html"><![CDATA[<h1 id="options-参数表"><a href="#options-参数表" class="headerlink" title="[options]参数表"></a>[options]参数表</h1><table><thead><tr><th>options</th><th>含义</th><th>对应单词</th></tr></thead><tbody><tr><td><code>a</code></td><td>显示所有文件</td><td>all</td></tr><tr><td><code>l</code></td><td>详细信息显示</td><td>long</td></tr><tr><td><code>d</code></td><td>查看目录的详细信息</td><td>director</td></tr><tr><td><code>h</code></td><td>以GB, MB, KB等更人性的方式来显示文件大小</td><td>human</td></tr><tr><td><code>i</code></td><td>查看id号</td><td>id</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="结果解释表"><a href="#结果解释表" class="headerlink" title="结果解释表"></a>结果解释表</h1><table><thead><tr><th align="center">列数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">文件类型与文件权限</td></tr><tr><td align="center">2</td><td align="center">有多少文件名链接到此节点(inode)</td></tr><tr><td align="center">3</td><td align="center">文件拥有者账号</td></tr><tr><td align="center">4</td><td align="center">文件所属的用户组</td></tr><tr><td align="center">5</td><td align="center">文件的容量大小(Byte)</td></tr><tr><td align="center">6</td><td align="center">文件的创建日期或最近的修改日期</td></tr><tr><td align="center">7</td><td align="center">文件名</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/tomcat/"/>
      <url>/2022/11/11/tomcat/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat问题解决汇总-centos7"><a href="#Tomcat问题解决汇总-centos7" class="headerlink" title="Tomcat问题解决汇总(centos7)"></a>Tomcat问题解决汇总(centos7)</h1><table><thead><tr><th>出现的问题</th><th>解决方案</th><th>链接</th></tr></thead><tbody><tr><td>使用yum安装tomcat</td><td>1.官网找到安装包的超链接, 右键选择复制链接地址<br>2.在centos中使用wget命令, 例如wget 链接地址<br>3.在/usr/share中可以找到应用程序, 解压安装</td><td></td></tr><tr><td>如何启动tomcat</td><td>1.进入到tomcat程序的bin目录<br>2.使用./startup.sh启动tomcat服务</td><td></td></tr><tr><td>./startup.sh出现权限不够</td><td>在bin目录下执行chmod u+x *.sh命令</td><td>1. chmod是权限管理命令change the permissions mode of a file的缩写<br>2. u代表所有者，x代表执行权限。 + 表示增加权限。<br>3. chmod u+x file.sh 就表示对当前目录下的file.sh文件的所有者增加可执行权限</td></tr><tr><td>配置两台tomcat服务器, 并修改端口为8080和8081</td><td>1.进入到tomcat的配置文件server.xml<br>2.将port=8080的改为8081, 并将另外两处port的端口号进行修改(这里可以不是8081)<br>3.配置防火墙开放端口,或者关闭防火墙systemctl stop firewalld</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/ge-chong-an-zhuang-wen-ti/"/>
      <url>/2022/11/11/ge-chong-an-zhuang-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="默认约定"><a href="#默认约定" class="headerlink" title="默认约定"></a>默认约定</h1><p>在/opt目录下创建文件夹module.software文件夹</p><p>software文件夹用来存放所有的jar包</p><p>module文件夹用来存放解压后的文件</p><h1 id="设置Python的阿里云镜像"><a href="#设置Python的阿里云镜像" class="headerlink" title="设置Python的阿里云镜像"></a>设置Python的阿里云镜像</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><ul><li><p>windows系统在C:\Users\Administrator\下新建文件夹.pip，并新建pip.ini</p></li><li><p>在上述文件中添加或修改</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[global]</span><span class="token constant">index-url</span> <span class="token attr-value"><span class="token punctuation">=</span> https://mirrors.aliyun.com/pypi/simple/</span><span class="token selector">[install]</span><span class="token constant">trusted-host</span><span class="token attr-value"><span class="token punctuation">=</span>mirrors.aliyun.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><p>找到下列文件</p><pre class="line-numbers language-shell"><code class="language-shell">~/.pip/pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在上述文件中添加或修改</p><pre class="line-numbers language-conf"><code class="language-conf">[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="安装PHP语言环境"><a href="#安装PHP语言环境" class="headerlink" title="安装PHP语言环境"></a>安装PHP语言环境</h1><ol><li>执行如下命令，安装PHP环境。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">yum -y install php php-mysql gd php-gd gd-devel php-xml php-common php-mbstring php-ldap php-pear php-xmlrpc php-imap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>执行如下命令创建PHP测试页面。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>执行如下命令，重启Apache服务。</li></ol><pre class="line-numbers language-shell"><code class="language-shell">systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>打开浏览器，访问<code>http://&lt;ECS公网地址&gt;/phpinfo.php</code>，显示如下页面表示PHP语言环境安装成功。</li></ol><p><img src="https://img.alicdn.com/tfs/TB1oCVpaepyVu4jSZFhXXbBpVXa-601-840.png" alt="img"></p><h1 id="Wordpress安装和配置"><a href="#Wordpress安装和配置" class="headerlink" title="Wordpress安装和配置"></a>Wordpress安装和配置</h1><p>\1.  执行如下命令，安装wordpress。</p><pre><code>yum -y install wordpress</code></pre><p>显示如下信息表示安装成功。</p><p><img src="https://img.alicdn.com/tfs/TB1b02VHEz1gK0jSZLeXXb9kVXa-1042-156.png" alt="img"></p><p>\2.  修改WordPress配置文件。</p><p>1）执行如下命令，修改wp-config.php指向路径为绝对路径。</p><pre><code># 进入/usr/share/wordpress目录。cd /usr/share/wordpress# 修改路径。ln -snf /etc/wordpress/wp-config.php wp-config.php# 查看修改后的目录结构。ll</code></pre><p>2）执行如下命令，移动wordpress到Apache根目录。</p><pre><code># 在Apache的根目录/var/www/html下，创建一个wp-blog文件夹。mkdir /var/www/html/wp-blogmv * /var/www/html/wp-blog/</code></pre><p>3）执行以下命令修改wp-config.php配置文件。</p><p>在执行命令前，请先替换以下三个参数值。</p><ul><li>database_name_here为之前步骤中创建的数据库名称，本示例为wordpress。</li><li>username_here为数据库的用户名，本示例为root。</li><li>password_here为数据库的登录密码，本示例为NewPassWord1.。</li></ul><pre><code>sed -i &#39;s/database_name_here/wordpress/&#39; /var/www/html/wp-blog/wp-config.phpsed -i &#39;s/username_here/root/&#39; /var/www/html/wp-blog/wp-config.phpsed -i &#39;s/password_here/NewPassWord1./&#39; /var/www/html/wp-blog/wp-config.php</code></pre><p>4）执行以下命令，查看配置文件信息是否修改成功。</p><pre><code>cat -n /var/www/html/wp-blog/wp-config.php</code></pre><p><img src="https://img.alicdn.com/tfs/TB1j02VHEz1gK0jSZLeXXb9kVXa-913-631.png" alt="img"></p><p>\3.  执行如下命令，重启Apache服务。</p><pre><code>systemctl restart httpd</code></pre><h1 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h1><p>\1. 执行以下命令，安装MongoDB。</p><pre><code>yum -y install mongodb mongodb-server.x86_64 mariadb-devel.i686</code></pre><p>\2. 执行以下命令，启动MongoDB服务。</p><pre><code>systemctl start mongod</code></pre><p>\3. 执行以下命令，查看MongoDB运行状态。</p><pre><code>systemctl status mongod</code></pre><h1 id="JDK环境"><a href="#JDK环境" class="headerlink" title="JDK环境"></a>JDK环境</h1><ul><li><p>进入官网下载jdk(tar.gz)</p></li><li><p>使用xshell工具将压缩包上传到服务器的software目录下</p><pre class="line-numbers language-shell"><code class="language-shell">#解压到指定路径(/opt/module)tar -zvxf <压缩包> -C /opt/moudule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置环境变量</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile#在末尾添加上#JAVA_HOMEexport JAVA_HOME=/opt/module/jdk1.8.0_251export PATH=$PATH:$JAVA_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>刷新环境变量设置</p><pre class="line-numbers language-shell"><code class="language-shell">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h1 id="配置HADOOP"><a href="#配置HADOOP" class="headerlink" title="配置HADOOP"></a>配置HADOOP</h1><ul><li><p>基本操作同java</p></li><li><p>配置环境变量</p><pre class="line-numbers language-shell"><code class="language-shell">#HADOOP_HOMEexport HADOOP_HOME=/opt/module/hadoop-3.2.1export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">cd /opt/module/hadoop-3.2.1vim etc/hadoop/hadoop-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编辑配置文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#添加</span>JAVA_HOME<span class="token operator">=</span>/opt/module/jdk1.8.0_251<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/chang-yong-linux-ming-ling/"/>
      <url>/2022/11/11/chang-yong-linux-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a>常用Linux命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td><code>man</code></td><td>求助</td><td>man [命令]</td></tr><tr><td><code>info</code></td><td>求助</td><td>info [命令]</td></tr><tr><td><code>help</code></td><td>求助</td><td>[命令] –help</td></tr></tbody></table><h2 id="文件目录类命令"><a href="#文件目录类命令" class="headerlink" title="文件目录类命令"></a>文件目录类命令</h2><h3 id="浏览目录命令"><a href="#浏览目录命令" class="headerlink" title="浏览目录命令"></a>浏览目录命令</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>ls</code></td><td>显示目录或文件</td><td>`ls [-a</td><td>-l</td></tr><tr><td><code>pwd</code></td><td>显示当前工作目录</td><td></td><td>print working directory</td></tr></tbody></table><h4 id="ls命令选项"><a href="#ls命令选项" class="headerlink" title="ls命令选项"></a>ls命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>显示所有文件, 包括隐藏文件</td></tr><tr><td><code>-l</code></td><td>详细信息显示</td></tr><tr><td><code>-d</code></td><td>查看目录属性</td></tr></tbody></table><h3 id="目录操作命令"><a href="#目录操作命令" class="headerlink" title="目录操作命令"></a>目录操作命令</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>cd</code></td><td>进入到某个目录</td><td>cd [目录名]</td><td>change directory</td></tr><tr><td><code>mkdir</code></td><td>创建目录</td><td>mkdir -p [目录名]</td><td>make directory</td></tr><tr><td><code>rmdir</code></td><td>删除一个空目录</td><td>rmdir [目录名]</td><td>remove directory</td></tr></tbody></table><h3 id="浏览文件命令"><a href="#浏览文件命令" class="headerlink" title="浏览文件命令"></a>浏览文件命令</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td><code>cat</code></td><td>连接文件并打印到标准输出设备上</td><td><em>可以同时显示多个文件</em></td><td>concatenate and display files</td></tr><tr><td><code>more</code></td><td>分页显示文件内容</td><td></td><td></td></tr><tr><td><code>less</code></td><td>查看长文件的信息<br>在more的基础上可以向上翻页</td><td></td><td></td></tr><tr><td><code>head</code></td><td>显示文件的前面几行</td><td>head -n 20 [文件名]</td><td></td></tr><tr><td><code>tail</code></td><td>显示文件的末尾几行</td><td></td><td></td></tr></tbody></table><h4 id="cat命令选项"><a href="#cat命令选项" class="headerlink" title="cat命令选项"></a>cat命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-E</code></td><td>在每一行的末尾显示<code>$</code>字符</td></tr><tr><td><code>-n</code></td><td>显示行号</td></tr></tbody></table><h4 id="less命令操作"><a href="#less命令操作" class="headerlink" title="less命令操作"></a>less命令操作</h4><table><thead><tr><th>操作</th><th>含义</th></tr></thead><tbody><tr><td><code>空格</code>或<code>f</code></td><td>显示下一页</td></tr><tr><td><code>回车</code></td><td>显示下一行</td></tr><tr><td><code>q</code></td><td>退出</td></tr><tr><td><code>上下键</code></td><td>向上或向下移动文件</td></tr></tbody></table><h4 id="tail命令选项"><a href="#tail命令选项" class="headerlink" title="tail命令选项"></a>tail命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-n</code></td><td>显示后n行, 默认为10行</td></tr><tr><td><code>+n</code></td><td>从第n行显示到文件尾</td></tr><tr><td><code>-F</code></td><td>通常用于显示日志文件, 用于跟踪显示不断增长的文件结尾内容</td></tr></tbody></table><h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><table><thead><tr><th align="center">命令</th><th align="center">功能</th><th align="center">语法</th><th>对应单词</th></tr></thead><tbody><tr><td align="center"><code>cp</code></td><td align="center">复制文件或目录</td><td align="center">cp -rp [源文件] [目标文件]</td><td>copy</td></tr><tr><td align="center"><code>rm</code></td><td align="center">删除文件或目录</td><td align="center">rm -rf [文件名]</td><td>remove</td></tr><tr><td align="center"><code>mv</code></td><td align="center">剪切文件 和 重命名</td><td align="center"></td><td></td></tr><tr><td align="center"><code>touch</code></td><td align="center">新建文件</td><td align="center"></td><td></td></tr><tr><td align="center"><code>ln</code></td><td align="center">生成链接文件<br>软链接即为快捷方式, <br>硬链接修改一处会自动更新另外一份文件</td><td align="center">ln -s [源文件] [目标文件]</td><td></td></tr><tr><td align="center"><code>find</code></td><td align="center">用来寻找文件或目录</td><td align="center"></td><td></td></tr><tr><td align="center"><code>grep</code></td><td align="center">在文件中搜索匹配的字符并进行输出</td><td align="center">grep [待查找字串] [源文件]</td><td>globally search a regular expression and print</td></tr><tr><td align="center"><code>tar</code></td><td align="center">压缩或解压缩文件</td><td align="center"></td><td>tape archive</td></tr></tbody></table><h4 id="cp命令选项"><a href="#cp命令选项" class="headerlink" title="cp命令选项"></a>cp命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-p</code></td><td><em>连同文件的属性一起复制</em>, 而非使用默认方式, 常用于备份</td></tr><tr><td><code>-i</code></td><td>若目标文件已经存在时, 在覆盖时会先询问操作的进行</td></tr><tr><td><code>-r</code></td><td>递归持续复制, <em>用于目录的复制行为</em></td></tr><tr><td><code>-u</code></td><td>目标文件与源文件<em>有差异时才会复制</em></td></tr></tbody></table><h4 id="rm命令选项"><a href="#rm命令选项" class="headerlink" title="rm命令选项"></a>rm命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-f</code></td><td>忽略不存在的文件, 不会出现警告消息</td></tr><tr><td><code>-i</code></td><td>互动模式, 在删除前会询问用户是否操作</td></tr><tr><td><code>-r</code></td><td>递归删除, 用于目录删除</td></tr></tbody></table><h4 id="find命令选项"><a href="#find命令选项" class="headerlink" title="find命令选项"></a>find命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-name</code></td><td>按文件名查找文件</td></tr><tr><td><code>-size [+-]</code></td><td>按文件大小查找文件</td></tr><tr><td><code>-type [fbcdlsp]</code></td><td>按文件类型查找文件</td></tr><tr><td><code>-perm</code></td><td>按文件权限查找文件</td></tr></tbody></table><h4 id="grep命令选项"><a href="#grep命令选项" class="headerlink" title="grep命令选项"></a>grep命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>将二进制文件按文本文件的方式查找数据</td></tr><tr><td><code>-c</code></td><td>字符串的出现次数</td></tr><tr><td><code>-i</code></td><td>忽略大小写</td></tr><tr><td><code>-v</code></td><td>反向选择, 即选择<em>不包含该字符串</em>的内容</td></tr></tbody></table><h4 id="tar命令选项"><a href="#tar命令选项" class="headerlink" title="tar命令选项"></a>tar命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-c</code></td><td>新建打包文件</td></tr><tr><td><code>-t</code></td><td>查看打包文件的内容含有哪些文件</td></tr><tr><td><code>-x</code></td><td>解压缩功能</td></tr><tr><td><code>-C</code></td><td>指定压缩或解压缩的目录</td></tr><tr><td><code>-j</code></td><td>通过bzip2的支持进行压缩或解压缩</td></tr><tr><td><code>-z</code></td><td>通过gzip的支持进行压缩或解压缩</td></tr><tr><td><code>-v</code></td><td>在压缩/解压缩的过程中, 将正在处理的文件名显示出来</td></tr><tr><td><code>-f</code></td><td>指明需要处理的文件名</td></tr></tbody></table><p><code>-cvf</code>压缩或<code>-xvf</code>解压缩</p><h2 id="进程控制类命令"><a href="#进程控制类命令" class="headerlink" title="进程控制类命令"></a>进程控制类命令</h2><h3 id="查看系统中的进程命令"><a href="#查看系统中的进程命令" class="headerlink" title="查看系统中的进程命令"></a>查看系统中的进程命令</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td><code>ps</code></td><td>显示在用户输入ps命令时系统的进程及其信息</td><td>ps [-lujfaxr]</td></tr><tr><td><code>top</code></td><td>动态监视系统任务的工具, 输出结果是连续的</td><td>top [options]</td></tr></tbody></table><h4 id="ps命令选项"><a href="#ps命令选项" class="headerlink" title="ps命令选项"></a>ps命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-l</code></td><td>长格式输出</td></tr><tr><td><code>-u</code></td><td>按用户名和启动时间的顺序来显示进程</td></tr><tr><td><code>-j</code></td><td>用任务格式来显示进程</td></tr><tr><td><code>-f</code></td><td>用树形格式来显示进程</td></tr><tr><td><code>-a</code></td><td>显示所有用户的所有进程</td></tr><tr><td><code>-x</code></td><td>显示无控制终端的进程</td></tr><tr><td><code>-r</code></td><td>显示运行中的进程</td></tr></tbody></table><p>查找指定用户<code>pp</code>的进程</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> pp <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="top命令选项"><a href="#top命令选项" class="headerlink" title="top命令选项"></a>top命令选项</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-b</code></td><td>以批量模式运行, 但不能接受命令行输入</td></tr><tr><td><code>-c</code></td><td>显示命令行, 而不仅仅是命令名</td></tr><tr><td><code>-d</code></td><td>显示两次刷新时间的间隔</td></tr><tr><td><code>-i</code></td><td>禁止显示空闲进程或僵尸进程</td></tr><tr><td><code>-n</code></td><td>显示更新次数, 然后退出</td></tr><tr><td><code>-p</code></td><td>监视指定PID的进程</td></tr><tr><td><code>-q</code></td><td>不经过任何延时就刷新</td></tr><tr><td><code>-s</code></td><td>安全模式运行</td></tr><tr><td><code>-S</code></td><td>累积模式, 输出每个进程的总的CPU时间</td></tr></tbody></table><h3 id="控制系统中的进程命令"><a href="#控制系统中的进程命令" class="headerlink" title="控制系统中的进程命令"></a>控制系统中的进程命令</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td>kill</td><td>结束指定PID的进程</td><td></td></tr><tr><td>killall</td><td>结束指定进程名的进程, 相当于ps, grep和kill的结合使用</td><td></td></tr></tbody></table><h3 id="进程后台运行命令"><a href="#进程后台运行命令" class="headerlink" title="进程后台运行命令"></a>进程后台运行命令</h3><h3 id="进程的挂起和恢复"><a href="#进程的挂起和恢复" class="headerlink" title="进程的挂起和恢复"></a>进程的挂起和恢复</h3><table><thead><tr><th>命令</th><th>功能</th><th>语法</th></tr></thead><tbody><tr><td>kill</td><td>结束指定PID的进程</td><td></td></tr><tr><td>killall</td><td>结束指定进程名的进程, 相当于ps, grep和kill的结合使用</td><td></td></tr><tr><td>nice</td><td></td><td></td></tr><tr><td>renice</td><td></td><td></td></tr></tbody></table><h2 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h2><table><thead><tr><th>命令</th><th>功能</th><th>语法</th><th>对应单词</th></tr></thead><tbody><tr><td>[chmod][chmod]</td><td>修改文件的权限</td><td></td><td></td></tr><tr><td>[chown][chown]</td><td>修改文件拥有者和所属组</td><td>chown -R [owner]:[group] [文件名或目录名]</td><td>change owner</td></tr><tr><td>[chgrp][chgrp]</td><td>修改文件所属用户组</td><td></td><td>change group</td></tr></tbody></table><h2 id="防火墙相关命令"><a href="#防火墙相关命令" class="headerlink" title="防火墙相关命令"></a>防火墙相关命令</h2><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>systemctl start firewalld</td><td>启动</td></tr><tr><td>systemctl stop firewalld</td><td>关闭</td></tr><tr><td>systemctl status firewalld</td><td>查看状态</td></tr><tr><td>systemctl disable firewalld</td><td>开机禁用</td></tr><tr><td>systemctl enable firewalld</td><td>开机启用</td></tr><tr><td>firewall-cmd –list-ports</td><td>查看开放的端口</td></tr><tr><td>firewall-cmd –add-port=8080/tcp –permanent</td><td>添加端口8080<br>—permanent永久生效，没有此参数重启后失效</td></tr></tbody></table><p>[chmod]:</p><p>[chgrp]:</p><p>[chgrp]:</p><p>[chown]:</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/11/11/mu-lu-quan-xian-he-wen-jian-quan-xian/"/>
      <url>/2022/11/11/mu-lu-quan-xian-he-wen-jian-quan-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><table><thead><tr><th align="center">特征</th><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>d</code></td><td align="center">目录</td><td align="center"><code>directory</code></td></tr><tr><td align="center"><code>-</code></td><td align="center">二进制文件</td><td align="center"></td></tr><tr><td align="center"><code>l</code></td><td align="center">软链接文件</td><td align="center"><code>link</code></td></tr><tr><td align="center"><code>.</code></td><td align="center">隐藏文件</td><td align="center"></td></tr><tr><td align="center"><code>b</code></td><td align="center">设备文件里面的可供存储的周边设备(可按块随机读取的设备)</td><td align="center"></td></tr><tr><td align="center"><code>c</code></td><td align="center">设备文件里面的串行端口设备, 例如鼠标, 键盘(一次性读取设备)</td><td align="center"></td></tr></tbody></table><h2 id="文件权限和目录权限"><a href="#文件权限和目录权限" class="headerlink" title="文件权限和目录权限"></a>文件权限和目录权限</h2><table><thead><tr><th align="left">权限</th><th>文件</th><th align="left">目录</th></tr></thead><tbody><tr><td align="left"><code>r</code></td><td>读取文件内容<br><em>文件最基础的权限</em></td><td align="left">查看目录中文件名, 即可以使用<code>ls</code>命令<br>tab补全功能的支持</td></tr><tr><td align="left"><code>w</code></td><td>更改文件内容</td><td align="left">对目录中的文件进行增删改操作, 即<code>touch, mkdir, rm, mv</code>等命令</td></tr><tr><td align="left"><code>x</code></td><td>决定文件是否可以执行<br>但可执行与执行成功与否是两码事</td><td align="left">是否可以进入该目录, 使之成为当前工作目录的用途, 即可以使用<code>cd</code>命令<br>目录最基础的权限</td></tr></tbody></table><table><thead><tr><th>权限</th><th>文件</th><th>目录</th></tr></thead><tbody><tr><td><code>r--</code></td><td></td><td>可以查询该目录下的文件名列表, 但是不能够进入到该目录</td></tr><tr><td><code>-w-</code></td><td></td><td></td></tr><tr><td><code>--x</code></td><td></td><td></td></tr><tr><td><code>rw-</code></td><td></td><td></td></tr><tr><td><code>r-x</code></td><td></td><td></td></tr><tr><td><code>-wx</code></td><td></td><td></td></tr><tr><td><code>rwx</code></td><td></td><td></td></tr><tr><td><code>---</code></td><td></td><td></td></tr></tbody></table><p><strong>注意事项</strong></p><ul><li>rwx权限对于文件和目录的区别: 能否删除一个文件，关键在于对于这个文件所属的目录是否有写的权限</li><li>无论文件的权限是什么, root用户都可以进行读写和执行</li><li>ugo: u拥有者(user), g组员(group), o其它人(other)</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
